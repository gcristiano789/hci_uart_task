
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20002c38 	.word	0x20002c38
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	000040a9 	.word	0x000040a9
   8:	000142d5 	.word	0x000142d5
   c:	000040d9 	.word	0x000040d9
		if (fdtable[fd].obj == NULL) {
  10:	000040d9 	.word	0x000040d9
  14:	000040d9 	.word	0x000040d9
  18:	000040d9 	.word	0x000040d9
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00004019 	.word	0x00004019
  30:	000040d9 	.word	0x000040d9
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00003fd1 	.word	0x00003fd1
  3c:	000142bd 	.word	0x000142bd

00000040 <_irq_vector_table>:
  40:	00004069 0000ec6d 00004069 00004069     i@..m...i@..i@..
  50:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  60:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  70:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  80:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  90:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  a0:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  b0:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  c0:	00004069 00004069 00004069 00004069     i@..i@..i@..i@..
  d0:	00004069 00004069 00004069              i@..i@..i@..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b96c 	b.w	3d0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8082 	bne.w	226 <CONFIG_BT_RX_STACK_SIZE+0x26>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d946      	bls.n	1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa05 f302 	lsl.w	r3, r5, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0e03 	orr.w	lr, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4817 	mov.w	r8, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbe fcf8 	udiv	ip, lr, r8
     14c:	b2b9      	uxth	r1, r7
     14e:	fb08 ee1c 	mls	lr, r8, ip, lr
     152:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     156:	fb0c f001 	mul.w	r0, ip, r1
     15a:	4298      	cmp	r0, r3
     15c:	d90a      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15e:	18fb      	adds	r3, r7, r3
     160:	f10c 35ff 	add.w	r5, ip, #4294967295
     164:	f080 8116 	bcs.w	394 <CONFIG_BT_RX_STACK_SIZE+0x194>
     168:	4298      	cmp	r0, r3
     16a:	f240 8113 	bls.w	394 <CONFIG_BT_RX_STACK_SIZE+0x194>
     16e:	f1ac 0c02 	sub.w	ip, ip, #2
     172:	443b      	add	r3, r7
     174:	1a1b      	subs	r3, r3, r0
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f8 	udiv	r0, r3, r8
     17c:	fb08 3310 	mls	r3, r8, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f101 	mul.w	r1, r0, r1
     188:	42a1      	cmp	r1, r4
     18a:	d909      	bls.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     18c:	193c      	adds	r4, r7, r4
     18e:	f100 33ff 	add.w	r3, r0, #4294967295
     192:	f080 8101 	bcs.w	398 <CONFIG_BT_RX_STACK_SIZE+0x198>
     196:	42a1      	cmp	r1, r4
     198:	f240 80fe 	bls.w	398 <CONFIG_BT_RX_STACK_SIZE+0x198>
     19c:	3802      	subs	r0, #2
     19e:	443c      	add	r4, r7
     1a0:	1a64      	subs	r4, r4, r1
     1a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a6:	2100      	movs	r1, #0
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     1aa:	40d4      	lsrs	r4, r2
     1ac:	2300      	movs	r3, #0
     1ae:	e9c6 4300 	strd	r4, r3, [r6]
     1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b6:	b902      	cbnz	r2, 1ba <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x70>
     1b8:	deff      	udf	#255	; 0xff
     1ba:	fab2 f282 	clz	r2, r2
     1be:	2a00      	cmp	r2, #0
     1c0:	d14f      	bne.n	262 <CONFIG_BT_RX_STACK_SIZE+0x62>
     1c2:	1bcb      	subs	r3, r1, r7
     1c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c8:	fa1f f887 	uxth.w	r8, r7
     1cc:	2101      	movs	r1, #1
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c25      	lsrs	r5, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1dc:	fb08 f30c 	mul.w	r3, r8, ip
     1e0:	42ab      	cmp	r3, r5
     1e2:	d907      	bls.n	1f4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x34>
     1e4:	197d      	adds	r5, r7, r5
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d202      	bcs.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1ec:	42ab      	cmp	r3, r5
     1ee:	f200 80e7 	bhi.w	3c0 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
     1f2:	4684      	mov	ip, r0
     1f4:	1aed      	subs	r5, r5, r3
     1f6:	b2a3      	uxth	r3, r4
     1f8:	fbb5 f0fe 	udiv	r0, r5, lr
     1fc:	fb0e 5510 	mls	r5, lr, r0, r5
     200:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     204:	fb08 f800 	mul.w	r8, r8, r0
     208:	45a0      	cmp	r8, r4
     20a:	d907      	bls.n	21c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     20c:	193c      	adds	r4, r7, r4
     20e:	f100 33ff 	add.w	r3, r0, #4294967295
     212:	d202      	bcs.n	21a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     214:	45a0      	cmp	r8, r4
     216:	f200 80d7 	bhi.w	3c8 <CONFIG_BT_RX_STACK_SIZE+0x1c8>
     21a:	4618      	mov	r0, r3
     21c:	eba4 0408 	sub.w	r4, r4, r8
     220:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     224:	e7c0      	b.n	1a8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5e>
     226:	428b      	cmp	r3, r1
     228:	d908      	bls.n	23c <CONFIG_BT_RX_STACK_SIZE+0x3c>
     22a:	2e00      	cmp	r6, #0
     22c:	f000 80af 	beq.w	38e <CONFIG_BT_RX_STACK_SIZE+0x18e>
     230:	2100      	movs	r1, #0
     232:	e9c6 0500 	strd	r0, r5, [r6]
     236:	4608      	mov	r0, r1
     238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23c:	fab3 f183 	clz	r1, r3
     240:	2900      	cmp	r1, #0
     242:	d14b      	bne.n	2dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
     244:	42ab      	cmp	r3, r5
     246:	d302      	bcc.n	24e <CONFIG_BT_RX_STACK_SIZE+0x4e>
     248:	4282      	cmp	r2, r0
     24a:	f200 80b7 	bhi.w	3bc <CONFIG_BT_RX_STACK_SIZE+0x1bc>
     24e:	1a84      	subs	r4, r0, r2
     250:	eb65 0303 	sbc.w	r3, r5, r3
     254:	2001      	movs	r0, #1
     256:	469e      	mov	lr, r3
     258:	2e00      	cmp	r6, #0
     25a:	d0aa      	beq.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     25c:	e9c6 4e00 	strd	r4, lr, [r6]
     260:	e7a7      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     262:	f1c2 0c20 	rsb	ip, r2, #32
     266:	fa01 f302 	lsl.w	r3, r1, r2
     26a:	4097      	lsls	r7, r2
     26c:	fa20 f00c 	lsr.w	r0, r0, ip
     270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     274:	fa21 fc0c 	lsr.w	ip, r1, ip
     278:	4318      	orrs	r0, r3
     27a:	fbbc f1fe 	udiv	r1, ip, lr
     27e:	0c05      	lsrs	r5, r0, #16
     280:	fb0e cc11 	mls	ip, lr, r1, ip
     284:	fa1f f887 	uxth.w	r8, r7
     288:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     28c:	fb01 f308 	mul.w	r3, r1, r8
     290:	42ab      	cmp	r3, r5
     292:	fa04 f402 	lsl.w	r4, r4, r2
     296:	d909      	bls.n	2ac <CONFIG_BT_RX_STACK_SIZE+0xac>
     298:	197d      	adds	r5, r7, r5
     29a:	f101 3cff 	add.w	ip, r1, #4294967295
     29e:	f080 808b 	bcs.w	3b8 <CONFIG_BT_RX_STACK_SIZE+0x1b8>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f240 8088 	bls.w	3b8 <CONFIG_BT_RX_STACK_SIZE+0x1b8>
     2a8:	3902      	subs	r1, #2
     2aa:	443d      	add	r5, r7
     2ac:	1aeb      	subs	r3, r5, r3
     2ae:	b285      	uxth	r5, r0
     2b0:	fbb3 f0fe 	udiv	r0, r3, lr
     2b4:	fb0e 3310 	mls	r3, lr, r0, r3
     2b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2bc:	fb00 f308 	mul.w	r3, r0, r8
     2c0:	42ab      	cmp	r3, r5
     2c2:	d907      	bls.n	2d4 <CONFIG_BT_RX_STACK_SIZE+0xd4>
     2c4:	197d      	adds	r5, r7, r5
     2c6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ca:	d271      	bcs.n	3b0 <CONFIG_BT_RX_STACK_SIZE+0x1b0>
     2cc:	42ab      	cmp	r3, r5
     2ce:	d96f      	bls.n	3b0 <CONFIG_BT_RX_STACK_SIZE+0x1b0>
     2d0:	3802      	subs	r0, #2
     2d2:	443d      	add	r5, r7
     2d4:	1aeb      	subs	r3, r5, r3
     2d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2da:	e778      	b.n	1ce <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xe>
     2dc:	f1c1 0c20 	rsb	ip, r1, #32
     2e0:	408b      	lsls	r3, r1
     2e2:	fa22 f70c 	lsr.w	r7, r2, ip
     2e6:	431f      	orrs	r7, r3
     2e8:	fa20 f40c 	lsr.w	r4, r0, ip
     2ec:	fa05 f301 	lsl.w	r3, r5, r1
     2f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f4:	fa25 f50c 	lsr.w	r5, r5, ip
     2f8:	431c      	orrs	r4, r3
     2fa:	0c23      	lsrs	r3, r4, #16
     2fc:	fbb5 f9fe 	udiv	r9, r5, lr
     300:	fa1f f887 	uxth.w	r8, r7
     304:	fb0e 5519 	mls	r5, lr, r9, r5
     308:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     30c:	fb09 fa08 	mul.w	sl, r9, r8
     310:	45aa      	cmp	sl, r5
     312:	fa02 f201 	lsl.w	r2, r2, r1
     316:	fa00 f301 	lsl.w	r3, r0, r1
     31a:	d908      	bls.n	32e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     31c:	197d      	adds	r5, r7, r5
     31e:	f109 30ff 	add.w	r0, r9, #4294967295
     322:	d247      	bcs.n	3b4 <CONFIG_BT_RX_STACK_SIZE+0x1b4>
     324:	45aa      	cmp	sl, r5
     326:	d945      	bls.n	3b4 <CONFIG_BT_RX_STACK_SIZE+0x1b4>
     328:	f1a9 0902 	sub.w	r9, r9, #2
     32c:	443d      	add	r5, r7
     32e:	eba5 050a 	sub.w	r5, r5, sl
     332:	b2a4      	uxth	r4, r4
     334:	fbb5 f0fe 	udiv	r0, r5, lr
     338:	fb0e 5510 	mls	r5, lr, r0, r5
     33c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45a0      	cmp	r8, r4
     346:	d907      	bls.n	358 <CONFIG_BT_RX_STACK_SIZE+0x158>
     348:	193c      	adds	r4, r7, r4
     34a:	f100 35ff 	add.w	r5, r0, #4294967295
     34e:	d22d      	bcs.n	3ac <CONFIG_BT_RX_STACK_SIZE+0x1ac>
     350:	45a0      	cmp	r8, r4
     352:	d92b      	bls.n	3ac <CONFIG_BT_RX_STACK_SIZE+0x1ac>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     35c:	eba4 0408 	sub.w	r4, r4, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454c      	cmp	r4, r9
     366:	46c6      	mov	lr, r8
     368:	464d      	mov	r5, r9
     36a:	d319      	bcc.n	3a0 <CONFIG_BT_RX_STACK_SIZE+0x1a0>
     36c:	d016      	beq.n	39c <CONFIG_BT_RX_STACK_SIZE+0x19c>
     36e:	b15e      	cbz	r6, 388 <CONFIG_BT_RX_STACK_SIZE+0x188>
     370:	ebb3 020e 	subs.w	r2, r3, lr
     374:	eb64 0405 	sbc.w	r4, r4, r5
     378:	fa04 fc0c 	lsl.w	ip, r4, ip
     37c:	40ca      	lsrs	r2, r1
     37e:	ea4c 0202 	orr.w	r2, ip, r2
     382:	40cc      	lsrs	r4, r1
     384:	e9c6 2400 	strd	r2, r4, [r6]
     388:	2100      	movs	r1, #0
     38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38e:	4631      	mov	r1, r6
     390:	4630      	mov	r0, r6
     392:	e70e      	b.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     394:	46ac      	mov	ip, r5
     396:	e6ed      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     398:	4618      	mov	r0, r3
     39a:	e701      	b.n	1a0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x56>
     39c:	4543      	cmp	r3, r8
     39e:	d2e6      	bcs.n	36e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     3a0:	ebb8 0e02 	subs.w	lr, r8, r2
     3a4:	eb69 0507 	sbc.w	r5, r9, r7
     3a8:	3801      	subs	r0, #1
     3aa:	e7e0      	b.n	36e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     3ac:	4628      	mov	r0, r5
     3ae:	e7d3      	b.n	358 <CONFIG_BT_RX_STACK_SIZE+0x158>
     3b0:	4660      	mov	r0, ip
     3b2:	e78f      	b.n	2d4 <CONFIG_BT_RX_STACK_SIZE+0xd4>
     3b4:	4681      	mov	r9, r0
     3b6:	e7ba      	b.n	32e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     3b8:	4661      	mov	r1, ip
     3ba:	e777      	b.n	2ac <CONFIG_BT_RX_STACK_SIZE+0xac>
     3bc:	4608      	mov	r0, r1
     3be:	e74b      	b.n	258 <CONFIG_BT_RX_STACK_SIZE+0x58>
     3c0:	f1ac 0c02 	sub.w	ip, ip, #2
     3c4:	443d      	add	r5, r7
     3c6:	e715      	b.n	1f4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x34>
     3c8:	3802      	subs	r0, #2
     3ca:	443c      	add	r4, r7
     3cc:	e726      	b.n	21c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     3ce:	bf00      	nop

000003d0 <__aeabi_idiv0>:
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop
     3d4:	0000      	movs	r0, r0
	...

000003d8 <ll_adv_enable>:
{
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
u8_t ll_adv_enable(u8_t enable)
{
     3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	b08f      	sub	sp, #60	; 0x3c
	u16_t const handle = 0;
	u32_t ticks_anchor;
#endif /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     3de:	2302      	movs	r3, #2
inline struct ll_adv_set *ull_adv_is_enabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
     3e0:	4cab      	ldr	r4, [pc, #684]	; (690 <CONFIG_BT_COMPANY_ID+0x9f>)
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     3e2:	930c      	str	r3, [sp, #48]	; 0x30
	if (!enable) {
     3e4:	2800      	cmp	r0, #0
     3e6:	f000 80e8 	beq.w	5ba <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16e>
static inline struct ll_adv_set *is_disabled_get(u16_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     3ea:	f894 60cc 	ldrb.w	r6, [r4, #204]	; 0xcc
     3ee:	f016 0601 	ands.w	r6, r6, #1
     3f2:	d137      	bne.n	464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     3f4:	f894 807c 	ldrb.w	r8, [r4, #124]	; 0x7c
		ull_filter_adv_update(lll->filter_policy);
     3f8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     3fc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
     400:	2727      	movs	r7, #39	; 0x27
     402:	232d      	movs	r3, #45	; 0x2d
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     404:	fb07 4808 	mla	r8, r7, r8, r4
     408:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     40c:	fb17 3702 	smlabb	r7, r7, r2, r3
		lll->rl_idx = FILTER_IDX_NONE;
     410:	23ff      	movs	r3, #255	; 0xff
     412:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		ull_filter_adv_update(lll->filter_policy);
     416:	f00d fd71 	bl	defc <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     41a:	f894 00da 	ldrb.w	r0, [r4, #218]	; 0xda
     41e:	0781      	lsls	r1, r0, #30
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     420:	f108 087d 	add.w	r8, r8, #125	; 0x7d
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     424:	eb04 0907 	add.w	r9, r4, r7
     428:	d421      	bmi.n	46e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x22>
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     42a:	5de0      	ldrb	r0, [r4, r7]
     42c:	4631      	mov	r1, r6
     42e:	f3c0 1080 	ubfx	r0, r0, #6, #1
     432:	f005 fca3 	bl	5d7c <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     436:	2206      	movs	r2, #6
     438:	4601      	mov	r1, r0
			u8_t *tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     43a:	4605      	mov	r5, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     43c:	f109 0002 	add.w	r0, r9, #2
     440:	f013 ff6b 	bl	1431a <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     444:	2206      	movs	r2, #6
     446:	4629      	mov	r1, r5
     448:	f108 0002 	add.w	r0, r8, #2
     44c:	f013 ff65 	bl	1431a <memcpy>
		if (pdu_adv->tx_addr &&
     450:	5de3      	ldrb	r3, [r4, r7]
     452:	065a      	lsls	r2, r3, #25
     454:	d422      	bmi.n	49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     456:	f013 0f0e 	tst.w	r3, #14
     45a:	d12b      	bne.n	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x68>
		if (lll->conn) {
     45c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     45e:	2b00      	cmp	r3, #0
     460:	f000 8126 	beq.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_mark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     464:	260c      	movs	r6, #12
}
     466:	4630      	mov	r0, r6
     468:	b00f      	add	sp, #60	; 0x3c
     46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     46e:	f3c0 0080 	ubfx	r0, r0, #2, #1
     472:	4632      	mov	r2, r6
     474:	f104 01db 	add.w	r1, r4, #219	; 0xdb
     478:	f00d ff4a 	bl	e310 <ull_filter_rl_find>
			if (lll->rl_idx != FILTER_IDX_NONE) {
     47c:	28ff      	cmp	r0, #255	; 0xff
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     47e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			if (lll->rl_idx != FILTER_IDX_NONE) {
     482:	f040 81eb 	bne.w	85c <CONFIG_ISR_STACK_SIZE+0x5c>
			ull_filter_adv_pdu_update(adv, pdu_adv);
     486:	4882      	ldr	r0, [pc, #520]	; (690 <CONFIG_BT_COMPANY_ID+0x9f>)
     488:	4649      	mov	r1, r9
     48a:	f00d fd7d 	bl	df88 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, pdu_scan);
     48e:	4880      	ldr	r0, [pc, #512]	; (690 <CONFIG_BT_COMPANY_ID+0x9f>)
     490:	4641      	mov	r1, r8
     492:	f00d fd79 	bl	df88 <ull_filter_adv_pdu_update>
		if (pdu_adv->tx_addr &&
     496:	5de3      	ldrb	r3, [r4, r7]
     498:	065a      	lsls	r2, r3, #25
     49a:	d5dc      	bpl.n	456 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     49c:	2106      	movs	r1, #6
     49e:	f109 0002 	add.w	r0, r9, #2
     4a2:	f004 f925 	bl	46f0 <mem_nz>
		if (pdu_adv->tx_addr &&
     4a6:	2800      	cmp	r0, #0
     4a8:	f000 822c 	beq.w	904 <CONFIG_ISR_STACK_SIZE+0x104>
     4ac:	5de3      	ldrb	r3, [r4, r7]
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     4ae:	f013 0f0e 	tst.w	r3, #14
     4b2:	d0d3      	beq.n	45c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
	u8_t ch_map = lll->chan_map;
     4b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     4b8:	2101      	movs	r1, #1
	u8_t ch_map = lll->chan_map;
     4ba:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     4be:	a80d      	add	r0, sp, #52	; 0x34
	u8_t ch_map = lll->chan_map;
     4c0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const u8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     4c4:	f004 fa94 	bl	49f0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     4c8:	2800      	cmp	r0, #0
     4ca:	d06f      	beq.n	5ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x160>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     4cc:	5de2      	ldrb	r2, [r4, r7]
		const u8_t adv_data_len = pdu_adv->len;
     4ce:	f899 3001 	ldrb.w	r3, [r9, #1]
		const u8_t rsp_data_len = pdu_scan->len;
     4d2:	f898 1001 	ldrb.w	r1, [r8, #1]
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     4d6:	f002 020f 	and.w	r2, r2, #15
     4da:	2a02      	cmp	r2, #2
     4dc:	d012      	beq.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     4de:	2a01      	cmp	r2, #1
     4e0:	f000 821a 	beq.w	918 <CONFIG_ISR_STACK_SIZE+0x118>
					  BYTES2US(ADVA_SIZE + rsp_data_len,
     4e4:	00c9      	lsls	r1, r1, #3
		const u16_t scan_rsp_us  = ll_hdr_us +
     4e6:	3180      	adds	r1, #128	; 0x80
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     4e8:	2a00      	cmp	r2, #0
     4ea:	f040 820d 	bne.w	908 <CONFIG_ISR_STACK_SIZE+0x108>
				adv_size += adv_data_len;
     4ee:	3310      	adds	r3, #16
     4f0:	00db      	lsls	r3, r3, #3
     4f2:	f503 724d 	add.w	r2, r3, #820	; 0x334
     4f6:	440a      	add	r2, r1
     4f8:	f503 739a 	add.w	r3, r3, #308	; 0x134
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     4fc:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     4fe:	fb03 2000 	mla	r0, r3, r0, r2
     502:	e009      	b.n	518 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xcc>
			adv_size += adv_data_len;
     504:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     506:	00db      	lsls	r3, r3, #3
     508:	fb00 f303 	mul.w	r3, r0, r3
     50c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     510:	3801      	subs	r0, #1
     512:	2264      	movs	r2, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     514:	fb02 3000 	mla	r0, r2, r0, r3
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     518:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     51c:	495d      	ldr	r1, [pc, #372]	; (694 <CONFIG_BT_COMPANY_ID+0xa3>)
	hdr->parent = parent;
     51e:	61e4      	str	r4, [r4, #28]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     520:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
     522:	f365 0300 	bfi	r3, r5, #0, #1
	adv->evt.ticks_xtal_to_start =
     526:	2231      	movs	r2, #49	; 0x31
     528:	f884 3020 	strb.w	r3, [r4, #32]
     52c:	6022      	str	r2, [r4, #0]
     52e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     532:	a355      	add	r3, pc, #340	; (adr r3, 688 <CONFIG_BT_COMPANY_ID+0x97>)
     534:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_preempt_to_start =
     538:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     53c:	fba0 0101 	umull	r0, r1, r0, r1
     540:	f7ff fdce 	bl	e0 <__aeabi_uldivmod>
	u16_t interval = adv->interval;
     544:	f8b4 90d8 	ldrh.w	r9, [r4, #216]	; 0xd8
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     548:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     54a:	f005 fc11 	bl	5d70 <ticker_ticks_now_get>
     54e:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     550:	f1b9 0f00 	cmp.w	r9, #0
     554:	d107      	bne.n	566 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x11a>
     556:	5de5      	ldrb	r5, [r4, r7]
     558:	f005 050f 	and.w	r5, r5, #15
     55c:	f1a5 0501 	sub.w	r5, r5, #1
     560:	fab5 f585 	clz	r5, r5
     564:	096d      	lsrs	r5, r5, #5
     566:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
     56a:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     56e:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     572:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     576:	f000 8175 	beq.w	864 <CONFIG_ISR_STACK_SIZE+0x64>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     57a:	4d47      	ldr	r5, [pc, #284]	; (698 <CONFIG_BT_COMPANY_ID+0xa7>)
				   (adv->evt.ticks_slot + ticks_slot_overhead),
     57c:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     57e:	4a47      	ldr	r2, [pc, #284]	; (69c <CONFIG_BT_COMPANY_ID+0xab>)
     580:	9304      	str	r3, [sp, #16]
     582:	2000      	movs	r0, #0
     584:	af0c      	add	r7, sp, #48	; 0x30
     586:	9301      	str	r3, [sp, #4]
     588:	9205      	str	r2, [sp, #20]
     58a:	2103      	movs	r1, #3
     58c:	e9cd 5707 	strd	r5, r7, [sp, #28]
     590:	e9cd 0002 	strd	r0, r0, [sp, #8]
     594:	9406      	str	r4, [sp, #24]
     596:	9000      	str	r0, [sp, #0]
     598:	4643      	mov	r3, r8
     59a:	2202      	movs	r2, #2
     59c:	f005 fb36 	bl	5c0c <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     5a0:	4639      	mov	r1, r7
     5a2:	f008 fcb7 	bl	8f14 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     5a6:	2800      	cmp	r0, #0
     5a8:	f000 8198 	beq.w	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
	if (adv->lll.conn) {
     5ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
     5ae:	2b00      	cmp	r3, #0
     5b0:	f43f af58 	beq.w	464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
		conn_release(adv);
     5b4:	f009 f866 	bl	9684 <conn_release.constprop.0>
     5b8:	e754      	b.n	464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     5ba:	930d      	str	r3, [sp, #52]	; 0x34
	if (!adv || !adv->is_enabled) {
     5bc:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     5c0:	07dd      	lsls	r5, r3, #31
     5c2:	f57f af4f 	bpl.w	464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
	mark = ull_disable_mark(adv);
     5c6:	4620      	mov	r0, r4
     5c8:	f008 fcb2 	bl	8f30 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     5cc:	4284      	cmp	r4, r0
     5ce:	d00c      	beq.n	5ea <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xe>
     5d0:	4a33      	ldr	r2, [pc, #204]	; (6a0 <CONFIG_BT_COMPANY_ID+0xaf>)
     5d2:	4934      	ldr	r1, [pc, #208]	; (6a4 <CONFIG_BT_COMPANY_ID+0xb3>)
     5d4:	4834      	ldr	r0, [pc, #208]	; (6a8 <CONFIG_BT_COMPANY_ID+0xb7>)
     5d6:	f240 43e9 	movw	r3, #1257	; 0x4e9
     5da:	f013 fb8b 	bl	13cf4 <printk>
     5de:	4040      	eors	r0, r0
     5e0:	f380 8811 	msr	BASEPRI, r0
     5e4:	f04f 0003 	mov.w	r0, #3
     5e8:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     5ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     5ee:	07d8      	lsls	r0, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     5f0:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     5f2:	d50e      	bpl.n	612 <CONFIG_BT_COMPANY_ID+0x21>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     5f4:	2103      	movs	r1, #3
     5f6:	4b28      	ldr	r3, [pc, #160]	; (698 <CONFIG_BT_COMPANY_ID+0xa7>)
     5f8:	9500      	str	r5, [sp, #0]
     5fa:	2201      	movs	r2, #1
     5fc:	2000      	movs	r0, #0
     5fe:	f005 fb71 	bl	5ce4 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     602:	4629      	mov	r1, r5
     604:	f008 fc86 	bl	8f14 <ull_ticker_status_take>
		if (ret) {
     608:	2800      	cmp	r0, #0
     60a:	f040 81ba 	bne.w	982 <CONFIG_ISR_STACK_SIZE+0x182>
		ret_cb = TICKER_STATUS_BUSY;
     60e:	2302      	movs	r3, #2
     610:	930d      	str	r3, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     612:	2103      	movs	r1, #3
     614:	4b20      	ldr	r3, [pc, #128]	; (698 <CONFIG_BT_COMPANY_ID+0xa7>)
     616:	9500      	str	r5, [sp, #0]
     618:	2202      	movs	r2, #2
     61a:	2000      	movs	r0, #0
     61c:	f005 fb62 	bl	5ce4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     620:	4629      	mov	r1, r5
     622:	f008 fc77 	bl	8f14 <ull_ticker_status_take>
	if (ret) {
     626:	2800      	cmp	r0, #0
     628:	f040 818f 	bne.w	94a <CONFIG_ISR_STACK_SIZE+0x14a>
	}

	ret = ull_disable(&adv->lll);
     62c:	481f      	ldr	r0, [pc, #124]	; (6ac <CONFIG_BT_COMPANY_ID+0xbb>)
     62e:	f008 fcbb 	bl	8fa8 <ull_disable>
	LL_ASSERT(!ret);
     632:	2800      	cmp	r0, #0
     634:	f040 8175 	bne.w	922 <CONFIG_ISR_STACK_SIZE+0x122>

	mark = ull_disable_unmark(adv);
     638:	4815      	ldr	r0, [pc, #84]	; (690 <CONFIG_BT_COMPANY_ID+0x9f>)
     63a:	f008 fc85 	bl	8f48 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     63e:	4284      	cmp	r4, r0
     640:	d00c      	beq.n	65c <CONFIG_BT_COMPANY_ID+0x6b>
     642:	4a17      	ldr	r2, [pc, #92]	; (6a0 <CONFIG_BT_COMPANY_ID+0xaf>)
     644:	4917      	ldr	r1, [pc, #92]	; (6a4 <CONFIG_BT_COMPANY_ID+0xb3>)
     646:	4818      	ldr	r0, [pc, #96]	; (6a8 <CONFIG_BT_COMPANY_ID+0xb7>)
     648:	f240 530b 	movw	r3, #1291	; 0x50b
     64c:	f013 fb52 	bl	13cf4 <printk>
     650:	4040      	eors	r0, r0
     652:	f380 8811 	msr	BASEPRI, r0
     656:	f04f 0003 	mov.w	r0, #3
     65a:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     65c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     65e:	b10b      	cbz	r3, 664 <CONFIG_BT_COMPANY_ID+0x73>
		conn_release(adv);
     660:	f009 f810 	bl	9684 <conn_release.constprop.0>
	}
#endif /* CONFIG_BT_PERIPHERAL */

	adv->is_enabled = 0U;
     664:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     668:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
     66a:	f36f 0300 	bfc	r3, #0, #1
     66e:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     672:	f009 fbb9 	bl	9de8 <ull_scan_is_enabled_get>
     676:	4606      	mov	r6, r0
     678:	2800      	cmp	r0, #0
     67a:	f000 812c 	beq.w	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     67e:	2600      	movs	r6, #0
}
     680:	4630      	mov	r0, r6
     682:	b00f      	add	sp, #60	; 0x3c
     684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     688:	1afd498d 	.word	0x1afd498d
     68c:	00000007 	.word	0x00000007
     690:	2000128c 	.word	0x2000128c
     694:	3b9aca00 	.word	0x3b9aca00
     698:	00008f09 	.word	0x00008f09
     69c:	000093f5 	.word	0x000093f5
     6a0:	000155c0 	.word	0x000155c0
     6a4:	000156b0 	.word	0x000156b0
     6a8:	0001525c 	.word	0x0001525c
     6ac:	200012a8 	.word	0x200012a8
		link = ll_rx_link_alloc();
     6b0:	f008 fb9c 	bl	8dec <ll_rx_link_alloc>
		if (!link) {
     6b4:	4682      	mov	sl, r0
     6b6:	2800      	cmp	r0, #0
     6b8:	f000 8145 	beq.w	946 <CONFIG_ISR_STACK_SIZE+0x146>
		node_rx = ll_rx_alloc();
     6bc:	f008 fba2 	bl	8e04 <ll_rx_alloc>
		if (!node_rx) {
     6c0:	4683      	mov	fp, r0
     6c2:	2800      	cmp	r0, #0
     6c4:	f000 8158 	beq.w	978 <CONFIG_ISR_STACK_SIZE+0x178>
		conn = ll_conn_acquire();
     6c8:	f009 ff7e 	bl	a5c8 <ll_conn_acquire>
		if (!conn) {
     6cc:	4605      	mov	r5, r0
     6ce:	2800      	cmp	r0, #0
     6d0:	f000 814f 	beq.w	972 <CONFIG_ISR_STACK_SIZE+0x172>
		conn_lll->handle = 0xFFFF;
     6d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     6d8:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     6da:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     6dc:	f105 031c 	add.w	r3, r5, #28
     6e0:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     6e2:	2800      	cmp	r0, #0
     6e4:	f000 812b 	beq.w	93e <CONFIG_ISR_STACK_SIZE+0x13e>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     6e8:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     6ec:	f105 0168 	add.w	r1, r5, #104	; 0x68
     6f0:	f004 f80a 	bl	4708 <memq_init>
		conn_lll->phy_tx = BIT(0);
     6f4:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
     6f8:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn_lll->data_chan_sel = 0;
     6fc:	f895 e03d 	ldrb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     700:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     704:	f895 1122 	ldrb.w	r1, [r5, #290]	; 0x122
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     708:	4ba5      	ldr	r3, [pc, #660]	; (9a0 <CONFIG_ISR_STACK_SIZE+0x1a0>)
     70a:	662b      	str	r3, [r5, #96]	; 0x60
		conn_lll->phy_tx = BIT(0);
     70c:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     710:	f022 0207 	bic.w	r2, r2, #7
     714:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     718:	f042 0201 	orr.w	r2, r2, #1
     71c:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_use = 0;
     720:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
     722:	f362 0c00 	bfi	ip, r2, #0, #1
		conn->common.fex_valid = 0;
     726:	f020 0003 	bic.w	r0, r0, #3
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     72a:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->slave.latency_enabled = 0;
     72e:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn_lll->data_chan_sel = 0;
     732:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     736:	f04f 1c1b 	mov.w	ip, #1769499	; 0x1b001b
		conn_lll->data_chan_sel = 0;
     73a:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
		conn->common.fex_valid = 0;
     73e:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     742:	f885 1122 	strb.w	r1, [r5, #290]	; 0x122
		conn_lll->rssi_latest = 0x7F;
     746:	207f      	movs	r0, #127	; 0x7f
		conn->llcp_feature.features = LL_FEAT;
     748:	4996      	ldr	r1, [pc, #600]	; (9a4 <CONFIG_ISR_STACK_SIZE+0x1a4>)
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     74a:	f8c5 c05c 	str.w	ip, [r5, #92]	; 0x5c
		conn->connect_expire = 6;
     74e:	f04f 0c06 	mov.w	ip, #6
		conn_lll->slave.window_widening_event_us = 0;
     752:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
     756:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
     75a:	866a      	strh	r2, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     75c:	636a      	str	r2, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     75e:	656a      	str	r2, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     760:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     764:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     768:	f8a5 20e8 	strh.w	r2, [r5, #232]	; 0xe8
     76c:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
     770:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     774:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     778:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     77c:	f8a5 2120 	strh.w	r2, [r5, #288]	; 0x120
		conn->llcp_terminate.reason_peer = 0;
     780:	f885 212b 	strb.w	r2, [r5, #299]	; 0x12b
		conn_lll->link_tx_free = NULL;
     784:	67aa      	str	r2, [r5, #120]	; 0x78
		conn_lll->data_chan_sel = 0;
     786:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
		conn_lll->rssi_latest = 0x7F;
     78a:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
		conn->connect_expire = 6;
     78e:	f8a5 c0c4 	strh.w	ip, [r5, #196]	; 0xc4
		conn->llcp_feature.features = LL_FEAT;
     792:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
		conn->llcp_terminate.node_rx.hdr.link = link;
     796:	f8c5 a12c 	str.w	sl, [r5, #300]	; 0x12c
		conn_lll->packet_tx_head_len = 0;
     79a:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		conn->llcp_conn_param.disabled = 0;
     79e:	f895 e172 	ldrb.w	lr, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
     7a2:	f895 c19a 	ldrb.w	ip, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     7a6:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     7aa:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     7ae:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
		conn->llcp_length.disabled = 0U;
     7b2:	f362 0cc3 	bfi	ip, r2, #3, #1
		conn->llcp_conn_param.disabled = 0;
     7b6:	f362 1e04 	bfi	lr, r2, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     7ba:	f021 0107 	bic.w	r1, r1, #7
		conn_lll->sn = 0;
     7be:	f020 001f 	bic.w	r0, r0, #31
		conn->llcp_conn_param.req = 0;
     7c2:	f8a5 2170 	strh.w	r2, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     7c6:	f8a5 2198 	strh.w	r2, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     7ca:	f8a5 21a4 	strh.w	r2, [r5, #420]	; 0x1a4
		conn->llcp_length.disabled = 0U;
     7ce:	f885 c19a 	strb.w	ip, [r5, #410]	; 0x19a
		conn->llcp_conn_param.disabled = 0;
     7d2:	f885 e172 	strb.w	lr, [r5, #370]	; 0x172
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     7d6:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
		conn_lll->sn = 0;
     7da:	f885 007e 	strb.w	r0, [r5, #126]	; 0x7e
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     7de:	f00a fa67 	bl	acb0 <ull_conn_default_tx_octets_get>
     7e2:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     7e6:	f00a fa69 	bl	acbc <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     7ea:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
     7ee:	496e      	ldr	r1, [pc, #440]	; (9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     7f0:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     7f4:	4019      	ands	r1, r3
     7f6:	f8c5 11a8 	str.w	r1, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     7fa:	f00a fa65 	bl	acc8 <ull_conn_default_phy_tx_get>
     7fe:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
     802:	f360 0102 	bfi	r1, r0, #0, #3
     806:	f885 11ac 	strb.w	r1, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     80a:	f00a fa63 	bl	acd4 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     80e:	e9c4 ab34 	strd	sl, fp, [r4, #208]	; 0xd0
		lll->conn = conn_lll;
     812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     814:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_flags = 0;
     816:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
     81a:	f895 c020 	ldrb.w	ip, [r5, #32]
	hdr->parent = parent;
     81e:	61ed      	str	r5, [r5, #28]
     820:	0103      	lsls	r3, r0, #4
		conn->tx_data = conn->tx_data_last = 0;
     822:	2200      	movs	r2, #0
		conn->phy_pref_flags = 0;
     824:	f003 0370 	and.w	r3, r3, #112	; 0x70
     828:	f021 0178 	bic.w	r1, r1, #120	; 0x78
     82c:	430b      	orrs	r3, r1
	hdr->is_stop = 0U;
     82e:	f362 0c00 	bfi	ip, r2, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     832:	e9c5 226e 	strd	r2, r2, [r5, #440]	; 0x1b8
     836:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
     83a:	e9c5 2205 	strd	r2, r2, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
     83e:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_flags = 0;
     842:	f885 31ac 	strb.w	r3, [r5, #428]	; 0x1ac
     846:	f885 c020 	strb.w	ip, [r5, #32]
		err = lll_clock_wait();
     84a:	f00e fd6f 	bl	f32c <lll_clock_wait>
		if (err) {
     84e:	2800      	cmp	r0, #0
     850:	f43f ae30 	beq.w	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x68>
			conn_release(adv);
     854:	f008 ff16 	bl	9684 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     858:	2603      	movs	r6, #3
     85a:	e604      	b.n	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
				ull_filter_rpa_update(false);
     85c:	4630      	mov	r0, r6
     85e:	f00d fc1f 	bl	e0a0 <ull_filter_rpa_update>
     862:	e610      	b.n	486 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3a>
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     864:	4851      	ldr	r0, [pc, #324]	; (9ac <CONFIG_ISR_STACK_SIZE+0x1ac>)
		const u32_t ticks_slot = adv->evt.ticks_slot +
     866:	68e2      	ldr	r2, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     868:	4b51      	ldr	r3, [pc, #324]	; (9b0 <CONFIG_ISR_STACK_SIZE+0x1b0>)
		ret = ticker_start_ext(
     86a:	f8df e164 	ldr.w	lr, [pc, #356]	; 9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
     86e:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     870:	fba9 0100 	umull	r0, r1, r9, r0
     874:	2791      	movs	r7, #145	; 0x91
     876:	fb07 1109 	mla	r1, r7, r9, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     87a:	f202 1747 	addw	r7, r2, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     87e:	601f      	str	r7, [r3, #0]
		ret = ticker_start_ext(
     880:	9204      	str	r2, [sp, #16]
     882:	4a4c      	ldr	r2, [pc, #304]	; (9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>)
     884:	9309      	str	r3, [sp, #36]	; 0x24
     886:	f64f 7cff 	movw	ip, #65535	; 0xffff
     88a:	9205      	str	r2, [sp, #20]
     88c:	af0c      	add	r7, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     88e:	a342      	add	r3, pc, #264	; (adr r3, 998 <CONFIG_ISR_STACK_SIZE+0x198>)
     890:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     894:	e9cd e707 	strd	lr, r7, [sp, #28]
     898:	9502      	str	r5, [sp, #8]
     89a:	f8cd c00c 	str.w	ip, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((u64_t)interval *
     89e:	f7ff fc1f 	bl	e0 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     8a2:	4643      	mov	r3, r8
     8a4:	e9cd 5000 	strd	r5, r0, [sp]
     8a8:	2202      	movs	r2, #2
     8aa:	4628      	mov	r0, r5
     8ac:	2103      	movs	r1, #3
     8ae:	f005 f957 	bl	5b60 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     8b2:	4639      	mov	r1, r7
     8b4:	f008 fb2e 	bl	8f14 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     8b8:	2800      	cmp	r0, #0
     8ba:	f47f ae77 	bne.w	5ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x160>
	adv->is_enabled = 1;
     8be:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     8c2:	f043 0301 	orr.w	r3, r3, #1
     8c6:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     8ca:	f009 fa8d 	bl	9de8 <ull_scan_is_enabled_get>
     8ce:	2800      	cmp	r0, #0
     8d0:	f47f aed5 	bne.w	67e <CONFIG_BT_COMPANY_ID+0x8d>
		ull_filter_adv_scan_state_cb(BIT(0));
     8d4:	2001      	movs	r0, #1
     8d6:	f00d faef 	bl	deb8 <ull_filter_adv_scan_state_cb>
     8da:	e5c4      	b.n	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8dc:	4936      	ldr	r1, [pc, #216]	; (9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>)
     8de:	9105      	str	r1, [sp, #20]
     8e0:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     8e4:	e9cd 5707 	strd	r5, r7, [sp, #28]
     8e8:	9200      	str	r2, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
     8ea:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8ec:	e9cd 0003 	strd	r0, r0, [sp, #12]
     8f0:	e9cd 0001 	strd	r0, r0, [sp, #4]
     8f4:	9406      	str	r4, [sp, #24]
     8f6:	4643      	mov	r3, r8
     8f8:	2201      	movs	r2, #1
     8fa:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     8fc:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     8fe:	f005 f985 	bl	5c0c <ticker_start>
     902:	e7d6      	b.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
			return BT_HCI_ERR_INVALID_PARAM;
     904:	2612      	movs	r6, #18
     906:	e5ae      	b.n	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     908:	2a06      	cmp	r2, #6
     90a:	f43f adf0 	beq.w	4ee <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa2>
     90e:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     912:	f44f 721b 	mov.w	r2, #620	; 0x26c
     916:	e5f1      	b.n	4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>
     918:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     91c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
     920:	e5ec      	b.n	4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>
	LL_ASSERT(!ret);
     922:	4a26      	ldr	r2, [pc, #152]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     924:	4926      	ldr	r1, [pc, #152]	; (9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>)
     926:	4827      	ldr	r0, [pc, #156]	; (9c4 <CONFIG_ISR_STACK_SIZE+0x1c4>)
     928:	f44f 63a1 	mov.w	r3, #1288	; 0x508
     92c:	f013 f9e2 	bl	13cf4 <printk>
     930:	4040      	eors	r0, r0
     932:	f380 8811 	msr	BASEPRI, r0
     936:	f04f 0003 	mov.w	r0, #3
     93a:	df02      	svc	2
     93c:	e67c      	b.n	638 <CONFIG_BT_COMPANY_ID+0x47>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     93e:	f105 0070 	add.w	r0, r5, #112	; 0x70
     942:	67a8      	str	r0, [r5, #120]	; 0x78
     944:	e6d0      	b.n	6e8 <CONFIG_BT_COMPANY_ID+0xf7>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     946:	2607      	movs	r6, #7
     948:	e58d      	b.n	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
		mark = ull_disable_mark(adv);
     94a:	481f      	ldr	r0, [pc, #124]	; (9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>)
     94c:	f008 faf0 	bl	8f30 <ull_disable_mark>
		LL_ASSERT(mark == adv);
     950:	4284      	cmp	r4, r0
     952:	f43f ad87 	beq.w	464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
     956:	f240 5302 	movw	r3, #1282	; 0x502
     95a:	4a18      	ldr	r2, [pc, #96]	; (9bc <CONFIG_ISR_STACK_SIZE+0x1bc>)
     95c:	491b      	ldr	r1, [pc, #108]	; (9cc <CONFIG_ISR_STACK_SIZE+0x1cc>)
     95e:	4819      	ldr	r0, [pc, #100]	; (9c4 <CONFIG_ISR_STACK_SIZE+0x1c4>)
     960:	f013 f9c8 	bl	13cf4 <printk>
     964:	4040      	eors	r0, r0
     966:	f380 8811 	msr	BASEPRI, r0
     96a:	f04f 0003 	mov.w	r0, #3
     96e:	df02      	svc	2
     970:	e578      	b.n	464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
			ll_rx_release(node_rx);
     972:	4658      	mov	r0, fp
     974:	f008 fa4c 	bl	8e10 <ll_rx_release>
			ll_rx_link_release(link);
     978:	4650      	mov	r0, sl
     97a:	f008 fa3d 	bl	8df8 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     97e:	2607      	movs	r6, #7
     980:	e571      	b.n	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
			mark = ull_disable_mark(adv);
     982:	4811      	ldr	r0, [pc, #68]	; (9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>)
     984:	f008 fad4 	bl	8f30 <ull_disable_mark>
			LL_ASSERT(mark == adv);
     988:	4284      	cmp	r4, r0
     98a:	f43f ad6b 	beq.w	464 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>
     98e:	f240 43f3 	movw	r3, #1267	; 0x4f3
     992:	e7e2      	b.n	95a <CONFIG_ISR_STACK_SIZE+0x15a>
     994:	f3af 8000 	nop.w
     998:	1afd498d 	.word	0x1afd498d
     99c:	00000007 	.word	0x00000007
     9a0:	01480148 	.word	0x01480148
     9a4:	000141ff 	.word	0x000141ff
     9a8:	f6ff0000 	.word	0xf6ff0000
     9ac:	84e72a00 	.word	0x84e72a00
     9b0:	20001370 	.word	0x20001370
     9b4:	000093f5 	.word	0x000093f5
     9b8:	000095fd 	.word	0x000095fd
     9bc:	000155c0 	.word	0x000155c0
     9c0:	000154d0 	.word	0x000154d0
     9c4:	0001525c 	.word	0x0001525c
     9c8:	2000128c 	.word	0x2000128c
     9cc:	000156b0 	.word	0x000156b0
     9d0:	00008f09 	.word	0x00008f09
     9d4:	00000000 	.word	0x00000000

000009d8 <ll_scan_params_set>:
#define BT_CTLR_SCAN_MAX 1
static struct ll_scan_set ll_scan[BT_CTLR_SCAN_MAX];

u8_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			u8_t own_addr_type, u8_t filter_policy)
{
     9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct ll_scan_set *ull_scan_is_disabled_get(u16_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
     9da:	4e19      	ldr	r6, [pc, #100]	; (a40 <ll_scan_params_set+0x68>)
{
     9dc:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (!scan || scan->is_enabled) {
     9e0:	f896 5048 	ldrb.w	r5, [r6, #72]	; 0x48
     9e4:	f015 0701 	ands.w	r7, r5, #1
     9e8:	d121      	bne.n	a2e <ll_scan_params_set+0x56>
	lll->filter_policy = filter_policy;
     9ea:	f896 c032 	ldrb.w	ip, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     9ee:	f8df e054 	ldr.w	lr, [pc, #84]	; a44 <ll_scan_params_set+0x6c>
	lll->interval = interval;
     9f2:	f8a6 1042 	strh.w	r1, [r6, #66]	; 0x42
	lll->filter_policy = filter_policy;
     9f6:	00e4      	lsls	r4, r4, #3
     9f8:	f004 0418 	and.w	r4, r4, #24
     9fc:	f00c 0c67 	and.w	ip, ip, #103	; 0x67
     a00:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	scan->own_addr_type = own_addr_type;
     a04:	f363 0542 	bfi	r5, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a08:	fba2 010e 	umull	r0, r1, r2, lr
	lll->filter_policy = filter_policy;
     a0c:	ea44 040c 	orr.w	r4, r4, ip
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a10:	2391      	movs	r3, #145	; 0x91
     a12:	fb03 1102 	mla	r1, r3, r2, r1
	scan->own_addr_type = own_addr_type;
     a16:	f886 5048 	strb.w	r5, [r6, #72]	; 0x48
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a1a:	a307      	add	r3, pc, #28	; (adr r3, a38 <ll_scan_params_set+0x60>)
     a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
     a20:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a24:	f7ff fb5c 	bl	e0 <__aeabi_uldivmod>
     a28:	6470      	str	r0, [r6, #68]	; 0x44
}
     a2a:	4638      	mov	r0, r7
     a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     a2e:	270c      	movs	r7, #12
}
     a30:	4638      	mov	r0, r7
     a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a34:	f3af 8000 	nop.w
     a38:	1afd498d 	.word	0x1afd498d
     a3c:	00000007 	.word	0x00000007
     a40:	20001394 	.word	0x20001394
     a44:	84e72a00 	.word	0x84e72a00

00000a48 <ull_scan_params_set>:
{
     a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a4a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a4e:	4e10      	ldr	r6, [pc, #64]	; (a90 <ull_scan_params_set+0x48>)
{
     a50:	4605      	mov	r5, r0
	lll->filter_policy = filter_policy;
     a52:	00e4      	lsls	r4, r4, #3
     a54:	7d80      	ldrb	r0, [r0, #22]
	lll->interval = interval;
     a56:	84ea      	strh	r2, [r5, #38]	; 0x26
	lll->filter_policy = filter_policy;
     a58:	f004 0418 	and.w	r4, r4, #24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a5c:	fba3 6706 	umull	r6, r7, r3, r6
	lll->filter_policy = filter_policy;
     a60:	f000 0067 	and.w	r0, r0, #103	; 0x67
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a64:	2291      	movs	r2, #145	; 0x91
	lll->filter_policy = filter_policy;
     a66:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
     a6a:	4301      	orrs	r1, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a6c:	fb02 7703 	mla	r7, r2, r3, r7
	lll->filter_policy = filter_policy;
     a70:	75a9      	strb	r1, [r5, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window * 625U);
     a72:	a305      	add	r3, pc, #20	; (adr r3, a88 <ull_scan_params_set+0x40>)
     a74:	e9d3 2300 	ldrd	r2, r3, [r3]
     a78:	4630      	mov	r0, r6
     a7a:	4639      	mov	r1, r7
     a7c:	f7ff fb30 	bl	e0 <__aeabi_uldivmod>
     a80:	62a8      	str	r0, [r5, #40]	; 0x28
}
     a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a84:	f3af 8000 	nop.w
     a88:	1afd498d 	.word	0x1afd498d
     a8c:	00000007 	.word	0x00000007
     a90:	84e72a00 	.word	0x84e72a00
     a94:	00000000 	.word	0x00000000

00000a98 <ull_scan_enable>:
{
     a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll->chan = 0;
     a9c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
     aa0:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     aa2:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
     aa6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
     aaa:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
     aae:	f3c0 0040 	ubfx	r0, r0, #1, #1
{
     ab2:	b08e      	sub	sp, #56	; 0x38
	lll->init_addr_type = scan->own_addr_type;
     ab4:	f360 1386 	bfi	r3, r0, #6, #1
     ab8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
     abc:	2302      	movs	r3, #2
     abe:	930b      	str	r3, [sp, #44]	; 0x2c
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     ac0:	f005 f95c 	bl	5d7c <ll_addr_get>
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     ac4:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
     ac8:	f894 3020 	ldrb.w	r3, [r4, #32]
     acc:	4848      	ldr	r0, [pc, #288]	; (bf0 <ull_scan_enable+0x158>)
	hdr->parent = parent;
     ace:	61e4      	str	r4, [r4, #28]
     ad0:	2500      	movs	r5, #0
     ad2:	fba6 0100 	umull	r0, r1, r6, r0
	hdr->is_stop = 0U;
     ad6:	f365 0300 	bfi	r3, r5, #0, #1
     ada:	2291      	movs	r2, #145	; 0x91
     adc:	fb02 1106 	mla	r1, r2, r6, r1
     ae0:	e9c4 5505 	strd	r5, r5, [r4, #20]
     ae4:	f884 3020 	strb.w	r3, [r4, #32]
     ae8:	a33f      	add	r3, pc, #252	; (adr r3, be8 <ull_scan_enable+0x150>)
     aea:	e9d3 2300 	ldrd	r2, r3, [r3]
     aee:	f7ff faf7 	bl	e0 <__aeabi_uldivmod>
	if ((lll->ticks_window +
     af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
	scan->evt.ticks_active_to_start = 0U;
     af4:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t)lll->interval * 625U);
     af6:	4606      	mov	r6, r0
	if ((lll->ticks_window +
     af8:	3309      	adds	r3, #9
	    (ticks_interval -
     afa:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
	if ((lll->ticks_window +
     afe:	4293      	cmp	r3, r2
	scan->evt.ticks_xtal_to_start =
     b00:	f04f 0131 	mov.w	r1, #49	; 0x31
	scan->evt.ticks_preempt_to_start =
     b04:	60a5      	str	r5, [r4, #8]
		lll->ticks_window = 0;
     b06:	bf28      	it	cs
     b08:	6465      	strcs	r5, [r4, #68]	; 0x44
	scan->evt.ticks_xtal_to_start =
     b0a:	6021      	str	r1, [r4, #0]
		scan->evt.ticks_slot =
     b0c:	bf34      	ite	cc
     b0e:	60e3      	strcc	r3, [r4, #12]
		scan->evt.ticks_slot =
     b10:	60e2      	strcs	r2, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     b12:	f005 f92d 	bl	5d70 <ticker_ticks_now_get>
	if (!lll->conn) {
     b16:	6a67      	ldr	r7, [r4, #36]	; 0x24
	ticks_anchor = ticker_ticks_now_get();
     b18:	4605      	mov	r5, r0
	if (!lll->conn) {
     b1a:	2f00      	cmp	r7, #0
     b1c:	d043      	beq.n	ba6 <ull_scan_enable+0x10e>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b1e:	9406      	str	r4, [sp, #24]
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     b20:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
     b24:	4832      	ldr	r0, [pc, #200]	; (bf0 <ull_scan_enable+0x158>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b26:	68e2      	ldr	r2, [r4, #12]
     b28:	f8df c0d0 	ldr.w	ip, [pc, #208]	; bfc <ull_scan_enable+0x164>
     b2c:	9204      	str	r2, [sp, #16]
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     b2e:	fba7 0100 	umull	r0, r1, r7, r0
     b32:	2391      	movs	r3, #145	; 0x91
     b34:	fb03 1107 	mla	r1, r3, r7, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b38:	4b2e      	ldr	r3, [pc, #184]	; (bf4 <ull_scan_enable+0x15c>)
     b3a:	9305      	str	r3, [sp, #20]
     b3c:	f04f 0800 	mov.w	r8, #0
     b40:	af0b      	add	r7, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     b42:	a329      	add	r3, pc, #164	; (adr r3, be8 <ull_scan_enable+0x150>)
     b44:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b48:	f8cd c01c 	str.w	ip, [sp, #28]
     b4c:	9708      	str	r7, [sp, #32]
     b4e:	f8cd 800c 	str.w	r8, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t)lll->interval * 625U),
     b52:	f7ff fac5 	bl	e0 <__aeabi_uldivmod>
     b56:	4610      	mov	r0, r2
     b58:	4619      	mov	r1, r3
     b5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b5e:	2300      	movs	r3, #0
     b60:	f7ff fabe 	bl	e0 <__aeabi_uldivmod>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     b64:	462b      	mov	r3, r5
     b66:	9002      	str	r0, [sp, #8]
     b68:	2204      	movs	r2, #4
     b6a:	2103      	movs	r1, #3
     b6c:	f8cd 8000 	str.w	r8, [sp]
     b70:	4640      	mov	r0, r8
     b72:	9601      	str	r6, [sp, #4]
     b74:	f005 f84a 	bl	5c0c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     b78:	4639      	mov	r1, r7
     b7a:	f008 f9cb 	bl	8f14 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     b7e:	4605      	mov	r5, r0
     b80:	b968      	cbnz	r0, b9e <ull_scan_enable+0x106>
	scan->is_enabled = 1U;
     b82:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
     b86:	f043 0301 	orr.w	r3, r3, #1
     b8a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
     b8e:	f008 ffa3 	bl	9ad8 <ull_adv_is_enabled_get>
     b92:	4604      	mov	r4, r0
     b94:	b300      	cbz	r0, bd8 <ull_scan_enable+0x140>
	return 0;
     b96:	4628      	mov	r0, r5
}
     b98:	b00e      	add	sp, #56	; 0x38
     b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     b9e:	200c      	movs	r0, #12
}
     ba0:	b00e      	add	sp, #56	; 0x38
     ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     ba6:	68e1      	ldr	r1, [r4, #12]
		u32_t ticks_ref = 0U;
     ba8:	970c      	str	r7, [sp, #48]	; 0x30
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     baa:	3131      	adds	r1, #49	; 0x31
     bac:	ab0d      	add	r3, sp, #52	; 0x34
     bae:	aa0c      	add	r2, sp, #48	; 0x30
     bb0:	2003      	movs	r0, #3
		u32_t offset_us = 0U;
     bb2:	970d      	str	r7, [sp, #52]	; 0x34
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
     bb4:	f00c ff94 	bl	dae0 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
     bb8:	990d      	ldr	r1, [sp, #52]	; 0x34
     bba:	2900      	cmp	r1, #0
     bbc:	d0af      	beq.n	b1e <ull_scan_enable+0x86>
				       HAL_TICKER_US_TO_TICKS(offset_us);
     bbe:	480e      	ldr	r0, [pc, #56]	; (bf8 <ull_scan_enable+0x160>)
     bc0:	a309      	add	r3, pc, #36	; (adr r3, be8 <ull_scan_enable+0x150>)
     bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
     bc6:	fba1 0100 	umull	r0, r1, r1, r0
     bca:	f7ff fa89 	bl	e0 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
     bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
				       HAL_TICKER_US_TO_TICKS(offset_us);
     bd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
     bd4:	4405      	add	r5, r0
     bd6:	e7a2      	b.n	b1e <ull_scan_enable+0x86>
		ull_filter_adv_scan_state_cb(BIT(1));
     bd8:	2002      	movs	r0, #2
     bda:	f00d f96d 	bl	deb8 <ull_filter_adv_scan_state_cb>
	return 0;
     bde:	4620      	mov	r0, r4
}
     be0:	b00e      	add	sp, #56	; 0x38
     be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     be6:	bf00      	nop
     be8:	1afd498d 	.word	0x1afd498d
     bec:	00000007 	.word	0x00000007
     bf0:	84e72a00 	.word	0x84e72a00
     bf4:	00009b2d 	.word	0x00009b2d
     bf8:	3b9aca00 	.word	0x3b9aca00
     bfc:	00008f09 	.word	0x00008f09

00000c00 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, u32_t ticks_at_expire, u16_t lazy)
{
     c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c04:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     c06:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
     c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
     c0c:	4298      	cmp	r0, r3
{
     c0e:	b08d      	sub	sp, #52	; 0x34
     c10:	460e      	mov	r6, r1
     c12:	4615      	mov	r5, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     c14:	f000 8089 	beq.w	d2a <ull_conn_llcp+0x12a>

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     c18:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
     c1c:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
     c20:	4283      	cmp	r3, r0
     c22:	d00e      	beq.n	c42 <ull_conn_llcp+0x42>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     c24:	1ac0      	subs	r0, r0, r3
     c26:	f000 0003 	and.w	r0, r0, #3
     c2a:	2802      	cmp	r0, #2
     c2c:	d01b      	beq.n	c66 <ull_conn_llcp+0x66>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     c2e:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
     c32:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
     c36:	429a      	cmp	r2, r3
     c38:	d130      	bne.n	c9c <ull_conn_llcp+0x9c>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
     c3a:	2000      	movs	r0, #0
}
     c3c:	b00d      	add	sp, #52	; 0x34
     c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
     c42:	f894 7152 	ldrb.w	r7, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
     c46:	f017 0801 	ands.w	r8, r7, #1
     c4a:	d1f0      	bne.n	c2e <ull_conn_llcp+0x2e>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     c4c:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
     c50:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
     c54:	428a      	cmp	r2, r1
     c56:	f000 8373 	beq.w	1340 <CONFIG_FPROTECT_BLOCK_SIZE+0x340>
			conn->llcp_ack -= 2U;
     c5a:	1e98      	subs	r0, r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
     c5c:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
     c5e:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
     c62:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     c66:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
     c6a:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
     c6e:	429a      	cmp	r2, r3
     c70:	d006      	beq.n	c80 <ull_conn_llcp+0x80>
			if ((conn->llcp_length.state ==
     c72:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
     c76:	f002 0106 	and.w	r1, r2, #6
     c7a:	2904      	cmp	r1, #4
     c7c:	f000 83a9 	beq.w	13d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d2>
		switch (conn->llcp_type) {
     c80:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
     c84:	1e7b      	subs	r3, r7, #1
     c86:	2b05      	cmp	r3, #5
     c88:	f200 834c 	bhi.w	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
     c8c:	e8df f013 	tbh	[pc, r3, lsl #1]
     c90:	02e30070 	.word	0x02e30070
     c94:	034a028a 	.word	0x034a028a
     c98:	01c7030d 	.word	0x01c7030d
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     c9c:	4830      	ldr	r0, [pc, #192]	; (d60 <ull_conn_llcp+0x160>)
     c9e:	f003 fcdd 	bl	465c <mem_acquire>
		if (tx) {
     ca2:	b358      	cbz	r0, cfc <ull_conn_llcp+0xfc>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
     ca4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
     ca8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     cac:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     cae:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     cb0:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     cb4:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     cb6:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
     cb8:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
     cba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
     cbe:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
     cc2:	7202      	strb	r2, [r0, #8]
	if (
     cc4:	b32b      	cbz	r3, d12 <ull_conn_llcp+0x112>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
     cc6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
     cca:	0791      	lsls	r1, r2, #30
     ccc:	d421      	bmi.n	d12 <ull_conn_llcp+0x112>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
     cce:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
     cd2:	07d2      	lsls	r2, r2, #31
     cd4:	d41d      	bmi.n	d12 <ull_conn_llcp+0x112>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
     cd6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
     cda:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
     cdc:	bf04      	itt	eq
     cde:	681a      	ldreq	r2, [r3, #0]
     ce0:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
     ce4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
     ce8:	b9b2      	cbnz	r2, d18 <ull_conn_llcp+0x118>
			tx->next = conn->tx_head->next;
     cea:	681a      	ldr	r2, [r3, #0]
     cec:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
     cee:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
     cf0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
     cf2:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
     cf6:	b90b      	cbnz	r3, cfc <ull_conn_llcp+0xfc>
		conn->tx_data_last = tx;
     cf8:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
     cfc:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
     d00:	2800      	cmp	r0, #0
     d02:	d19a      	bne.n	c3a <ull_conn_llcp+0x3a>
			conn->procedure_expire = conn->supervision_reload;
     d04:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
     d08:	2b01      	cmp	r3, #1
     d0a:	d91c      	bls.n	d46 <ull_conn_llcp+0x146>
			conn->procedure_expire = conn->supervision_reload;
     d0c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
     d10:	e793      	b.n	c3a <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
     d12:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
     d16:	b1e2      	cbz	r2, d52 <ull_conn_llcp+0x152>
	tx->next = conn->tx_ctrl_last->next;
     d18:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
     d1c:	681a      	ldr	r2, [r3, #0]
     d1e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
     d20:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
     d22:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
     d26:	6803      	ldr	r3, [r0, #0]
}
     d28:	e7e5      	b.n	cf6 <ull_conn_llcp+0xf6>
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     d2a:	4a0e      	ldr	r2, [pc, #56]	; (d64 <ull_conn_llcp+0x164>)
     d2c:	490e      	ldr	r1, [pc, #56]	; (d68 <ull_conn_llcp+0x168>)
     d2e:	480f      	ldr	r0, [pc, #60]	; (d6c <ull_conn_llcp+0x16c>)
     d30:	f44f 7342 	mov.w	r3, #776	; 0x308
     d34:	f012 ffde 	bl	13cf4 <printk>
     d38:	4040      	eors	r0, r0
     d3a:	f380 8811 	msr	BASEPRI, r0
     d3e:	f04f 0003 	mov.w	r0, #3
     d42:	df02      	svc	2
     d44:	e768      	b.n	c18 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
     d46:	3301      	adds	r3, #1
     d48:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
     d4c:	b00d      	add	sp, #52	; 0x34
     d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
     d52:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
     d54:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
     d58:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
     d5c:	e7cb      	b.n	cf6 <ull_conn_llcp+0xf6>
     d5e:	bf00      	nop
     d60:	200016d0 	.word	0x200016d0
     d64:	0001570c 	.word	0x0001570c
     d68:	00015874 	.word	0x00015874
     d6c:	0001525c 	.word	0x0001525c
	struct ll_conn *conn_upd;
	u16_t instant_latency;
	u16_t event_counter;


	conn_upd = conn_upd_curr;
     d70:	f8df 8424 	ldr.w	r8, [pc, #1060]	; 1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>

	/* set mutex */
	if (!conn_upd) {
     d74:	f8d8 3000 	ldr.w	r3, [r8]
     d78:	2b00      	cmp	r3, #0
     d7a:	f000 84bb 	beq.w	16f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f4>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     d7e:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
     d80:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     d82:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     d86:	4417      	add	r7, r2
     d88:	442f      	add	r7, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     d8a:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     d8e:	b2bf      	uxth	r7, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     d90:	f040 837e 	bne.w	1490 <CONFIG_FPROTECT_BLOCK_SIZE+0x490>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     d94:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
     d98:	eba7 0209 	sub.w	r2, r7, r9
     d9c:	fa1f fa82 	uxth.w	sl, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
     da0:	0412      	lsls	r2, r2, #16
     da2:	f53f af44 	bmi.w	c2e <ull_conn_llcp+0x2e>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     da6:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
     daa:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
     dae:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
     db2:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     db6:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
     db8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
     dbc:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     dc0:	d009      	beq.n	dd6 <ull_conn_llcp+0x1d6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     dc2:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     dc6:	f002 0207 	and.w	r2, r2, #7
     dca:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     dcc:	bf04      	itt	eq
     dce:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
     dd2:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
     dd6:	f8d8 3000 	ldr.w	r3, [r8]
     dda:	429c      	cmp	r4, r3
			conn_upd_curr = NULL;
     ddc:	bf04      	itt	eq
     dde:	2300      	moveq	r3, #0
     de0:	f8c8 3000 	streq.w	r3, [r8]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     de4:	f8d4 8100 	ldr.w	r8, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
     de8:	f1b8 0f00 	cmp.w	r8, #0
     dec:	f000 859f 	beq.w	192e <CONFIG_FPROTECT_BLOCK_SIZE+0x92e>
     df0:	f8d8 0000 	ldr.w	r0, [r8]
     df4:	2800      	cmp	r0, #0
     df6:	f000 859a 	beq.w	192e <CONFIG_FPROTECT_BLOCK_SIZE+0x92e>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     dfa:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
     dfe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
     e00:	6842      	ldr	r2, [r0, #4]
     e02:	f8b4 c10a 	ldrh.w	ip, [r4, #266]	; 0x10a
     e06:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
     e0a:	4299      	cmp	r1, r3
     e0c:	f000 86b4 	beq.w	1b78 <CONFIG_FPROTECT_BLOCK_SIZE+0xb78>
     e10:	f8b4 e10c 	ldrh.w	lr, [r4, #268]	; 0x10c
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     e14:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     e16:	f8a8 3006 	strh.w	r3, [r8, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     e1a:	220a      	movs	r2, #10

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
     e1c:	2300      	movs	r3, #0
			cu->interval = conn->llcp_cu.interval;
     e1e:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			cu->latency = conn->llcp_cu.latency;
     e22:	f8a8 c024 	strh.w	ip, [r8, #36]	; 0x24
			cu->timeout = conn->llcp_cu.timeout;
     e26:	f8a8 e026 	strh.w	lr, [r8, #38]	; 0x26
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     e2a:	f888 2004 	strb.w	r2, [r8, #4]
			cu->status = 0x00;
     e2e:	f888 3020 	strb.w	r3, [r8, #32]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     e32:	4641      	mov	r1, r8
     e34:	f007 fff2 	bl	8e1c <ll_rx_put>
		ll_rx_sched();
     e38:	f007 fffa 	bl	8e30 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
     e3c:	6823      	ldr	r3, [r4, #0]
     e3e:	2b00      	cmp	r3, #0
     e40:	da09      	bge.n	e56 <ull_conn_llcp+0x256>
			u32_t ticks_prepare_to_start =
     e42:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     e4a:	428a      	cmp	r2, r1
     e4c:	bf2c      	ite	cs
     e4e:	18b6      	addcs	r6, r6, r2
     e50:	1876      	addcc	r6, r6, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     e52:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     e54:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     e56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
     e58:	f8b4 8108 	ldrh.w	r8, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
     e5c:	fb13 f30a 	smulbb	r3, r3, sl
     e60:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     e62:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
     e66:	fb18 f201 	smulbb	r2, r8, r1
     e6a:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     e6c:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
     e6e:	fa1f fb81 	uxth.w	fp, r1
		if (conn_interval_new > conn_interval_old) {
     e72:	f080 854a 	bcs.w	190a <CONFIG_FPROTECT_BLOCK_SIZE+0x90a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     e76:	1ad3      	subs	r3, r2, r3
     e78:	48bd      	ldr	r0, [pc, #756]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
     e7a:	f240 42e2 	movw	r2, #1250	; 0x4e2
     e7e:	fb02 f303 	mul.w	r3, r2, r3
     e82:	fba3 0100 	umull	r0, r1, r3, r0
     e86:	a3b8      	add	r3, pc, #736	; (adr r3, 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
     e88:	e9d3 2300 	ldrd	r2, r3, [r3]
     e8c:	f7ff f928 	bl	e0 <__aeabi_uldivmod>
     e90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e94:	4406      	add	r6, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
     e96:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
     e98:	eba9 0707 	sub.w	r7, r9, r7
		lll->latency_prepare += lazy;
     e9c:	441d      	add	r5, r3
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
     e9e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
     ea2:	445f      	add	r7, fp
     ea4:	442f      	add	r7, r5
		conn_interval_us = conn->llcp_cu.interval * 1250U;
     ea6:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
     eaa:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
     eac:	8667      	strh	r7, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
     eae:	fb09 f508 	mul.w	r5, r9, r8
		} else if (lll->role) {
     eb2:	f2c0 86ad 	blt.w	1c10 <CONFIG_FPROTECT_BLOCK_SIZE+0xc10>
			periodic_us -= lll->slave.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     eb6:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
     eba:	49ad      	ldr	r1, [pc, #692]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
     ebc:	a3aa      	add	r3, pc, #680	; (adr r3, 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
     ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
     ec2:	fba0 0101 	umull	r0, r1, r0, r1
     ec6:	f7ff f90b 	bl	e0 <__aeabi_uldivmod>
     eca:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
     ece:	f109 0901 	add.w	r9, r9, #1
		periodic_us = conn_interval_us;
     ed2:	46aa      	mov	sl, r5

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     ed4:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
     ed8:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     edc:	4ba5      	ldr	r3, [pc, #660]	; (1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>)
		lll->interval = conn->llcp_cu.interval;
     ede:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     ee2:	f242 7010 	movw	r0, #10000	; 0x2710
     ee6:	fb00 5202 	mla	r2, r0, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     eea:	48a3      	ldr	r0, [pc, #652]	; (1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>)
		lll->latency = conn->llcp_cu.latency;
     eec:	8621      	strh	r1, [r4, #48]	; 0x30
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     eee:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     ef0:	4428      	add	r0, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     ef2:	fbb3 f3f5 	udiv	r3, r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     ef6:	3a01      	subs	r2, #1
     ef8:	fbb2 f2f5 	udiv	r2, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     efc:	fbb0 f5f5 	udiv	r5, r0, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     f00:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     f04:	b298      	uxth	r0, r3
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     f06:	1d8a      	adds	r2, r1, #6
     f08:	4290      	cmp	r0, r2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     f0a:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     f0e:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     f12:	dd02      	ble.n	f1a <ull_conn_llcp+0x31a>
				     (conn->apto_reload - (lll->latency + 6)) :
     f14:	1a40      	subs	r0, r0, r1
     f16:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     f18:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     f1a:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     f1e:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
     f22:	075f      	lsls	r7, r3, #29
			conn->supervision_expire = 0U;
     f24:	bf44      	itt	mi
     f26:	2300      	movmi	r3, #0
     f28:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		u32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     f2c:	2102      	movs	r1, #2
     f2e:	2001      	movs	r0, #1
     f30:	f010 fd82 	bl	11a38 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     f34:	2200      	movs	r2, #0
     f36:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     f38:	4680      	mov	r8, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     f3a:	2001      	movs	r0, #1
     f3c:	f003 fc32 	bl	47a4 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     f40:	498e      	ldr	r1, [pc, #568]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
     f42:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
     f46:	4620      	mov	r0, r4
     f48:	f003 fbbe 	bl	46c8 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     f4c:	1d45      	adds	r5, r0, #5
     f4e:	b2ed      	uxtb	r5, r5
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     f50:	4b8b      	ldr	r3, [pc, #556]	; (1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>)
     f52:	9400      	str	r4, [sp, #0]
     f54:	462a      	mov	r2, r5
     f56:	2101      	movs	r1, #1
     f58:	2000      	movs	r0, #0
     f5a:	f004 fec3 	bl	5ce4 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     f5e:	f030 0302 	bics.w	r3, r0, #2
     f62:	d00c      	beq.n	f7e <ull_conn_llcp+0x37e>
     f64:	4a87      	ldr	r2, [pc, #540]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
     f66:	4988      	ldr	r1, [pc, #544]	; (1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>)
     f68:	4888      	ldr	r0, [pc, #544]	; (118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>)
     f6a:	f640 1364 	movw	r3, #2404	; 0x964
     f6e:	f012 fec1 	bl	13cf4 <printk>
     f72:	4040      	eors	r0, r0
     f74:	f380 8811 	msr	BASEPRI, r0
     f78:	f04f 0003 	mov.w	r0, #3
     f7c:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     f7e:	4b7c      	ldr	r3, [pc, #496]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
     f80:	fbaa ab03 	umull	sl, fp, sl, r3
     f84:	4650      	mov	r0, sl
     f86:	a378      	add	r3, pc, #480	; (adr r3, 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
     f88:	e9d3 2300 	ldrd	r2, r3, [r3]
     f8c:	4659      	mov	r1, fp
     f8e:	f7ff f8a7 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
     f92:	4a7f      	ldr	r2, [pc, #508]	; (1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     f94:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
     f98:	fba7 2302 	umull	r2, r3, r7, r2
     f9c:	2107      	movs	r1, #7
     f9e:	ebba 0002 	subs.w	r0, sl, r2
     fa2:	fb01 3307 	mla	r3, r1, r7, r3
     fa6:	eb6b 0103 	sbc.w	r1, fp, r3
     faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     fae:	2300      	movs	r3, #0
     fb0:	f7ff f896 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     fb4:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
     fb8:	4976      	ldr	r1, [pc, #472]	; (1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>)
				     TICKER_LAZY_MUST_EXPIRE,
#else
				     TICKER_NULL_LAZY,
#endif /* CONFIG_BT_CTLR_CONN_META */
				     (ticks_slot_overhead +
				      conn->evt.ticks_slot),
     fba:	68e2      	ldr	r2, [r4, #12]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     fbc:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
				     HAL_TICKER_REMAINDER(periodic_us),
     fc0:	4603      	mov	r3, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     fc2:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
				      conn->evt.ticks_slot),
     fc6:	9204      	str	r2, [sp, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     fc8:	ea11 0120 	ands.w	r1, r1, r0, asr #32
     fcc:	bf38      	it	cc
     fce:	4671      	movcc	r1, lr
     fd0:	2000      	movs	r0, #0
     fd2:	9302      	str	r3, [sp, #8]
     fd4:	9105      	str	r1, [sp, #20]
     fd6:	4633      	mov	r3, r6
     fd8:	9701      	str	r7, [sp, #4]
     fda:	9408      	str	r4, [sp, #32]
     fdc:	9406      	str	r4, [sp, #24]
     fde:	f8cd 9000 	str.w	r9, [sp]
     fe2:	462a      	mov	r2, r5
     fe4:	f8cd c01c 	str.w	ip, [sp, #28]
     fe8:	9003      	str	r0, [sp, #12]
     fea:	2101      	movs	r1, #1
     fec:	f004 fe0e 	bl	5c0c <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     ff0:	f030 0302 	bics.w	r3, r0, #2
     ff4:	d00c      	beq.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     ff6:	4a63      	ldr	r2, [pc, #396]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
     ff8:	4963      	ldr	r1, [pc, #396]	; (1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>)
     ffa:	4864      	ldr	r0, [pc, #400]	; (118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>)
     ffc:	f640 137e 	movw	r3, #2430	; 0x97e
    1000:	f012 fe78 	bl	13cf4 <printk>
    1004:	4040      	eors	r0, r0
    1006:	f380 8811 	msr	BASEPRI, r0
    100a:	f04f 0003 	mov.w	r0, #3
    100e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	f040 85cc 	bne.w	1bb0 <CONFIG_FPROTECT_BLOCK_SIZE+0xbb0>
				return -ECANCELED;
    1018:	f06f 0047 	mvn.w	r0, #71	; 0x47
    101c:	e60e      	b.n	c3c <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
    101e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1020:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  u16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    1022:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1026:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
    1028:	441d      	add	r5, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    102a:	07c8      	lsls	r0, r1, #31
			event_counter = lll->event_counter +
    102c:	b2ad      	uxth	r5, r5
	if (conn->llcp.phy_upd_ind.initiate) {
    102e:	460a      	mov	r2, r1
    1030:	f100 82d4 	bmi.w	15dc <CONFIG_FPROTECT_BLOCK_SIZE+0x5dc>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1034:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    1038:	1aed      	subs	r5, r5, r3
    103a:	0428      	lsls	r0, r5, #16
    103c:	f53f adf7 	bmi.w	c2e <ull_conn_llcp+0x2e>

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    1040:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    1044:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    1048:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		u16_t eff_tx_time = lll->max_tx_time;
		u16_t eff_rx_time = lll->max_rx_time;
    104c:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		conn->llcp_ack = conn->llcp_req;
    1050:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		u16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1054:	f011 0f1c 	tst.w	r1, #28
		old_tx = lll->phy_tx;
    1058:	f003 0907 	and.w	r9, r3, #7
		old_rx = lll->phy_rx;
    105c:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
    1060:	f040 85af 	bne.w	1bc2 <CONFIG_FPROTECT_BLOCK_SIZE+0xbc2>
		u16_t eff_tx_time = lll->max_tx_time;
    1064:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    1068:	f011 0fe0 	tst.w	r1, #224	; 0xe0
    106c:	d008      	beq.n	1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    106e:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
    1072:	094b      	lsrs	r3, r1, #5
    1074:	f363 0002 	bfi	r0, r3, #0, #3
    1078:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    107c:	f44f 77a4 	mov.w	r7, #328	; 0x148
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
    1080:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    1084:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1088:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    108c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1090:	f363 01c3 	bfi	r1, r3, #3, #1
    1094:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    1098:	2d00      	cmp	r5, #0
    109a:	f000 85a7 	beq.w	1bec <CONFIG_FPROTECT_BLOCK_SIZE+0xbec>
    109e:	6828      	ldr	r0, [r5, #0]
    10a0:	2800      	cmp	r0, #0
    10a2:	f000 85a3 	beq.w	1bec <CONFIG_FPROTECT_BLOCK_SIZE+0xbec>
		conn->llcp_rx = rx->hdr.link->mem;
    10a6:	6843      	ldr	r3, [r0, #4]
    10a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    10ac:	f012 0f02 	tst.w	r2, #2
    10b0:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
    10b4:	f040 878d 	bne.w	1fd2 <CONFIG_FPROTECT_BLOCK_SIZE+0xfd2>
		    (lll->phy_rx == old_rx)) {
    10b8:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    10bc:	f002 0207 	and.w	r2, r2, #7
    10c0:	4591      	cmp	r9, r2
		    (lll->phy_rx == old_rx)) {
    10c2:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    10c6:	f000 87b0 	beq.w	202a <CONFIG_FPROTECT_BLOCK_SIZE+0x102a>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    10ca:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    10cc:	80e9      	strh	r1, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    10ce:	f04f 0c0e 	mov.w	ip, #14

		upd = (void *)rx->pdu;
		upd->status = 0U;
    10d2:	2100      	movs	r1, #0
    10d4:	f885 1020 	strb.w	r1, [r5, #32]
		upd->tx = lll->phy_tx;
    10d8:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
		upd->rx = lll->phy_rx;
    10dc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    10e0:	f885 c004 	strb.w	ip, [r5, #4]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    10e4:	4629      	mov	r1, r5
    10e6:	f007 fe99 	bl	8e1c <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    10ea:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    10ee:	2d00      	cmp	r5, #0
    10f0:	f000 869e 	beq.w	1e30 <CONFIG_FPROTECT_BLOCK_SIZE+0xe30>
    10f4:	6828      	ldr	r0, [r5, #0]
    10f6:	2800      	cmp	r0, #0
    10f8:	f000 869a 	beq.w	1e30 <CONFIG_FPROTECT_BLOCK_SIZE+0xe30>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    10fc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    1100:	6842      	ldr	r2, [r0, #4]
    1102:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    1106:	42b3      	cmp	r3, r6
    1108:	d30a      	bcc.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    110a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    110e:	d807      	bhi.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    1110:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    1114:	42bb      	cmp	r3, r7
    1116:	d303      	bcc.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		    (eff_rx_time <= lll->max_rx_time) &&
    1118:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    111c:	f240 8799 	bls.w	2052 <CONFIG_FPROTECT_BLOCK_SIZE+0x1052>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    1120:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    1124:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1128:	f895 3020 	ldrb.w	r3, [r5, #32]
		rx->hdr.handle = lll->handle;
    112c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    112e:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1130:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1134:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1136:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1138:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    113a:	f885 3020 	strb.w	r3, [r5, #32]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    113e:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1142:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1146:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    114a:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    114c:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    114e:	852a      	strh	r2, [r5, #40]	; 0x28
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1150:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1154:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1156:	84ef      	strh	r7, [r5, #38]	; 0x26
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1158:	856e      	strh	r6, [r5, #42]	; 0x2a
		ll_rx_put(rx->hdr.link, rx);
    115a:	f007 fe5f 	bl	8e1c <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    115e:	f007 fe67 	bl	8e30 <ll_rx_sched>
    1162:	e564      	b.n	c2e <ull_conn_llcp+0x2e>
    1164:	f3af 8000 	nop.w
    1168:	1afd498d 	.word	0x1afd498d
    116c:	00000007 	.word	0x00000007
    1170:	3b9aca00 	.word	0x3b9aca00
    1174:	01c9c37f 	.word	0x01c9c37f
    1178:	026259ff 	.word	0x026259ff
    117c:	200013fc 	.word	0x200013fc
    1180:	0000a221 	.word	0x0000a221
    1184:	0001570c 	.word	0x0001570c
    1188:	000157ec 	.word	0x000157ec
    118c:	0001525c 	.word	0x0001525c
    1190:	1afd498d 	.word	0x1afd498d
    1194:	0000d1d5 	.word	0x0000d1d5
    1198:	200015c4 	.word	0x200015c4
    119c:	0000d349 	.word	0x0000d349
    11a0:	0000a1c9 	.word	0x0000a1c9
	if (conn->llcp.encryption.state) {
    11a4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    11a8:	f013 0503 	ands.w	r5, r3, #3
    11ac:	f47f ad3f 	bne.w	c2e <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    11b0:	48b3      	ldr	r0, [pc, #716]	; (1480 <CONFIG_FPROTECT_BLOCK_SIZE+0x480>)
    11b2:	f003 fa53 	bl	465c <mem_acquire>
	if (!tx) {
    11b6:	4606      	mov	r6, r0
    11b8:	2800      	cmp	r0, #0
    11ba:	f43f ad38 	beq.w	c2e <ull_conn_llcp+0x2e>
	if (!lll->role) {
    11be:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    11c2:	2b00      	cmp	r3, #0
    11c4:	f280 8578 	bge.w	1cb8 <CONFIG_FPROTECT_BLOCK_SIZE+0xcb8>
		if (conn->llcp.encryption.error_code) {
    11c8:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    11cc:	2d00      	cmp	r5, #0
    11ce:	f000 8347 	beq.w	1860 <CONFIG_FPROTECT_BLOCK_SIZE+0x860>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    11d2:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    11d4:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    11d8:	f043 0303 	orr.w	r3, r3, #3
    11dc:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    11de:	07d0      	lsls	r0, r2, #31
    11e0:	f140 8703 	bpl.w	1fea <CONFIG_FPROTECT_BLOCK_SIZE+0xfea>
	    (conn->llcp_feature.features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    11e4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    11e8:	0759      	lsls	r1, r3, #29
    11ea:	f140 86fe 	bpl.w	1fea <CONFIG_FPROTECT_BLOCK_SIZE+0xfea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    11ee:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    11f0:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    11f2:	7275      	strb	r5, [r6, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    11f4:	71f2      	strb	r2, [r6, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    11f6:	7233      	strb	r3, [r6, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    11f8:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    11fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    11fe:	2200      	movs	r2, #0
    1200:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1204:	2b00      	cmp	r3, #0
    1206:	f000 8375 	beq.w	18f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f4>
	    !conn->llcp_enc.pause_tx &&
    120a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    120e:	0792      	lsls	r2, r2, #30
    1210:	f100 8370 	bmi.w	18f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f4>
	    !conn->llcp_phy.pause_tx &&
    1214:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1218:	07d7      	lsls	r7, r2, #31
    121a:	f100 836b 	bmi.w	18f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f4>
		if (conn->tx_head == conn->tx_data) {
    121e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1222:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1224:	bf04      	itt	eq
    1226:	681a      	ldreq	r2, [r3, #0]
    1228:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    122c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1230:	2a00      	cmp	r2, #0
    1232:	f001 8075 	beq.w	2320 <CONFIG_FPROTECT_BLOCK_SIZE+0x1320>
	tx->next = conn->tx_ctrl_last->next;
    1236:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    123a:	681a      	ldr	r2, [r3, #0]
    123c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    123e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1240:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    1244:	6833      	ldr	r3, [r6, #0]
	if (!tx->next) {
    1246:	2b00      	cmp	r3, #0
    1248:	f000 86cb 	beq.w	1fe2 <CONFIG_FPROTECT_BLOCK_SIZE+0xfe2>
	conn->llcp_ack = conn->llcp_req;
    124c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1250:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1254:	e4eb      	b.n	c2e <ull_conn_llcp+0x2e>
			event_counter = lll->event_counter +
    1256:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    1258:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    125a:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    125e:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    1260:	441d      	add	r5, r3
	if (conn->llcp.chan_map.initiate) {
    1262:	07d6      	lsls	r6, r2, #31
			event_counter = lll->event_counter +
    1264:	b2ad      	uxth	r5, r5
	if (conn->llcp.chan_map.initiate) {
    1266:	f100 8213 	bmi.w	1690 <CONFIG_FPROTECT_BLOCK_SIZE+0x690>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    126a:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    126e:	1aed      	subs	r5, r5, r3
    1270:	042d      	lsls	r5, r5, #16
    1272:	f53f acdc 	bmi.w	c2e <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    1276:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    127a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    127e:	f104 0538 	add.w	r5, r4, #56	; 0x38
    1282:	2205      	movs	r2, #5
    1284:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1288:	4628      	mov	r0, r5
    128a:	f013 f846 	bl	1431a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    128e:	4628      	mov	r0, r5
    1290:	2105      	movs	r1, #5
    1292:	f003 fbad 	bl	49f0 <util_ones_count_get>
		lll->data_chan_count =
    1296:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    129a:	2201      	movs	r2, #1
		lll->data_chan_count =
    129c:	f360 0305 	bfi	r3, r0, #0, #6
    12a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    12a4:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    12a8:	e4c1      	b.n	c2e <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    12aa:	4875      	ldr	r0, [pc, #468]	; (1480 <CONFIG_FPROTECT_BLOCK_SIZE+0x480>)
    12ac:	f003 f9d6 	bl	465c <mem_acquire>
	if (tx) {
    12b0:	2800      	cmp	r0, #0
    12b2:	f43f acbc 	beq.w	c2e <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    12b6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    12ba:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    12be:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12c0:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    12c2:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    12c4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12c8:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    12cc:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    12ce:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    12d0:	71c1      	strb	r1, [r0, #7]
	if (
    12d2:	2b00      	cmp	r3, #0
    12d4:	f000 82b9 	beq.w	184a <CONFIG_FPROTECT_BLOCK_SIZE+0x84a>
	    !conn->llcp_enc.pause_tx &&
    12d8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    12dc:	0796      	lsls	r6, r2, #30
    12de:	f100 82b4 	bmi.w	184a <CONFIG_FPROTECT_BLOCK_SIZE+0x84a>
	    !conn->llcp_phy.pause_tx &&
    12e2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    12e6:	07d5      	lsls	r5, r2, #31
    12e8:	f100 82af 	bmi.w	184a <CONFIG_FPROTECT_BLOCK_SIZE+0x84a>
		if (conn->tx_head == conn->tx_data) {
    12ec:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    12f0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    12f2:	bf04      	itt	eq
    12f4:	681a      	ldreq	r2, [r3, #0]
    12f6:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    12fa:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    12fe:	2a00      	cmp	r2, #0
    1300:	f000 87fc 	beq.w	22fc <CONFIG_FPROTECT_BLOCK_SIZE+0x12fc>
	tx->next = conn->tx_ctrl_last->next;
    1304:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1308:	681a      	ldr	r2, [r3, #0]
    130a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    130c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    130e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1312:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    1314:	2b00      	cmp	r3, #0
    1316:	f000 859b 	beq.w	1e50 <CONFIG_FPROTECT_BLOCK_SIZE+0xe50>
		conn->procedure_expire = conn->procedure_reload;
    131a:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    131e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1322:	e484      	b.n	c2e <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
    1324:	4a57      	ldr	r2, [pc, #348]	; (1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>)
    1326:	4958      	ldr	r1, [pc, #352]	; (1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>)
    1328:	4858      	ldr	r0, [pc, #352]	; (148c <CONFIG_FPROTECT_BLOCK_SIZE+0x48c>)
    132a:	f240 338e 	movw	r3, #910	; 0x38e
    132e:	f012 fce1 	bl	13cf4 <printk>
    1332:	4040      	eors	r0, r0
    1334:	f380 8811 	msr	BASEPRI, r0
    1338:	f04f 0003 	mov.w	r0, #3
    133c:	df02      	svc	2
			break;
    133e:	e476      	b.n	c2e <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1340:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1344:	f894 c118 	ldrb.w	ip, [r4, #280]	; 0x118
    1348:	4562      	cmp	r2, ip
    134a:	d159      	bne.n	1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    134c:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
    1350:	f894 c120 	ldrb.w	ip, [r4, #288]	; 0x120
    1354:	4562      	cmp	r2, ip
    1356:	f000 82fb 	beq.w	1950 <CONFIG_FPROTECT_BLOCK_SIZE+0x950>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    135a:	eba2 020c 	sub.w	r2, r2, ip
    135e:	07d7      	lsls	r7, r2, #31
    1360:	f57f ac65 	bpl.w	c2e <ull_conn_llcp+0x2e>
	if (conn->llcp_version.tx == 0U) {
    1364:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
    1368:	07d8      	lsls	r0, r3, #31
    136a:	f140 8728 	bpl.w	21be <CONFIG_FPROTECT_BLOCK_SIZE+0x11be>
	} else if (conn->llcp_version.rx) {
    136e:	079f      	lsls	r7, r3, #30
    1370:	f140 8720 	bpl.w	21b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x11b4>
		rx = ll_pdu_rx_alloc();
    1374:	f007 fd80 	bl	8e78 <ll_pdu_rx_alloc>
		if (!rx) {
    1378:	4601      	mov	r1, r0
    137a:	2800      	cmp	r0, #0
    137c:	d079      	beq.n	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
		conn->llcp_version.ack = conn->llcp_version.req;
    137e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    1382:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1386:	f890 3020 	ldrb.w	r3, [r0, #32]
		rx->hdr.handle = conn->lll.handle;
    138a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    138c:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    138e:	f043 0303 	orr.w	r3, r3, #3
    1392:	f881 3020 	strb.w	r3, [r1, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1396:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1398:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    139a:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    139c:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    139e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    13a2:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    13a6:	f894 0123 	ldrb.w	r0, [r4, #291]	; 0x123
		pdu->llctrl.version_ind.sub_version_number =
    13aa:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
		pdu->llctrl.version_ind.company_id =
    13ae:	f8b4 2124 	ldrh.w	r2, [r4, #292]	; 0x124
    13b2:	f8a1 2025 	strh.w	r2, [r1, #37]	; 0x25
		pdu->llctrl.version_ind.version_number =
    13b6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
		pdu->llctrl.version_ind.sub_version_number =
    13ba:	f8a1 3027 	strh.w	r3, [r1, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    13be:	6808      	ldr	r0, [r1, #0]
    13c0:	f007 fd2c 	bl	8e1c <ll_rx_put>
		ll_rx_sched();
    13c4:	f007 fd34 	bl	8e30 <ll_rx_sched>
    13c8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    13cc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    13d0:	e428      	b.n	c24 <ull_conn_llcp+0x24>
	switch (conn->llcp_length.state) {
    13d2:	f002 0107 	and.w	r1, r2, #7
    13d6:	2906      	cmp	r1, #6
    13d8:	f201 811c 	bhi.w	2614 <CONFIG_FPROTECT_BLOCK_SIZE+0x1614>
    13dc:	a001      	add	r0, pc, #4	; (adr r0, 13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>)
    13de:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    13e2:	bf00      	nop
    13e4:	000017a1 	.word	0x000017a1
    13e8:	00000c81 	.word	0x00000c81
    13ec:	00000c81 	.word	0x00000c81
    13f0:	00000c81 	.word	0x00000c81
    13f4:	000016fd 	.word	0x000016fd
    13f8:	000016fd 	.word	0x000016fd
    13fc:	00000c81 	.word	0x00000c81
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1400:	eba2 020c 	sub.w	r2, r2, ip
    1404:	07d0      	lsls	r0, r2, #31
    1406:	f57f ac12 	bpl.w	c2e <ull_conn_llcp+0x2e>
	if (conn->common.fex_valid) {
    140a:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    140e:	f011 0701 	ands.w	r7, r1, #1
    1412:	f000 8498 	beq.w	1d46 <CONFIG_FPROTECT_BLOCK_SIZE+0xd46>
		rx = ll_pdu_rx_alloc();
    1416:	f007 fd2f 	bl	8e78 <ll_pdu_rx_alloc>
		if (!rx) {
    141a:	4607      	mov	r7, r0
    141c:	b348      	cbz	r0, 1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    141e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1422:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1426:	f890 3020 	ldrb.w	r3, [r0, #32]
		rx->hdr.handle = conn->lll.handle;
    142a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    142c:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    142e:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1432:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1434:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1436:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1438:	f887 3020 	strb.w	r3, [r7, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    143c:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    143e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1442:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1446:	f107 0024 	add.w	r0, r7, #36	; 0x24
    144a:	2208      	movs	r2, #8
    144c:	f012 ff90 	bl	14370 <memset>
		sys_put_le24(conn->llcp_feature.features,
    1450:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	dst[1] = val >> 8;
    1458:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(u32_t val, u8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    145c:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    145e:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
	dst[2] = val >> 16;
    1462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1466:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
    1468:	6808      	ldr	r0, [r1, #0]
    146a:	f007 fcd7 	bl	8e1c <ll_rx_put>
	ll_rx_sched();
    146e:	f007 fcdf 	bl	8e30 <ll_rx_sched>
	break;
    1472:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1476:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    147a:	f7ff bbd3 	b.w	c24 <ull_conn_llcp+0x24>
    147e:	bf00      	nop
    1480:	200016d0 	.word	0x200016d0
    1484:	0001570c 	.word	0x0001570c
    1488:	000152dc 	.word	0x000152dc
    148c:	0001525c 	.word	0x0001525c
		rx = ll_pdu_rx_alloc_peek(1);
    1490:	2001      	movs	r0, #1
    1492:	f007 fcd3 	bl	8e3c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1496:	4680      	mov	r8, r0
    1498:	2800      	cmp	r0, #0
    149a:	f43f abc8 	beq.w	c2e <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    149e:	48ba      	ldr	r0, [pc, #744]	; (1788 <CONFIG_FPROTECT_BLOCK_SIZE+0x788>)
    14a0:	f003 f8dc 	bl	465c <mem_acquire>
		if (!tx) {
    14a4:	4605      	mov	r5, r0
    14a6:	2800      	cmp	r0, #0
    14a8:	f43f abc1 	beq.w	c2e <ull_conn_llcp+0x2e>
		(void)ll_pdu_rx_alloc();
    14ac:	f007 fce4 	bl	8e78 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    14b0:	f8d8 3000 	ldr.w	r3, [r8]
    14b4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    14b8:	605a      	str	r2, [r3, #4]
		switch (conn->llcp_cu.state) {
    14ba:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_rx = rx;
    14be:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
		switch (conn->llcp_cu.state) {
    14c2:	f003 0303 	and.w	r3, r3, #3
    14c6:	2b01      	cmp	r3, #1
    14c8:	f000 85e0 	beq.w	208c <CONFIG_FPROTECT_BLOCK_SIZE+0x108c>
    14cc:	2b02      	cmp	r3, #2
    14ce:	f000 859d 	beq.w	200c <CONFIG_FPROTECT_BLOCK_SIZE+0x100c>
			LL_ASSERT(0);
    14d2:	4aae      	ldr	r2, [pc, #696]	; (178c <CONFIG_FPROTECT_BLOCK_SIZE+0x78c>)
    14d4:	49ae      	ldr	r1, [pc, #696]	; (1790 <CONFIG_FPROTECT_BLOCK_SIZE+0x790>)
    14d6:	48af      	ldr	r0, [pc, #700]	; (1794 <CONFIG_FPROTECT_BLOCK_SIZE+0x794>)
    14d8:	f640 038f 	movw	r3, #2191	; 0x88f
    14dc:	f012 fc0a 	bl	13cf4 <printk>
    14e0:	4040      	eors	r0, r0
    14e2:	f380 8811 	msr	BASEPRI, r0
    14e6:	f04f 0003 	mov.w	r0, #3
    14ea:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    14ec:	2100      	movs	r1, #0
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    14ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    14f0:	f894 c106 	ldrb.w	ip, [r4, #262]	; 0x106
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14f4:	792a      	ldrb	r2, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    14f6:	443b      	add	r3, r7
    14f8:	3306      	adds	r3, #6
    14fa:	b298      	uxth	r0, r3
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    14fc:	f36f 0c01 	bfc	ip, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1500:	230c      	movs	r3, #12
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1502:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1506:	f884 c106 	strb.w	ip, [r4, #262]	; 0x106
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    150a:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    150e:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1510:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    1514:	4fa0      	ldr	r7, [pc, #640]	; (1798 <CONFIG_FPROTECT_BLOCK_SIZE+0x798>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1516:	712a      	strb	r2, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1518:	2200      	movs	r2, #0
    151a:	71ea      	strb	r2, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    151c:	fba7 2303 	umull	r2, r3, r7, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1520:	f894 7114 	ldrb.w	r7, [r4, #276]	; 0x114
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1524:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1526:	722f      	strb	r7, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1528:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
    152c:	f8a5 700b 	strh.w	r7, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1530:	f8b4 710a 	ldrh.w	r7, [r4, #266]	; 0x10a
    1534:	f8a5 700d 	strh.w	r7, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1538:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    153c:	f8b4 710c 	ldrh.w	r7, [r4, #268]	; 0x10c
    1540:	f8a5 700f 	strh.w	r7, [r5, #15]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1544:	2a00      	cmp	r2, #0
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1546:	f8a5 0011 	strh.w	r0, [r5, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    154a:	f8a5 3009 	strh.w	r3, [r5, #9]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    154e:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1552:	da0a      	bge.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
			u32_t ticks_prepare_to_start =
    1554:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    1558:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    155c:	4283      	cmp	r3, r0
    155e:	bf2c      	ite	cs
    1560:	18f3      	addcs	r3, r6, r3
    1562:	1833      	addcc	r3, r6, r0
    1564:	1a9a      	subs	r2, r3, r2
    1566:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    156a:	4b8c      	ldr	r3, [pc, #560]	; (179c <CONFIG_FPROTECT_BLOCK_SIZE+0x79c>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    156c:	f105 0009 	add.w	r0, r5, #9
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1570:	2201      	movs	r2, #1
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    1572:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1576:	60d9      	str	r1, [r3, #12]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1578:	4610      	mov	r0, r2
    157a:	2102      	movs	r1, #2
		mfy_sched_offset->param = (void *)conn;
    157c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    157e:	f003 f945 	bl	480c <mayfly_enqueue>
		LL_ASSERT(!retval);
    1582:	2800      	cmp	r0, #0
    1584:	f040 8585 	bne.w	2092 <CONFIG_FPROTECT_BLOCK_SIZE+0x1092>
	    conn->tx_head &&
    1588:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    158c:	2b00      	cmp	r3, #0
    158e:	f000 8322 	beq.w	1bd6 <CONFIG_FPROTECT_BLOCK_SIZE+0xbd6>
	    !conn->llcp_enc.pause_tx &&
    1592:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1596:	0790      	lsls	r0, r2, #30
    1598:	f100 831d 	bmi.w	1bd6 <CONFIG_FPROTECT_BLOCK_SIZE+0xbd6>
	    !conn->llcp_phy.pause_tx &&
    159c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    15a0:	07d1      	lsls	r1, r2, #31
    15a2:	f100 8318 	bmi.w	1bd6 <CONFIG_FPROTECT_BLOCK_SIZE+0xbd6>
		if (conn->tx_head == conn->tx_data) {
    15a6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    15aa:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    15ac:	bf04      	itt	eq
    15ae:	681a      	ldreq	r2, [r3, #0]
    15b0:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    15b4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    15b8:	2a00      	cmp	r2, #0
    15ba:	f000 86c1 	beq.w	2340 <CONFIG_FPROTECT_BLOCK_SIZE+0x1340>
	tx->next = conn->tx_ctrl_last->next;
    15be:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    15c2:	681a      	ldr	r2, [r3, #0]
    15c4:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    15c6:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    15c8:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    15cc:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    15ce:	2b00      	cmp	r3, #0
    15d0:	f47f ab2d 	bne.w	c2e <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    15d4:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    15d8:	f7ff bb29 	b.w	c2e <ull_conn_llcp+0x2e>
		rx = ll_pdu_rx_alloc_peek(2);
    15dc:	2002      	movs	r0, #2
    15de:	f007 fc2d 	bl	8e3c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    15e2:	4680      	mov	r8, r0
    15e4:	2800      	cmp	r0, #0
    15e6:	f43f ab22 	beq.w	c2e <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    15ea:	4867      	ldr	r0, [pc, #412]	; (1788 <CONFIG_FPROTECT_BLOCK_SIZE+0x788>)
    15ec:	f003 f836 	bl	465c <mem_acquire>
		if (!tx) {
    15f0:	4606      	mov	r6, r0
    15f2:	2800      	cmp	r0, #0
    15f4:	f43f ab1b 	beq.w	c2e <ull_conn_llcp+0x2e>
		conn->llcp.phy_upd_ind.initiate = 0U;
    15f8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    15fc:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    1600:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    1604:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
    1608:	f012 0707 	ands.w	r7, r2, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    160c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    1610:	b2db      	uxtb	r3, r3
    1612:	f040 85a2 	bne.w	215a <CONFIG_FPROTECT_BLOCK_SIZE+0x115a>
			conn->llcp_ack = conn->llcp_req;
    1616:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    161a:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    161e:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    1620:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    1624:	f100 8619 	bmi.w	225a <CONFIG_FPROTECT_BLOCK_SIZE+0x125a>
    1628:	463b      	mov	r3, r7
    162a:	4639      	mov	r1, r7
		pdu_ctrl_tx->len =
    162c:	2205      	movs	r2, #5
    162e:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    1630:	7237      	strb	r7, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1632:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1634:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
    1636:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    163a:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    163c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    1640:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1642:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
    1644:	71f1      	strb	r1, [r6, #7]
	if (
    1646:	2b00      	cmp	r3, #0
    1648:	d04a      	beq.n	16e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6e0>
	    !conn->llcp_enc.pause_tx &&
    164a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    164e:	0797      	lsls	r7, r2, #30
    1650:	d446      	bmi.n	16e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6e0>
	    !conn->llcp_phy.pause_tx &&
    1652:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1656:	07d5      	lsls	r5, r2, #31
    1658:	d442      	bmi.n	16e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6e0>
		if (conn->tx_head == conn->tx_data) {
    165a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    165e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1660:	bf04      	itt	eq
    1662:	681a      	ldreq	r2, [r3, #0]
    1664:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1668:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    166c:	2a00      	cmp	r2, #0
    166e:	f000 865f 	beq.w	2330 <CONFIG_FPROTECT_BLOCK_SIZE+0x1330>
	tx->next = conn->tx_ctrl_last->next;
    1672:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1676:	681a      	ldr	r2, [r3, #0]
    1678:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    167a:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    167c:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    1680:	6833      	ldr	r3, [r6, #0]
	if (!tx->next) {
    1682:	2b00      	cmp	r3, #0
    1684:	f47f aad3 	bne.w	c2e <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    1688:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    168c:	f7ff bacf 	b.w	c2e <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1690:	483d      	ldr	r0, [pc, #244]	; (1788 <CONFIG_FPROTECT_BLOCK_SIZE+0x788>)
    1692:	f002 ffe3 	bl	465c <mem_acquire>
		if (tx) {
    1696:	4606      	mov	r6, r0
    1698:	2800      	cmp	r0, #0
    169a:	f43f aac8 	beq.w	c2e <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
    169e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16a0:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    16a2:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    16a6:	441d      	add	r5, r3
						      conn->lll.latency + 6;
    16a8:	1dab      	adds	r3, r5, #6
			conn->llcp.chan_map.instant = event_counter +
    16aa:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    16ae:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    16b2:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16b4:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    16b8:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    16ba:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16be:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    16c0:	7170      	strb	r0, [r6, #5]
			pdu_ctrl_tx->llctrl.opcode =
    16c2:	71f3      	strb	r3, [r6, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    16c4:	2205      	movs	r2, #5
    16c6:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    16ca:	1830      	adds	r0, r6, r0
    16cc:	f012 fe25 	bl	1431a <memcpy>
	    conn->tx_head &&
    16d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    16d4:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    16d8:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    16dc:	2b00      	cmp	r3, #0
    16de:	d1b4      	bne.n	164a <CONFIG_FPROTECT_BLOCK_SIZE+0x64a>
		if (!conn->tx_ctrl) {
    16e0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    16e4:	2a00      	cmp	r2, #0
    16e6:	d1c4      	bne.n	1672 <CONFIG_FPROTECT_BLOCK_SIZE+0x672>
			tx->next = conn->tx_head;
    16e8:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    16ea:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    16ee:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    16f2:	e7c6      	b.n	1682 <CONFIG_FPROTECT_BLOCK_SIZE+0x682>
		conn_upd_curr = conn;
    16f4:	f8c8 4000 	str.w	r4, [r8]
    16f8:	f7ff bb41 	b.w	d7e <ull_conn_llcp+0x17e>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    16fc:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1700:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    1704:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1708:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		u16_t tx_time = conn->llcp_length.tx_time;
    170c:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1710:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1714:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    1716:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    171a:	f000 8513 	beq.w	2144 <CONFIG_FPROTECT_BLOCK_SIZE+0x1144>
			conn->llcp_length.state =
    171e:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1722:	2206      	movs	r2, #6
    1724:	f362 0302 	bfi	r3, r2, #0, #3
    1728:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    172c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1730:	2f00      	cmp	r7, #0
    1732:	f000 8497 	beq.w	2064 <CONFIG_FPROTECT_BLOCK_SIZE+0x1064>
    1736:	6838      	ldr	r0, [r7, #0]
    1738:	2800      	cmp	r0, #0
    173a:	f000 8493 	beq.w	2064 <CONFIG_FPROTECT_BLOCK_SIZE+0x1064>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    173e:	f897 3020 	ldrb.w	r3, [r7, #32]
		conn->llcp_rx = rx->hdr.link->mem;
    1742:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1744:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1748:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    174c:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1750:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1752:	f887 3020 	strb.w	r3, [r7, #32]
		pdu_ctrl_rx->len =
    1756:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    175a:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    175c:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1760:	f8a7 c024 	strh.w	ip, [r7, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1764:	84f9      	strh	r1, [r7, #38]	; 0x26
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1766:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
    176c:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    176e:	f8a7 9028 	strh.w	r9, [r7, #40]	; 0x28
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1772:	f8a7 802a 	strh.w	r8, [r7, #42]	; 0x2a
		pdu_ctrl_rx->len =
    1776:	f887 a021 	strb.w	sl, [r7, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    177a:	f007 fb4f 	bl	8e1c <ll_rx_put>
		ll_rx_sched();
    177e:	f007 fb57 	bl	8e30 <ll_rx_sched>
	break;
    1782:	f7ff ba7d 	b.w	c80 <ull_conn_llcp+0x80>
    1786:	bf00      	nop
    1788:	200016d0 	.word	0x200016d0
    178c:	0001570c 	.word	0x0001570c
    1790:	000152dc 	.word	0x000152dc
    1794:	0001525c 	.word	0x0001525c
    1798:	d1b71759 	.word	0xd1b71759
    179c:	2000034c 	.word	0x2000034c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    17a0:	48b7      	ldr	r0, [pc, #732]	; (1a80 <CONFIG_FPROTECT_BLOCK_SIZE+0xa80>)
    17a2:	f002 ff5b 	bl	465c <mem_acquire>
		if (!tx) {
    17a6:	2800      	cmp	r0, #0
    17a8:	f43f aa6a 	beq.w	c80 <ull_conn_llcp+0x80>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    17ac:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    17b0:	f8b4 719e 	ldrh.w	r7, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    17b4:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    17b8:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    17bc:	2101      	movs	r1, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    17be:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    17c2:	f361 0302 	bfi	r3, r1, #0, #3
		pdu_ctrl_tx->len =
    17c6:	2209      	movs	r2, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    17c8:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    17cc:	7142      	strb	r2, [r0, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17ce:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
    17d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    17d4:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17d6:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    17da:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    17de:	72c1      	strb	r1, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    17e0:	73c1      	strb	r1, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    17e2:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17e4:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    17e6:	211b      	movs	r1, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    17e8:	2248      	movs	r2, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    17ea:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    17ee:	7247      	strb	r7, [r0, #9]
    17f0:	7201      	strb	r1, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    17f2:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    17f4:	7382      	strb	r2, [r0, #14]
	if (
    17f6:	2b00      	cmp	r3, #0
    17f8:	f000 83fd 	beq.w	1ff6 <CONFIG_FPROTECT_BLOCK_SIZE+0xff6>
	    !conn->llcp_enc.pause_tx &&
    17fc:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1800:	0792      	lsls	r2, r2, #30
    1802:	f100 83f8 	bmi.w	1ff6 <CONFIG_FPROTECT_BLOCK_SIZE+0xff6>
	    !conn->llcp_phy.pause_tx &&
    1806:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    180a:	07d7      	lsls	r7, r2, #31
    180c:	f100 83f3 	bmi.w	1ff6 <CONFIG_FPROTECT_BLOCK_SIZE+0xff6>
		if (conn->tx_head == conn->tx_data) {
    1810:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1814:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1816:	bf04      	itt	eq
    1818:	681a      	ldreq	r2, [r3, #0]
    181a:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    181e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1822:	2a00      	cmp	r2, #0
    1824:	f000 859f 	beq.w	2366 <CONFIG_FPROTECT_BLOCK_SIZE+0x1366>
	tx->next = conn->tx_ctrl_last->next;
    1828:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    182c:	681a      	ldr	r2, [r3, #0]
    182e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1830:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1832:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1836:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    1838:	2b00      	cmp	r3, #0
    183a:	f000 850a 	beq.w	2252 <CONFIG_FPROTECT_BLOCK_SIZE+0x1252>
		conn->procedure_expire = conn->procedure_reload;
    183e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1842:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1846:	f7ff ba1b 	b.w	c80 <ull_conn_llcp+0x80>
		if (!conn->tx_ctrl) {
    184a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    184e:	2a00      	cmp	r2, #0
    1850:	f47f ad58 	bne.w	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
			tx->next = conn->tx_head;
    1854:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1856:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    185a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    185e:	e559      	b.n	1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    1860:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    1864:	463b      	mov	r3, r7
    1866:	462a      	mov	r2, r5
    1868:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    186c:	f204 105d 	addw	r0, r4, #349	; 0x15d
    1870:	f00f fc3a 	bl	110e8 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    1874:	4639      	mov	r1, r7
    1876:	2210      	movs	r2, #16
    1878:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    187c:	f012 fd4d 	bl	1431a <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1880:	2208      	movs	r2, #8
    1882:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1886:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    188a:	f012 fd46 	bl	1431a <memcpy>
			lll->ccm_rx.direction = 1U;
    188e:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    1892:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    1896:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    189a:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    189e:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    18a2:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    18a6:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    18aa:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    18ac:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    18b0:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    18b4:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    18b8:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    18bc:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    18c0:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    18c4:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    18c8:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    18cc:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    18d0:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    18d4:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    18d8:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18dc:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    18de:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    18e0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18e4:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    18e8:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18ea:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    18ec:	71f1      	strb	r1, [r6, #7]
	if (
    18ee:	2b00      	cmp	r3, #0
    18f0:	f47f ac8b 	bne.w	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
		if (!conn->tx_ctrl) {
    18f4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    18f8:	2a00      	cmp	r2, #0
    18fa:	f47f ac9c 	bne.w	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
			tx->next = conn->tx_head;
    18fe:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    1900:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1904:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    1908:	e49d      	b.n	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    190a:	fb08 3311 	mls	r3, r8, r1, r3
    190e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1912:	485c      	ldr	r0, [pc, #368]	; (1a84 <CONFIG_FPROTECT_BLOCK_SIZE+0xa84>)
    1914:	b29b      	uxth	r3, r3
    1916:	fb02 f303 	mul.w	r3, r2, r3
    191a:	fba3 0100 	umull	r0, r1, r3, r0
    191e:	a356      	add	r3, pc, #344	; (adr r3, 1a78 <CONFIG_FPROTECT_BLOCK_SIZE+0xa78>)
    1920:	e9d3 2300 	ldrd	r2, r3, [r3]
    1924:	f7fe fbdc 	bl	e0 <__aeabi_uldivmod>
    1928:	1a36      	subs	r6, r6, r0
    192a:	f7ff bab4 	b.w	e96 <ull_conn_llcp+0x296>
		LL_ASSERT(rx && rx->hdr.link);
    192e:	4a56      	ldr	r2, [pc, #344]	; (1a88 <CONFIG_FPROTECT_BLOCK_SIZE+0xa88>)
    1930:	4956      	ldr	r1, [pc, #344]	; (1a8c <CONFIG_FPROTECT_BLOCK_SIZE+0xa8c>)
    1932:	4857      	ldr	r0, [pc, #348]	; (1a90 <CONFIG_FPROTECT_BLOCK_SIZE+0xa90>)
    1934:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    1938:	f012 f9dc 	bl	13cf4 <printk>
    193c:	4040      	eors	r0, r0
    193e:	f380 8811 	msr	BASEPRI, r0
    1942:	f04f 0003 	mov.w	r0, #3
    1946:	df02      	svc	2
    1948:	f8d8 0000 	ldr.w	r0, [r8]
    194c:	f7ff ba55 	b.w	dfa <ull_conn_llcp+0x1fa>
		} else if (conn->llcp_conn_param.ack !=
    1950:	f894 c171 	ldrb.w	ip, [r4, #369]	; 0x171
    1954:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    1958:	4594      	cmp	ip, r2
    195a:	f000 827d 	beq.w	1e58 <CONFIG_FPROTECT_BLOCK_SIZE+0xe58>
	conn_upd = conn_upd_curr;
    195e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1a94 <CONFIG_FPROTECT_BLOCK_SIZE+0xa94>
    1962:	f8d8 2000 	ldr.w	r2, [r8]
	if (conn_upd && (conn_upd != conn)) {
    1966:	2a00      	cmp	r2, #0
    1968:	f000 849d 	beq.w	22a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x12a6>
    196c:	4294      	cmp	r4, r2
    196e:	f47f a95e 	bne.w	c2e <ull_conn_llcp+0x2e>
	switch (conn->llcp_conn_param.state) {
    1972:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1976:	f002 0207 	and.w	r2, r2, #7
    197a:	2a05      	cmp	r2, #5
    197c:	f200 8637 	bhi.w	25ee <CONFIG_FPROTECT_BLOCK_SIZE+0x15ee>
    1980:	f20f 0c04 	addw	ip, pc, #4
    1984:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1988:	00001a99 	.word	0x00001a99
    198c:	000019f9 	.word	0x000019f9
    1990:	000019a1 	.word	0x000019a1
    1994:	00000c25 	.word	0x00000c25
    1998:	00000c25 	.word	0x00000c25
    199c:	00000c25 	.word	0x00000c25
	if (conn->llcp_enc.pause_tx) {
    19a0:	07b8      	lsls	r0, r7, #30
    19a2:	f53f a944 	bmi.w	c2e <ull_conn_llcp+0x2e>
	rx = ll_pdu_rx_alloc();
    19a6:	f007 fa67 	bl	8e78 <ll_pdu_rx_alloc>
	if (!rx) {
    19aa:	4601      	mov	r1, r0
    19ac:	2800      	cmp	r0, #0
    19ae:	f43f ad60 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    19b2:	f890 3020 	ldrb.w	r3, [r0, #32]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    19b6:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    19ba:	2003      	movs	r0, #3
    19bc:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    19c0:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    19c2:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    19c6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    19c8:	f881 3020 	strb.w	r3, [r1, #32]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    19cc:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    19ce:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    19d0:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    19d2:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    19d6:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    19da:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    19de:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    19e0:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    19e4:	848a      	strh	r2, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    19e6:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    19ea:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    19ec:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    19ee:	8508      	strh	r0, [r1, #40]	; 0x28
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    19f0:	854a      	strh	r2, [r1, #42]	; 0x2a
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    19f2:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
    19f6:	e537      	b.n	1468 <CONFIG_FPROTECT_BLOCK_SIZE+0x468>
	if (conn->llcp_conn_param.status) {
    19f8:	f894 7173 	ldrb.w	r7, [r4, #371]	; 0x173
    19fc:	2f00      	cmp	r7, #0
    19fe:	f040 84dd 	bne.w	23bc <CONFIG_FPROTECT_BLOCK_SIZE+0x13bc>
	if (!conn->lll.role) {
    1a02:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1a06:	2b00      	cmp	r3, #0
    1a08:	f2c0 855a 	blt.w	24c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x14c0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1a0c:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    1a10:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    1a14:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1a18:	2205      	movs	r2, #5
    1a1a:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    1a1e:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1a20:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    1a24:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    1a28:	2800      	cmp	r0, #0
    1a2a:	f000 85a3 	beq.w	2574 <CONFIG_FPROTECT_BLOCK_SIZE+0x1574>
				((conn->llcp_conn_param.interval_min /
    1a2e:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1a32:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    1a36:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    1a38:	fb13 f300 	smulbb	r3, r3, r0
    1a3c:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1a3e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1a42:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    1a46:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1a4a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1a4e:	009b      	lsls	r3, r3, #2
    1a50:	f020 0207 	bic.w	r2, r0, #7
    1a54:	f043 0302 	orr.w	r3, r3, #2
    1a58:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1a5a:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1a5e:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1a62:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    1a66:	3901      	subs	r1, #1
    1a68:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1a6c:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1a70:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    1a74:	f7ff b8db 	b.w	c2e <ull_conn_llcp+0x2e>
    1a78:	1afd498d 	.word	0x1afd498d
    1a7c:	00000007 	.word	0x00000007
    1a80:	200016d0 	.word	0x200016d0
    1a84:	3b9aca00 	.word	0x3b9aca00
    1a88:	0001570c 	.word	0x0001570c
    1a8c:	00015890 	.word	0x00015890
    1a90:	0001525c 	.word	0x0001525c
    1a94:	200015c4 	.word	0x200015c4
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1a98:	48db      	ldr	r0, [pc, #876]	; (1e08 <CONFIG_FPROTECT_BLOCK_SIZE+0xe08>)
			event_counter = lll->event_counter +
    1a9a:	f8b4 9036 	ldrh.w	r9, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    1a9e:	f8b4 a032 	ldrh.w	sl, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1aa2:	f002 fddb 	bl	465c <mem_acquire>
	if (!tx) {
    1aa6:	4607      	mov	r7, r0
    1aa8:	2800      	cmp	r0, #0
    1aaa:	f43f ace2 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1aae:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1ab0:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
    1ab4:	2004      	movs	r0, #4
    1ab6:	f360 0102 	bfi	r1, r0, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1aba:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1abe:	2018      	movs	r0, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1ac0:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
			event_counter = lll->event_counter +
    1ac4:	eb09 030a 	add.w	r3, r9, sl
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ac8:	713a      	strb	r2, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1aca:	7178      	strb	r0, [r7, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1acc:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1ad0:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1ad4:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1ad8:	8138      	strh	r0, [r7, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1ada:	442b      	add	r3, r5
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1adc:	f8b4 017a 	ldrh.w	r0, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1ae0:	8179      	strh	r1, [r7, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1ae2:	81ba      	strh	r2, [r7, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1ae4:	210f      	movs	r1, #15
	p->preferred_periodicity = 0U;
    1ae6:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1ae8:	f8a7 3011 	strh.w	r3, [r7, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1aec:	f04f 33ff 	mov.w	r3, #4294967295
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1af0:	81f8      	strh	r0, [r7, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1af2:	71f9      	strb	r1, [r7, #7]
	p->preferred_periodicity = 0U;
    1af4:	743a      	strb	r2, [r7, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1af6:	74fa      	strb	r2, [r7, #19]
    1af8:	753a      	strb	r2, [r7, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1afa:	757b      	strb	r3, [r7, #21]
    1afc:	75bb      	strb	r3, [r7, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    1afe:	75fb      	strb	r3, [r7, #23]
    1b00:	763b      	strb	r3, [r7, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    1b02:	767b      	strb	r3, [r7, #25]
    1b04:	76bb      	strb	r3, [r7, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    1b06:	76fb      	strb	r3, [r7, #27]
    1b08:	773b      	strb	r3, [r7, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    1b0a:	777b      	strb	r3, [r7, #29]
    1b0c:	77bb      	strb	r3, [r7, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1b0e:	4639      	mov	r1, r7
    1b10:	4620      	mov	r0, r4
    1b12:	f008 fa19 	bl	9f48 <ctrl_tx_pause_enqueue>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1b16:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    1b18:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	conn_upd_curr = conn;
    1b1c:	f8c8 4000 	str.w	r4, [r8]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1b20:	2a00      	cmp	r2, #0
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    1b22:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
	conn->procedure_expire = conn->procedure_reload;
    1b26:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1b2a:	da0a      	bge.n	1b42 <CONFIG_FPROTECT_BLOCK_SIZE+0xb42>
			u32_t ticks_prepare_to_start =
    1b2c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    1b30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    1b34:	428b      	cmp	r3, r1
    1b36:	bf2c      	ite	cs
    1b38:	18f3      	addcs	r3, r6, r3
    1b3a:	1873      	addcc	r3, r6, r1
    1b3c:	1a9b      	subs	r3, r3, r2
    1b3e:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
		s_mfy_sched_offset.param = (void *)conn;
    1b42:	4bb2      	ldr	r3, [pc, #712]	; (1e0c <CONFIG_FPROTECT_BLOCK_SIZE+0xe0c>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    1b44:	3713      	adds	r7, #19
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1b46:	2201      	movs	r2, #1
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    1b48:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1b4c:	4610      	mov	r0, r2
    1b4e:	2102      	movs	r1, #2
		s_mfy_sched_offset.param = (void *)conn;
    1b50:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1b52:	f002 fe5b 	bl	480c <mayfly_enqueue>
		LL_ASSERT(!retval);
    1b56:	2800      	cmp	r0, #0
    1b58:	f43f ac8b 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
    1b5c:	4aac      	ldr	r2, [pc, #688]	; (1e10 <CONFIG_FPROTECT_BLOCK_SIZE+0xe10>)
    1b5e:	49ad      	ldr	r1, [pc, #692]	; (1e14 <CONFIG_FPROTECT_BLOCK_SIZE+0xe14>)
    1b60:	f640 3376 	movw	r3, #2934	; 0xb76
		LL_ASSERT(0);
    1b64:	48ac      	ldr	r0, [pc, #688]	; (1e18 <CONFIG_FPROTECT_BLOCK_SIZE+0xe18>)
    1b66:	f012 f8c5 	bl	13cf4 <printk>
    1b6a:	4040      	eors	r0, r0
    1b6c:	f380 8811 	msr	BASEPRI, r0
    1b70:	f04f 0003 	mov.w	r0, #3
    1b74:	df02      	svc	2
		break;
    1b76:	e47c      	b.n	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1b78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1b7a:	4563      	cmp	r3, ip
    1b7c:	f47f a948 	bne.w	e10 <ull_conn_llcp+0x210>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1b80:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1b84:	f8b4 e10c 	ldrh.w	lr, [r4, #268]	; 0x10c
		    (conn->llcp_cu.latency != lll->latency) ||
    1b88:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1b8c:	fb03 fb01 	mul.w	fp, r3, r1
    1b90:	f242 7310 	movw	r3, #10000	; 0x2710
    1b94:	fb03 b30e 	mla	r3, r3, lr, fp
    1b98:	3b01      	subs	r3, #1
    1b9a:	fbb3 f3fb 	udiv	r3, r3, fp
		    (conn->llcp_cu.latency != lll->latency) ||
    1b9e:	b29b      	uxth	r3, r3
    1ba0:	429a      	cmp	r2, r3
    1ba2:	f47f a937 	bne.w	e14 <ull_conn_llcp+0x214>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1ba6:	2303      	movs	r3, #3
    1ba8:	f888 3004 	strb.w	r3, [r8, #4]
    1bac:	f7ff b941 	b.w	e32 <ull_conn_llcp+0x232>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1bb0:	2201      	movs	r2, #1
    1bb2:	4610      	mov	r0, r2
    1bb4:	2102      	movs	r1, #2
    1bb6:	f002 fdf5 	bl	47a4 <mayfly_enable>
				return -ECANCELED;
    1bba:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1bbe:	f7ff b83d 	b.w	c3c <ull_conn_llcp+0x3c>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    1bc2:	f3c1 0082 	ubfx	r0, r1, #2, #3
    1bc6:	f360 0302 	bfi	r3, r0, #0, #3
    1bca:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    1bce:	f44f 76a4 	mov.w	r6, #328	; 0x148
    1bd2:	f7ff ba49 	b.w	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
		if (!conn->tx_ctrl) {
    1bd6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1bda:	2a00      	cmp	r2, #0
    1bdc:	f47f acef 	bne.w	15be <CONFIG_FPROTECT_BLOCK_SIZE+0x5be>
			tx->next = conn->tx_head;
    1be0:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1be2:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1be6:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1bea:	e4f0      	b.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
		LL_ASSERT(rx && rx->hdr.link);
    1bec:	4a88      	ldr	r2, [pc, #544]	; (1e10 <CONFIG_FPROTECT_BLOCK_SIZE+0xe10>)
    1bee:	498b      	ldr	r1, [pc, #556]	; (1e1c <CONFIG_FPROTECT_BLOCK_SIZE+0xe1c>)
    1bf0:	4889      	ldr	r0, [pc, #548]	; (1e18 <CONFIG_FPROTECT_BLOCK_SIZE+0xe18>)
    1bf2:	f640 6338 	movw	r3, #3640	; 0xe38
    1bf6:	f012 f87d 	bl	13cf4 <printk>
    1bfa:	4040      	eors	r0, r0
    1bfc:	f380 8811 	msr	BASEPRI, r0
    1c00:	f04f 0003 	mov.w	r0, #3
    1c04:	df02      	svc	2
    1c06:	6828      	ldr	r0, [r5, #0]
    1c08:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    1c0c:	f7ff ba4b 	b.w	10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
			lll->slave.window_widening_prepare_us -=
    1c10:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    1c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c14:	4f82      	ldr	r7, [pc, #520]	; (1e20 <CONFIG_FPROTECT_BLOCK_SIZE+0xe20>)
			lll->slave.window_widening_prepare_us -=
    1c16:	fb03 231a 	mls	r3, r3, sl, r2
    1c1a:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    1c1c:	f00e fc36 	bl	1048c <lll_conn_ppm_local_get>
    1c20:	4680      	mov	r8, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1c22:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1c26:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1c2a:	f00e fc31 	bl	10490 <lll_conn_ppm_get>
				(((lll_conn_ppm_local_get() +
    1c2e:	eb08 0300 	add.w	r3, r8, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1c32:	fb05 f303 	mul.w	r3, r5, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1c36:	487b      	ldr	r0, [pc, #492]	; (1e24 <CONFIG_FPROTECT_BLOCK_SIZE+0xe24>)
			lll->slave.window_widening_prepare_us +=
    1c38:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    1c3a:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1c3e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1c42:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1c46:	fba0 0303 	umull	r0, r3, r0, r3
    1c4a:	ea4f 4a93 	mov.w	sl, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    1c4e:	fb0a f00b 	mul.w	r0, sl, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1c52:	086b      	lsrs	r3, r5, #1
			lll->slave.window_widening_prepare_us +=
    1c54:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1c56:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1c58:	429a      	cmp	r2, r3
				conn->llcp_cu.win_size * 1250U;
    1c5a:	fb09 fc01 	mul.w	ip, r9, r1
			lll->slave.window_widening_prepare_us +=
    1c5e:	bf28      	it	cs
    1c60:	461a      	movcs	r2, r3
			conn->slave.ticks_to_offset = 0U;
    1c62:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1c66:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			lll->slave.window_widening_periodic_us =
    1c6a:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c6e:	a364      	add	r3, pc, #400	; (adr r3, 1e00 <CONFIG_FPROTECT_BLOCK_SIZE+0xe00>)
    1c70:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    1c74:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
    1c78:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c7c:	fba0 0107 	umull	r0, r1, r0, r7
    1c80:	f7fe fa2e 	bl	e0 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1c84:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c88:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1c8a:	4867      	ldr	r0, [pc, #412]	; (1e28 <CONFIG_FPROTECT_BLOCK_SIZE+0xe28>)
    1c8c:	fba0 3003 	umull	r3, r0, r0, r3
    1c90:	0a80      	lsrs	r0, r0, #10
    1c92:	fb09 f000 	mul.w	r0, r9, r0
    1c96:	a35a      	add	r3, pc, #360	; (adr r3, 1e00 <CONFIG_FPROTECT_BLOCK_SIZE+0xe00>)
    1c98:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c9c:	fba0 0107 	umull	r0, r1, r0, r7
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ca0:	eba6 060c 	sub.w	r6, r6, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ca4:	f7fe fa1c 	bl	e0 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1ca8:	eba5 0a0a 	sub.w	sl, r5, sl
    1cac:	f8b4 8108 	ldrh.w	r8, [r4, #264]	; 0x108
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1cb0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1cb4:	f7ff b90e 	b.w	ed4 <ull_conn_llcp+0x2d4>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    1cb8:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    1cbc:	463b      	mov	r3, r7
    1cbe:	462a      	mov	r2, r5
    1cc0:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    1cc4:	f204 105d 	addw	r0, r4, #349	; 0x15d
    1cc8:	f00f fa0e 	bl	110e8 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    1ccc:	4639      	mov	r1, r7
    1cce:	2210      	movs	r2, #16
    1cd0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    1cd4:	f012 fb21 	bl	1431a <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1cd8:	2208      	movs	r2, #8
    1cda:	f104 0198 	add.w	r1, r4, #152	; 0x98
    1cde:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    1ce2:	f012 fb1a 	bl	1431a <memcpy>
		lll->ccm_rx.direction = 0;
    1ce6:	f894 1097 	ldrb.w	r1, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    1cea:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    1cee:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    1cf2:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    1cf6:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    1cfa:	f365 0100 	bfi	r1, r5, #0, #1
		lll->ccm_tx.direction = 1;
    1cfe:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    1d02:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    1d06:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    1d0a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    1d0e:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    1d12:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    1d16:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    1d1a:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    1d1e:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    1d22:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    1d26:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    1d2a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    1d2e:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    1d32:	1d31      	adds	r1, r6, #4
    1d34:	4620      	mov	r0, r4
    1d36:	f008 fb11 	bl	a35c <start_enc_rsp_send>
	    conn->tx_head &&
    1d3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1d3e:	2b00      	cmp	r3, #0
    1d40:	f47f aa63 	bne.w	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    1d44:	e5d6      	b.n	18f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x8f4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1d46:	4830      	ldr	r0, [pc, #192]	; (1e08 <CONFIG_FPROTECT_BLOCK_SIZE+0xe08>)
    1d48:	f002 fc88 	bl	465c <mem_acquire>
	if (tx) {
    1d4c:	4680      	mov	r8, r0
    1d4e:	2800      	cmp	r0, #0
    1d50:	f43f ab8f 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
		conn->llcp_feature.ack--;
    1d54:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features = LL_FEAT;
    1d58:	4a34      	ldr	r2, [pc, #208]	; (1e2c <CONFIG_FPROTECT_BLOCK_SIZE+0xe2c>)
    1d5a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    1d5e:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1d60:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    1d62:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1d66:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    1d68:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d6c:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    1d6e:	2a00      	cmp	r2, #0
    1d70:	bfac      	ite	ge
    1d72:	2208      	movge	r2, #8
    1d74:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d76:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    1d7a:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1d7c:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d7e:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1d80:	4639      	mov	r1, r7
    1d82:	4410      	add	r0, r2
    1d84:	f012 faf4 	bl	14370 <memset>
		sys_put_le24(conn->llcp_feature.features,
    1d88:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    1d8c:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    1d90:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1d94:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1d96:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    1d9a:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    1d9e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1da2:	2b00      	cmp	r3, #0
    1da4:	f000 8135 	beq.w	2012 <CONFIG_FPROTECT_BLOCK_SIZE+0x1012>
	    !conn->llcp_enc.pause_tx &&
    1da8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1dac:	0791      	lsls	r1, r2, #30
    1dae:	f100 8130 	bmi.w	2012 <CONFIG_FPROTECT_BLOCK_SIZE+0x1012>
	    !conn->llcp_phy.pause_tx &&
    1db2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1db6:	07d2      	lsls	r2, r2, #31
    1db8:	f100 812b 	bmi.w	2012 <CONFIG_FPROTECT_BLOCK_SIZE+0x1012>
		if (conn->tx_head == conn->tx_data) {
    1dbc:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1dc0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1dc2:	bf04      	itt	eq
    1dc4:	681a      	ldreq	r2, [r3, #0]
    1dc6:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1dca:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1dce:	2a00      	cmp	r2, #0
    1dd0:	f000 82e0 	beq.w	2394 <CONFIG_FPROTECT_BLOCK_SIZE+0x1394>
	tx->next = conn->tx_ctrl_last->next;
    1dd4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1dd8:	681a      	ldr	r2, [r3, #0]
    1dda:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    1dde:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    1de2:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    1de6:	f8d8 3000 	ldr.w	r3, [r8]
	if (!tx->next) {
    1dea:	2b00      	cmp	r3, #0
    1dec:	f000 8272 	beq.w	22d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x12d4>
		conn->procedure_expire = conn->procedure_reload;
    1df0:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1df4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1df8:	f7ff bb3b 	b.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
    1dfc:	f3af 8000 	nop.w
    1e00:	1afd498d 	.word	0x1afd498d
    1e04:	00000007 	.word	0x00000007
    1e08:	200016d0 	.word	0x200016d0
    1e0c:	2000035c 	.word	0x2000035c
    1e10:	0001570c 	.word	0x0001570c
    1e14:	000154f8 	.word	0x000154f8
    1e18:	0001525c 	.word	0x0001525c
    1e1c:	00015890 	.word	0x00015890
    1e20:	3b9aca00 	.word	0x3b9aca00
    1e24:	431bde83 	.word	0x431bde83
    1e28:	d1b71759 	.word	0xd1b71759
    1e2c:	000141ff 	.word	0x000141ff
		LL_ASSERT(rx && rx->hdr.link);
    1e30:	4ad9      	ldr	r2, [pc, #868]	; (2198 <CONFIG_FPROTECT_BLOCK_SIZE+0x1198>)
    1e32:	49da      	ldr	r1, [pc, #872]	; (219c <CONFIG_FPROTECT_BLOCK_SIZE+0x119c>)
    1e34:	48da      	ldr	r0, [pc, #872]	; (21a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x11a0>)
    1e36:	f640 6364 	movw	r3, #3684	; 0xe64
    1e3a:	f011 ff5b 	bl	13cf4 <printk>
    1e3e:	4040      	eors	r0, r0
    1e40:	f380 8811 	msr	BASEPRI, r0
    1e44:	f04f 0003 	mov.w	r0, #3
    1e48:	df02      	svc	2
    1e4a:	6828      	ldr	r0, [r5, #0]
    1e4c:	f7ff b956 	b.w	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
		conn->tx_data_last = tx;
    1e50:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    1e54:	f7ff ba61 	b.w	131a <CONFIG_FPROTECT_BLOCK_SIZE+0x31a>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1e58:	f894 7198 	ldrb.w	r7, [r4, #408]	; 0x198
    1e5c:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    1e60:	42ba      	cmp	r2, r7
    1e62:	f000 8125 	beq.w	20b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x10b0>
	switch (conn->llcp_length.state) {
    1e66:	f894 119a 	ldrb.w	r1, [r4, #410]	; 0x19a
    1e6a:	f001 0207 	and.w	r2, r1, #7
    1e6e:	2a06      	cmp	r2, #6
    1e70:	f200 83df 	bhi.w	2632 <CONFIG_FPROTECT_BLOCK_SIZE+0x1632>
    1e74:	f20f 0c04 	addw	ip, pc, #4
    1e78:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1e7c:	00001f2d 	.word	0x00001f2d
    1e80:	00000c25 	.word	0x00000c25
    1e84:	00000c25 	.word	0x00000c25
    1e88:	00000c25 	.word	0x00000c25
    1e8c:	00001e99 	.word	0x00001e99
    1e90:	00001e99 	.word	0x00001e99
    1e94:	00000c25 	.word	0x00000c25
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1e98:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
    1e9c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1ea0:	f001 0307 	and.w	r3, r1, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    1ea4:	f8b4 21a0 	ldrh.w	r2, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1ea8:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		u16_t tx_time = conn->llcp_length.tx_time;
    1eac:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    1eb0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1eb4:	2b04      	cmp	r3, #4
    1eb6:	f000 8277 	beq.w	23a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x13a8>
			conn->llcp_length.state =
    1eba:	460b      	mov	r3, r1
    1ebc:	2206      	movs	r2, #6
    1ebe:	f362 0302 	bfi	r3, r2, #0, #3
    1ec2:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    1ec6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1eca:	2f00      	cmp	r7, #0
    1ecc:	f000 8253 	beq.w	2376 <CONFIG_FPROTECT_BLOCK_SIZE+0x1376>
    1ed0:	6838      	ldr	r0, [r7, #0]
    1ed2:	2800      	cmp	r0, #0
    1ed4:	f000 824f 	beq.w	2376 <CONFIG_FPROTECT_BLOCK_SIZE+0x1376>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
		conn->llcp_rx = rx->hdr.link->mem;
    1edc:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1ede:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1ee2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1ee6:	f043 0303 	orr.w	r3, r3, #3
    1eea:	f887 3020 	strb.w	r3, [r7, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1eee:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    1ef0:	2309      	movs	r3, #9
    1ef2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ef6:	713a      	strb	r2, [r7, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1ef8:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1efc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    1f00:	84fa      	strh	r2, [r7, #38]	; 0x26
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1f02:	2315      	movs	r3, #21
    1f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		rx->hdr.handle = conn->lll.handle;
    1f08:	f8a7 c006 	strh.w	ip, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1f0c:	84b9      	strh	r1, [r7, #36]	; 0x24
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1f0e:	f8a7 9028 	strh.w	r9, [r7, #40]	; 0x28
		ll_rx_put(rx->hdr.link, rx);
    1f12:	4639      	mov	r1, r7
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1f14:	f8a7 802a 	strh.w	r8, [r7, #42]	; 0x2a
		ll_rx_put(rx->hdr.link, rx);
    1f18:	f006 ff80 	bl	8e1c <ll_rx_put>
		ll_rx_sched();
    1f1c:	f006 ff88 	bl	8e30 <ll_rx_sched>
	break;
    1f20:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1f24:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    1f28:	f7fe be7c 	b.w	c24 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f2c:	489d      	ldr	r0, [pc, #628]	; (21a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x11a4>)
    1f2e:	f002 fb95 	bl	465c <mem_acquire>
		if (!tx) {
    1f32:	4603      	mov	r3, r0
    1f34:	2800      	cmp	r0, #0
    1f36:	f43f aa9c 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1f3a:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1f3e:	f8b4 719e 	ldrh.w	r7, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    1f42:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1f46:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1f4a:	2001      	movs	r0, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1f4c:	f8a4 10d8 	strh.w	r1, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1f50:	f360 0202 	bfi	r2, r0, #0, #3
		pdu_ctrl_tx->len =
    1f54:	2109      	movs	r1, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1f56:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    1f5a:	7159      	strb	r1, [r3, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f5c:	7919      	ldrb	r1, [r3, #4]
	    conn->tx_head &&
    1f5e:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1f62:	819f      	strh	r7, [r3, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f64:	f041 0103 	orr.w	r1, r1, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1f68:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1f6c:	72d8      	strb	r0, [r3, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1f6e:	73d8      	strb	r0, [r3, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1f70:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f72:	7119      	strb	r1, [r3, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1f74:	201b      	movs	r0, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1f76:	2148      	movs	r1, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1f78:	f883 c007 	strb.w	ip, [r3, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1f7c:	725f      	strb	r7, [r3, #9]
    1f7e:	7218      	strb	r0, [r3, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1f80:	7299      	strb	r1, [r3, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1f82:	7399      	strb	r1, [r3, #14]
	if (
    1f84:	2a00      	cmp	r2, #0
    1f86:	f000 81e3 	beq.w	2350 <CONFIG_FPROTECT_BLOCK_SIZE+0x1350>
	    !conn->llcp_enc.pause_tx &&
    1f8a:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
    1f8e:	0789      	lsls	r1, r1, #30
    1f90:	f100 81de 	bmi.w	2350 <CONFIG_FPROTECT_BLOCK_SIZE+0x1350>
	    !conn->llcp_phy.pause_tx &&
    1f94:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    1f98:	07cf      	lsls	r7, r1, #31
    1f9a:	f100 81d9 	bmi.w	2350 <CONFIG_FPROTECT_BLOCK_SIZE+0x1350>
		if (conn->tx_head == conn->tx_data) {
    1f9e:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    1fa2:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
    1fa4:	bf04      	itt	eq
    1fa6:	6811      	ldreq	r1, [r2, #0]
    1fa8:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1fac:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    1fb0:	2900      	cmp	r1, #0
    1fb2:	f000 830f 	beq.w	25d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x15d4>
	tx->next = conn->tx_ctrl_last->next;
    1fb6:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    1fba:	6811      	ldr	r1, [r2, #0]
    1fbc:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    1fbe:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    1fc0:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1fc4:	681a      	ldr	r2, [r3, #0]
    1fc6:	2a00      	cmp	r2, #0
    1fc8:	f47f af12 	bne.w	1df0 <CONFIG_FPROTECT_BLOCK_SIZE+0xdf0>
		conn->tx_data_last = tx;
    1fcc:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    1fd0:	e70e      	b.n	1df0 <CONFIG_FPROTECT_BLOCK_SIZE+0xdf0>
    1fd2:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    1fd6:	f002 0207 	and.w	r2, r2, #7
    1fda:	f003 0307 	and.w	r3, r3, #7
    1fde:	f7ff b874 	b.w	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    1fe2:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    1fe6:	f7ff b931 	b.w	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1fea:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    1fec:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    1fee:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    1ff0:	2702      	movs	r7, #2
    1ff2:	f7ff b901 	b.w	11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>
		if (!conn->tx_ctrl) {
    1ff6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1ffa:	2a00      	cmp	r2, #0
    1ffc:	f47f ac14 	bne.w	1828 <CONFIG_FPROTECT_BLOCK_SIZE+0x828>
			tx->next = conn->tx_head;
    2000:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2002:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2006:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    200a:	e415      	b.n	1838 <CONFIG_FPROTECT_BLOCK_SIZE+0x838>
		switch (conn->llcp_cu.state) {
    200c:	4966      	ldr	r1, [pc, #408]	; (21a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x11a8>)
    200e:	f7ff ba6e 	b.w	14ee <CONFIG_FPROTECT_BLOCK_SIZE+0x4ee>
		if (!conn->tx_ctrl) {
    2012:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2016:	2a00      	cmp	r2, #0
    2018:	f47f aedc 	bne.w	1dd4 <CONFIG_FPROTECT_BLOCK_SIZE+0xdd4>
			tx->next = conn->tx_head;
    201c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2020:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2024:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2028:	e6df      	b.n	1dea <CONFIG_FPROTECT_BLOCK_SIZE+0xdea>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    202a:	4598      	cmp	r8, r3
    202c:	f47f a84d 	bne.w	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2030:	2303      	movs	r3, #3
    2032:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2034:	4629      	mov	r1, r5
    2036:	f006 fef1 	bl	8e1c <ll_rx_put>
				rx = conn->llcp_rx;
    203a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    203e:	2d00      	cmp	r5, #0
    2040:	f000 8225 	beq.w	248e <CONFIG_FPROTECT_BLOCK_SIZE+0x148e>
    2044:	6828      	ldr	r0, [r5, #0]
    2046:	2800      	cmp	r0, #0
    2048:	f000 8221 	beq.w	248e <CONFIG_FPROTECT_BLOCK_SIZE+0x148e>
				conn->llcp_rx = rx->hdr.link->mem;
    204c:	6843      	ldr	r3, [r0, #4]
    204e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2052:	2303      	movs	r3, #3
    2054:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2056:	4629      	mov	r1, r5
    2058:	f006 fee0 	bl	8e1c <ll_rx_put>
			ll_rx_sched();
    205c:	f006 fee8 	bl	8e30 <ll_rx_sched>
			return;
    2060:	f7fe bde5 	b.w	c2e <ull_conn_llcp+0x2e>
		LL_ASSERT(rx && rx->hdr.link);
    2064:	4a4c      	ldr	r2, [pc, #304]	; (2198 <CONFIG_FPROTECT_BLOCK_SIZE+0x1198>)
    2066:	494d      	ldr	r1, [pc, #308]	; (219c <CONFIG_FPROTECT_BLOCK_SIZE+0x119c>)
    2068:	484d      	ldr	r0, [pc, #308]	; (21a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x11a0>)
    206a:	f640 5308 	movw	r3, #3336	; 0xd08
    206e:	f011 fe41 	bl	13cf4 <printk>
    2072:	4040      	eors	r0, r0
    2074:	f380 8811 	msr	BASEPRI, r0
    2078:	f04f 0003 	mov.w	r0, #3
    207c:	df02      	svc	2
    207e:	6838      	ldr	r0, [r7, #0]
    2080:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    2084:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    2088:	f7ff bb59 	b.w	173e <CONFIG_FPROTECT_BLOCK_SIZE+0x73e>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    208c:	4947      	ldr	r1, [pc, #284]	; (21ac <CONFIG_FPROTECT_BLOCK_SIZE+0x11ac>)
    208e:	f7ff ba2e 	b.w	14ee <CONFIG_FPROTECT_BLOCK_SIZE+0x4ee>
		LL_ASSERT(!retval);
    2092:	4a41      	ldr	r2, [pc, #260]	; (2198 <CONFIG_FPROTECT_BLOCK_SIZE+0x1198>)
    2094:	4946      	ldr	r1, [pc, #280]	; (21b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x11b0>)
    2096:	4842      	ldr	r0, [pc, #264]	; (21a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x11a0>)
    2098:	f640 0349 	movw	r3, #2121	; 0x849
    209c:	f011 fe2a 	bl	13cf4 <printk>
    20a0:	4040      	eors	r0, r0
    20a2:	f380 8811 	msr	BASEPRI, r0
    20a6:	f04f 0003 	mov.w	r0, #3
    20aa:	df02      	svc	2
    20ac:	f7ff ba6c 	b.w	1588 <CONFIG_FPROTECT_BLOCK_SIZE+0x588>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    20b0:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
    20b4:	f894 11a9 	ldrb.w	r1, [r4, #425]	; 0x1a9
    20b8:	4291      	cmp	r1, r2
    20ba:	f43e adb8 	beq.w	c2e <ull_conn_llcp+0x2e>
	switch (conn->llcp_phy.state) {
    20be:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    20c2:	f001 0003 	and.w	r0, r1, #3
    20c6:	2803      	cmp	r0, #3
    20c8:	f000 819d 	beq.w	2406 <CONFIG_FPROTECT_BLOCK_SIZE+0x1406>
    20cc:	2800      	cmp	r0, #0
    20ce:	f47e adae 	bne.w	c2e <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20d2:	4834      	ldr	r0, [pc, #208]	; (21a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x11a4>)
    20d4:	f002 fac2 	bl	465c <mem_acquire>
		if (!tx) {
    20d8:	4601      	mov	r1, r0
    20da:	2800      	cmp	r0, #0
    20dc:	f43f a9c9 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    20e0:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    20e4:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    20e8:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    20ec:	2001      	movs	r0, #1
    20ee:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    20f2:	f3c3 0082 	ubfx	r0, r3, #2, #3
    20f6:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    20fa:	f3c3 1042 	ubfx	r0, r3, #5, #3
    20fe:	f360 1206 	bfi	r2, r0, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2102:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2106:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2108:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_flags = conn->llcp_phy.flags;
    210c:	f367 02c3 	bfi	r2, r7, #3, #1
    2110:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2114:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2118:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    211c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2120:	2216      	movs	r2, #22
		pdu_ctrl_tx->len =
    2122:	2703      	movs	r7, #3
		pr->rx_phys = conn->llcp_phy.rx;
    2124:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2126:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2128:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
    212a:	f881 c008 	strb.w	ip, [r1, #8]
		pdu_ctrl_tx->len =
    212e:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2130:	2200      	movs	r2, #0
    2132:	4620      	mov	r0, r4
    2134:	f007 ff08 	bl	9f48 <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    2138:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    213c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    2140:	f7ff b997 	b.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
			if (!conn->llcp_length.cache.tx_octets) {
    2144:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2148:	2a00      	cmp	r2, #0
    214a:	f040 80c6 	bne.w	22da <CONFIG_FPROTECT_BLOCK_SIZE+0x12da>
				conn->llcp_length.ack = conn->llcp_length.req;
    214e:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2152:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2156:	f7ff bae9 	b.w	172c <CONFIG_FPROTECT_BLOCK_SIZE+0x72c>
			conn->llcp.phy_upd_ind.instant = event_counter +
    215a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    215c:	441d      	add	r5, r3
							 lll->latency +
    215e:	1dab      	adds	r3, r5, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    2160:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    2164:	f006 fe88 	bl	8e78 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2168:	f8d8 3000 	ldr.w	r3, [r8]
    216c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2170:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2172:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    2176:	f006 fe7f 	bl	8e78 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    217a:	6803      	ldr	r3, [r0, #0]
    217c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2180:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2182:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2186:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    218a:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    218e:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2192:	095b      	lsrs	r3, r3, #5
    2194:	f7ff ba4a 	b.w	162c <CONFIG_FPROTECT_BLOCK_SIZE+0x62c>
    2198:	0001570c 	.word	0x0001570c
    219c:	00015890 	.word	0x00015890
    21a0:	0001525c 	.word	0x0001525c
    21a4:	200016d0 	.word	0x200016d0
    21a8:	0000daf5 	.word	0x0000daf5
    21ac:	0000daf1 	.word	0x0000daf1
    21b0:	000154f8 	.word	0x000154f8
		LL_ASSERT(0);
    21b4:	f640 3327 	movw	r3, #2855	; 0xb27
		LL_ASSERT(0);
    21b8:	4abc      	ldr	r2, [pc, #752]	; (24ac <CONFIG_FPROTECT_BLOCK_SIZE+0x14ac>)
    21ba:	49bd      	ldr	r1, [pc, #756]	; (24b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x14b0>)
    21bc:	e4d2      	b.n	1b64 <CONFIG_FPROTECT_BLOCK_SIZE+0xb64>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    21be:	48bd      	ldr	r0, [pc, #756]	; (24b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x14b4>)
    21c0:	f002 fa4c 	bl	465c <mem_acquire>
		if (tx) {
    21c4:	2800      	cmp	r0, #0
    21c6:	f43f a954 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
			conn->llcp_version.ack--;
    21ca:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
			conn->llcp_version.tx = 1U;
    21ce:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
			conn->llcp_version.ack--;
    21d2:	3a01      	subs	r2, #1
    21d4:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    21d8:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    21da:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    21de:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    21e0:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    21e4:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    21e8:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    21ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    21ee:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    21f0:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    21f2:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    21f6:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    21f8:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    21fa:	7242      	strb	r2, [r0, #9]
    21fc:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    21fe:	f04f 32ff 	mov.w	r2, #4294967295
			pdu->llctrl.opcode =
    2202:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    2204:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2206:	72c2      	strb	r2, [r0, #11]
    2208:	7302      	strb	r2, [r0, #12]
	if (
    220a:	2b00      	cmp	r3, #0
    220c:	d07e      	beq.n	230c <CONFIG_FPROTECT_BLOCK_SIZE+0x130c>
	    !conn->llcp_enc.pause_tx &&
    220e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2212:	0791      	lsls	r1, r2, #30
    2214:	d47a      	bmi.n	230c <CONFIG_FPROTECT_BLOCK_SIZE+0x130c>
	    !conn->llcp_phy.pause_tx &&
    2216:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    221a:	07d2      	lsls	r2, r2, #31
    221c:	d476      	bmi.n	230c <CONFIG_FPROTECT_BLOCK_SIZE+0x130c>
		if (conn->tx_head == conn->tx_data) {
    221e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2222:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2224:	bf04      	itt	eq
    2226:	681a      	ldreq	r2, [r3, #0]
    2228:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    222c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2230:	2a00      	cmp	r2, #0
    2232:	f000 81c9 	beq.w	25c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x15c8>
	tx->next = conn->tx_ctrl_last->next;
    2236:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    223a:	681a      	ldr	r2, [r3, #0]
    223c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    223e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2240:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2244:	6803      	ldr	r3, [r0, #0]
    2246:	2b00      	cmp	r3, #0
    2248:	f47f add2 	bne.w	1df0 <CONFIG_FPROTECT_BLOCK_SIZE+0xdf0>
		conn->tx_data_last = tx;
    224c:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    2250:	e5ce      	b.n	1df0 <CONFIG_FPROTECT_BLOCK_SIZE+0xdf0>
		conn->tx_data_last = tx;
    2252:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2256:	f7ff baf2 	b.w	183e <CONFIG_FPROTECT_BLOCK_SIZE+0x83e>
				(void)ll_pdu_rx_alloc();
    225a:	f006 fe0d 	bl	8e78 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    225e:	230e      	movs	r3, #14
				rx->hdr.handle = lll->handle;
    2260:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    2262:	f888 7020 	strb.w	r7, [r8, #32]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2266:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    226a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    226e:	f8d8 0000 	ldr.w	r0, [r8]
				rx->hdr.handle = lll->handle;
    2272:	f8a8 2006 	strh.w	r2, [r8, #6]
				upd->tx = lll->phy_tx;
    2276:	f3c3 0302 	ubfx	r3, r3, #0, #3
    227a:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
				upd->rx = lll->phy_rx;
    227e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2282:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2286:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
				ll_rx_put(rx->hdr.link, rx);
    228a:	4641      	mov	r1, r8
    228c:	f006 fdc6 	bl	8e1c <ll_rx_put>
				ll_rx_sched();
    2290:	f006 fdce 	bl	8e30 <ll_rx_sched>
    2294:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2298:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    229c:	f3c3 0782 	ubfx	r7, r3, #2, #3
    22a0:	095b      	lsrs	r3, r3, #5
    22a2:	f7ff b9c3 	b.w	162c <CONFIG_FPROTECT_BLOCK_SIZE+0x62c>
	switch (conn->llcp_conn_param.state) {
    22a6:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    22aa:	f003 0307 	and.w	r3, r3, #7
    22ae:	2b05      	cmp	r3, #5
    22b0:	f200 819d 	bhi.w	25ee <CONFIG_FPROTECT_BLOCK_SIZE+0x15ee>
    22b4:	a201      	add	r2, pc, #4	; (adr r2, 22bc <CONFIG_FPROTECT_BLOCK_SIZE+0x12bc>)
    22b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    22ba:	bf00      	nop
    22bc:	00001a99 	.word	0x00001a99
    22c0:	000019f9 	.word	0x000019f9
    22c4:	000019a1 	.word	0x000019a1
    22c8:	00000c2f 	.word	0x00000c2f
    22cc:	00000c2f 	.word	0x00000c2f
    22d0:	00000c2f 	.word	0x00000c2f
		conn->tx_data_last = tx;
    22d4:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    22d8:	e58a      	b.n	1df0 <CONFIG_FPROTECT_BLOCK_SIZE+0xdf0>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    22da:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    22de:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    22e2:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    22e6:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    22e8:	f363 0002 	bfi	r0, r3, #0, #3
    22ec:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    22f0:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    22f4:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    22f8:	f7ff ba18 	b.w	172c <CONFIG_FPROTECT_BLOCK_SIZE+0x72c>
			tx->next = conn->tx_head->next;
    22fc:	681a      	ldr	r2, [r3, #0]
    22fe:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2300:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2302:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2304:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2308:	f7ff b804 	b.w	1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>
		if (!conn->tx_ctrl) {
    230c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2310:	2a00      	cmp	r2, #0
    2312:	d190      	bne.n	2236 <CONFIG_FPROTECT_BLOCK_SIZE+0x1236>
			tx->next = conn->tx_head;
    2314:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2316:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    231a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    231e:	e791      	b.n	2244 <CONFIG_FPROTECT_BLOCK_SIZE+0x1244>
			tx->next = conn->tx_head->next;
    2320:	681a      	ldr	r2, [r3, #0]
    2322:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2324:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2326:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2328:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    232c:	f7fe bf8b 	b.w	1246 <CONFIG_FPROTECT_BLOCK_SIZE+0x246>
			tx->next = conn->tx_head->next;
    2330:	681a      	ldr	r2, [r3, #0]
    2332:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2334:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2336:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2338:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    233c:	f7ff b9a1 	b.w	1682 <CONFIG_FPROTECT_BLOCK_SIZE+0x682>
			tx->next = conn->tx_head->next;
    2340:	681a      	ldr	r2, [r3, #0]
    2342:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2344:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2346:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2348:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    234c:	f7ff b93f 	b.w	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
		if (!conn->tx_ctrl) {
    2350:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    2354:	2900      	cmp	r1, #0
    2356:	f47f ae2e 	bne.w	1fb6 <CONFIG_FPROTECT_BLOCK_SIZE+0xfb6>
			tx->next = conn->tx_head;
    235a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
    235c:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2360:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
    2364:	e62e      	b.n	1fc4 <CONFIG_FPROTECT_BLOCK_SIZE+0xfc4>
			tx->next = conn->tx_head->next;
    2366:	681a      	ldr	r2, [r3, #0]
    2368:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    236a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    236c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    236e:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2372:	f7ff ba61 	b.w	1838 <CONFIG_FPROTECT_BLOCK_SIZE+0x838>
		LL_ASSERT(rx && rx->hdr.link);
    2376:	4a4d      	ldr	r2, [pc, #308]	; (24ac <CONFIG_FPROTECT_BLOCK_SIZE+0x14ac>)
    2378:	494f      	ldr	r1, [pc, #316]	; (24b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x14b8>)
    237a:	4850      	ldr	r0, [pc, #320]	; (24bc <CONFIG_FPROTECT_BLOCK_SIZE+0x14bc>)
    237c:	f640 5308 	movw	r3, #3336	; 0xd08
    2380:	f011 fcb8 	bl	13cf4 <printk>
    2384:	4040      	eors	r0, r0
    2386:	f380 8811 	msr	BASEPRI, r0
    238a:	f04f 0003 	mov.w	r0, #3
    238e:	df02      	svc	2
    2390:	6838      	ldr	r0, [r7, #0]
    2392:	e5a1      	b.n	1ed8 <CONFIG_FPROTECT_BLOCK_SIZE+0xed8>
			tx->next = conn->tx_head->next;
    2394:	681a      	ldr	r2, [r3, #0]
    2396:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    239a:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    239e:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    23a2:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    23a6:	e520      	b.n	1dea <CONFIG_FPROTECT_BLOCK_SIZE+0xdea>
			if (!conn->llcp_length.cache.tx_octets) {
    23a8:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    23ac:	2a00      	cmp	r2, #0
    23ae:	f040 80d2 	bne.w	2556 <CONFIG_FPROTECT_BLOCK_SIZE+0x1556>
				conn->llcp_length.ack = conn->llcp_length.req;
    23b2:	f884 7199 	strb.w	r7, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    23b6:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    23ba:	e584      	b.n	1ec6 <CONFIG_FPROTECT_BLOCK_SIZE+0xec6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    23bc:	483d      	ldr	r0, [pc, #244]	; (24b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x14b4>)
    23be:	f002 f94d 	bl	465c <mem_acquire>
		if (!tx) {
    23c2:	4601      	mov	r1, r0
    23c4:	2800      	cmp	r0, #0
    23c6:	f43f a854 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    23ca:	7903      	ldrb	r3, [r0, #4]
    23cc:	f043 0303 	orr.w	r3, r3, #3
    23d0:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    23d2:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    23d4:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    23d6:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    23d8:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    23da:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    23dc:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    23de:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    23e2:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    23e4:	4620      	mov	r0, r4
    23e6:	2200      	movs	r2, #0
    23e8:	f007 fdae 	bl	9f48 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    23ec:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    23f0:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		conn_upd_curr = NULL;
    23f4:	2300      	movs	r3, #0
    23f6:	f8c8 3000 	str.w	r3, [r8]
		return;
    23fa:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    23fe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    2402:	f7fe bc0f 	b.w	c24 <ull_conn_llcp+0x24>
		if (conn->llcp_phy.tx & BIT(1)) {
    2406:	0708      	lsls	r0, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    2408:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    240c:	f3c1 0282 	ubfx	r2, r1, #2, #3
    2410:	f140 80bc 	bpl.w	258c <CONFIG_FPROTECT_BLOCK_SIZE+0x158c>
			conn->llcp_phy.tx = BIT(1);
    2414:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2418:	2102      	movs	r1, #2
    241a:	f361 0284 	bfi	r2, r1, #2, #3
    241e:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    2422:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2426:	0657      	lsls	r7, r2, #25
    2428:	ea4f 1152 	mov.w	r1, r2, lsr #5
    242c:	f140 80a6 	bpl.w	257c <CONFIG_FPROTECT_BLOCK_SIZE+0x157c>
			conn->llcp_phy.rx = BIT(1);
    2430:	2102      	movs	r1, #2
    2432:	f361 1247 	bfi	r2, r1, #5, #3
    2436:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    243a:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    243e:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2442:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2446:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    244a:	f3c1 0782 	ubfx	r7, r1, #2, #3
    244e:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2452:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2456:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    245a:	45bc      	cmp	ip, r7
    245c:	bf08      	it	eq
    245e:	2700      	moveq	r7, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2460:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2462:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    2466:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    246a:	ea4f 1151 	mov.w	r1, r1, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    246e:	bf08      	it	eq
    2470:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2472:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
		conn->llcp_ack -= 2U;
    2476:	3b02      	subs	r3, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    2478:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    247c:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
    247e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    2482:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    2486:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    248a:	f7fe bbf9 	b.w	c80 <ull_conn_llcp+0x80>
				LL_ASSERT(rx && rx->hdr.link);
    248e:	4a07      	ldr	r2, [pc, #28]	; (24ac <CONFIG_FPROTECT_BLOCK_SIZE+0x14ac>)
    2490:	4909      	ldr	r1, [pc, #36]	; (24b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x14b8>)
    2492:	480a      	ldr	r0, [pc, #40]	; (24bc <CONFIG_FPROTECT_BLOCK_SIZE+0x14bc>)
    2494:	f640 6347 	movw	r3, #3655	; 0xe47
    2498:	f011 fc2c 	bl	13cf4 <printk>
    249c:	4040      	eors	r0, r0
    249e:	f380 8811 	msr	BASEPRI, r0
    24a2:	f04f 0003 	mov.w	r0, #3
    24a6:	df02      	svc	2
    24a8:	6828      	ldr	r0, [r5, #0]
    24aa:	e5cf      	b.n	204c <CONFIG_FPROTECT_BLOCK_SIZE+0x104c>
    24ac:	0001570c 	.word	0x0001570c
    24b0:	000152dc 	.word	0x000152dc
    24b4:	200016d0 	.word	0x200016d0
    24b8:	00015890 	.word	0x00015890
    24bc:	0001525c 	.word	0x0001525c
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24c0:	485d      	ldr	r0, [pc, #372]	; (2638 <CONFIG_FPROTECT_BLOCK_SIZE+0x1638>)
    24c2:	f002 f8cb 	bl	465c <mem_acquire>
    24c6:	900b      	str	r0, [sp, #44]	; 0x2c
	if (!tx) {
    24c8:	4601      	mov	r1, r0
    24ca:	2800      	cmp	r0, #0
    24cc:	f43e afd1 	beq.w	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    24d0:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    24d2:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    24d4:	f043 0303 	orr.w	r3, r3, #3
    24d8:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    24da:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    24dc:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    24e0:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    24e4:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    24e8:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    24ea:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    24ee:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    24f0:	2310      	movs	r3, #16
	rsp->latency =
    24f2:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    24f4:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    24f6:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    24f8:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    24fc:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    24fe:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2502:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2506:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    250a:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    250e:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2512:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2516:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    251a:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    251e:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2522:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2526:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    252a:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    252e:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2532:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2536:	4620      	mov	r0, r4
    2538:	463a      	mov	r2, r7
    253a:	f007 fd05 	bl	9f48 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    253e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2542:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    2546:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    254a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    254e:	f8c8 7000 	str.w	r7, [r8]
    2552:	f7fe bb67 	b.w	c24 <ull_conn_llcp+0x24>
				conn->llcp_length.cache.tx_octets = 0;
    2556:	2000      	movs	r0, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2558:	460b      	mov	r3, r1
    255a:	f360 0302 	bfi	r3, r0, #0, #3
				conn->llcp_length.tx_octets =
    255e:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    2562:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2566:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    256a:	f8a4 01a4 	strh.w	r0, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    256e:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2572:	e4a8      	b.n	1ec6 <CONFIG_FPROTECT_BLOCK_SIZE+0xec6>
				conn->llcp_conn_param.interval_max;
    2574:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    2578:	f7ff ba61 	b.w	1a3e <CONFIG_FPROTECT_BLOCK_SIZE+0xa3e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    257c:	07c8      	lsls	r0, r1, #31
    257e:	d50f      	bpl.n	25a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x15a0>
			conn->llcp_phy.rx = BIT(0);
    2580:	2101      	movs	r1, #1
    2582:	f361 1247 	bfi	r2, r1, #5, #3
    2586:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    258a:	e756      	b.n	243a <CONFIG_FPROTECT_BLOCK_SIZE+0x143a>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    258c:	07d1      	lsls	r1, r2, #31
    258e:	d510      	bpl.n	25b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x15b2>
			conn->llcp_phy.tx = BIT(0);
    2590:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2594:	2101      	movs	r1, #1
    2596:	f361 0284 	bfi	r2, r1, #2, #3
    259a:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    259e:	e740      	b.n	2422 <CONFIG_FPROTECT_BLOCK_SIZE+0x1422>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    25a0:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    25a4:	bf18      	it	ne
    25a6:	2104      	movne	r1, #4
			conn->llcp_phy.rx = 0U;
    25a8:	f361 1247 	bfi	r2, r1, #5, #3
    25ac:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    25b0:	e743      	b.n	243a <CONFIG_FPROTECT_BLOCK_SIZE+0x143a>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    25b2:	f012 0204 	ands.w	r2, r2, #4
    25b6:	d013      	beq.n	25e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x15e0>
			conn->llcp_phy.tx = BIT(2);
    25b8:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    25bc:	2104      	movs	r1, #4
    25be:	f361 0284 	bfi	r2, r1, #2, #3
    25c2:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    25c6:	e72c      	b.n	2422 <CONFIG_FPROTECT_BLOCK_SIZE+0x1422>
			tx->next = conn->tx_head->next;
    25c8:	681a      	ldr	r2, [r3, #0]
    25ca:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    25cc:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    25ce:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    25d2:	e637      	b.n	2244 <CONFIG_FPROTECT_BLOCK_SIZE+0x1244>
			tx->next = conn->tx_head->next;
    25d4:	6811      	ldr	r1, [r2, #0]
    25d6:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
    25d8:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
    25da:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
    25de:	e4f1      	b.n	1fc4 <CONFIG_FPROTECT_BLOCK_SIZE+0xfc4>
			conn->llcp_phy.tx = 0U;
    25e0:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    25e4:	f362 0184 	bfi	r1, r2, #2, #3
    25e8:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
    25ec:	e719      	b.n	2422 <CONFIG_FPROTECT_BLOCK_SIZE+0x1422>
		LL_ASSERT(0);
    25ee:	4a13      	ldr	r2, [pc, #76]	; (263c <CONFIG_FPROTECT_BLOCK_SIZE+0x163c>)
    25f0:	4913      	ldr	r1, [pc, #76]	; (2640 <CONFIG_FPROTECT_BLOCK_SIZE+0x1640>)
    25f2:	4814      	ldr	r0, [pc, #80]	; (2644 <CONFIG_FPROTECT_BLOCK_SIZE+0x1644>)
    25f4:	f640 4334 	movw	r3, #3124	; 0xc34
    25f8:	f011 fb7c 	bl	13cf4 <printk>
    25fc:	4040      	eors	r0, r0
    25fe:	f380 8811 	msr	BASEPRI, r0
    2602:	f04f 0003 	mov.w	r0, #3
    2606:	df02      	svc	2
		break;
    2608:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    260c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    2610:	f7fe bb08 	b.w	c24 <ull_conn_llcp+0x24>
		LL_ASSERT(0);
    2614:	4a09      	ldr	r2, [pc, #36]	; (263c <CONFIG_FPROTECT_BLOCK_SIZE+0x163c>)
    2616:	490a      	ldr	r1, [pc, #40]	; (2640 <CONFIG_FPROTECT_BLOCK_SIZE+0x1640>)
    2618:	480a      	ldr	r0, [pc, #40]	; (2644 <CONFIG_FPROTECT_BLOCK_SIZE+0x1644>)
    261a:	f44f 6353 	mov.w	r3, #3376	; 0xd30
    261e:	f011 fb69 	bl	13cf4 <printk>
    2622:	4040      	eors	r0, r0
    2624:	f380 8811 	msr	BASEPRI, r0
    2628:	f04f 0003 	mov.w	r0, #3
    262c:	df02      	svc	2
		break;
    262e:	f7fe bb27 	b.w	c80 <ull_conn_llcp+0x80>
		LL_ASSERT(0);
    2632:	f44f 6353 	mov.w	r3, #3376	; 0xd30
    2636:	e5bf      	b.n	21b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x11b8>
    2638:	200016d0 	.word	0x200016d0
    263c:	0001570c 	.word	0x0001570c
    2640:	000152dc 	.word	0x000152dc
    2644:	0001525c 	.word	0x0001525c

00002648 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(u32_t status, void *param);
static void ticker_op_cb(u32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    264c:	4616      	mov	r6, r2
	u8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    264e:	461a      	mov	r2, r3
	((struct lll_adv *)ftr->param)->conn = NULL;
    2650:	6837      	ldr	r7, [r6, #0]
	conn = lll->hdr.parent;
    2652:	f852 5b0c 	ldr.w	r5, [r2], #12
{
    2656:	b093      	sub	sp, #76	; 0x4c
    2658:	4689      	mov	r9, r1
	((struct lll_adv *)ftr->param)->conn = NULL;
    265a:	2100      	movs	r1, #0
{
    265c:	461c      	mov	r4, r3
	((struct lll_adv *)ftr->param)->conn = NULL;
    265e:	60b9      	str	r1, [r7, #8]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2660:	f103 0a08 	add.w	sl, r3, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2664:	f109 0132 	add.w	r1, r9, #50	; 0x32
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2668:	683b      	ldr	r3, [r7, #0]
    266a:	930a      	str	r3, [sp, #40]	; 0x28
{
    266c:	4680      	mov	r8, r0
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    266e:	4610      	mov	r0, r2
    2670:	2203      	movs	r2, #3
    2672:	f011 fe52 	bl	1431a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2676:	f104 071c 	add.w	r7, r4, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    267a:	f109 012e 	add.w	r1, r9, #46	; 0x2e
    267e:	2204      	movs	r2, #4
    2680:	4650      	mov	r0, sl
    2682:	f011 fe4a 	bl	1431a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2686:	2205      	movs	r2, #5
    2688:	f109 013e 	add.w	r1, r9, #62	; 0x3e
    268c:	4638      	mov	r0, r7
    268e:	f011 fe44 	bl	1431a <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2692:	4638      	mov	r0, r7
    2694:	2105      	movs	r1, #5
    2696:	f002 f9ab 	bl	49f0 <util_ones_count_get>
    269a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    269e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    26a2:	f360 0205 	bfi	r2, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    26a6:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    26a8:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    26ac:	d90a      	bls.n	26c4 <ull_slave_setup+0x7c>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26ae:	f899 2043 	ldrb.w	r2, [r9, #67]	; 0x43
    26b2:	f002 011f 	and.w	r1, r2, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    26b6:	3905      	subs	r1, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26b8:	f3c2 0004 	ubfx	r0, r2, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    26bc:	290b      	cmp	r1, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26be:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    26c2:	d902      	bls.n	26ca <ull_slave_setup+0x82>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    26c4:	b013      	add	sp, #76	; 0x4c
    26c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    26ca:	f8b9 7038 	ldrh.w	r7, [r9, #56]	; 0x38
	lll->interval = interval;
    26ce:	8267      	strh	r7, [r4, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    26d0:	f899 c03b 	ldrb.w	ip, [r9, #59]	; 0x3b
    26d4:	f899 103a 	ldrb.w	r1, [r9, #58]	; 0x3a
	conn->slave.sca = pdu_adv->connect_ind.sca;
    26d8:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    26dc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    26e0:	0952      	lsrs	r2, r2, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    26e2:	82a1      	strh	r1, [r4, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    26e4:	f362 0084 	bfi	r0, r2, #2, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    26e8:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
	conn->slave.sca = pdu_adv->connect_ind.sca;
    26ec:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    26f0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		(((lll_conn_ppm_local_get() +
    26f4:	f00d feca 	bl	1048c <lll_conn_ppm_local_get>
    26f8:	4602      	mov	r2, r0
		   lll_conn_ppm_get(conn->slave.sca)) *
    26fa:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
		(((lll_conn_ppm_local_get() +
    26fe:	920b      	str	r2, [sp, #44]	; 0x2c
		   lll_conn_ppm_get(conn->slave.sca)) *
    2700:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2704:	f00d fec4 	bl	10490 <lll_conn_ppm_get>
		(((lll_conn_ppm_local_get() +
    2708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    270a:	4bc9      	ldr	r3, [pc, #804]	; (2a30 <ull_slave_setup+0x3e8>)
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    270c:	f899 c035 	ldrb.w	ip, [r9, #53]	; 0x35
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2710:	8aa1      	ldrh	r1, [r4, #20]
	conn_interval_us = interval * 1250U;
    2712:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2716:	b2bf      	uxth	r7, r7
	conn_interval_us = interval * 1250U;
    2718:	fb0b f707 	mul.w	r7, fp, r7
		(((lll_conn_ppm_local_get() +
    271c:	4410      	add	r0, r2
		   lll_conn_ppm_get(conn->slave.sca)) *
    271e:	fb07 f000 	mul.w	r0, r7, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2722:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2726:	f200 203f 	addw	r0, r0, #575	; 0x23f
    272a:	fba3 3000 	umull	r3, r0, r3, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    272e:	ea4f 0e57 	mov.w	lr, r7, lsr #1
    2732:	f1ae 0396 	sub.w	r3, lr, #150	; 0x96
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2736:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2738:	fb0b fb0c 	mul.w	fp, fp, ip
	lll->slave.window_widening_periodic_us =
    273c:	62a0      	str	r0, [r4, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    273e:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2742:	62e3      	str	r3, [r4, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2744:	f8b9 303c 	ldrh.w	r3, [r9, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2748:	4aba      	ldr	r2, [pc, #744]	; (2a34 <ull_slave_setup+0x3ec>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    274a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    274e:	4618      	mov	r0, r3
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2750:	f242 7e10 	movw	lr, #10000	; 0x2710
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2754:	b280      	uxth	r0, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2756:	fb0e 7000 	mla	r0, lr, r0, r7
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    275a:	4bb7      	ldr	r3, [pc, #732]	; (2a38 <ull_slave_setup+0x3f0>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    275c:	443a      	add	r2, r7
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    275e:	f101 0e06 	add.w	lr, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2762:	3801      	subs	r0, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2764:	fbb2 f2f7 	udiv	r2, r2, r7
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2768:	fbb0 f0f7 	udiv	r0, r0, r7
    276c:	f8a5 00c6 	strh.w	r0, [r5, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2770:	b290      	uxth	r0, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2772:	4570      	cmp	r0, lr
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2774:	443b      	add	r3, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2776:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    277a:	fbb3 fcf7 	udiv	ip, r3, r7
    277e:	f8a5 c0ca 	strh.w	ip, [r5, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2782:	dd02      	ble.n	278a <ull_slave_setup+0x142>
			     (conn->apto_reload - (lll->latency + 6)) :
    2784:	1a40      	subs	r0, r0, r1
    2786:	3806      	subs	r0, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2788:	b280      	uxth	r0, r0
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    278a:	4651      	mov	r1, sl
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    278c:	f8a5 00ce 	strh.w	r0, [r5, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2790:	2204      	movs	r2, #4
    2792:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    2796:	f011 fdc0 	bl	1431a <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    279a:	f899 c020 	ldrb.w	ip, [r9, #32]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    279e:	f109 0b22 	add.w	fp, r9, #34	; 0x22
	peer_addr_type = pdu_adv->tx_addr;
    27a2:	f3cc 1380 	ubfx	r3, ip, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    27a6:	4659      	mov	r1, fp
    27a8:	2206      	movs	r2, #6
    27aa:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    27ac:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    27b0:	f011 fdb3 	bl	1431a <memcpy>
	chan_sel = pdu_adv->chan_sel;
    27b4:	f899 2020 	ldrb.w	r2, [r9, #32]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    27b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	cc->status = 0U;
    27ba:	f44f 7180 	mov.w	r1, #256	; 0x100
    27be:	f8a9 1020 	strh.w	r1, [r9, #32]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    27c2:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
	u8_t rl_idx = ftr->rl_idx;
    27c6:	f896 a016 	ldrb.w	sl, [r6, #22]
	chan_sel = pdu_adv->chan_sel;
    27ca:	f3c2 1340 	ubfx	r3, r2, #5, #1
    27ce:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    27d2:	930b      	str	r3, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    27d4:	f00c f88a 	bl	e8ec <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    27d8:	2206      	movs	r2, #6
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    27da:	4601      	mov	r1, r0
    27dc:	2800      	cmp	r0, #0
    27de:	f040 80f2 	bne.w	29c6 <ull_slave_setup+0x37e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    27e2:	f109 002f 	add.w	r0, r9, #47	; 0x2f
    27e6:	f011 fdc3 	bl	14370 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    27ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    27ee:	f000 80f4 	beq.w	29da <ull_slave_setup+0x392>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    27f2:	4659      	mov	r1, fp
    27f4:	4650      	mov	r0, sl
    27f6:	f109 0223 	add.w	r2, r9, #35	; 0x23
    27fa:	f00b faab 	bl	dd54 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    27fe:	f899 2022 	ldrb.w	r2, [r9, #34]	; 0x22
    2802:	3202      	adds	r2, #2
    2804:	f889 2022 	strb.w	r2, [r9, #34]	; 0x22
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2808:	a910      	add	r1, sp, #64	; 0x40
    280a:	2206      	movs	r2, #6
    280c:	f109 0029 	add.w	r0, r9, #41	; 0x29
    2810:	f011 fd83 	bl	1431a <memcpy>
	cc->sca = conn->slave.sca;
    2814:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
	cc->interval = lll->interval;
    2818:	8a60      	ldrh	r0, [r4, #18]
	cc->latency = lll->latency;
    281a:	8aa1      	ldrh	r1, [r4, #20]
	cc->timeout = timeout;
    281c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    2820:	f8a9 303a 	strh.w	r3, [r9, #58]	; 0x3a
	cc->sca = conn->slave.sca;
    2824:	f3c2 0282 	ubfx	r2, r2, #2, #3
	cc->interval = lll->interval;
    2828:	f8a9 0036 	strh.w	r0, [r9, #54]	; 0x36
	cc->sca = conn->slave.sca;
    282c:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
	cc->latency = lll->latency;
    2830:	f8a9 1038 	strh.w	r1, [r9, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    2834:	4628      	mov	r0, r5
    2836:	f007 fed3 	bl	a5e0 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    283a:	4649      	mov	r1, r9
	lll->handle = ll_conn_handle_get(conn);
    283c:	8220      	strh	r0, [r4, #16]
	rx->handle = lll->handle;
    283e:	f8a9 0006 	strh.w	r0, [r9, #6]
		ll_rx_put(link, rx);
    2842:	4640      	mov	r0, r8
		rx_csa = (void *)ftr->extra;
    2844:	f8d6 8004 	ldr.w	r8, [r6, #4]
		ll_rx_put(link, rx);
    2848:	f006 fae8 	bl	8e1c <ll_rx_put>
		rx->handle = lll->handle;
    284c:	8a23      	ldrh	r3, [r4, #16]
    284e:	f8a8 3006 	strh.w	r3, [r8, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2852:	230d      	movs	r3, #13
    2854:	f888 3004 	strb.w	r3, [r8, #4]
		if (chan_sel) {
    2858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    285a:	f8d8 0000 	ldr.w	r0, [r8]
		if (chan_sel) {
    285e:	2b00      	cmp	r3, #0
    2860:	f000 80cc 	beq.w	29fc <ull_slave_setup+0x3b4>
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2864:	f894 e009 	ldrb.w	lr, [r4, #9]
				      lll->access_addr[0];
    2868:	7a23      	ldrb	r3, [r4, #8]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    286a:	f894 c00b 	ldrb.w	ip, [r4, #11]
				      lll->access_addr[2];
    286e:	7aa1      	ldrb	r1, [r4, #10]
			lll->data_chan_sel = 1;
    2870:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2874:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2878:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    287c:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    287e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    2882:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    2884:	8463      	strh	r3, [r4, #34]	; 0x22
			lll->data_chan_sel = 1;
    2886:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
			cs->csa = 0x01;
    288a:	f888 1020 	strb.w	r1, [r8, #32]
	ll_rx_put(link, rx);
    288e:	4641      	mov	r1, r8
    2890:	f006 fac4 	bl	8e1c <ll_rx_put>
	ll_rx_sched();
    2894:	f006 facc 	bl	8e30 <ll_rx_sched>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2898:	f8d6 8010 	ldr.w	r8, [r6, #16]
    289c:	4a67      	ldr	r2, [pc, #412]	; (2a3c <ull_slave_setup+0x3f4>)
	conn->evt.ticks_active_to_start = 0U;
    289e:	f04f 0b00 	mov.w	fp, #0
	conn->evt.ticks_xtal_to_start =
    28a2:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28a4:	f208 4052 	addw	r0, r8, #1106	; 0x452
    28a8:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    28ac:	602b      	str	r3, [r5, #0]
	conn->evt.ticks_preempt_to_start =
    28ae:	e9c5 bb01 	strd	fp, fp, [r5, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28b2:	a35d      	add	r3, pc, #372	; (adr r3, 2a28 <ull_slave_setup+0x3e0>)
    28b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    28b8:	f7fd fc12 	bl	e0 <__aeabi_uldivmod>
    28bc:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    28be:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    28c2:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    28c4:	f5a3 7aae 	sub.w	sl, r3, #348	; 0x15c
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    28cc:	f240 41e2 	movw	r1, #1250	; 0x4e2
    28d0:	ebaa 0c08 	sub.w	ip, sl, r8
	conn->evt.ticks_slot =
    28d4:	60e8      	str	r0, [r5, #12]
	conn_offset_us += ((u64_t)win_offset + 1) * 1250U;
    28d6:	fb01 1a02 	mla	sl, r1, r2, r1
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    28da:	2001      	movs	r0, #1
    28dc:	465a      	mov	r2, fp
    28de:	2102      	movs	r1, #2
	conn_offset_us -= ftr->us_radio_rdy;
    28e0:	44e2      	add	sl, ip
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    28e2:	1b3f      	subs	r7, r7, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    28e4:	f001 ff5e 	bl	47a4 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    28e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    28ea:	4620      	mov	r0, r4
    28ec:	f007 f8d8 	bl	9aa0 <ull_adv_handle_get>
    28f0:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    28f2:	4b53      	ldr	r3, [pc, #332]	; (2a40 <ull_slave_setup+0x3f8>)
    28f4:	9400      	str	r4, [sp, #0]
    28f6:	b2d2      	uxtb	r2, r2
    28f8:	4658      	mov	r0, fp
    28fa:	2101      	movs	r1, #1
    28fc:	f003 f9f2 	bl	5ce4 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(u32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2900:	2801      	cmp	r0, #1
    2902:	f000 8088 	beq.w	2a16 <ull_slave_setup+0x3ce>
	if (adv->lll.is_hdcd) {
    2906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    290c:	07db      	lsls	r3, r3, #31
    290e:	d47a      	bmi.n	2a06 <ull_slave_setup+0x3be>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2910:	4628      	mov	r0, r5
    2912:	f007 fe65 	bl	a5e0 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2916:	f8df b124 	ldr.w	fp, [pc, #292]	; 2a3c <ull_slave_setup+0x3f4>
    291a:	fba7 890b 	umull	r8, r9, r7, fp
    291e:	a342      	add	r3, pc, #264	; (adr r3, 2a28 <ull_slave_setup+0x3e0>)
    2920:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2924:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2926:	4649      	mov	r1, r9
    2928:	4640      	mov	r0, r8
    292a:	f7fd fbd9 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    292e:	4a45      	ldr	r2, [pc, #276]	; (2a44 <ull_slave_setup+0x3fc>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2930:	9506      	str	r5, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2932:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    2936:	fba7 2302 	umull	r2, r3, r7, r2
    293a:	2107      	movs	r1, #7
    293c:	fb01 3307 	mla	r3, r1, r7, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2940:	f240 1121 	movw	r1, #289	; 0x121
    2944:	68b6      	ldr	r6, [r6, #8]
    2946:	9108      	str	r1, [sp, #32]
    2948:	493f      	ldr	r1, [pc, #252]	; (2a48 <ull_slave_setup+0x400>)
    294a:	9107      	str	r1, [sp, #28]
    294c:	493f      	ldr	r1, [pc, #252]	; (2a4c <ull_slave_setup+0x404>)
    294e:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2950:	ebb8 0002 	subs.w	r0, r8, r2
    2954:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2958:	68eb      	ldr	r3, [r5, #12]
    295a:	9304      	str	r3, [sp, #16]
    295c:	2500      	movs	r5, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    295e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2962:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2964:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2966:	f7fd fbbb 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    296a:	a32f      	add	r3, pc, #188	; (adr r3, 2a28 <ull_slave_setup+0x3e0>)
    296c:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2970:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2972:	fbaa 010b 	umull	r0, r1, sl, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2976:	e9cd 7c01 	strd	r7, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    297a:	f7fd fbb1 	bl	e0 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    297e:	3405      	adds	r4, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2980:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2984:	b2e4      	uxtb	r4, r4
    2986:	3e31      	subs	r6, #49	; 0x31
    2988:	4633      	mov	r3, r6
    298a:	9000      	str	r0, [sp, #0]
    298c:	4622      	mov	r2, r4
    298e:	4628      	mov	r0, r5
    2990:	2101      	movs	r1, #1
    2992:	f003 f93b 	bl	5c0c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2996:	f030 0302 	bics.w	r3, r0, #2
    299a:	d00c      	beq.n	29b6 <ull_slave_setup+0x36e>
    299c:	4a2c      	ldr	r2, [pc, #176]	; (2a50 <ull_slave_setup+0x408>)
    299e:	492d      	ldr	r1, [pc, #180]	; (2a54 <ull_slave_setup+0x40c>)
    29a0:	482d      	ldr	r0, [pc, #180]	; (2a58 <ull_slave_setup+0x410>)
    29a2:	f44f 7391 	mov.w	r3, #290	; 0x122
    29a6:	f011 f9a5 	bl	13cf4 <printk>
    29aa:	4040      	eors	r0, r0
    29ac:	f380 8811 	msr	BASEPRI, r0
    29b0:	f04f 0003 	mov.w	r0, #3
    29b4:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    29b6:	2201      	movs	r2, #1
    29b8:	4610      	mov	r0, r2
    29ba:	2102      	movs	r1, #2
    29bc:	f001 fef2 	bl	47a4 <mayfly_enable>
}
    29c0:	b013      	add	sp, #76	; 0x4c
    29c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    29c6:	f109 0128 	add.w	r1, r9, #40	; 0x28
    29ca:	f109 002f 	add.w	r0, r9, #47	; 0x2f
    29ce:	f011 fca4 	bl	1431a <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    29d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    29d6:	f47f af0c 	bne.w	27f2 <ull_slave_setup+0x1aa>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    29da:	2206      	movs	r2, #6
    29dc:	2100      	movs	r1, #0
    29de:	f109 0029 	add.w	r0, r9, #41	; 0x29
    29e2:	f011 fcc5 	bl	14370 <memset>
		cc->peer_addr_type = peer_addr_type;
    29e6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    29ea:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    29ee:	a910      	add	r1, sp, #64	; 0x40
    29f0:	2206      	movs	r2, #6
    29f2:	f109 0023 	add.w	r0, r9, #35	; 0x23
    29f6:	f011 fc90 	bl	1431a <memcpy>
    29fa:	e70b      	b.n	2814 <ull_slave_setup+0x1cc>
			cs->csa = 0x00;
    29fc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2a00:	f888 3020 	strb.w	r3, [r8, #32]
    2a04:	e743      	b.n	288e <ull_slave_setup+0x246>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2a06:	2300      	movs	r3, #0
    2a08:	2201      	movs	r2, #1
    2a0a:	9300      	str	r3, [sp, #0]
    2a0c:	4618      	mov	r0, r3
    2a0e:	4611      	mov	r1, r2
    2a10:	f003 f968 	bl	5ce4 <ticker_stop>
    2a14:	e77c      	b.n	2910 <ull_slave_setup+0x2c8>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2a16:	f006 faa3 	bl	8f60 <ull_disable_mark_get>
    2a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2a1c:	4283      	cmp	r3, r0
    2a1e:	f43f af72 	beq.w	2906 <ull_slave_setup+0x2be>
    2a22:	f00a fbb3 	bl	d18c <ticker_op_stop_adv_cb.part.0>
    2a26:	e76e      	b.n	2906 <ull_slave_setup+0x2be>
    2a28:	1afd498d 	.word	0x1afd498d
    2a2c:	00000007 	.word	0x00000007
    2a30:	431bde83 	.word	0x431bde83
    2a34:	01c9c37f 	.word	0x01c9c37f
    2a38:	026259ff 	.word	0x026259ff
    2a3c:	3b9aca00 	.word	0x3b9aca00
    2a40:	0000d1b9 	.word	0x0000d1b9
    2a44:	1afd498d 	.word	0x1afd498d
    2a48:	0000d15d 	.word	0x0000d15d
    2a4c:	0000d1d5 	.word	0x0000d1d5
    2a50:	00015930 	.word	0x00015930
    2a54:	000157ec 	.word	0x000157ec
    2a58:	0001525c 	.word	0x0001525c
    2a5c:	00000000 	.word	0x00000000

00002a60 <ull_slave_done>:
{
    2a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	preamble_to_addr_us =
    2a64:	e9d0 c70c 	ldrd	ip, r7, [r0, #48]	; 0x30
	start_to_address_actual_us =
    2a68:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				       window_widening_event_us +
    2a6c:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    2a70:	3430      	adds	r4, #48	; 0x30
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    2a72:	45a0      	cmp	r8, r4
{
    2a74:	460e      	mov	r6, r1
    2a76:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    2a78:	d818      	bhi.n	2aac <ull_slave_done+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    2a7a:	4f1b      	ldr	r7, [pc, #108]	; (2ae8 <ull_slave_done+0x88>)
    2a7c:	a318      	add	r3, pc, #96	; (adr r3, 2ae0 <ull_slave_done+0x80>)
    2a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a82:	fbac 0107 	umull	r0, r1, ip, r7
    2a86:	f7fd fb2b 	bl	e0 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    2a8a:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    2a8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    2a92:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    2a94:	a312      	add	r3, pc, #72	; (adr r3, 2ae0 <ull_slave_done+0x80>)
    2a96:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a9a:	fba4 0107 	umull	r0, r1, r4, r7
    2a9e:	f7fd fb1f 	bl	e0 <__aeabi_uldivmod>
    2aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    2aa6:	6028      	str	r0, [r5, #0]
}
    2aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    2aac:	4c0e      	ldr	r4, [pc, #56]	; (2ae8 <ull_slave_done+0x88>)
    2aae:	a30c      	add	r3, pc, #48	; (adr r3, 2ae0 <ull_slave_done+0x80>)
    2ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ab4:	fba8 0104 	umull	r0, r1, r8, r4
    2ab8:	f7fd fb12 	bl	e0 <__aeabi_uldivmod>
    2abc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    2ac0:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    2ac4:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    2ac6:	fba0 0104 	umull	r0, r1, r0, r4
    2aca:	a305      	add	r3, pc, #20	; (adr r3, 2ae0 <ull_slave_done+0x80>)
    2acc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ad0:	f7fd fb06 	bl	e0 <__aeabi_uldivmod>
    2ad4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    2ad8:	6028      	str	r0, [r5, #0]
}
    2ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ade:	bf00      	nop
    2ae0:	1afd498d 	.word	0x1afd498d
    2ae4:	00000007 	.word	0x00000007
    2ae8:	3b9aca00 	.word	0x3b9aca00
    2aec:	00000000 	.word	0x00000000

00002af0 <ull_master_setup>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

void ull_master_setup(memq_link_t *link, struct node_rx_hdr *rx,
		      struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;

	pdu_tx = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_tx->rx_addr;
    2af4:	f891 7020 	ldrb.w	r7, [r1, #32]
{
    2af8:	4616      	mov	r6, r2
	((struct lll_scan *)ftr->param)->conn = NULL;
    2afa:	6812      	ldr	r2, [r2, #0]
{
    2afc:	b08f      	sub	sp, #60	; 0x3c
    2afe:	460c      	mov	r4, r1
	((struct lll_scan *)ftr->param)->conn = NULL;
    2b00:	f04f 0b00 	mov.w	fp, #0
{
    2b04:	461d      	mov	r5, r3
	((struct lll_scan *)ftr->param)->conn = NULL;
    2b06:	f8c2 b008 	str.w	fp, [r2, #8]
	peer_addr_type = pdu_tx->rx_addr;
    2b0a:	f3c7 13c0 	ubfx	r3, r7, #7, #1
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    2b0e:	f8d2 a000 	ldr.w	sl, [r2]
	peer_addr_type = pdu_tx->rx_addr;
    2b12:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    2b16:	3128      	adds	r1, #40	; 0x28
    2b18:	2206      	movs	r2, #6
{
    2b1a:	4681      	mov	r9, r0
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    2b1c:	a80c      	add	r0, sp, #48	; 0x30
	conn = lll->hdr.parent;
    2b1e:	682f      	ldr	r7, [r5, #0]
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    2b20:	f011 fbfb 	bl	1431a <memcpy>

	/* This is the chan sel bit from the received adv pdu */
	chan_sel = pdu_tx->chan_sel;
    2b24:	f894 8020 	ldrb.w	r8, [r4, #32]

	cc = (void *)pdu_tx;
	cc->status = 0U;
    2b28:	f8a4 b020 	strh.w	fp, [r4, #32]
	cc->role = 0U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	u8_t rl_idx = ftr->rl_idx;

	if (ftr->lrpa_used) {
    2b2c:	7d71      	ldrb	r1, [r6, #21]
	u8_t rl_idx = ftr->rl_idx;
    2b2e:	f896 b016 	ldrb.w	fp, [r6, #22]
	chan_sel = pdu_tx->chan_sel;
    2b32:	f3c8 1340 	ubfx	r3, r8, #5, #1
	if (ftr->lrpa_used) {
    2b36:	f011 0101 	ands.w	r1, r1, #1
	chan_sel = pdu_tx->chan_sel;
    2b3a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    2b3e:	4698      	mov	r8, r3
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    2b40:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    2b44:	f000 80ea 	beq.w	2d1c <ull_master_setup+0x22c>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    2b48:	f104 0122 	add.w	r1, r4, #34	; 0x22
    2b4c:	f104 002f 	add.w	r0, r4, #47	; 0x2f
    2b50:	f011 fbe3 	bl	1431a <memcpy>
		       BDADDR_SIZE);
	} else {
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
	}

	if (rl_idx != FILTER_IDX_NONE) {
    2b54:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    2b58:	f000 80e8 	beq.w	2d2c <ull_master_setup+0x23c>
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2b5c:	4658      	mov	r0, fp
    2b5e:	f104 0223 	add.w	r2, r4, #35	; 0x23
    2b62:	f104 0122 	add.w	r1, r4, #34	; 0x22
    2b66:	f00b f8f5 	bl	dd54 <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    2b6a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    2b6e:	3302      	adds	r3, #2

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2b70:	a90c      	add	r1, sp, #48	; 0x30
		cc->peer_addr_type += 2;
    2b72:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2b76:	2206      	movs	r2, #6
    2b78:	f104 0029 	add.w	r0, r4, #41	; 0x29
    2b7c:	f011 fbcd 	bl	1431a <memcpy>
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
	}

	cc->interval = lll->interval;
    2b80:	8a6b      	ldrh	r3, [r5, #18]
	cc->latency = lll->latency;
    2b82:	8aaa      	ldrh	r2, [r5, #20]
	cc->interval = lll->interval;
    2b84:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->timeout = scan->lll.conn_timeout;
    2b86:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    2b8a:	8763      	strh	r3, [r4, #58]	; 0x3a
	cc->latency = lll->latency;
    2b8c:	8722      	strh	r2, [r4, #56]	; 0x38
	cc->sca = lll_conn_sca_local_get();
    2b8e:	f00d fc7b 	bl	10488 <lll_conn_sca_local_get>
    2b92:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	lll->handle = ll_conn_handle_get(conn);
    2b96:	4638      	mov	r0, r7
    2b98:	f007 fd22 	bl	a5e0 <ll_conn_handle_get>
    2b9c:	4603      	mov	r3, r0
    2b9e:	8228      	strh	r0, [r5, #16]
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    2ba0:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    2ba2:	80e3      	strh	r3, [r4, #6]
		ll_rx_put(link, rx);
    2ba4:	4648      	mov	r0, r9
		rx_csa = (void *)ftr->extra;
    2ba6:	6874      	ldr	r4, [r6, #4]
		ll_rx_put(link, rx);
    2ba8:	f006 f938 	bl	8e1c <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    2bac:	8a2b      	ldrh	r3, [r5, #16]
    2bae:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2bb0:	230d      	movs	r3, #13
		link = rx->link;
    2bb2:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2bb4:	7123      	strb	r3, [r4, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    2bb6:	f1b8 0f00 	cmp.w	r8, #0
    2bba:	f000 80aa 	beq.w	2d12 <ull_master_setup+0x222>
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2bbe:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    2bc2:	7a2b      	ldrb	r3, [r5, #8]
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2bc4:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    2bc8:	7aa9      	ldrb	r1, [r5, #10]

			lll->data_chan_sel = 1;
    2bca:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			u16_t aa_ms = ((u16_t)lll->access_addr[3] << 8) |
    2bce:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			u16_t aa_ls = ((u16_t)lll->access_addr[1] << 8) |
    2bd2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    2bd6:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    2bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40

			cs->csa = 0x01;
    2bdc:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    2bde:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    2be0:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    2be4:	f884 1020 	strb.w	r1, [r4, #32]
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    2be8:	4621      	mov	r1, r4
    2bea:	f006 f917 	bl	8e1c <ll_rx_put>
	ll_rx_sched();
    2bee:	f006 f91f 	bl	8e30 <ll_rx_sched>
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2bf2:	f8d6 9010 	ldr.w	r9, [r6, #16]
    2bf6:	f8df b178 	ldr.w	fp, [pc, #376]	; 2d70 <ull_master_setup+0x280>
	conn->evt.ticks_active_to_start = 0U;
    2bfa:	2400      	movs	r4, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2bfc:	f209 4052 	addw	r0, r9, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2c00:	2331      	movs	r3, #49	; 0x31
    2c02:	603b      	str	r3, [r7, #0]
	conn->evt.ticks_preempt_to_start =
    2c04:	e9c7 4401 	strd	r4, r4, [r7, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2c08:	a351      	add	r3, pc, #324	; (adr r3, 2d50 <ull_master_setup+0x260>)
    2c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c0e:	fba0 010b 	umull	r0, r1, r0, fp
    2c12:	f7fd fa65 	bl	e0 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us = lll->interval * 1250;
    2c16:	f8b5 c012 	ldrh.w	ip, [r5, #18]
	conn_offset_us = ftr->us_radio_end;
    2c1a:	68f3      	ldr	r3, [r6, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2c1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->evt.ticks_slot =
    2c20:	60f8      	str	r0, [r7, #12]

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2c22:	4622      	mov	r2, r4
    2c24:	2102      	movs	r1, #2
    2c26:	2001      	movs	r0, #1
	conn_interval_us = lll->interval * 1250;
    2c28:	f240 48e2 	movw	r8, #1250	; 0x4e2
    2c2c:	fb08 f80c 	mul.w	r8, r8, ip
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    2c30:	f5a3 7587 	sub.w	r5, r3, #270	; 0x10e
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2c34:	f001 fdb6 	bl	47a4 <mayfly_enable>
#endif

	/* Stop Scanner */
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    2c38:	4650      	mov	r0, sl
    2c3a:	f007 f8b9 	bl	9db0 <ull_scan_handle_get>
    2c3e:	1d02      	adds	r2, r0, #4
    2c40:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2c42:	4b45      	ldr	r3, [pc, #276]	; (2d58 <ull_master_setup+0x268>)
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_scan, ticker_op_stop_scan_cb,
				    (void *)(u32_t)ticker_id_scan);
    2c44:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2c46:	2101      	movs	r1, #1
    2c48:	4620      	mov	r0, r4
    2c4a:	f003 f84b 	bl	5ce4 <ticker_stop>

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2c4e:	4623      	mov	r3, r4
    2c50:	2203      	movs	r2, #3
    2c52:	2101      	movs	r1, #1
    2c54:	9400      	str	r4, [sp, #0]
    2c56:	4620      	mov	r0, r4
    2c58:	f003 f844 	bl	5ce4 <ticker_stop>
		    TICKER_ID_SCAN_STOP, NULL, NULL);

	/* Start master */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2c5c:	4638      	mov	r0, r7
    2c5e:	f007 fcbf 	bl	a5e0 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2c62:	9706      	str	r7, [sp, #24]
    2c64:	f44f 7319 	mov.w	r3, #612	; 0x264
    2c68:	f8d6 c008 	ldr.w	ip, [r6, #8]
    2c6c:	4a3b      	ldr	r2, [pc, #236]	; (2d5c <ull_master_setup+0x26c>)
    2c6e:	9308      	str	r3, [sp, #32]
    2c70:	4b3b      	ldr	r3, [pc, #236]	; (2d60 <ull_master_setup+0x270>)
    2c72:	9207      	str	r2, [sp, #28]
    2c74:	9305      	str	r3, [sp, #20]
    2c76:	68fb      	ldr	r3, [r7, #12]
    2c78:	9304      	str	r3, [sp, #16]
	conn_offset_us -= ftr->us_radio_rdy;
    2c7a:	eba5 0509 	sub.w	r5, r5, r9
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2c7e:	fb88 890b 	smull	r8, r9, r8, fp
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2c82:	1d46      	adds	r6, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2c84:	a332      	add	r3, pc, #200	; (adr r3, 2d50 <ull_master_setup+0x260>)
    2c86:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c8a:	4640      	mov	r0, r8
    2c8c:	4649      	mov	r1, r9
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2c8e:	f1ac 0731 	sub.w	r7, ip, #49	; 0x31
    2c92:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2c94:	f7fd fa24 	bl	e0 <__aeabi_uldivmod>
    2c98:	4610      	mov	r0, r2
    2c9a:	4619      	mov	r1, r3
    2c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ca0:	2300      	movs	r3, #0
    2ca2:	f7fd fa1d 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2ca6:	a32a      	add	r3, pc, #168	; (adr r3, 2d50 <ull_master_setup+0x260>)
    2ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2cac:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2cae:	4649      	mov	r1, r9
    2cb0:	4640      	mov	r0, r8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2cb2:	f8cd c008 	str.w	ip, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2cb6:	f7fd fa13 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2cba:	a325      	add	r3, pc, #148	; (adr r3, 2d50 <ull_master_setup+0x260>)
    2cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2cc0:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2cc2:	fba5 010b 	umull	r0, r1, r5, fp
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2cc6:	f8cd c004 	str.w	ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2cca:	f7fd fa09 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2cce:	b2f6      	uxtb	r6, r6
    2cd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cd4:	463b      	mov	r3, r7
    2cd6:	9000      	str	r0, [sp, #0]
    2cd8:	4632      	mov	r2, r6
    2cda:	4620      	mov	r0, r4
    2cdc:	2101      	movs	r1, #1
    2cde:	f002 ff95 	bl	5c0c <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_master_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2ce2:	f030 0302 	bics.w	r3, r0, #2
    2ce6:	d00c      	beq.n	2d02 <ull_master_setup+0x212>
    2ce8:	4a1e      	ldr	r2, [pc, #120]	; (2d64 <ull_master_setup+0x274>)
    2cea:	491f      	ldr	r1, [pc, #124]	; (2d68 <ull_master_setup+0x278>)
    2cec:	481f      	ldr	r0, [pc, #124]	; (2d6c <ull_master_setup+0x27c>)
    2cee:	f240 2365 	movw	r3, #613	; 0x265
    2cf2:	f010 ffff 	bl	13cf4 <printk>
    2cf6:	4040      	eors	r0, r0
    2cf8:	f380 8811 	msr	BASEPRI, r0
    2cfc:	f04f 0003 	mov.w	r0, #3
    2d00:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2d02:	2201      	movs	r2, #1
    2d04:	4610      	mov	r0, r2
    2d06:	2102      	movs	r1, #2
    2d08:	f001 fd4c 	bl	47a4 <mayfly_enable>
#endif
}
    2d0c:	b00f      	add	sp, #60	; 0x3c
    2d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cs->csa = 0x00;
    2d12:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2d16:	f884 3020 	strb.w	r3, [r4, #32]
    2d1a:	e765      	b.n	2be8 <ull_master_setup+0xf8>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    2d1c:	f104 002f 	add.w	r0, r4, #47	; 0x2f
    2d20:	f011 fb26 	bl	14370 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2d24:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    2d28:	f47f af18 	bne.w	2b5c <ull_master_setup+0x6c>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2d2c:	2206      	movs	r2, #6
    2d2e:	2100      	movs	r1, #0
    2d30:	f104 0029 	add.w	r0, r4, #41	; 0x29
    2d34:	f011 fb1c 	bl	14370 <memset>
		cc->peer_addr_type = peer_addr_type;
    2d38:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    2d3c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    2d40:	a90c      	add	r1, sp, #48	; 0x30
    2d42:	2206      	movs	r2, #6
    2d44:	f104 0023 	add.w	r0, r4, #35	; 0x23
    2d48:	f011 fae7 	bl	1431a <memcpy>
    2d4c:	e718      	b.n	2b80 <ull_master_setup+0x90>
    2d4e:	bf00      	nop
    2d50:	1afd498d 	.word	0x1afd498d
    2d54:	00000007 	.word	0x00000007
    2d58:	0000d315 	.word	0x0000d315
    2d5c:	0000d319 	.word	0x0000d319
    2d60:	0000d349 	.word	0x0000d349
    2d64:	000159a4 	.word	0x000159a4
    2d68:	000157ec 	.word	0x000157ec
    2d6c:	0001525c 	.word	0x0001525c
    2d70:	3b9aca00 	.word	0x3b9aca00
    2d74:	00000000 	.word	0x00000000

00002d78 <isr_rx>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void isr_rx(void *param)
{
    2d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d7c:	b083      	sub	sp, #12
    2d7e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Read radio status and events */
	trx_done = radio_is_done();
    2d80:	f00e fb58 	bl	11434 <radio_is_done>
	if (trx_done) {
    2d84:	f010 0fff 	tst.w	r0, #255	; 0xff
    2d88:	d112      	bne.n	2db0 <isr_rx+0x38>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    2d8a:	f00e fb3d 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    2d8e:	f00e fc0f 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    2d92:	f00e fbf5 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
    2d96:	f00e fe0f 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    2d9a:	f00e fbb9 	bl	11510 <radio_rssi_status_reset>
			return;
		}
	}

isr_rx_do_close:
	radio_isr_set(isr_done, lll);
    2d9e:	48ca      	ldr	r0, [pc, #808]	; (30c8 <isr_rx+0x350>)
    2da0:	4621      	mov	r1, r4
    2da2:	f00e fa37 	bl	11214 <radio_isr_set>
	radio_disable();
}
    2da6:	b003      	add	sp, #12
    2da8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    2dac:	f00e bb14 	b.w	113d8 <radio_disable>
		crc_ok = radio_crc_is_valid();
    2db0:	f00e fb60 	bl	11474 <radio_crc_is_valid>
    2db4:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    2db8:	f00e fbea 	bl	11590 <radio_filter_has_match>
    2dbc:	b2c6      	uxtb	r6, r0
		devmatch_id = radio_filter_match_get();
    2dbe:	f00e fbf1 	bl	115a4 <radio_filter_match_get>
    2dc2:	4607      	mov	r7, r0
		irkmatch_ok = radio_ar_has_match();
    2dc4:	f00e fe04 	bl	119d0 <radio_ar_has_match>
    2dc8:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    2dca:	f00e fdef 	bl	119ac <radio_ar_match_get>
    2dce:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    2dd0:	f00e fba6 	bl	11520 <radio_rssi_is_ready>
    2dd4:	4681      	mov	r9, r0
	radio_status_reset();
    2dd6:	f00e fb17 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    2dda:	f00e fbe9 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    2dde:	f00e fbcf 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
    2de2:	f00e fde9 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    2de6:	f00e fb93 	bl	11510 <radio_rssi_status_reset>
	rl_idx = devmatch_ok ?
    2dea:	2e00      	cmp	r6, #0
    2dec:	f040 80ab 	bne.w	2f46 <isr_rx+0x1ce>
    2df0:	2d00      	cmp	r5, #0
    2df2:	f040 80ba 	bne.w	2f6a <isr_rx+0x1f2>
    2df6:	27ff      	movs	r7, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    2df8:	f1b8 0f00 	cmp.w	r8, #0
    2dfc:	d0cf      	beq.n	2d9e <isr_rx+0x26>

static inline bool isr_rx_scan_check(struct lll_scan *lll, u8_t irkmatch_ok,
				     u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    2dfe:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    2e00:	0719      	lsls	r1, r3, #28
    2e02:	f100 80a8 	bmi.w	2f56 <isr_rx+0x1de>
	return (((lll->filter_policy & 0x01) == 0) &&
    2e06:	2e00      	cmp	r6, #0
    2e08:	f040 81eb 	bne.w	31e2 <isr_rx+0x46a>
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;
	bool dir_report = false;

	node_rx = ull_pdu_rx_alloc_peek(1);
    2e0c:	2001      	movs	r0, #1
    2e0e:	f006 f909 	bl	9024 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    2e12:	4680      	mov	r8, r0
    2e14:	2800      	cmp	r0, #0
    2e16:	f000 81fb 	beq.w	3210 <isr_rx+0x498>
	pdu_adv_rx = (void *)node_rx->pdu;

	if (0) {
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	} else if ((lll->conn) &&
    2e1a:	68a3      	ldr	r3, [r4, #8]
		rssi_ready = radio_rssi_is_ready();
    2e1c:	fa5f f689 	uxtb.w	r6, r9
	} else if ((lll->conn) &&
    2e20:	2b00      	cmp	r3, #0
    2e22:	f000 80d5 	beq.w	2fd0 <isr_rx+0x258>
}

static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, u8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
    2e26:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    2e28:	071a      	lsls	r2, r3, #28
    2e2a:	f140 81e6 	bpl.w	31fa <isr_rx+0x482>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    2e2e:	f898 0020 	ldrb.w	r0, [r8, #32]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    2e32:	f010 030f 	ands.w	r3, r0, #15
    2e36:	f040 809e 	bne.w	2f76 <isr_rx+0x1fe>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    2e3a:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    2e3e:	2b25      	cmp	r3, #37	; 0x25
    2e40:	f200 8116 	bhi.w	3070 <isr_rx+0x2f8>
			rx = ull_pdu_rx_alloc_peek(4);
    2e44:	2004      	movs	r0, #4
    2e46:	f006 f8ed 	bl	9024 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    2e4a:	2800      	cmp	r0, #0
    2e4c:	d0a7      	beq.n	2d9e <isr_rx+0x26>
		pdu_end_us = radio_tmr_end_get();
    2e4e:	f00e fce1 	bl	11814 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    2e52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		pdu_end_us = radio_tmr_end_get();
    2e54:	4681      	mov	r9, r0
		if (!lll->ticks_window) {
    2e56:	b943      	cbnz	r3, 2e6a <isr_rx+0xf2>
			scan_interval_us = lll->interval * 625U;
    2e58:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    2e5a:	f240 2371 	movw	r3, #625	; 0x271
    2e5e:	fb03 f302 	mul.w	r3, r3, r2
			pdu_end_us %= scan_interval_us;
    2e62:	fbb0 f2f3 	udiv	r2, r0, r3
    2e66:	fb03 0912 	mls	r9, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    2e6a:	6823      	ldr	r3, [r4, #0]
    2e6c:	4897      	ldr	r0, [pc, #604]	; (30cc <isr_rx+0x354>)
    2e6e:	68db      	ldr	r3, [r3, #12]
    2e70:	2207      	movs	r2, #7
    2e72:	fba3 0100 	umull	r0, r1, r3, r0
    2e76:	fb02 1103 	mla	r1, r2, r3, r1
    2e7a:	a391      	add	r3, pc, #580	; (adr r3, 30c0 <isr_rx+0x348>)
    2e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e80:	f7fd f92e 	bl	e0 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    2e84:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    2e88:	454b      	cmp	r3, r9
    2e8a:	d388      	bcc.n	2d9e <isr_rx+0x26>
		radio_switch_complete_and_disable();
    2e8c:	f00e fb22 	bl	114d4 <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
    2e90:	f8d4 b008 	ldr.w	fp, [r4, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
    2e94:	f00e fafc 	bl	11490 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    2e98:	f898 3020 	ldrb.w	r3, [r8, #32]
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    2e9c:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    2e9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    2ea2:	01db      	lsls	r3, r3, #7
    2ea4:	f002 0250 	and.w	r2, r2, #80	; 0x50
    2ea8:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    2eac:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    2eae:	2222      	movs	r2, #34	; 0x22
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    2eb0:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    2eb2:	7042      	strb	r2, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
    2eb4:	4682      	mov	sl, r0
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    2eb6:	4638      	mov	r0, r7
    2eb8:	f00b fd26 	bl	e908 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    2ebc:	7de3      	ldrb	r3, [r4, #23]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    2ebe:	9000      	str	r0, [sp, #0]
		if (lll->rpa_gen && lrpa) {
    2ec0:	07da      	lsls	r2, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    2ec2:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    2ec4:	f140 8228 	bpl.w	3318 <isr_rx+0x5a0>
    2ec8:	2800      	cmp	r0, #0
    2eca:	f000 8225 	beq.w	3318 <isr_rx+0x5a0>
			pdu_tx->tx_addr = 1;
    2ece:	f89a 3000 	ldrb.w	r3, [sl]
    2ed2:	4650      	mov	r0, sl
    2ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2ed8:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->connect_ind.init_addr[0], lrpa->val,
    2edc:	2206      	movs	r2, #6
    2ede:	f011 fa1c 	bl	1431a <memcpy>
		memcpy(&pdu_tx->connect_ind.adv_addr[0],
    2ee2:	2206      	movs	r2, #6
    2ee4:	f108 0122 	add.w	r1, r8, #34	; 0x22
    2ee8:	f10a 0008 	add.w	r0, sl, #8
    2eec:	f011 fa15 	bl	1431a <memcpy>
		memcpy(&pdu_tx->connect_ind.access_addr[0],
    2ef0:	2204      	movs	r2, #4
    2ef2:	f10b 0108 	add.w	r1, fp, #8
    2ef6:	f10a 000e 	add.w	r0, sl, #14
    2efa:	f011 fa0e 	bl	1431a <memcpy>
		memcpy(&pdu_tx->connect_ind.crc_init[0],
    2efe:	2203      	movs	r2, #3
    2f00:	f10b 010c 	add.w	r1, fp, #12
    2f04:	f10a 0012 	add.w	r0, sl, #18
    2f08:	f011 fa07 	bl	1431a <memcpy>
		pdu_tx->connect_ind.win_size = 1;
    2f0c:	2301      	movs	r3, #1
    2f0e:	f88a 3015 	strb.w	r3, [sl, #21]
		conn_interval_us = (u32_t)lll_conn->interval * 1250U;
    2f12:	f8bb 3012 	ldrh.w	r3, [fp, #18]
    2f16:	9301      	str	r3, [sp, #4]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    2f18:	f00e fc7c 	bl	11814 <radio_tmr_end_get>
		    lll->conn_win_offset_us == 0U) {
    2f1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    2f20:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
		if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
    2f24:	f1b9 0f00 	cmp.w	r9, #0
    2f28:	f000 8206 	beq.w	3338 <isr_rx+0x5c0>
		conn_interval_us = (u32_t)lll_conn->interval * 1250U;
    2f2c:	9901      	ldr	r1, [sp, #4]
    2f2e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2f32:	fb02 f201 	mul.w	r2, r2, r1
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    2f36:	f1b9 0f00 	cmp.w	r9, #0
    2f3a:	db02      	blt.n	2f42 <isr_rx+0x1ca>
    2f3c:	454b      	cmp	r3, r9
    2f3e:	f240 80c7 	bls.w	30d0 <isr_rx+0x358>
				conn_space_us += conn_interval_us;
    2f42:	4491      	add	r9, r2
    2f44:	e7f7      	b.n	2f36 <isr_rx+0x1be>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    2f46:	7da0      	ldrb	r0, [r4, #22]
    2f48:	b2f9      	uxtb	r1, r7
    2f4a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2f4e:	f00b fcf9 	bl	e944 <ull_filter_lll_rl_idx>
    2f52:	4607      	mov	r7, r0
    2f54:	e750      	b.n	2df8 <isr_rx+0x80>
		(((lll->filter_policy & 0x01) != 0) &&
    2f56:	2e00      	cmp	r6, #0
    2f58:	f47f af58 	bne.w	2e0c <isr_rx+0x94>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    2f5c:	4638      	mov	r0, r7
    2f5e:	f00b fdad 	bl	eabc <ull_filter_lll_irk_whitelisted>
    2f62:	2800      	cmp	r0, #0
    2f64:	f47f af52 	bne.w	2e0c <isr_rx+0x94>
    2f68:	e719      	b.n	2d9e <isr_rx+0x26>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    2f6a:	fa5f f08a 	uxtb.w	r0, sl
    2f6e:	f00b fd53 	bl	ea18 <ull_filter_lll_rl_irk_idx>
    2f72:	4607      	mov	r7, r0
    2f74:	e740      	b.n	2df8 <isr_rx+0x80>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    2f76:	2b01      	cmp	r3, #1
    2f78:	d14e      	bne.n	3018 <isr_rx+0x2a0>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    2f7a:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    2f7e:	2b0c      	cmp	r3, #12
    2f80:	f47f af0d 	bne.w	2d9e <isr_rx+0x26>
				       struct pdu_adv *pdu, u8_t rl_idx,
				       bool *dir_report)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    2f84:	f108 0928 	add.w	r9, r8, #40	; 0x28
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    2f88:	09c0      	lsrs	r0, r0, #7
    2f8a:	4649      	mov	r1, r9
    2f8c:	463a      	mov	r2, r7
    2f8e:	f00b fe43 	bl	ec18 <ull_filter_lll_rl_addr_resolve>
    2f92:	2800      	cmp	r0, #0
    2f94:	f47f af56 	bne.w	2e44 <isr_rx+0xcc>
		return true;
	} else if (init && lll->rpa_gen &&
    2f98:	7de3      	ldrb	r3, [r4, #23]
    2f9a:	07db      	lsls	r3, r3, #31
    2f9c:	f100 81f8 	bmi.w	3390 <isr_rx+0x618>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
    2fa0:	7da3      	ldrb	r3, [r4, #22]
    2fa2:	f898 0020 	ldrb.w	r0, [r8, #32]
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
    2fa6:	f3c3 1280 	ubfx	r2, r3, #6, #1
    2faa:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    2fae:	f000 821c 	beq.w	33ea <isr_rx+0x672>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
    2fb2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    2fb6:	0798      	lsls	r0, r3, #30
    2fb8:	d50a      	bpl.n	2fd0 <isr_rx+0x258>
    2fba:	f998 3020 	ldrsb.w	r3, [r8, #32]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	da06      	bge.n	2fd0 <isr_rx+0x258>
	    (pdu->rx_addr != 0) &&
    2fc2:	f898 302d 	ldrb.w	r3, [r8, #45]	; 0x2d
    2fc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2fca:	2b40      	cmp	r3, #64	; 0x40
    2fcc:	f43f af3a 	beq.w	2e44 <isr_rx+0xcc>
    2fd0:	f898 0020 	ldrb.w	r0, [r8, #32]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    2fd4:	f010 030f 	ands.w	r3, r0, #15
    2fd8:	d11e      	bne.n	3018 <isr_rx+0x2a0>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2fda:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    2fde:	2b25      	cmp	r3, #37	; 0x25
    2fe0:	f63f aedd 	bhi.w	2d9e <isr_rx+0x26>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    2fe4:	f994 2016 	ldrsb.w	r2, [r4, #22]
    2fe8:	2a00      	cmp	r2, #0
    2fea:	f2c0 8125 	blt.w	3238 <isr_rx+0x4c0>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2fee:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
    2ff0:	bf98      	it	ls
    2ff2:	f04f 0900 	movls.w	r9, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    2ff6:	d83b      	bhi.n	3070 <isr_rx+0x2f8>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    2ff8:	2b00      	cmp	r3, #0
    2ffa:	f43f aed0 	beq.w	2d9e <isr_rx+0x26>
		 (pdu_adv_rx->len != 0) &&
    2ffe:	68a3      	ldr	r3, [r4, #8]
    3000:	2b00      	cmp	r3, #0
    3002:	f47f aecc 	bne.w	2d9e <isr_rx+0x26>
		err = isr_rx_scan_report(lll, rssi_ready,
    3006:	2d00      	cmp	r5, #0
    3008:	bf14      	ite	ne
    300a:	4639      	movne	r1, r7
    300c:	21ff      	moveq	r1, #255	; 0xff
    300e:	464a      	mov	r2, r9
    3010:	4630      	mov	r0, r6
    3012:	f00d f91d 	bl	10250 <isr_rx_scan_report.isra.0>
		if (err) {
    3016:	e6c2      	b.n	2d9e <isr_rx+0x26>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3018:	2b06      	cmp	r3, #6
    301a:	f000 8107 	beq.w	322c <isr_rx+0x4b4>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    301e:	2b02      	cmp	r3, #2
    3020:	f000 8160 	beq.w	32e4 <isr_rx+0x56c>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    3024:	2b01      	cmp	r3, #1
    3026:	d123      	bne.n	3070 <isr_rx+0x2f8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    3028:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    302c:	2b0c      	cmp	r3, #12
    302e:	f47f aeb6 	bne.w	2d9e <isr_rx+0x26>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    3032:	f108 0a28 	add.w	sl, r8, #40	; 0x28
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    3036:	09c0      	lsrs	r0, r0, #7
    3038:	4651      	mov	r1, sl
    303a:	463a      	mov	r2, r7
    303c:	f00b fdec 	bl	ec18 <ull_filter_lll_rl_addr_resolve>
    3040:	4681      	mov	r9, r0
    3042:	2800      	cmp	r0, #0
    3044:	f040 819f 	bne.w	3386 <isr_rx+0x60e>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    3048:	7da3      	ldrb	r3, [r4, #22]
    304a:	f898 0020 	ldrb.w	r0, [r8, #32]
			BDADDR_SIZE))) ||
    304e:	f3c3 1280 	ubfx	r2, r3, #6, #1
    3052:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    3056:	f000 81ae 	beq.w	33b6 <isr_rx+0x63e>
	if (((lll->filter_policy & 0x02) != 0U) &&
    305a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    305e:	0798      	lsls	r0, r3, #30
    3060:	d504      	bpl.n	306c <isr_rx+0x2f4>
    3062:	f998 3020 	ldrsb.w	r3, [r8, #32]
    3066:	2b00      	cmp	r3, #0
    3068:	f2c0 8199 	blt.w	339e <isr_rx+0x626>
    306c:	f898 0020 	ldrb.w	r0, [r8, #32]
					&dir_report))) ||
    3070:	f000 000f 	and.w	r0, r0, #15
    3074:	2804      	cmp	r0, #4
    3076:	f47f ae92 	bne.w	2d9e <isr_rx+0x26>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    307a:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    307e:	2b25      	cmp	r3, #37	; 0x25
    3080:	f63f ae8d 	bhi.w	2d9e <isr_rx+0x26>
		   (lll->state != 0U) &&
    3084:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    3086:	07da      	lsls	r2, r3, #31
    3088:	f57f ae89 	bpl.w	2d9e <isr_rx+0x26>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    308c:	f00e fa00 	bl	11490 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    3090:	f898 3020 	ldrb.w	r3, [r8, #32]
    3094:	7802      	ldrb	r2, [r0, #0]
    3096:	f3c3 1380 	ubfx	r3, r3, #6, #1
    309a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    309e:	f47f ae7e 	bne.w	2d9e <isr_rx+0x26>
		(memcmp(&sreq->scan_req.adv_addr[0],
    30a2:	3008      	adds	r0, #8
    30a4:	2206      	movs	r2, #6
    30a6:	f108 0122 	add.w	r1, r8, #34	; 0x22
    30aa:	f011 f926 	bl	142fa <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    30ae:	4681      	mov	r9, r0
    30b0:	2800      	cmp	r0, #0
    30b2:	f47f ae74 	bne.w	2d9e <isr_rx+0x26>
    30b6:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    30ba:	e79d      	b.n	2ff8 <isr_rx+0x280>
    30bc:	f3af 8000 	nop.w
    30c0:	3b9aca00 	.word	0x3b9aca00
    30c4:	00000000 	.word	0x00000000
    30c8:	0000ff4d 	.word	0x0000ff4d
    30cc:	1afd498d 	.word	0x1afd498d
				sys_cpu_to_le16((conn_space_us -
    30d0:	49cb      	ldr	r1, [pc, #812]	; (3400 <isr_rx+0x688>)
			pdu_tx->connect_ind.win_size++;
    30d2:	f89a 2015 	ldrb.w	r2, [sl, #21]
				sys_cpu_to_le16((conn_space_us -
    30d6:	eba9 0303 	sub.w	r3, r9, r3
    30da:	fba1 1303 	umull	r1, r3, r1, r3
			pdu_tx->connect_ind.win_offset =
    30de:	f3c3 238f 	ubfx	r3, r3, #10, #16
			pdu_tx->connect_ind.win_size++;
    30e2:	3201      	adds	r2, #1
			pdu_tx->connect_ind.win_offset =
    30e4:	f8aa 3016 	strh.w	r3, [sl, #22]
			pdu_tx->connect_ind.win_size++;
    30e8:	f88a 2015 	strb.w	r2, [sl, #21]
		pdu_tx->connect_ind.interval =
    30ec:	f8bb 1012 	ldrh.w	r1, [fp, #18]
		pdu_tx->connect_ind.latency =
    30f0:	f8bb 2014 	ldrh.w	r2, [fp, #20]
		pdu_tx->connect_ind.timeout =
    30f4:	8aa3      	ldrh	r3, [r4, #20]
    30f6:	f8aa 301c 	strh.w	r3, [sl, #28]
		pdu_tx->connect_ind.interval =
    30fa:	f8aa 1018 	strh.w	r1, [sl, #24]
		pdu_tx->connect_ind.latency =
    30fe:	f8aa 201a 	strh.w	r2, [sl, #26]
		memcpy(&pdu_tx->connect_ind.chan_map[0],
    3102:	f10b 011c 	add.w	r1, fp, #28
    3106:	2205      	movs	r2, #5
    3108:	f10a 001e 	add.w	r0, sl, #30
    310c:	f011 f905 	bl	1431a <memcpy>
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
    3110:	f89b 2022 	ldrb.w	r2, [fp, #34]	; 0x22
    3114:	f89a 3023 	ldrb.w	r3, [sl, #35]	; 0x23
    3118:	f362 0304 	bfi	r3, r2, #0, #5
    311c:	f88a 3023 	strb.w	r3, [sl, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_conn_sca_local_get();
    3120:	f00d f9b2 	bl	10488 <lll_conn_sca_local_get>
    3124:	f89a 3023 	ldrb.w	r3, [sl, #35]	; 0x23
    3128:	f360 1347 	bfi	r3, r0, #5, #3
    312c:	f88a 3023 	strb.w	r3, [sl, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
    3130:	4650      	mov	r0, sl
    3132:	f00e f92f 	bl	11394 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    3136:	f00e f973 	bl	11420 <radio_is_ready>
    313a:	2800      	cmp	r0, #0
    313c:	f040 8115 	bne.w	336a <isr_rx+0x5f2>
		radio_isr_set(isr_cleanup, lll);
    3140:	48b0      	ldr	r0, [pc, #704]	; (3404 <isr_rx+0x68c>)
    3142:	4621      	mov	r1, r4
    3144:	f00e f866 	bl	11214 <radio_isr_set>
		if (rssi_ready) {
    3148:	2e00      	cmp	r6, #0
    314a:	f040 8109 	bne.w	3360 <isr_rx+0x5e8>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
    314e:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
    3150:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    3154:	07db      	lsls	r3, r3, #31
    3156:	7122      	strb	r2, [r4, #4]
    3158:	f100 80f4 	bmi.w	3344 <isr_rx+0x5cc>
		rx = ull_pdu_rx_alloc();
    315c:	f005 ff80 	bl	9060 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    3160:	2308      	movs	r3, #8
		rx = ull_pdu_rx_alloc();
    3162:	4606      	mov	r6, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    3164:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    3166:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    316a:	2224      	movs	r2, #36	; 0x24
		u8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    316c:	f898 8020 	ldrb.w	r8, [r8, #32]
		rx->hdr.handle = 0xffff;
    3170:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    3172:	4651      	mov	r1, sl
    3174:	3020      	adds	r0, #32
    3176:	f011 f8d0 	bl	1431a <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    317a:	f896 3020 	ldrb.w	r3, [r6, #32]
		ftr->param = lll;
    317e:	60b4      	str	r4, [r6, #8]
		u8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    3180:	f3c8 1840 	ubfx	r8, r8, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    3184:	f368 1345 	bfi	r3, r8, #5, #1
    3188:	f886 3020 	strb.w	r3, [r6, #32]
		ftr->ticks_anchor = radio_tmr_start_get();
    318c:	f00e fae6 	bl	1175c <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
    3190:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    3192:	6130      	str	r0, [r6, #16]
				    radio_tx_chain_delay_get(0, 0);
    3194:	4608      	mov	r0, r1
    3196:	f00e f909 	bl	113ac <radio_tx_chain_delay_get>
		ftr->us_radio_rdy = radio_tx_ready_delay_get(0, 0);
    319a:	2100      	movs	r1, #0
		ftr->us_radio_end = conn_space_us -
    319c:	eba9 0000 	sub.w	r0, r9, r0
    31a0:	6170      	str	r0, [r6, #20]
		ftr->us_radio_rdy = radio_tx_ready_delay_get(0, 0);
    31a2:	4608      	mov	r0, r1
    31a4:	f00e f8fc 	bl	113a0 <radio_tx_ready_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    31a8:	2d00      	cmp	r5, #0
    31aa:	bf08      	it	eq
    31ac:	27ff      	moveq	r7, #255	; 0xff
    31ae:	77b7      	strb	r7, [r6, #30]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    31b0:	7de3      	ldrb	r3, [r4, #23]
		ftr->us_radio_rdy = radio_tx_ready_delay_get(0, 0);
    31b2:	61b0      	str	r0, [r6, #24]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    31b4:	f013 0301 	ands.w	r3, r3, #1
    31b8:	d003      	beq.n	31c2 <isr_rx+0x44a>
    31ba:	9b00      	ldr	r3, [sp, #0]
    31bc:	3b00      	subs	r3, #0
    31be:	bf18      	it	ne
    31c0:	2301      	movne	r3, #1
    31c2:	7f72      	ldrb	r2, [r6, #29]
    31c4:	f363 0200 	bfi	r2, r3, #0, #1
    31c8:	7772      	strb	r2, [r6, #29]
			ftr->extra = ull_pdu_rx_alloc();
    31ca:	f005 ff49 	bl	9060 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    31ce:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
    31d0:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
    31d2:	6830      	ldr	r0, [r6, #0]
    31d4:	f005 ff5c 	bl	9090 <ull_rx_put>
}
    31d8:	b003      	add	sp, #12
    31da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
    31de:	f005 bf67 	b.w	90b0 <ull_rx_sched>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    31e2:	4639      	mov	r1, r7
    31e4:	4628      	mov	r0, r5
    31e6:	f00b fca5 	bl	eb34 <ull_filter_lll_rl_idx_allowed>
    31ea:	2800      	cmp	r0, #0
    31ec:	f47f ae0e 	bne.w	2e0c <isr_rx+0x94>
		(((lll->filter_policy & 0x01) != 0) &&
    31f0:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    31f2:	071b      	lsls	r3, r3, #28
    31f4:	f57f add3 	bpl.w	2d9e <isr_rx+0x26>
    31f8:	e608      	b.n	2e0c <isr_rx+0x94>
	if (rl_idx != FILTER_IDX_NONE) {
    31fa:	2fff      	cmp	r7, #255	; 0xff
    31fc:	d075      	beq.n	32ea <isr_rx+0x572>
		return (rl_idx == lll->rl_idx);
    31fe:	7e23      	ldrb	r3, [r4, #24]
    3200:	1bdb      	subs	r3, r3, r7
    3202:	fab3 f383 	clz	r3, r3
    3206:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    3208:	2b00      	cmp	r3, #0
    320a:	f47f ae10 	bne.w	2e2e <isr_rx+0xb6>
    320e:	e6df      	b.n	2fd0 <isr_rx+0x258>
	LL_ASSERT(node_rx);
    3210:	4a7d      	ldr	r2, [pc, #500]	; (3408 <isr_rx+0x690>)
    3212:	497e      	ldr	r1, [pc, #504]	; (340c <isr_rx+0x694>)
    3214:	487e      	ldr	r0, [pc, #504]	; (3410 <isr_rx+0x698>)
    3216:	f240 23aa 	movw	r3, #682	; 0x2aa
    321a:	f010 fd6b 	bl	13cf4 <printk>
    321e:	4040      	eors	r0, r0
    3220:	f380 8811 	msr	BASEPRI, r0
    3224:	f04f 0003 	mov.w	r0, #3
    3228:	df02      	svc	2
    322a:	e5f6      	b.n	2e1a <isr_rx+0xa2>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    322c:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    3230:	2b25      	cmp	r3, #37	; 0x25
    3232:	f67f aed7 	bls.w	2fe4 <isr_rx+0x26c>
    3236:	e71b      	b.n	3070 <isr_rx+0x2f8>
		   lll->type &&
    3238:	68a2      	ldr	r2, [r4, #8]
    323a:	2a00      	cmp	r2, #0
    323c:	f47f aed7 	bne.w	2fee <isr_rx+0x276>
		radio_tmr_tifs_set(EVENT_IFS_US);
    3240:	2096      	movs	r0, #150	; 0x96
    3242:	f00e f9c5 	bl	115d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    3246:	2000      	movs	r0, #0
    3248:	f00e f92a 	bl	114a0 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    324c:	2d00      	cmp	r5, #0
    324e:	bf14      	ite	ne
    3250:	4639      	movne	r1, r7
    3252:	21ff      	moveq	r1, #255	; 0xff
    3254:	4630      	mov	r0, r6
    3256:	2200      	movs	r2, #0
    3258:	f00c fffa 	bl	10250 <isr_rx_scan_report.isra.0>
		if (err) {
    325c:	2800      	cmp	r0, #0
    325e:	f47f ad9e 	bne.w	2d9e <isr_rx+0x26>
		pdu_tx = (void *)radio_pkt_scratch_get();
    3262:	f00e f915 	bl	11490 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    3266:	f898 3020 	ldrb.w	r3, [r8, #32]
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    326a:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    326c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    3270:	01db      	lsls	r3, r3, #7
		pdu_tx = (void *)radio_pkt_scratch_get();
    3272:	4605      	mov	r5, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    3274:	f002 0270 	and.w	r2, r2, #112	; 0x70
    3278:	f043 0303 	orr.w	r3, r3, #3
    327c:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    327e:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    3280:	702b      	strb	r3, [r5, #0]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3282:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    3284:	706a      	strb	r2, [r5, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3286:	f00b fb3f 	bl	e908 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    328a:	7de3      	ldrb	r3, [r4, #23]
    328c:	07de      	lsls	r6, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    328e:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    3290:	f140 809c 	bpl.w	33cc <isr_rx+0x654>
    3294:	2800      	cmp	r0, #0
    3296:	f000 8099 	beq.w	33cc <isr_rx+0x654>
			pdu_tx->tx_addr = 1;
    329a:	782b      	ldrb	r3, [r5, #0]
    329c:	4628      	mov	r0, r5
    329e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    32a2:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    32a6:	2206      	movs	r2, #6
    32a8:	f011 f837 	bl	1431a <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    32ac:	f108 0122 	add.w	r1, r8, #34	; 0x22
    32b0:	2206      	movs	r2, #6
    32b2:	f105 0008 	add.w	r0, r5, #8
    32b6:	f011 f830 	bl	1431a <memcpy>
		radio_pkt_tx_set(pdu_tx);
    32ba:	4628      	mov	r0, r5
    32bc:	f00e f86a 	bl	11394 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    32c0:	f00e f8ae 	bl	11420 <radio_is_ready>
    32c4:	2800      	cmp	r0, #0
    32c6:	f040 80ab 	bne.w	3420 <isr_rx+0x6a8>
		radio_tmr_end_capture();
    32ca:	f00e fa9b 	bl	11804 <radio_tmr_end_capture>
		lll->state = 1U;
    32ce:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    32d0:	4850      	ldr	r0, [pc, #320]	; (3414 <isr_rx+0x69c>)
		lll->state = 1U;
    32d2:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
    32d6:	4621      	mov	r1, r4
		lll->state = 1U;
    32d8:	75a3      	strb	r3, [r4, #22]
}
    32da:	b003      	add	sp, #12
    32dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
    32e0:	f00d bf98 	b.w	11214 <radio_isr_set>
    32e4:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
    32e8:	e681      	b.n	2fee <isr_rx+0x276>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    32ea:	f898 0020 	ldrb.w	r0, [r8, #32]
    32ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
    32f2:	f3c0 1280 	ubfx	r2, r0, #6, #1
    32f6:	4293      	cmp	r3, r2
    32f8:	f47f ae6c 	bne.w	2fd4 <isr_rx+0x25c>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
    32fc:	2206      	movs	r2, #6
    32fe:	f108 0122 	add.w	r1, r8, #34	; 0x22
    3302:	f104 001f 	add.w	r0, r4, #31
    3306:	f010 fff8 	bl	142fa <memcmp>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    330a:	fab0 f380 	clz	r3, r0
    330e:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & 0x01) != 0U) ||
    3310:	2b00      	cmp	r3, #0
    3312:	f47f ad8c 	bne.w	2e2e <isr_rx+0xb6>
    3316:	e65b      	b.n	2fd0 <isr_rx+0x258>
			pdu_tx->tx_addr = lll->init_addr_type;
    3318:	7da3      	ldrb	r3, [r4, #22]
    331a:	f89a 2000 	ldrb.w	r2, [sl]
    331e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3322:	4650      	mov	r0, sl
    3324:	f363 1286 	bfi	r2, r3, #6, #1
    3328:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->connect_ind.init_addr[0],
    332c:	f104 0119 	add.w	r1, r4, #25
    3330:	2206      	movs	r2, #6
    3332:	f010 fff2 	bl	1431a <memcpy>
    3336:	e5d4      	b.n	2ee2 <isr_rx+0x16a>
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
    3338:	f88a 9016 	strb.w	r9, [sl, #22]
    333c:	f88a 9017 	strb.w	r9, [sl, #23]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    3340:	4699      	mov	r9, r3
    3342:	e6d3      	b.n	30ec <isr_rx+0x374>
		LL_ASSERT(!ret);
    3344:	4a30      	ldr	r2, [pc, #192]	; (3408 <isr_rx+0x690>)
    3346:	4934      	ldr	r1, [pc, #208]	; (3418 <isr_rx+0x6a0>)
    3348:	4831      	ldr	r0, [pc, #196]	; (3410 <isr_rx+0x698>)
    334a:	f240 3349 	movw	r3, #841	; 0x349
    334e:	f010 fcd1 	bl	13cf4 <printk>
    3352:	4040      	eors	r0, r0
    3354:	f380 8811 	msr	BASEPRI, r0
    3358:	f04f 0003 	mov.w	r0, #3
    335c:	df02      	svc	2
    335e:	e6fd      	b.n	315c <isr_rx+0x3e4>
			lll_conn->rssi_latest =  radio_rssi_get();
    3360:	f00e f8d0 	bl	11504 <radio_rssi_get>
    3364:	f88b 00a5 	strb.w	r0, [fp, #165]	; 0xa5
    3368:	e6f1      	b.n	314e <isr_rx+0x3d6>
		LL_ASSERT(!radio_is_ready());
    336a:	4a27      	ldr	r2, [pc, #156]	; (3408 <isr_rx+0x690>)
    336c:	492b      	ldr	r1, [pc, #172]	; (341c <isr_rx+0x6a4>)
    336e:	4828      	ldr	r0, [pc, #160]	; (3410 <isr_rx+0x698>)
    3370:	f240 3323 	movw	r3, #803	; 0x323
    3374:	f010 fcbe 	bl	13cf4 <printk>
    3378:	4040      	eors	r0, r0
    337a:	f380 8811 	msr	BASEPRI, r0
    337e:	f04f 0003 	mov.w	r0, #3
    3382:	df02      	svc	2
    3384:	e6dc      	b.n	3140 <isr_rx+0x3c8>
    3386:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
	bool dir_report = false;
    338a:	f04f 0900 	mov.w	r9, #0
    338e:	e633      	b.n	2ff8 <isr_rx+0x280>
		   ull_filter_lll_lrpa_get(rl_idx)) {
    3390:	4638      	mov	r0, r7
    3392:	f00b fab9 	bl	e908 <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
    3396:	2800      	cmp	r0, #0
    3398:	f47f ae1a 	bne.w	2fd0 <isr_rx+0x258>
    339c:	e600      	b.n	2fa0 <isr_rx+0x228>
	    (pdu->rx_addr != 0) &&
    339e:	f898 302d 	ldrb.w	r3, [r8, #45]	; 0x2d
    33a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    33a6:	2b40      	cmp	r3, #64	; 0x40
    33a8:	f47f ae60 	bne.w	306c <isr_rx+0x2f4>
    33ac:	f898 3021 	ldrb.w	r3, [r8, #33]	; 0x21
			*dir_report = true;
    33b0:	f04f 0901 	mov.w	r9, #1
    33b4:	e620      	b.n	2ff8 <isr_rx+0x280>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    33b6:	4651      	mov	r1, sl
    33b8:	2206      	movs	r2, #6
    33ba:	f104 0019 	add.w	r0, r4, #25
    33be:	f010 ff9c 	bl	142fa <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    33c2:	2800      	cmp	r0, #0
    33c4:	f43f ae77 	beq.w	30b6 <isr_rx+0x33e>
    33c8:	7da3      	ldrb	r3, [r4, #22]
    33ca:	e646      	b.n	305a <isr_rx+0x2e2>
			pdu_tx->tx_addr = lll->init_addr_type;
    33cc:	7da3      	ldrb	r3, [r4, #22]
    33ce:	782a      	ldrb	r2, [r5, #0]
    33d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    33d4:	4628      	mov	r0, r5
    33d6:	f363 1286 	bfi	r2, r3, #6, #1
    33da:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    33de:	f104 0119 	add.w	r1, r4, #25
    33e2:	2206      	movs	r2, #6
    33e4:	f010 ff99 	bl	1431a <memcpy>
    33e8:	e760      	b.n	32ac <isr_rx+0x534>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    33ea:	4649      	mov	r1, r9
    33ec:	2206      	movs	r2, #6
    33ee:	f104 0019 	add.w	r0, r4, #25
    33f2:	f010 ff82 	bl	142fa <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    33f6:	2800      	cmp	r0, #0
    33f8:	f43f ad24 	beq.w	2e44 <isr_rx+0xcc>
    33fc:	7da3      	ldrb	r3, [r4, #22]
    33fe:	e5d8      	b.n	2fb2 <isr_rx+0x23a>
    3400:	d1b71759 	.word	0xd1b71759
    3404:	0001018d 	.word	0x0001018d
    3408:	00015d7c 	.word	0x00015d7c
    340c:	00015dc8 	.word	0x00015dc8
    3410:	0001525c 	.word	0x0001525c
    3414:	0000ff61 	.word	0x0000ff61
    3418:	000154d0 	.word	0x000154d0
    341c:	00015d4c 	.word	0x00015d4c
		LL_ASSERT(!radio_is_ready());
    3420:	4a06      	ldr	r2, [pc, #24]	; (343c <isr_rx+0x6c4>)
    3422:	4907      	ldr	r1, [pc, #28]	; (3440 <isr_rx+0x6c8>)
    3424:	4807      	ldr	r0, [pc, #28]	; (3444 <isr_rx+0x6cc>)
    3426:	f240 33a5 	movw	r3, #933	; 0x3a5
    342a:	f010 fc63 	bl	13cf4 <printk>
    342e:	4040      	eors	r0, r0
    3430:	f380 8811 	msr	BASEPRI, r0
    3434:	f04f 0003 	mov.w	r0, #3
    3438:	df02      	svc	2
    343a:	e746      	b.n	32ca <isr_rx+0x552>
    343c:	00015d7c 	.word	0x00015d7c
    3440:	00015d4c 	.word	0x00015d4c
    3444:	0001525c 	.word	0x0001525c

00003448 <tx_thread>:
		}
	}
}

static void tx_thread(void *p1, void *p2, void *p3)
{
    3448:	b538      	push	{r3, r4, r5, lr}
	while (1) {
		struct net_buf *buf;
		int err;

		/* Wait until a buffer is available */
		buf = net_buf_get(&tx_queue, K_FOREVER);
    344a:	4d09      	ldr	r5, [pc, #36]	; (3470 <tx_thread+0x28>)
    344c:	f04f 32ff 	mov.w	r2, #4294967295
    3450:	f04f 33ff 	mov.w	r3, #4294967295
    3454:	4628      	mov	r0, r5
    3456:	f011 f80e 	bl	14476 <net_buf_get>
    345a:	4604      	mov	r4, r0
		/* Pass buffer to the stack */
		err = bt_send(buf);
    345c:	f001 f8bc 	bl	45d8 <bt_send>
		if (err) {
    3460:	b110      	cbz	r0, 3468 <tx_thread+0x20>
			LOG_ERR("Unable to send (err %d)", err);
			net_buf_unref(buf);
    3462:	4620      	mov	r0, r4
    3464:	f00e fd62 	bl	11f2c <net_buf_unref>
	z_impl_k_yield();
    3468:	f010 f868 	bl	1353c <z_impl_k_yield>
	while (1) {
    346c:	e7ee      	b.n	344c <tx_thread+0x4>
    346e:	bf00      	nop
    3470:	200004b8 	.word	0x200004b8

00003474 <hci_uart_task_init>:
	}
}
#endif /* CONFIG_BT_CTLR_ASSERT_HANDLER */

static int hci_uart_task_init(struct device *unused)
{
    3474:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    3476:	4811      	ldr	r0, [pc, #68]	; (34bc <hci_uart_task_init+0x48>)
	LOG_DBG("");

	/* Derived from DT's bt-c2h-uart chosen node */
	hci_uart_task_dev = device_get_binding(CONFIG_BT_CTLR_TO_HOST_UART_DEV_NAME);
    3478:	4c11      	ldr	r4, [pc, #68]	; (34c0 <hci_uart_task_init+0x4c>)
    347a:	f00f fc77 	bl	12d6c <z_impl_device_get_binding>
    347e:	6020      	str	r0, [r4, #0]
	if (!hci_uart_task_dev) {
    3480:	b1b8      	cbz	r0, 34b2 <hci_uart_task_init+0x3e>
static inline void z_impl_uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_rx_disable) {
    3482:	6883      	ldr	r3, [r0, #8]
    3484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3486:	b103      	cbz	r3, 348a <hci_uart_task_init+0x16>
		api->irq_rx_disable(dev);
    3488:	4798      	blx	r3
		return -EINVAL;
	}

	uart_irq_rx_disable(hci_uart_task_dev);
	uart_irq_tx_disable(hci_uart_task_dev);
    348a:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_disable) {
    348c:	6883      	ldr	r3, [r0, #8]
    348e:	6a1b      	ldr	r3, [r3, #32]
    3490:	b103      	cbz	r3, 3494 <hci_uart_task_init+0x20>
		api->irq_tx_disable(dev);
    3492:	4798      	blx	r3

	uart_irq_callback_set(hci_uart_task_dev, bt_uart_isr);
    3494:	6822      	ldr	r2, [r4, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
    3496:	6893      	ldr	r3, [r2, #8]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3498:	b123      	cbz	r3, 34a4 <hci_uart_task_init+0x30>
    349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    349c:	b113      	cbz	r3, 34a4 <hci_uart_task_init+0x30>
		api->irq_callback_set(dev, cb, user_data);
    349e:	4909      	ldr	r1, [pc, #36]	; (34c4 <hci_uart_task_init+0x50>)
    34a0:	4610      	mov	r0, r2
    34a2:	4798      	blx	r3

	uart_irq_rx_enable(hci_uart_task_dev);
    34a4:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    34a6:	6883      	ldr	r3, [r0, #8]
    34a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34aa:	b12b      	cbz	r3, 34b8 <hci_uart_task_init+0x44>
		api->irq_rx_enable(dev);
    34ac:	4798      	blx	r3

	return 0;
    34ae:	2000      	movs	r0, #0
}
    34b0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    34b2:	f06f 0015 	mvn.w	r0, #21
    34b6:	e7fb      	b.n	34b0 <hci_uart_task_init+0x3c>
	return 0;
    34b8:	4618      	mov	r0, r3
    34ba:	e7f9      	b.n	34b0 <hci_uart_task_init+0x3c>
    34bc:	000160dc 	.word	0x000160dc
    34c0:	2000057c 	.word	0x2000057c
    34c4:	000034c9 	.word	0x000034c9

000034c8 <bt_uart_isr>:
{
    34c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while (uart_irq_update(hci_uart_task_dev) &&
    34cc:	4e4b      	ldr	r6, [pc, #300]	; (35fc <bt_uart_isr+0x134>)
		if (!remaining) {
    34ce:	4c4c      	ldr	r4, [pc, #304]	; (3600 <bt_uart_isr+0x138>)
{
    34d0:	b08c      	sub	sp, #48	; 0x30
    34d2:	4637      	mov	r7, r6
	while (uart_irq_update(hci_uart_task_dev) &&
    34d4:	6830      	ldr	r0, [r6, #0]
	if (api->irq_update) {
    34d6:	6883      	ldr	r3, [r0, #8]
    34d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    34da:	b183      	cbz	r3, 34fe <bt_uart_isr+0x36>
		return api->irq_update(dev);
    34dc:	4798      	blx	r3
    34de:	b170      	cbz	r0, 34fe <bt_uart_isr+0x36>
	       uart_irq_is_pending(hci_uart_task_dev)) {
    34e0:	6830      	ldr	r0, [r6, #0]
	if (api->irq_is_pending)	{
    34e2:	6883      	ldr	r3, [r0, #8]
    34e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34e6:	b153      	cbz	r3, 34fe <bt_uart_isr+0x36>
		return api->irq_is_pending(dev);
    34e8:	4798      	blx	r3
	while (uart_irq_update(hci_uart_task_dev) &&
    34ea:	b140      	cbz	r0, 34fe <bt_uart_isr+0x36>
		if (!uart_irq_rx_ready(hci_uart_task_dev)) {
    34ec:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready) {
    34ee:	6883      	ldr	r3, [r0, #8]
    34f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    34f2:	b93b      	cbnz	r3, 3504 <bt_uart_isr+0x3c>
			if (uart_irq_tx_ready(hci_uart_task_dev)) {
    34f4:	6838      	ldr	r0, [r7, #0]
	if (api->irq_tx_ready) {
    34f6:	6883      	ldr	r3, [r0, #8]
    34f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34fa:	2b00      	cmp	r3, #0
    34fc:	d133      	bne.n	3566 <bt_uart_isr+0x9e>
}
    34fe:	b00c      	add	sp, #48	; 0x30
    3500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return api->irq_rx_ready(dev);
    3504:	4798      	blx	r3
		if (!uart_irq_rx_ready(hci_uart_task_dev)) {
    3506:	2800      	cmp	r0, #0
    3508:	d0f4      	beq.n	34f4 <bt_uart_isr+0x2c>
		if (!remaining) {
    350a:	6823      	ldr	r3, [r4, #0]
    350c:	2b00      	cmp	r3, #0
    350e:	d14a      	bne.n	35a6 <bt_uart_isr+0xde>
			read = h4_read(hci_uart_task_dev, &type, sizeof(type), 0);
    3510:	f10d 050b 	add.w	r5, sp, #11
    3514:	6830      	ldr	r0, [r6, #0]
    3516:	2201      	movs	r2, #1
    3518:	4629      	mov	r1, r5
    351a:	f010 fbc1 	bl	13ca0 <h4_read>
			if (read != sizeof(type)) {
    351e:	2801      	cmp	r0, #1
    3520:	d1d8      	bne.n	34d4 <bt_uart_isr+0xc>
			buf = bt_buf_get_tx(BT_BUF_H4, K_NO_WAIT, &type,
    3522:	e9cd 5000 	strd	r5, r0, [sp]
    3526:	2200      	movs	r2, #0
    3528:	2300      	movs	r3, #0
    352a:	2004      	movs	r0, #4
    352c:	f000 fff8 	bl	4520 <bt_buf_get_tx>
    3530:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 3608 <bt_uart_isr+0x140>
    3534:	4605      	mov	r5, r0
    3536:	f8c8 0000 	str.w	r0, [r8]
			if (!buf) {
    353a:	2800      	cmp	r0, #0
    353c:	d0df      	beq.n	34fe <bt_uart_isr+0x36>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    353e:	7d03      	ldrb	r3, [r0, #20]
			switch (bt_buf_get_type(buf)) {
    3540:	b19b      	cbz	r3, 356a <bt_uart_isr+0xa2>
    3542:	2b02      	cmp	r3, #2
    3544:	d1db      	bne.n	34fe <bt_uart_isr+0x36>
	h4_read(hci_uart_task_dev, (void *)&hdr, sizeof(hdr), sizeof(hdr));
    3546:	2304      	movs	r3, #4
    3548:	461a      	mov	r2, r3
    354a:	a903      	add	r1, sp, #12
    354c:	6838      	ldr	r0, [r7, #0]
    354e:	f010 fba7 	bl	13ca0 <h4_read>
	net_buf_add_mem(buf, &hdr, sizeof(hdr));
    3552:	2204      	movs	r2, #4
    3554:	a903      	add	r1, sp, #12
    3556:	f105 0008 	add.w	r0, r5, #8
    355a:	f010 ffbd 	bl	144d8 <net_buf_simple_add_mem>
	*remaining = sys_le16_to_cpu(hdr.len);
    355e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3562:	6023      	str	r3, [r4, #0]
}
    3564:	e010      	b.n	3588 <bt_uart_isr+0xc0>
		return api->irq_tx_ready(dev);
    3566:	4798      	blx	r3
    3568:	e7c9      	b.n	34fe <bt_uart_isr+0x36>
	h4_read(hci_uart_task_dev, (void *)&hdr, sizeof(hdr), sizeof(hdr));
    356a:	2303      	movs	r3, #3
    356c:	461a      	mov	r2, r3
    356e:	a903      	add	r1, sp, #12
    3570:	6838      	ldr	r0, [r7, #0]
    3572:	f010 fb95 	bl	13ca0 <h4_read>
	*remaining = hdr.param_len;
    3576:	f89d 300e 	ldrb.w	r3, [sp, #14]
    357a:	6023      	str	r3, [r4, #0]
	net_buf_add_mem(buf, &hdr, sizeof(hdr));
    357c:	2203      	movs	r2, #3
    357e:	a903      	add	r1, sp, #12
    3580:	f105 0008 	add.w	r0, r5, #8
    3584:	f010 ffa8 	bl	144d8 <net_buf_simple_add_mem>
			if (remaining > net_buf_tailroom(buf)) {
    3588:	f8d8 0000 	ldr.w	r0, [r8]
    358c:	3008      	adds	r0, #8
    358e:	f010 ffcd 	bl	1452c <net_buf_simple_tailroom>
    3592:	6823      	ldr	r3, [r4, #0]
    3594:	4298      	cmp	r0, r3
    3596:	d206      	bcs.n	35a6 <bt_uart_isr+0xde>
				net_buf_unref(buf);
    3598:	f8d8 0000 	ldr.w	r0, [r8]
    359c:	f00e fcc6 	bl	11f2c <net_buf_unref>
				buf = NULL;
    35a0:	2300      	movs	r3, #0
    35a2:	f8c8 3000 	str.w	r3, [r8]
		if (!buf) {
    35a6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3608 <bt_uart_isr+0x140>
    35aa:	6838      	ldr	r0, [r7, #0]
    35ac:	f8d8 3000 	ldr.w	r3, [r8]
    35b0:	6822      	ldr	r2, [r4, #0]
    35b2:	b963      	cbnz	r3, 35ce <bt_uart_isr+0x106>
	if (api->fifo_read) {
    35b4:	6883      	ldr	r3, [r0, #8]
    35b6:	699b      	ldr	r3, [r3, #24]
    35b8:	b12b      	cbz	r3, 35c6 <bt_uart_isr+0xfe>
		return api->fifo_read(dev, rx_data, size);
    35ba:	2a21      	cmp	r2, #33	; 0x21
    35bc:	bf28      	it	cs
    35be:	2221      	movcs	r2, #33	; 0x21
    35c0:	a903      	add	r1, sp, #12
    35c2:	4798      	blx	r3
    35c4:	4603      	mov	r3, r0
			remaining -= read;
    35c6:	6820      	ldr	r0, [r4, #0]
    35c8:	1ac3      	subs	r3, r0, r3
    35ca:	6023      	str	r3, [r4, #0]
			continue;
    35cc:	e782      	b.n	34d4 <bt_uart_isr+0xc>
 *
 * @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
    35ce:	689d      	ldr	r5, [r3, #8]
    35d0:	8999      	ldrh	r1, [r3, #12]
		read = h4_read(hci_uart_task_dev, net_buf_tail(buf), remaining, 0);
    35d2:	2300      	movs	r3, #0
    35d4:	4429      	add	r1, r5
    35d6:	f010 fb63 	bl	13ca0 <h4_read>
		buf->len += read;
    35da:	f8d8 1000 	ldr.w	r1, [r8]
		remaining -= read;
    35de:	6825      	ldr	r5, [r4, #0]
		buf->len += read;
    35e0:	898b      	ldrh	r3, [r1, #12]
		remaining -= read;
    35e2:	1a2d      	subs	r5, r5, r0
		buf->len += read;
    35e4:	4403      	add	r3, r0
    35e6:	818b      	strh	r3, [r1, #12]
		remaining -= read;
    35e8:	6025      	str	r5, [r4, #0]
		if (!remaining) {
    35ea:	2d00      	cmp	r5, #0
    35ec:	f47f af72 	bne.w	34d4 <bt_uart_isr+0xc>
			net_buf_put(&tx_queue, buf);
    35f0:	4804      	ldr	r0, [pc, #16]	; (3604 <bt_uart_isr+0x13c>)
    35f2:	f010 ff5e 	bl	144b2 <net_buf_put>
			buf = NULL;
    35f6:	f8c8 5000 	str.w	r5, [r8]
    35fa:	e76b      	b.n	34d4 <bt_uart_isr+0xc>
    35fc:	2000057c 	.word	0x2000057c
    3600:	20000580 	.word	0x20000580
    3604:	200004b8 	.word	0x200004b8
    3608:	20000578 	.word	0x20000578

0000360c <main>:

DEVICE_INIT(hci_uart_task, "hci_uart_task", &hci_uart_task_init, NULL, NULL,
	    APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);

void main(void)
{
    360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	LOG_DBG("Start");
	__ASSERT(hci_uart_task_dev, "UART device is NULL");

	/* Enable the raw interface, this will in turn open the HCI driver */
	bt_enable_raw(&rx_queue);
    3610:	4819      	ldr	r0, [pc, #100]	; (3678 <main+0x6c>)
{
    3612:	b088      	sub	sp, #32
	bt_enable_raw(&rx_queue);
    3614:	f000 ffe6 	bl	45e4 <bt_enable_raw>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3618:	2200      	movs	r2, #0
    361a:	2300      	movs	r3, #0
    361c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3620:	2300      	movs	r3, #0
    3622:	f06f 0208 	mvn.w	r2, #8
    3626:	e9cd 2303 	strd	r2, r3, [sp, #12]
    362a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    362e:	9300      	str	r3, [sp, #0]
    3630:	4912      	ldr	r1, [pc, #72]	; (367c <main+0x70>)
    3632:	4b13      	ldr	r3, [pc, #76]	; (3680 <main+0x74>)
    3634:	4813      	ldr	r0, [pc, #76]	; (3684 <main+0x78>)
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	while (1) {
		struct net_buf *buf;

		buf = net_buf_get(&rx_queue, K_FOREVER);
    3636:	4f10      	ldr	r7, [pc, #64]	; (3678 <main+0x6c>)
		uart_poll_out(hci_uart_task_dev, net_buf_pull_u8(buf));
    3638:	4e13      	ldr	r6, [pc, #76]	; (3688 <main+0x7c>)
    363a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    363e:	f010 f87f 	bl	13740 <z_impl_k_thread_create>
		buf = net_buf_get(&rx_queue, K_FOREVER);
    3642:	f04f 32ff 	mov.w	r2, #4294967295
    3646:	f04f 33ff 	mov.w	r3, #4294967295
    364a:	4638      	mov	r0, r7
    364c:	f010 ff13 	bl	14476 <net_buf_get>
    3650:	4604      	mov	r4, r0
		uart_poll_out(hci_uart_task_dev, net_buf_pull_u8(buf));
    3652:	f100 0808 	add.w	r8, r0, #8
	while (buf->len) {
    3656:	89a3      	ldrh	r3, [r4, #12]
    3658:	b91b      	cbnz	r3, 3662 <main+0x56>
	net_buf_unref(buf);
    365a:	4620      	mov	r0, r4
    365c:	f00e fc66 	bl	11f2c <net_buf_unref>
	while (1) {
    3660:	e7ef      	b.n	3642 <main+0x36>
		uart_poll_out(hci_uart_task_dev, net_buf_pull_u8(buf));
    3662:	4640      	mov	r0, r8
    3664:	6835      	ldr	r5, [r6, #0]
    3666:	f010 ff59 	bl	1451c <net_buf_simple_pull_u8>
    366a:	4601      	mov	r1, r0
	api->poll_out(dev, out_char);
    366c:	68ab      	ldr	r3, [r5, #8]
    366e:	4628      	mov	r0, r5
    3670:	685b      	ldr	r3, [r3, #4]
    3672:	4798      	blx	r3
}
    3674:	e7ef      	b.n	3656 <main+0x4a>
    3676:	bf00      	nop
    3678:	200004a0 	.word	0x200004a0
    367c:	20002078 	.word	0x20002078
    3680:	00003449 	.word	0x00003449
    3684:	20000584 	.word	0x20000584
    3688:	2000057c 	.word	0x2000057c

0000368c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    368c:	680b      	ldr	r3, [r1, #0]
    368e:	3301      	adds	r3, #1
    3690:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3692:	4b01      	ldr	r3, [pc, #4]	; (3698 <char_out+0xc>)
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	4718      	bx	r3
    3698:	20000010 	.word	0x20000010

0000369c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36a0:	b085      	sub	sp, #20
    36a2:	469b      	mov	fp, r3
    36a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    36a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3738 <_printk_dec_ulong+0x9c>
    36aa:	2c01      	cmp	r4, #1
    36ac:	bfb8      	it	lt
    36ae:	2401      	movlt	r4, #1
    36b0:	2b01      	cmp	r3, #1
    36b2:	bf0c      	ite	eq
    36b4:	2330      	moveq	r3, #48	; 0x30
    36b6:	2320      	movne	r3, #32
    36b8:	4615      	mov	r5, r2
    36ba:	4606      	mov	r6, r0
    36bc:	468a      	mov	sl, r1
    36be:	9302      	str	r3, [sp, #8]
    36c0:	2701      	movs	r7, #1
    36c2:	f04f 080a 	mov.w	r8, #10
    36c6:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
    36c8:	fbb5 f3f9 	udiv	r3, r5, r9
    36cc:	9301      	str	r3, [sp, #4]
    36ce:	b90a      	cbnz	r2, 36d4 <_printk_dec_ulong+0x38>
    36d0:	45a9      	cmp	r9, r5
    36d2:	d81f      	bhi.n	3714 <_printk_dec_ulong+0x78>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
    36d4:	9b01      	ldr	r3, [sp, #4]
    36d6:	4651      	mov	r1, sl
    36d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
    36dc:	47b0      	blx	r6
			digits++;
    36de:	3701      	adds	r7, #1
			found_largest_digit = 1;
    36e0:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
    36e2:	9b01      	ldr	r3, [sp, #4]
		remaining--;
    36e4:	f108 38ff 	add.w	r8, r8, #4294967295
	while (pos >= 10) {
    36e8:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
    36ec:	fb09 5513 	mls	r5, r9, r3, r5
		pos /= 10;
    36f0:	f04f 030a 	mov.w	r3, #10
    36f4:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
    36f8:	d1e6      	bne.n	36c8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    36fa:	4651      	mov	r1, sl
    36fc:	f105 0030 	add.w	r0, r5, #48	; 0x30
    3700:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
    3702:	f1bb 0f03 	cmp.w	fp, #3
    3706:	d102      	bne.n	370e <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
    3708:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
    370a:	2c00      	cmp	r4, #0
    370c:	dc0e      	bgt.n	372c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    370e:	b005      	add	sp, #20
    3710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    3714:	4544      	cmp	r4, r8
    3716:	dbe4      	blt.n	36e2 <_printk_dec_ulong+0x46>
				&& padding < PAD_SPACE_AFTER) {
    3718:	f1bb 0f02 	cmp.w	fp, #2
    371c:	d8e1      	bhi.n	36e2 <_printk_dec_ulong+0x46>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    371e:	9802      	ldr	r0, [sp, #8]
    3720:	9203      	str	r2, [sp, #12]
    3722:	4651      	mov	r1, sl
    3724:	47b0      	blx	r6
			digits++;
    3726:	3701      	adds	r7, #1
    3728:	9a03      	ldr	r2, [sp, #12]
    372a:	e7da      	b.n	36e2 <_printk_dec_ulong+0x46>
			out(' ', ctx);
    372c:	4651      	mov	r1, sl
    372e:	2020      	movs	r0, #32
    3730:	47b0      	blx	r6
    3732:	3c01      	subs	r4, #1
    3734:	e7e9      	b.n	370a <_printk_dec_ulong+0x6e>
    3736:	bf00      	nop
    3738:	3b9aca00 	.word	0x3b9aca00

0000373c <__printk_hook_install>:
	_char_out = fn;
    373c:	4b01      	ldr	r3, [pc, #4]	; (3744 <__printk_hook_install+0x8>)
    373e:	6018      	str	r0, [r3, #0]
}
    3740:	4770      	bx	lr
    3742:	bf00      	nop
    3744:	20000010 	.word	0x20000010

00003748 <z_vprintk>:
{
    3748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    374c:	b08d      	sub	sp, #52	; 0x34
    374e:	461c      	mov	r4, r3
	char length_mod = 0;
    3750:	2700      	movs	r7, #0
    3752:	1e53      	subs	r3, r2, #1
{
    3754:	4605      	mov	r5, r0
    3756:	468b      	mov	fp, r1
    3758:	9303      	str	r3, [sp, #12]
	int min_width = -1;
    375a:	f04f 39ff 	mov.w	r9, #4294967295
	enum pad_type padding = PAD_NONE;
    375e:	46b8      	mov	r8, r7
			might_format = 0;
    3760:	2600      	movs	r6, #0
					break;
    3762:	e005      	b.n	3770 <z_vprintk+0x28>
		if (!might_format) {
    3764:	b96e      	cbnz	r6, 3782 <z_vprintk+0x3a>
			if (*fmt != '%') {
    3766:	2825      	cmp	r0, #37	; 0x25
    3768:	f000 8171 	beq.w	3a4e <z_vprintk+0x306>
				out((int)*fmt, ctx);
    376c:	4659      	mov	r1, fp
    376e:	47a8      	blx	r5
	while (*fmt) {
    3770:	9b03      	ldr	r3, [sp, #12]
    3772:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    3776:	9303      	str	r3, [sp, #12]
    3778:	2800      	cmp	r0, #0
    377a:	d1f3      	bne.n	3764 <z_vprintk+0x1c>
}
    377c:	b00d      	add	sp, #52	; 0x34
    377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    3782:	287a      	cmp	r0, #122	; 0x7a
    3784:	d80a      	bhi.n	379c <z_vprintk+0x54>
    3786:	2862      	cmp	r0, #98	; 0x62
    3788:	d810      	bhi.n	37ac <z_vprintk+0x64>
    378a:	2830      	cmp	r0, #48	; 0x30
    378c:	d054      	beq.n	3838 <z_vprintk+0xf0>
    378e:	d845      	bhi.n	381c <z_vprintk+0xd4>
    3790:	2825      	cmp	r0, #37	; 0x25
    3792:	f000 815a 	beq.w	3a4a <z_vprintk+0x302>
    3796:	282d      	cmp	r0, #45	; 0x2d
    3798:	f000 815f 	beq.w	3a5a <z_vprintk+0x312>
					out((int)'%', ctx);
    379c:	4659      	mov	r1, fp
    379e:	2025      	movs	r0, #37	; 0x25
    37a0:	47a8      	blx	r5
					out((int)*fmt, ctx);
    37a2:	9b03      	ldr	r3, [sp, #12]
    37a4:	7818      	ldrb	r0, [r3, #0]
    37a6:	4659      	mov	r1, fp
    37a8:	47a8      	blx	r5
    37aa:	e7d9      	b.n	3760 <z_vprintk+0x18>
    37ac:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    37b0:	2b17      	cmp	r3, #23
    37b2:	d8f3      	bhi.n	379c <z_vprintk+0x54>
    37b4:	a201      	add	r2, pc, #4	; (adr r2, 37bc <z_vprintk+0x74>)
    37b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    37ba:	bf00      	nop
    37bc:	00003a43 	.word	0x00003a43
    37c0:	00003887 	.word	0x00003887
    37c4:	0000379d 	.word	0x0000379d
    37c8:	0000379d 	.word	0x0000379d
    37cc:	0000379d 	.word	0x0000379d
    37d0:	00003869 	.word	0x00003869
    37d4:	00003887 	.word	0x00003887
    37d8:	0000379d 	.word	0x0000379d
    37dc:	0000379d 	.word	0x0000379d
    37e0:	00003869 	.word	0x00003869
    37e4:	0000379d 	.word	0x0000379d
    37e8:	0000379d 	.word	0x0000379d
    37ec:	0000379d 	.word	0x0000379d
    37f0:	00003929 	.word	0x00003929
    37f4:	0000379d 	.word	0x0000379d
    37f8:	0000379d 	.word	0x0000379d
    37fc:	00003a13 	.word	0x00003a13
    3800:	0000379d 	.word	0x0000379d
    3804:	000038f7 	.word	0x000038f7
    3808:	0000379d 	.word	0x0000379d
    380c:	0000379d 	.word	0x0000379d
    3810:	00003825 	.word	0x00003825
    3814:	0000379d 	.word	0x0000379d
    3818:	00003869 	.word	0x00003869
			switch (*fmt) {
    381c:	2839      	cmp	r0, #57	; 0x39
    381e:	d91a      	bls.n	3856 <z_vprintk+0x10e>
    3820:	2858      	cmp	r0, #88	; 0x58
    3822:	d1bb      	bne.n	379c <z_vprintk+0x54>
				if (*fmt == 'p') {
    3824:	9b03      	ldr	r3, [sp, #12]
    3826:	781b      	ldrb	r3, [r3, #0]
    3828:	2b70      	cmp	r3, #112	; 0x70
    382a:	f040 8088 	bne.w	393e <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
    382e:	f854 3b04 	ldr.w	r3, [r4], #4
    3832:	9306      	str	r3, [sp, #24]
    3834:	2200      	movs	r2, #0
    3836:	e090      	b.n	395a <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
    3838:	f1b9 0f00 	cmp.w	r9, #0
    383c:	da0e      	bge.n	385c <z_vprintk+0x114>
    383e:	f1b8 0f00 	cmp.w	r8, #0
    3842:	f000 810d 	beq.w	3a60 <z_vprintk+0x318>
					min_width = *fmt - '0';
    3846:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    384a:	f1b8 0f00 	cmp.w	r8, #0
    384e:	bf08      	it	eq
    3850:	f04f 0802 	moveq.w	r8, #2
    3854:	e78c      	b.n	3770 <z_vprintk+0x28>
				if (min_width < 0) {
    3856:	f1b9 0f00 	cmp.w	r9, #0
    385a:	dbf4      	blt.n	3846 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
    385c:	230a      	movs	r3, #10
    385e:	fb03 0909 	mla	r9, r3, r9, r0
    3862:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    3866:	e7f0      	b.n	384a <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
    3868:	2868      	cmp	r0, #104	; 0x68
    386a:	d103      	bne.n	3874 <z_vprintk+0x12c>
    386c:	2f68      	cmp	r7, #104	; 0x68
    386e:	d106      	bne.n	387e <z_vprintk+0x136>
					length_mod = 'H';
    3870:	2748      	movs	r7, #72	; 0x48
    3872:	e77d      	b.n	3770 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
    3874:	286c      	cmp	r0, #108	; 0x6c
    3876:	d102      	bne.n	387e <z_vprintk+0x136>
    3878:	2f6c      	cmp	r7, #108	; 0x6c
    387a:	f000 80f4 	beq.w	3a66 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
    387e:	2f00      	cmp	r7, #0
    3880:	d18c      	bne.n	379c <z_vprintk+0x54>
    3882:	4607      	mov	r7, r0
    3884:	e774      	b.n	3770 <z_vprintk+0x28>
				if (length_mod == 'z') {
    3886:	2f7a      	cmp	r7, #122	; 0x7a
    3888:	d102      	bne.n	3890 <z_vprintk+0x148>
					d = va_arg(ap, int);
    388a:	f854 6b04 	ldr.w	r6, [r4], #4
    388e:	e021      	b.n	38d4 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
    3890:	2f6c      	cmp	r7, #108	; 0x6c
    3892:	d0fa      	beq.n	388a <z_vprintk+0x142>
				} else if (length_mod == 'L') {
    3894:	2f4c      	cmp	r7, #76	; 0x4c
    3896:	d1f8      	bne.n	388a <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
    3898:	3407      	adds	r4, #7
    389a:	f024 0407 	bic.w	r4, r4, #7
    389e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    38a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
    38a6:	9b04      	ldr	r3, [sp, #16]
    38a8:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
    38ac:	9b05      	ldr	r3, [sp, #20]
    38ae:	9108      	str	r1, [sp, #32]
    38b0:	f143 0100 	adc.w	r1, r3, #0
    38b4:	9109      	str	r1, [sp, #36]	; 0x24
    38b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    38ba:	2100      	movs	r1, #0
    38bc:	f04f 30ff 	mov.w	r0, #4294967295
    38c0:	4299      	cmp	r1, r3
    38c2:	bf08      	it	eq
    38c4:	4290      	cmpeq	r0, r2
    38c6:	d204      	bcs.n	38d2 <z_vprintk+0x18a>
						print_err(out, ctx);
    38c8:	4659      	mov	r1, fp
    38ca:	4628      	mov	r0, r5
    38cc:	f010 fa04 	bl	13cd8 <print_err>
						break;
    38d0:	e746      	b.n	3760 <z_vprintk+0x18>
					d = lld;
    38d2:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
    38d4:	2e00      	cmp	r6, #0
    38d6:	da05      	bge.n	38e4 <z_vprintk+0x19c>
					out((int)'-', ctx);
    38d8:	4659      	mov	r1, fp
    38da:	202d      	movs	r0, #45	; 0x2d
    38dc:	47a8      	blx	r5
					d = -d;
    38de:	4276      	negs	r6, r6
					min_width--;
    38e0:	f109 39ff 	add.w	r9, r9, #4294967295
				_printk_dec_ulong(out, ctx, d, padding,
    38e4:	f8cd 9000 	str.w	r9, [sp]
    38e8:	4643      	mov	r3, r8
    38ea:	4632      	mov	r2, r6
				_printk_dec_ulong(out, ctx, u, padding,
    38ec:	4659      	mov	r1, fp
    38ee:	4628      	mov	r0, r5
    38f0:	f7ff fed4 	bl	369c <_printk_dec_ulong>
				break;
    38f4:	e734      	b.n	3760 <z_vprintk+0x18>
				if (length_mod == 'z') {
    38f6:	2f7a      	cmp	r7, #122	; 0x7a
    38f8:	d102      	bne.n	3900 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
    38fa:	f854 2b04 	ldr.w	r2, [r4], #4
    38fe:	e00f      	b.n	3920 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
    3900:	2f6c      	cmp	r7, #108	; 0x6c
    3902:	d0fa      	beq.n	38fa <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
    3904:	2f4c      	cmp	r7, #76	; 0x4c
    3906:	d1f8      	bne.n	38fa <z_vprintk+0x1b2>
					unsigned long long llu =
    3908:	3407      	adds	r4, #7
    390a:	f024 0407 	bic.w	r4, r4, #7
    390e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    3912:	2100      	movs	r1, #0
    3914:	f04f 30ff 	mov.w	r0, #4294967295
    3918:	4299      	cmp	r1, r3
    391a:	bf08      	it	eq
    391c:	4290      	cmpeq	r0, r2
    391e:	d3d3      	bcc.n	38c8 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
    3920:	f8cd 9000 	str.w	r9, [sp]
    3924:	4643      	mov	r3, r8
    3926:	e7e1      	b.n	38ec <z_vprintk+0x1a4>
				out('0', ctx);
    3928:	4659      	mov	r1, fp
    392a:	2030      	movs	r0, #48	; 0x30
    392c:	47a8      	blx	r5
				out('x', ctx);
    392e:	4659      	mov	r1, fp
    3930:	2078      	movs	r0, #120	; 0x78
    3932:	47a8      	blx	r5
					min_width = 8;
    3934:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    3938:	f04f 0801 	mov.w	r8, #1
    393c:	e772      	b.n	3824 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    393e:	2f6c      	cmp	r7, #108	; 0x6c
    3940:	f43f af75 	beq.w	382e <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
    3944:	2f4c      	cmp	r7, #76	; 0x4c
    3946:	f47f af72 	bne.w	382e <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
    394a:	1de3      	adds	r3, r4, #7
    394c:	f023 0307 	bic.w	r3, r3, #7
    3950:	461c      	mov	r4, r3
    3952:	f854 2b08 	ldr.w	r2, [r4], #8
    3956:	9206      	str	r2, [sp, #24]
    3958:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
    395a:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    395c:	2310      	movs	r3, #16
	int digits = 0;
    395e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
    3960:	9107      	str	r1, [sp, #28]
	int shift = sizeof(num) * 8;
    3962:	f04f 0a40 	mov.w	sl, #64	; 0x40
		shift -= 4;
    3966:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
    396a:	9906      	ldr	r1, [sp, #24]
    396c:	f1ca 0e20 	rsb	lr, sl, #32
    3970:	f1aa 0c20 	sub.w	ip, sl, #32
    3974:	fa21 f00a 	lsr.w	r0, r1, sl
    3978:	fa02 fe0e 	lsl.w	lr, r2, lr
    397c:	ea40 000e 	orr.w	r0, r0, lr
    3980:	fa22 fc0c 	lsr.w	ip, r2, ip
    3984:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    3988:	f010 000f 	ands.w	r0, r0, #15
    398c:	d107      	bne.n	399e <z_vprintk+0x256>
    398e:	9907      	ldr	r1, [sp, #28]
    3990:	b911      	cbnz	r1, 3998 <z_vprintk+0x250>
    3992:	f1ba 0f00 	cmp.w	sl, #0
    3996:	d125      	bne.n	39e4 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
    3998:	f04f 0c30 	mov.w	ip, #48	; 0x30
    399c:	e005      	b.n	39aa <z_vprintk+0x262>
    399e:	2809      	cmp	r0, #9
    39a0:	bf8c      	ite	hi
    39a2:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    39a6:	f04f 0c30 	movls.w	ip, #48	; 0x30
    39aa:	4460      	add	r0, ip
			out((int)nibble, ctx);
    39ac:	4659      	mov	r1, fp
    39ae:	b240      	sxtb	r0, r0
    39b0:	920a      	str	r2, [sp, #40]	; 0x28
    39b2:	9307      	str	r3, [sp, #28]
    39b4:	47a8      	blx	r5
			digits++;
    39b6:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
    39b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
    39ba:	3301      	adds	r3, #1
    39bc:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
    39be:	9b07      	ldr	r3, [sp, #28]
    39c0:	f1ba 0f00 	cmp.w	sl, #0
    39c4:	d123      	bne.n	3a0e <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
    39c6:	f1b8 0f03 	cmp.w	r8, #3
    39ca:	f47f aec9 	bne.w	3760 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
    39ce:	9b04      	ldr	r3, [sp, #16]
    39d0:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
    39d4:	2e00      	cmp	r6, #0
    39d6:	f77f aec3 	ble.w	3760 <z_vprintk+0x18>
			out(' ', ctx);
    39da:	4659      	mov	r1, fp
    39dc:	2020      	movs	r0, #32
    39de:	47a8      	blx	r5
    39e0:	3e01      	subs	r6, #1
    39e2:	e7f7      	b.n	39d4 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
    39e4:	1e59      	subs	r1, r3, #1
    39e6:	4599      	cmp	r9, r3
    39e8:	910a      	str	r1, [sp, #40]	; 0x28
    39ea:	db07      	blt.n	39fc <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
    39ec:	f1b8 0f01 	cmp.w	r8, #1
    39f0:	d106      	bne.n	3a00 <z_vprintk+0x2b8>
    39f2:	920b      	str	r2, [sp, #44]	; 0x2c
				out('0', ctx);
    39f4:	4659      	mov	r1, fp
    39f6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    39f8:	47a8      	blx	r5
    39fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
    39fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39fe:	e7b2      	b.n	3966 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
    3a00:	f1b8 0f02 	cmp.w	r8, #2
    3a04:	d1fa      	bne.n	39fc <z_vprintk+0x2b4>
    3a06:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
    3a08:	4659      	mov	r1, fp
    3a0a:	2020      	movs	r0, #32
    3a0c:	e7f4      	b.n	39f8 <z_vprintk+0x2b0>
			found_largest_digit = 1;
    3a0e:	9607      	str	r6, [sp, #28]
    3a10:	e7a9      	b.n	3966 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
    3a12:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
    3a16:	46b2      	mov	sl, r6
    3a18:	4653      	mov	r3, sl
    3a1a:	f81a 0b01 	ldrb.w	r0, [sl], #1
    3a1e:	b968      	cbnz	r0, 3a3c <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
    3a20:	f1b8 0f03 	cmp.w	r8, #3
    3a24:	d121      	bne.n	3a6a <z_vprintk+0x322>
					int remaining = min_width - (s - start);
    3a26:	1b9e      	subs	r6, r3, r6
    3a28:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
    3a2c:	2e00      	cmp	r6, #0
    3a2e:	f77f ae97 	ble.w	3760 <z_vprintk+0x18>
						out(' ', ctx);
    3a32:	4659      	mov	r1, fp
    3a34:	2020      	movs	r0, #32
    3a36:	47a8      	blx	r5
    3a38:	3e01      	subs	r6, #1
    3a3a:	e7f7      	b.n	3a2c <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
    3a3c:	4659      	mov	r1, fp
    3a3e:	47a8      	blx	r5
    3a40:	e7ea      	b.n	3a18 <z_vprintk+0x2d0>
				out(c, ctx);
    3a42:	f854 0b04 	ldr.w	r0, [r4], #4
    3a46:	4659      	mov	r1, fp
    3a48:	e6ae      	b.n	37a8 <z_vprintk+0x60>
				out((int)'%', ctx);
    3a4a:	4659      	mov	r1, fp
    3a4c:	e6ac      	b.n	37a8 <z_vprintk+0x60>
				length_mod = 0;
    3a4e:	4637      	mov	r7, r6
				padding = PAD_NONE;
    3a50:	46b0      	mov	r8, r6
				min_width = -1;
    3a52:	f04f 39ff 	mov.w	r9, #4294967295
				might_format = 1;
    3a56:	2601      	movs	r6, #1
    3a58:	e68a      	b.n	3770 <z_vprintk+0x28>
			switch (*fmt) {
    3a5a:	f04f 0803 	mov.w	r8, #3
    3a5e:	e687      	b.n	3770 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
    3a60:	f04f 0801 	mov.w	r8, #1
    3a64:	e684      	b.n	3770 <z_vprintk+0x28>
					length_mod = 'L';
    3a66:	274c      	movs	r7, #76	; 0x4c
    3a68:	e682      	b.n	3770 <z_vprintk+0x28>
			might_format = 0;
    3a6a:	4606      	mov	r6, r0
		++fmt;
    3a6c:	e680      	b.n	3770 <z_vprintk+0x28>
    3a6e:	bf00      	nop

00003a70 <vprintk>:
{
    3a70:	b507      	push	{r0, r1, r2, lr}
    3a72:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3a74:	2100      	movs	r1, #0
{
    3a76:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    3a78:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    3a7a:	4803      	ldr	r0, [pc, #12]	; (3a88 <vprintk+0x18>)
    3a7c:	a901      	add	r1, sp, #4
    3a7e:	f7ff fe63 	bl	3748 <z_vprintk>
}
    3a82:	b003      	add	sp, #12
    3a84:	f85d fb04 	ldr.w	pc, [sp], #4
    3a88:	0000368d 	.word	0x0000368d

00003a8c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    3a8c:	b510      	push	{r4, lr}
    3a8e:	4807      	ldr	r0, [pc, #28]	; (3aac <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    3a90:	4c07      	ldr	r4, [pc, #28]	; (3ab0 <uart_console_init+0x24>)
    3a92:	f00f f96b 	bl	12d6c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3a96:	4b07      	ldr	r3, [pc, #28]	; (3ab4 <uart_console_init+0x28>)
    3a98:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    3a9a:	4620      	mov	r0, r4
    3a9c:	f000 fcda 	bl	4454 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3aa0:	4620      	mov	r0, r4
    3aa2:	f7ff fe4b 	bl	373c <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    3aa6:	2000      	movs	r0, #0
    3aa8:	bd10      	pop	{r4, pc}
    3aaa:	bf00      	nop
    3aac:	000160dc 	.word	0x000160dc
    3ab0:	00003ab9 	.word	0x00003ab9
    3ab4:	200005f8 	.word	0x200005f8

00003ab8 <console_out>:
	if ('\n' == c) {
    3ab8:	280a      	cmp	r0, #10
{
    3aba:	b538      	push	{r3, r4, r5, lr}
    3abc:	4d07      	ldr	r5, [pc, #28]	; (3adc <console_out+0x24>)
    3abe:	4604      	mov	r4, r0
	if ('\n' == c) {
    3ac0:	d104      	bne.n	3acc <console_out+0x14>
    3ac2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    3ac4:	6883      	ldr	r3, [r0, #8]
    3ac6:	210d      	movs	r1, #13
    3ac8:	685b      	ldr	r3, [r3, #4]
    3aca:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3acc:	6828      	ldr	r0, [r5, #0]
    3ace:	6883      	ldr	r3, [r0, #8]
    3ad0:	b2e1      	uxtb	r1, r4
    3ad2:	685b      	ldr	r3, [r3, #4]
    3ad4:	4798      	blx	r3
}
    3ad6:	4620      	mov	r0, r4
    3ad8:	bd38      	pop	{r3, r4, r5, pc}
    3ada:	bf00      	nop
    3adc:	200005f8 	.word	0x200005f8

00003ae0 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
    3ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      enum clock_control_nrf_type type)
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    3ae2:	4e12      	ldr	r6, [pc, #72]	; (3b2c <clkstarted_handle.constprop.0+0x4c>)
    3ae4:	68f3      	ldr	r3, [r6, #12]
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
    3ae6:	240c      	movs	r4, #12
    3ae8:	fb04 3400 	mla	r4, r4, r0, r3
    3aec:	2301      	movs	r3, #1
static void clkstarted_handle(struct device *dev,
    3aee:	4605      	mov	r5, r0
	sub_data->started = true;
    3af0:	7263      	strb	r3, [r4, #9]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    3af2:	f04f 0320 	mov.w	r3, #32
    3af6:	f3ef 8111 	mrs	r1, BASEPRI
    3afa:	f383 8811 	msr	BASEPRI, r3
    3afe:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    3b02:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3b04:	b12b      	cbz	r3, 3b12 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3b06:	6860      	ldr	r0, [r4, #4]
    3b08:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    3b0a:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3b0c:	4283      	cmp	r3, r0
	list->tail = node;
    3b0e:	bf08      	it	eq
    3b10:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3b12:	f381 8811 	msr	BASEPRI, r1
    3b16:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
    3b1a:	b903      	cbnz	r3, 3b1e <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
    3b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
    3b1e:	e9d3 7201 	ldrd	r7, r2, [r3, #4]
    3b22:	4629      	mov	r1, r5
    3b24:	4630      	mov	r0, r6
    3b26:	47b8      	blx	r7
    3b28:	e7e3      	b.n	3af2 <clkstarted_handle.constprop.0+0x12>
    3b2a:	bf00      	nop
    3b2c:	20000414 	.word	0x20000414

00003b30 <clock_async_start>:
{
    3b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    3b34:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    3b36:	f8d0 e00c 	ldr.w	lr, [r0, #12]
{
    3b3a:	460c      	mov	r4, r1
    3b3c:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
    3b3e:	b14a      	cbz	r2, 3b54 <clock_async_start+0x24>
	sys_snode_t *item = sys_slist_peek_head(list);
    3b40:	230c      	movs	r3, #12
    3b42:	437b      	muls	r3, r7
    3b44:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    3b48:	429a      	cmp	r2, r3
    3b4a:	d05e      	beq.n	3c0a <clock_async_start+0xda>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3b4c:	b113      	cbz	r3, 3b54 <clock_async_start+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3b4e:	681b      	ldr	r3, [r3, #0]
	} while (item);
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1f9      	bne.n	3b48 <clock_async_start+0x18>
	__asm__ volatile(
    3b54:	f04f 0320 	mov.w	r3, #32
    3b58:	f3ef 8c11 	mrs	ip, BASEPRI
    3b5c:	f383 8811 	msr	BASEPRI, r3
    3b60:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    3b64:	210c      	movs	r1, #12
    3b66:	4379      	muls	r1, r7
    3b68:	eb0e 0301 	add.w	r3, lr, r1
    3b6c:	7a1d      	ldrb	r5, [r3, #8]
    3b6e:	3501      	adds	r5, #1
    3b70:	b2ed      	uxtb	r5, r5
    3b72:	721d      	strb	r5, [r3, #8]
	__asm__ volatile(
    3b74:	f38c 8811 	msr	BASEPRI, ip
    3b78:	f3bf 8f6f 	isb	sy
	if (data) {
    3b7c:	b362      	cbz	r2, 3bd8 <clock_async_start+0xa8>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3b7e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    3b82:	f04f 0803 	mov.w	r8, #3
    3b86:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    3b8a:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    3b8e:	f1bc 0f00 	cmp.w	ip, #0
    3b92:	d115      	bne.n	3bc0 <clock_async_start+0x90>
	__asm__ volatile(
    3b94:	f04f 0820 	mov.w	r8, #32
    3b98:	f3ef 8911 	mrs	r9, BASEPRI
    3b9c:	f388 8811 	msr	BASEPRI, r8
    3ba0:	f3bf 8f6f 	isb	sy
	parent->next = child;
    3ba4:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    3ba8:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3bac:	f1b8 0f00 	cmp.w	r8, #0
    3bb0:	d127      	bne.n	3c02 <clock_async_start+0xd2>
	list->tail = node;
    3bb2:	605a      	str	r2, [r3, #4]
	list->head = node;
    3bb4:	f84e 2001 	str.w	r2, [lr, r1]
	__asm__ volatile(
    3bb8:	f389 8811 	msr	BASEPRI, r9
    3bbc:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    3bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3bc4:	2103      	movs	r1, #3
    3bc6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
    3bca:	f1bc 0f00 	cmp.w	ip, #0
    3bce:	d003      	beq.n	3bd8 <clock_async_start+0xa8>
			data->cb(dev, subsys, data->user_data);
    3bd0:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    3bd4:	4621      	mov	r1, r4
    3bd6:	4798      	blx	r3
	if (ref == 1) {
    3bd8:	2d01      	cmp	r5, #1
    3bda:	d110      	bne.n	3bfe <clock_async_start+0xce>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
    3bdc:	2c01      	cmp	r4, #1
    3bde:	d107      	bne.n	3bf0 <clock_async_start+0xc0>
	if (!once) {
    3be0:	4d0c      	ldr	r5, [pc, #48]	; (3c14 <clock_async_start+0xe4>)
    3be2:	782b      	ldrb	r3, [r5, #0]
    3be4:	b923      	cbnz	r3, 3bf0 <clock_async_start+0xc0>
	z_impl_k_busy_wait(usec_to_wait);
    3be6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    3bea:	f010 ffe7 	bl	14bbc <z_impl_k_busy_wait>
		once = true;
    3bee:	702c      	strb	r4, [r5, #0]
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    3bf0:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bf4:	2201      	movs	r2, #1
    3bf6:	78b3      	ldrb	r3, [r6, #2]
    3bf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3bfc:	601a      	str	r2, [r3, #0]
	return 0;
    3bfe:	2000      	movs	r0, #0
    3c00:	e005      	b.n	3c0e <clock_async_start+0xde>
	parent->next = child;
    3c02:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    3c06:	605a      	str	r2, [r3, #4]
}
    3c08:	e7d6      	b.n	3bb8 <clock_async_start+0x88>
		return -EBUSY;
    3c0a:	f06f 000f 	mvn.w	r0, #15
}
    3c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c12:	bf00      	nop
    3c14:	20002064 	.word	0x20002064

00003c18 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3c18:	4b15      	ldr	r3, [pc, #84]	; (3c70 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    3c1a:	b507      	push	{r0, r1, r2, lr}
    3c1c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    3c1e:	b182      	cbz	r2, 3c42 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    3c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3c24:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    3c28:	07d1      	lsls	r1, r2, #31
    3c2a:	d50a      	bpl.n	3c42 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c2c:	2200      	movs	r2, #0
    3c2e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3c30:	681b      	ldr	r3, [r3, #0]
    3c32:	9300      	str	r3, [sp, #0]
    (void)dummy;
    3c34:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3c36:	4b0f      	ldr	r3, [pc, #60]	; (3c74 <nrf_power_clock_isr+0x5c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    3c38:	68db      	ldr	r3, [r3, #12]
    3c3a:	7a58      	ldrb	r0, [r3, #9]
    3c3c:	b908      	cbnz	r0, 3c42 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3c3e:	f7ff ff4f 	bl	3ae0 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3c42:	4b0d      	ldr	r3, [pc, #52]	; (3c78 <nrf_power_clock_isr+0x60>)
    3c44:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    3c46:	b182      	cbz	r2, 3c6a <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    3c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3c4c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    3c50:	0792      	lsls	r2, r2, #30
    3c52:	d50a      	bpl.n	3c6a <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c54:	2200      	movs	r2, #0
    3c56:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3c5c:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3c5e:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    3c60:	b003      	add	sp, #12
    3c62:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3c66:	f7ff bf3b 	b.w	3ae0 <clkstarted_handle.constprop.0>
}
    3c6a:	b003      	add	sp, #12
    3c6c:	f85d fb04 	ldr.w	pc, [sp], #4
    3c70:	40000100 	.word	0x40000100
    3c74:	20000414 	.word	0x20000414
    3c78:	40000104 	.word	0x40000104

00003c7c <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
    3c7c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    3c7e:	4b08      	ldr	r3, [pc, #32]	; (3ca0 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3c80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3c84:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3c88:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    3c8c:	4290      	cmp	r0, r2
    3c8e:	d100      	bne.n	3c92 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    3c90:	4770      	bx	lr
    3c92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    3c96:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3c98:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3c9c:	e7f2      	b.n	3c84 <handle_next_tick_case+0x8>
    3c9e:	bf00      	nop
    3ca0:	40011000 	.word	0x40011000

00003ca4 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ca4:	4b04      	ldr	r3, [pc, #16]	; (3cb8 <event_clear+0x14>)
    3ca6:	2200      	movs	r2, #0
{
    3ca8:	b082      	sub	sp, #8
    3caa:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	9301      	str	r3, [sp, #4]
    (void)dummy;
    3cb0:	9b01      	ldr	r3, [sp, #4]
}
    3cb2:	b002      	add	sp, #8
    3cb4:	4770      	bx	lr
    3cb6:	bf00      	nop
    3cb8:	40011140 	.word	0x40011140

00003cbc <rtc1_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
    3cbc:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    3cbe:	f7ff fff1 	bl	3ca4 <event_clear>
    return p_reg->CC[ch];
    3cc2:	4b07      	ldr	r3, [pc, #28]	; (3ce0 <rtc1_nrf_isr+0x24>)

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    3cc4:	4a07      	ldr	r2, [pc, #28]	; (3ce4 <rtc1_nrf_isr+0x28>)
    3cc6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    3cca:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3ccc:	1ac0      	subs	r0, r0, r3
    3cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3cd2:	4403      	add	r3, r0
    3cd4:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
}
    3cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    3cda:	f00f bed9 	b.w	13a90 <z_clock_announce>
    3cde:	bf00      	nop
    3ce0:	40011000 	.word	0x40011000
    3ce4:	20000614 	.word	0x20000614

00003ce8 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    3ce8:	b538      	push	{r3, r4, r5, lr}
    3cea:	4814      	ldr	r0, [pc, #80]	; (3d3c <z_clock_driver_init+0x54>)
    3cec:	f00f f83e 	bl	12d6c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
    3cf0:	b300      	cbz	r0, 3d34 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    3cf2:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    3cf4:	4d12      	ldr	r5, [pc, #72]	; (3d40 <z_clock_driver_init+0x58>)
    3cf6:	681b      	ldr	r3, [r3, #0]
    3cf8:	2101      	movs	r1, #1
    3cfa:	2400      	movs	r4, #0
    3cfc:	4798      	blx	r3
    3cfe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508

	clock_control_on(clock, CLOCK_CONTROL_NRF_SUBSYS_LF);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    3d02:	f7ff ffcf 	bl	3ca4 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d06:	4b0f      	ldr	r3, [pc, #60]	; (3d44 <z_clock_driver_init+0x5c>)
    3d08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3d0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    3d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3d14:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    3d18:	4622      	mov	r2, r4
    3d1a:	2101      	movs	r1, #1
    3d1c:	2011      	movs	r0, #17
    3d1e:	f000 f8d9 	bl	3ed4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    3d22:	2011      	movs	r0, #17
    3d24:	f000 f8a4 	bl	3e70 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3d28:	4a07      	ldr	r2, [pc, #28]	; (3d48 <z_clock_driver_init+0x60>)
    3d2a:	2301      	movs	r3, #1
    3d2c:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
    3d2e:	4620      	mov	r0, r4
    3d30:	602b      	str	r3, [r5, #0]
}
    3d32:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    3d34:	f04f 30ff 	mov.w	r0, #4294967295
    3d38:	e7fb      	b.n	3d32 <z_clock_driver_init+0x4a>
    3d3a:	bf00      	nop
    3d3c:	000160f1 	.word	0x000160f1
    3d40:	40011000 	.word	0x40011000
    3d44:	e000e100 	.word	0xe000e100
    3d48:	40011008 	.word	0x40011008

00003d4c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    3d4c:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
    3d4e:	4b2a      	ldr	r3, [pc, #168]	; (3df8 <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    3d50:	4c2a      	ldr	r4, [pc, #168]	; (3dfc <z_clock_set_timeout+0xb0>)
    3d52:	6819      	ldr	r1, [r3, #0]
    3d54:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3d58:	4d29      	ldr	r5, [pc, #164]	; (3e00 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    3d5a:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3d60:	bf08      	it	eq
    3d62:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    3d64:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    3d68:	0212      	lsls	r2, r2, #8
    3d6a:	d434      	bmi.n	3dd6 <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    3d6c:	3801      	subs	r0, #1
    3d6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3d72:	42a8      	cmp	r0, r5
    3d74:	bfa8      	it	ge
    3d76:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3d78:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    3d7a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3d7e:	4418      	add	r0, r3
    3d80:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    3d84:	42a8      	cmp	r0, r5
    3d86:	bf94      	ite	ls
    3d88:	180d      	addls	r5, r1, r0
    3d8a:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    3d8c:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    3d90:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    3d94:	f7ff ff86 	bl	3ca4 <event_clear>
	return (a - b) & COUNTER_MAX;
    3d98:	1a09      	subs	r1, r1, r0
    3d9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3d9e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    3da2:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    3da4:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3da8:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    3dac:	d104      	bne.n	3db8 <z_clock_set_timeout+0x6c>
    3dae:	200f      	movs	r0, #15
    3db0:	f010 ff04 	bl	14bbc <z_impl_k_busy_wait>
		event_clear();
    3db4:	f7ff ff76 	bl	3ca4 <event_clear>
    3db8:	4b12      	ldr	r3, [pc, #72]	; (3e04 <z_clock_set_timeout+0xb8>)
    3dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3dbe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    3dc2:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3dc6:	1a2b      	subs	r3, r5, r0
    3dc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    3dcc:	2b01      	cmp	r3, #1
    3dce:	d104      	bne.n	3dda <z_clock_set_timeout+0x8e>
		handle_next_tick_case(t);
    3dd0:	f7ff ff54 	bl	3c7c <handle_next_tick_case>
    3dd4:	e00b      	b.n	3dee <z_clock_set_timeout+0xa2>
		ticks = 0;
    3dd6:	2000      	movs	r0, #0
    3dd8:	e7ce      	b.n	3d78 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    3dda:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3dde:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    3de2:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3de6:	1a2d      	subs	r5, r5, r0
    3de8:	3d02      	subs	r5, #2
	if (diff > MAX_TICKS) {
    3dea:	022b      	lsls	r3, r5, #8
    3dec:	d4f0      	bmi.n	3dd0 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    3dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3df2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
    3df6:	bd70      	pop	{r4, r5, r6, pc}
    3df8:	20000614 	.word	0x20000614
    3dfc:	40011000 	.word	0x40011000
    3e00:	007fffff 	.word	0x007fffff
    3e04:	e000e100 	.word	0xe000e100

00003e08 <z_clock_elapsed>:
	__asm__ volatile(
    3e08:	f04f 0220 	mov.w	r2, #32
    3e0c:	f3ef 8311 	mrs	r3, BASEPRI
    3e10:	f382 8811 	msr	BASEPRI, r2
    3e14:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    3e18:	4a06      	ldr	r2, [pc, #24]	; (3e34 <z_clock_elapsed+0x2c>)
    3e1a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    3e1e:	4a06      	ldr	r2, [pc, #24]	; (3e38 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    3e20:	6812      	ldr	r2, [r2, #0]
    3e22:	1a80      	subs	r0, r0, r2
    3e24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    3e28:	f383 8811 	msr	BASEPRI, r3
    3e2c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    3e30:	4770      	bx	lr
    3e32:	bf00      	nop
    3e34:	40011000 	.word	0x40011000
    3e38:	20000614 	.word	0x20000614

00003e3c <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    3e3c:	4a09      	ldr	r2, [pc, #36]	; (3e64 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3e3e:	490a      	ldr	r1, [pc, #40]	; (3e68 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3e40:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3e42:	6809      	ldr	r1, [r1, #0]
    3e44:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3e46:	4909      	ldr	r1, [pc, #36]	; (3e6c <arch_swap+0x30>)
	_current->arch.basepri = key;
    3e48:	66d8      	str	r0, [r3, #108]	; 0x6c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3e4a:	684b      	ldr	r3, [r1, #4]
    3e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3e50:	604b      	str	r3, [r1, #4]
    3e52:	2300      	movs	r3, #0
    3e54:	f383 8811 	msr	BASEPRI, r3
    3e58:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3e5c:	6893      	ldr	r3, [r2, #8]
}
    3e5e:	6f18      	ldr	r0, [r3, #112]	; 0x70
    3e60:	4770      	bx	lr
    3e62:	bf00      	nop
    3e64:	20001f90 	.word	0x20001f90
    3e68:	000160d0 	.word	0x000160d0
    3e6c:	e000ed00 	.word	0xe000ed00

00003e70 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3e70:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3e72:	2b00      	cmp	r3, #0
    3e74:	db08      	blt.n	3e88 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e76:	2201      	movs	r2, #1
    3e78:	f000 001f 	and.w	r0, r0, #31
    3e7c:	fa02 f000 	lsl.w	r0, r2, r0
    3e80:	095b      	lsrs	r3, r3, #5
    3e82:	4a02      	ldr	r2, [pc, #8]	; (3e8c <arch_irq_enable+0x1c>)
    3e84:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3e88:	4770      	bx	lr
    3e8a:	bf00      	nop
    3e8c:	e000e100 	.word	0xe000e100

00003e90 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3e90:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3e92:	2b00      	cmp	r3, #0
    3e94:	db0d      	blt.n	3eb2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3e96:	2201      	movs	r2, #1
    3e98:	095b      	lsrs	r3, r3, #5
    3e9a:	f000 001f 	and.w	r0, r0, #31
    3e9e:	fa02 f000 	lsl.w	r0, r2, r0
    3ea2:	3320      	adds	r3, #32
    3ea4:	4a03      	ldr	r2, [pc, #12]	; (3eb4 <arch_irq_disable+0x24>)
    3ea6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3eaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3eae:	f3bf 8f6f 	isb	sy
}
    3eb2:	4770      	bx	lr
    3eb4:	e000e100 	.word	0xe000e100

00003eb8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3eb8:	4b05      	ldr	r3, [pc, #20]	; (3ed0 <arch_irq_is_enabled+0x18>)
    3eba:	0942      	lsrs	r2, r0, #5
    3ebc:	f000 001f 	and.w	r0, r0, #31
    3ec0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3ec4:	2301      	movs	r3, #1
    3ec6:	fa03 f000 	lsl.w	r0, r3, r0
}
    3eca:	4010      	ands	r0, r2
    3ecc:	4770      	bx	lr
    3ece:	bf00      	nop
    3ed0:	e000e100 	.word	0xe000e100

00003ed4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3ed4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3ed6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ed8:	bfa8      	it	ge
    3eda:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    3ede:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ee2:	bfb8      	it	lt
    3ee4:	4b06      	ldrlt	r3, [pc, #24]	; (3f00 <z_arm_irq_priority_set+0x2c>)
    3ee6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3eea:	bfac      	ite	ge
    3eec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ef0:	f000 000f 	andlt.w	r0, r0, #15
    3ef4:	b2c9      	uxtb	r1, r1
    3ef6:	bfb4      	ite	lt
    3ef8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3efa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    3efe:	4770      	bx	lr
    3f00:	e000ed14 	.word	0xe000ed14

00003f04 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    3f04:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3f06:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3f08:	4b04      	ldr	r3, [pc, #16]	; (3f1c <_arch_isr_direct_pm+0x18>)
    3f0a:	6a18      	ldr	r0, [r3, #32]
    3f0c:	b118      	cbz	r0, 3f16 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    3f0e:	2200      	movs	r2, #0
    3f10:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    3f12:	f010 fbf4 	bl	146fe <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3f16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3f18:	bd08      	pop	{r3, pc}
    3f1a:	bf00      	nop
    3f1c:	20001f90 	.word	0x20001f90

00003f20 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    3f20:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    3f24:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    3f26:	3a20      	subs	r2, #32
    3f28:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    3f2c:	4908      	ldr	r1, [pc, #32]	; (3f50 <arch_new_thread+0x30>)
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    3f2e:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    3f30:	9b00      	ldr	r3, [sp, #0]
    3f32:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    3f34:	9b01      	ldr	r3, [sp, #4]
    3f36:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    3f38:	9b02      	ldr	r3, [sp, #8]
    3f3a:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    3f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3f40:	61d3      	str	r3, [r2, #28]
	pInitCtx->basic.pc &= 0xfffffffe;
    3f42:	f021 0101 	bic.w	r1, r1, #1
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    3f46:	2300      	movs	r3, #0
	pInitCtx->basic.pc &= 0xfffffffe;
    3f48:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (u32_t)pInitCtx;
    3f4a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3f4c:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3f4e:	4770      	bx	lr
    3f50:	00013d0f 	.word	0x00013d0f

00003f54 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    3f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f56:	4606      	mov	r6, r0
    3f58:	460c      	mov	r4, r1
    3f5a:	4617      	mov	r7, r2
    3f5c:	461d      	mov	r5, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3f5e:	f000 f9cd 	bl	42fc <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    3f62:	4b09      	ldr	r3, [pc, #36]	; (3f88 <arch_switch_to_main_thread+0x34>)
	start_of_main_stack =
    3f64:	443c      	add	r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    3f66:	f024 0407 	bic.w	r4, r4, #7
	_current = main_thread;
    3f6a:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3f6c:	4628      	mov	r0, r5
    3f6e:	f384 8809 	msr	PSP, r4
    3f72:	2100      	movs	r1, #0
    3f74:	b663      	cpsie	if
    3f76:	f381 8811 	msr	BASEPRI, r1
    3f7a:	f3bf 8f6f 	isb	sy
    3f7e:	2200      	movs	r2, #0
    3f80:	2300      	movs	r3, #0
    3f82:	f00f fec4 	bl	13d0e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3f86:	bf00      	nop
    3f88:	20001f90 	.word	0x20001f90

00003f8c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3f8c:	4a0e      	ldr	r2, [pc, #56]	; (3fc8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3f8e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3f90:	4b0e      	ldr	r3, [pc, #56]	; (3fcc <z_arm_prep_c+0x40>)
    3f92:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3f96:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3f98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f9c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3fa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3fa4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3fac:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3fb0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3fb4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3fb8:	f00e ff16 	bl	12de8 <z_bss_zero>
	z_data_copy();
    3fbc:	f00e ff1e 	bl	12dfc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3fc0:	f000 f96a 	bl	4298 <z_arm_interrupt_init>
	z_cstart();
    3fc4:	f00e ff58 	bl	12e78 <z_cstart>
    3fc8:	00000000 	.word	0x00000000
    3fcc:	e000ed00 	.word	0xe000ed00

00003fd0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3fd0:	490f      	ldr	r1, [pc, #60]	; (4010 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3fd2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3fd4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3fd8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3fda:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3fde:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3fe2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3fe4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3fe8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3fec:	4f09      	ldr	r7, [pc, #36]	; (4014 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3fee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3ff2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    3ff4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3ff6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3ff8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    3ffa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3ffc:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3ffe:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4002:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4006:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    400a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    400e:	4770      	bx	lr
    ldr r1, =_kernel
    4010:	20001f90 	.word	0x20001f90
    ldr v4, =_SCS_ICSR
    4014:	e000ed04 	.word	0xe000ed04

00004018 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4018:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    401c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    401e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4022:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4026:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4028:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    402c:	2902      	cmp	r1, #2
    beq _oops
    402e:	d0ff      	beq.n	4030 <_oops>

00004030 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4030:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4032:	f010 f94b 	bl	142cc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4036:	bd01      	pop	{r0, pc}

00004038 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4038:	4901      	ldr	r1, [pc, #4]	; (4040 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    403a:	2210      	movs	r2, #16
	str	r2, [r1]
    403c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    403e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4040:	e000ed10 	.word	0xe000ed10

00004044 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4044:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4046:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4048:	f380 8811 	msr	BASEPRI, r0
	isb
    404c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4050:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4054:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4056:	b662      	cpsie	i
	isb
    4058:	f3bf 8f6f 	isb	sy

	bx	lr
    405c:	4770      	bx	lr
    405e:	bf00      	nop

00004060 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4060:	bf30      	wfi
    b z_SysNmiOnReset
    4062:	f7ff bffd 	b.w	4060 <z_SysNmiOnReset>
    4066:	bf00      	nop

00004068 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4068:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    406a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    406c:	4a0b      	ldr	r2, [pc, #44]	; (409c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    406e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    4070:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4072:	bf1e      	ittt	ne
	movne	r1, #0
    4074:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4076:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    4078:	f010 fb41 	blne	146fe <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    407c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    407e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4082:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4086:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    408a:	4905      	ldr	r1, [pc, #20]	; (40a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    408c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    408e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    4090:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4092:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4096:	4903      	ldr	r1, [pc, #12]	; (40a4 <_isr_wrapper+0x3c>)
	bx r1
    4098:	4708      	bx	r1
    409a:	0000      	.short	0x0000
	ldr r2, =_kernel
    409c:	20001f90 	.word	0x20001f90
	ldr r1, =_sw_isr_table
    40a0:	00015060 	.word	0x00015060
	ldr r1, =z_arm_int_exit
    40a4:	000040ed 	.word	0x000040ed

000040a8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    40a8:	f010 f988 	bl	143bc <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    40ac:	2020      	movs	r0, #32
    msr BASEPRI, r0
    40ae:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    40b2:	4808      	ldr	r0, [pc, #32]	; (40d4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    40b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    40b8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    40ba:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    40be:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    40c2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    40c4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    40c6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    40ca:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    40ce:	f7ff ff5d 	bl	3f8c <z_arm_prep_c>
    40d2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    40d4:	20002d78 	.word	0x20002d78

000040d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    40d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    40dc:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    40e0:	4672      	mov	r2, lr

	push {r0, lr}
    40e2:	b501      	push	{r0, lr}

	bl z_arm_fault
    40e4:	f000 f85c 	bl	41a0 <z_arm_fault>

	pop {r0, pc}
    40e8:	bd01      	pop	{r0, pc}
    40ea:	bf00      	nop

000040ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    40ec:	4b04      	ldr	r3, [pc, #16]	; (4100 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    40ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    40f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    40f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    40f4:	d003      	beq.n	40fe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    40f6:	4903      	ldr	r1, [pc, #12]	; (4104 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    40f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    40fc:	600a      	str	r2, [r1, #0]

000040fe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    40fe:	4770      	bx	lr
	ldr r3, =_kernel
    4100:	20001f90 	.word	0x20001f90
	ldr r1, =_SCS_ICSR
    4104:	e000ed04 	.word	0xe000ed04

00004108 <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4108:	4b0c      	ldr	r3, [pc, #48]	; (413c <mem_manage_fault.isra.0+0x34>)
    410a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    410c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    410e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4110:	0792      	lsls	r2, r2, #30
    4112:	d508      	bpl.n	4126 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    4114:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4118:	0612      	lsls	r2, r2, #24
    411a:	d504      	bpl.n	4126 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    411c:	b118      	cbz	r0, 4126 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    411e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4124:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4126:	4b05      	ldr	r3, [pc, #20]	; (413c <mem_manage_fault.isra.0+0x34>)
    4128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    412a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    412c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    412e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    4130:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4132:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4136:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4138:	7008      	strb	r0, [r1, #0]

	return reason;
}
    413a:	4770      	bx	lr
    413c:	e000ed00 	.word	0xe000ed00

00004140 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4140:	4b0d      	ldr	r3, [pc, #52]	; (4178 <bus_fault.isra.0+0x38>)
    4142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4148:	0592      	lsls	r2, r2, #22
    414a:	d508      	bpl.n	415e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    414c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    414e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4150:	0412      	lsls	r2, r2, #16
    4152:	d504      	bpl.n	415e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    4154:	b118      	cbz	r0, 415e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    415c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    415e:	4b06      	ldr	r3, [pc, #24]	; (4178 <bus_fault.isra.0+0x38>)
    4160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4164:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4166:	bf58      	it	pl
    4168:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    416a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    416c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    416e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    4172:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4174:	7008      	strb	r0, [r1, #0]

	return reason;
}
    4176:	4770      	bx	lr
    4178:	e000ed00 	.word	0xe000ed00

0000417c <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    417c:	4b07      	ldr	r3, [pc, #28]	; (419c <usage_fault.isra.0+0x20>)
    417e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    418a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    418c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4190:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4194:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4196:	2000      	movs	r0, #0
    4198:	4770      	bx	lr
    419a:	bf00      	nop
    419c:	e000ed00 	.word	0xe000ed00

000041a0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    41a0:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    41a2:	4b36      	ldr	r3, [pc, #216]	; (427c <z_arm_fault+0xdc>)
    41a4:	685b      	ldr	r3, [r3, #4]
{
    41a6:	b08a      	sub	sp, #40	; 0x28
    41a8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    41aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    41ae:	2500      	movs	r5, #0
    41b0:	f385 8811 	msr	BASEPRI, r5
    41b4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    41b8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    41bc:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    41c0:	d111      	bne.n	41e6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    41c2:	f002 010c 	and.w	r1, r2, #12
    41c6:	2908      	cmp	r1, #8
    41c8:	d00d      	beq.n	41e6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    41ca:	0711      	lsls	r1, r2, #28
    41cc:	d401      	bmi.n	41d2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    41ce:	4606      	mov	r6, r0
			*nested_exc = true;
    41d0:	2501      	movs	r5, #1
	*recoverable = false;
    41d2:	2200      	movs	r2, #0
    41d4:	3b03      	subs	r3, #3
    41d6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    41da:	2b03      	cmp	r3, #3
    41dc:	d847      	bhi.n	426e <z_arm_fault+0xce>
    41de:	e8df f003 	tbb	[pc, r3]
    41e2:	3e04      	.short	0x3e04
    41e4:	3b42      	.short	0x3b42
		return NULL;
    41e6:	462e      	mov	r6, r5
    41e8:	e7f3      	b.n	41d2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    41ea:	4b24      	ldr	r3, [pc, #144]	; (427c <z_arm_fault+0xdc>)
    41ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    41ee:	0792      	lsls	r2, r2, #30
    41f0:	d43d      	bmi.n	426e <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    41f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    41f4:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    41f8:	d008      	beq.n	420c <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    41fa:	3328      	adds	r3, #40	; 0x28
    41fc:	781b      	ldrb	r3, [r3, #0]
    41fe:	b1eb      	cbz	r3, 423c <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    4200:	f10d 0107 	add.w	r1, sp, #7
    4204:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4206:	f7ff ff7f 	bl	4108 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    420a:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    420c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4210:	b993      	cbnz	r3, 4238 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4212:	2220      	movs	r2, #32
    4214:	4631      	mov	r1, r6
    4216:	a802      	add	r0, sp, #8
    4218:	f010 f87f 	bl	1431a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    421e:	b345      	cbz	r5, 4272 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4220:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4224:	b922      	cbnz	r2, 4230 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4226:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    422a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    422e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4230:	a902      	add	r1, sp, #8
    4232:	4620      	mov	r0, r4
    4234:	f010 f848 	bl	142c8 <z_arm_fatal_error>
}
    4238:	b00a      	add	sp, #40	; 0x28
    423a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    423c:	4b10      	ldr	r3, [pc, #64]	; (4280 <z_arm_fault+0xe0>)
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	b12b      	cbz	r3, 424e <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    4242:	f10d 0107 	add.w	r1, sp, #7
    4246:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4248:	f7ff ff7a 	bl	4140 <bus_fault.isra.0>
    424c:	e7dd      	b.n	420a <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    424e:	4b0d      	ldr	r3, [pc, #52]	; (4284 <z_arm_fault+0xe4>)
    4250:	8818      	ldrh	r0, [r3, #0]
    4252:	b284      	uxth	r4, r0
    4254:	2c00      	cmp	r4, #0
    4256:	d0d9      	beq.n	420c <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    4258:	f7ff ff90 	bl	417c <usage_fault.isra.0>
    425c:	e7d5      	b.n	420a <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    425e:	f10d 0107 	add.w	r1, sp, #7
    4262:	2000      	movs	r0, #0
    4264:	e7cf      	b.n	4206 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    4266:	f10d 0107 	add.w	r1, sp, #7
    426a:	2000      	movs	r0, #0
    426c:	e7ec      	b.n	4248 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    426e:	2400      	movs	r4, #0
    4270:	e7cc      	b.n	420c <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4272:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4276:	f023 0301 	bic.w	r3, r3, #1
    427a:	e7d8      	b.n	422e <z_arm_fault+0x8e>
    427c:	e000ed00 	.word	0xe000ed00
    4280:	e000ed29 	.word	0xe000ed29
    4284:	e000ed2a 	.word	0xe000ed2a

00004288 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4288:	4a02      	ldr	r2, [pc, #8]	; (4294 <z_arm_fault_init+0xc>)
    428a:	6953      	ldr	r3, [r2, #20]
    428c:	f043 0310 	orr.w	r3, r3, #16
    4290:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4292:	4770      	bx	lr
    4294:	e000ed00 	.word	0xe000ed00

00004298 <z_arm_interrupt_init>:
    4298:	4804      	ldr	r0, [pc, #16]	; (42ac <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    429a:	2300      	movs	r3, #0
    429c:	2120      	movs	r1, #32
    429e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    42a0:	3301      	adds	r3, #1
    42a2:	2b27      	cmp	r3, #39	; 0x27
    42a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    42a8:	d1f9      	bne.n	429e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    42aa:	4770      	bx	lr
    42ac:	e000e100 	.word	0xe000e100

000042b0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    42b0:	b538      	push	{r3, r4, r5, lr}
    42b2:	4604      	mov	r4, r0
	__asm__ volatile(
    42b4:	f04f 0320 	mov.w	r3, #32
    42b8:	f3ef 8511 	mrs	r5, BASEPRI
    42bc:	f383 8811 	msr	BASEPRI, r3
    42c0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    42c4:	f00f f850 	bl	13368 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    42c8:	4b0a      	ldr	r3, [pc, #40]	; (42f4 <z_impl_k_thread_abort+0x44>)
    42ca:	689b      	ldr	r3, [r3, #8]
    42cc:	42a3      	cmp	r3, r4
    42ce:	d10b      	bne.n	42e8 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    42d0:	4b09      	ldr	r3, [pc, #36]	; (42f8 <z_impl_k_thread_abort+0x48>)
    42d2:	685a      	ldr	r2, [r3, #4]
    42d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    42d8:	b912      	cbnz	r2, 42e0 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    42da:	4628      	mov	r0, r5
    42dc:	f7ff fdae 	bl	3e3c <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    42e0:	685a      	ldr	r2, [r3, #4]
    42e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    42e6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    42e8:	4628      	mov	r0, r5
}
    42ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    42ee:	f010 bb5f 	b.w	149b0 <z_reschedule_irqlock>
    42f2:	bf00      	nop
    42f4:	20001f90 	.word	0x20001f90
    42f8:	e000ed00 	.word	0xe000ed00

000042fc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    42fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    42fe:	4b08      	ldr	r3, [pc, #32]	; (4320 <z_arm_configure_static_mpu_regions+0x24>)
    4300:	9301      	str	r3, [sp, #4]
    4302:	4b08      	ldr	r3, [pc, #32]	; (4324 <z_arm_configure_static_mpu_regions+0x28>)
    4304:	9302      	str	r3, [sp, #8]
    4306:	4b08      	ldr	r3, [pc, #32]	; (4328 <z_arm_configure_static_mpu_regions+0x2c>)
    4308:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    430a:	ab01      	add	r3, sp, #4
    430c:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    430e:	4a07      	ldr	r2, [pc, #28]	; (432c <z_arm_configure_static_mpu_regions+0x30>)
    4310:	4b07      	ldr	r3, [pc, #28]	; (4330 <z_arm_configure_static_mpu_regions+0x34>)
    4312:	2101      	movs	r1, #1
    4314:	4668      	mov	r0, sp
    4316:	f000 f893 	bl	4440 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    431a:	b005      	add	sp, #20
    431c:	f85d fb04 	ldr.w	pc, [sp], #4
    4320:	20000000 	.word	0x20000000
    4324:	00000000 	.word	0x00000000
    4328:	060b0000 	.word	0x060b0000
    432c:	20000000 	.word	0x20000000
    4330:	20010000 	.word	0x20010000

00004334 <mpu_configure_regions>:
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4334:	f8df c084 	ldr.w	ip, [pc, #132]	; 43bc <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    4338:	b5f0      	push	{r4, r5, r6, r7, lr}
    433a:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    433c:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    433e:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    4340:	428f      	cmp	r7, r1
    4342:	db00      	blt.n	4346 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4344:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    4346:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    434a:	f8de 4004 	ldr.w	r4, [lr, #4]
    434e:	b394      	cbz	r4, 43b6 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    4350:	b143      	cbz	r3, 4364 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    4352:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4354:	422c      	tst	r4, r5
    4356:	d119      	bne.n	438c <mpu_configure_regions+0x58>
		&&
    4358:	2c1f      	cmp	r4, #31
    435a:	d917      	bls.n	438c <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
    435c:	f8de 2000 	ldr.w	r2, [lr]
		&&
    4360:	4215      	tst	r5, r2
    4362:	d113      	bne.n	438c <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4364:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    4366:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    4368:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    436c:	f8de 0008 	ldr.w	r0, [lr, #8]
    4370:	d90f      	bls.n	4392 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    4372:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4376:	d80e      	bhi.n	4396 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4378:	3c01      	subs	r4, #1
    437a:	fab4 f484 	clz	r4, r4
    437e:	f1c4 041f 	rsb	r4, r4, #31
    4382:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    4384:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4386:	ea44 0400 	orr.w	r4, r4, r0
    438a:	d906      	bls.n	439a <mpu_configure_regions+0x66>
			return -EINVAL;
    438c:	f06f 0015 	mvn.w	r0, #21
    4390:	e7d8      	b.n	4344 <mpu_configure_regions+0x10>
		return REGION_32B;
    4392:	2408      	movs	r4, #8
    4394:	e7f6      	b.n	4384 <mpu_configure_regions+0x50>
		return REGION_4G;
    4396:	243e      	movs	r4, #62	; 0x3e
    4398:	e7f4      	b.n	4384 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    439a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    439e:	4315      	orrs	r5, r2
    43a0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    43a4:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    43a8:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    43ac:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    43ae:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    43b2:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    43b6:	3701      	adds	r7, #1
    43b8:	e7c2      	b.n	4340 <mpu_configure_regions+0xc>
    43ba:	bf00      	nop
    43bc:	e000ed90 	.word	0xe000ed90

000043c0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    43c0:	4b03      	ldr	r3, [pc, #12]	; (43d0 <arm_core_mpu_enable+0x10>)
    43c2:	2205      	movs	r2, #5
    43c4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    43c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    43ca:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    43ce:	4770      	bx	lr
    43d0:	e000ed90 	.word	0xe000ed90

000043d4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    43d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    43d8:	4b01      	ldr	r3, [pc, #4]	; (43e0 <arm_core_mpu_disable+0xc>)
    43da:	2200      	movs	r2, #0
    43dc:	605a      	str	r2, [r3, #4]
}
    43de:	4770      	bx	lr
    43e0:	e000ed90 	.word	0xe000ed90

000043e4 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    43e4:	4913      	ldr	r1, [pc, #76]	; (4434 <arm_mpu_init+0x50>)
    43e6:	6808      	ldr	r0, [r1, #0]
    43e8:	2808      	cmp	r0, #8
{
    43ea:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    43ec:	d81e      	bhi.n	442c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    43ee:	f7ff fff1 	bl	43d4 <arm_core_mpu_disable>
	MPU->RNR = index;
    43f2:	4c11      	ldr	r4, [pc, #68]	; (4438 <arm_mpu_init+0x54>)
    43f4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    43f6:	2200      	movs	r2, #0
    43f8:	4290      	cmp	r0, r2
    43fa:	f101 010c 	add.w	r1, r1, #12
    43fe:	d105      	bne.n	440c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4400:	4b0e      	ldr	r3, [pc, #56]	; (443c <arm_mpu_init+0x58>)
    4402:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4404:	f7ff ffdc 	bl	43c0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    4408:	2000      	movs	r0, #0
}
    440a:	bd10      	pop	{r4, pc}
    440c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    440e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4412:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4416:	4313      	orrs	r3, r2
    4418:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    441c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    441e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4422:	f043 0301 	orr.w	r3, r3, #1
    4426:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4428:	3201      	adds	r2, #1
    442a:	e7e5      	b.n	43f8 <arm_mpu_init+0x14>
		return -1;
    442c:	f04f 30ff 	mov.w	r0, #4294967295
    4430:	e7eb      	b.n	440a <arm_mpu_init+0x26>
    4432:	bf00      	nop
    4434:	000151cc 	.word	0x000151cc
    4438:	e000ed90 	.word	0xe000ed90
    443c:	20002065 	.word	0x20002065

00004440 <arm_core_mpu_configure_static_mpu_regions>:
{
    4440:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4442:	4c03      	ldr	r4, [pc, #12]	; (4450 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4444:	2301      	movs	r3, #1
    4446:	7822      	ldrb	r2, [r4, #0]
    4448:	f7ff ff74 	bl	4334 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    444c:	7020      	strb	r0, [r4, #0]
}
    444e:	bd10      	pop	{r4, pc}
    4450:	20002065 	.word	0x20002065

00004454 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4454:	4b01      	ldr	r3, [pc, #4]	; (445c <__stdout_hook_install+0x8>)
    4456:	6018      	str	r0, [r3, #0]
}
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	20000014 	.word	0x20000014

00004460 <nordicsemi_nrf52_init>:
    4460:	f04f 0320 	mov.w	r3, #32
    4464:	f3ef 8211 	mrs	r2, BASEPRI
    4468:	f383 8811 	msr	BASEPRI, r3
    446c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4470:	4906      	ldr	r1, [pc, #24]	; (448c <nordicsemi_nrf52_init+0x2c>)
    4472:	2301      	movs	r3, #1
    4474:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4478:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    447c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4480:	f382 8811 	msr	BASEPRI, r2
    4484:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4488:	2000      	movs	r0, #0
    448a:	4770      	bx	lr
    448c:	4001e000 	.word	0x4001e000

00004490 <sys_arch_reboot>:
    *p_gpregret = val;
    4490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4494:	b2c0      	uxtb	r0, r0
    4496:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    449a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    449e:	4905      	ldr	r1, [pc, #20]	; (44b4 <sys_arch_reboot+0x24>)
    44a0:	4b05      	ldr	r3, [pc, #20]	; (44b8 <sys_arch_reboot+0x28>)
    44a2:	68ca      	ldr	r2, [r1, #12]
    44a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    44a8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    44aa:	60cb      	str	r3, [r1, #12]
    44ac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    44b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    44b2:	e7fd      	b.n	44b0 <sys_arch_reboot+0x20>
    44b4:	e000ed00 	.word	0xe000ed00
    44b8:	05fa0004 	.word	0x05fa0004

000044bc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    44bc:	b120      	cbz	r0, 44c8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    44be:	4b03      	ldr	r3, [pc, #12]	; (44cc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    44c0:	0180      	lsls	r0, r0, #6
    44c2:	f043 0301 	orr.w	r3, r3, #1
    44c6:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    44c8:	4770      	bx	lr
    44ca:	bf00      	nop
    44cc:	000151b0 	.word	0x000151b0

000044d0 <bt_hci_driver_register>:
struct bt_hci_raw_cmd_ext *cmd_ext;
static size_t cmd_ext_size;

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    44d0:	4a07      	ldr	r2, [pc, #28]	; (44f0 <bt_hci_driver_register+0x20>)
{
    44d2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    44d4:	6810      	ldr	r0, [r2, #0]
    44d6:	b928      	cbnz	r0, 44e4 <bt_hci_driver_register+0x14>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    44d8:	68d9      	ldr	r1, [r3, #12]
    44da:	b131      	cbz	r1, 44ea <bt_hci_driver_register+0x1a>
    44dc:	6919      	ldr	r1, [r3, #16]
    44de:	b121      	cbz	r1, 44ea <bt_hci_driver_register+0x1a>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    44e0:	6013      	str	r3, [r2, #0]
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    44e2:	4770      	bx	lr
		return -EALREADY;
    44e4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    44e8:	4770      	bx	lr
		return -EINVAL;
    44ea:	f06f 0015 	mvn.w	r0, #21
}
    44ee:	4770      	bx	lr
    44f0:	20000618 	.word	0x20000618

000044f4 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    44f4:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;

	switch (type) {
    44f6:	f000 06fd 	and.w	r6, r0, #253	; 0xfd
    44fa:	2e01      	cmp	r6, #1
{
    44fc:	4605      	mov	r5, r0
	switch (type) {
    44fe:	d10b      	bne.n	4518 <bt_buf_get_rx+0x24>
	default:
		BT_ERR("Invalid type: %u", type);
		return NULL;
	}

	buf = net_buf_alloc(&hci_rx_pool, timeout);
    4500:	4806      	ldr	r0, [pc, #24]	; (451c <bt_buf_get_rx+0x28>)
    4502:	f00f ffb3 	bl	1446c <net_buf_alloc_fixed>
	if (!buf) {
    4506:	4604      	mov	r4, r0
    4508:	b120      	cbz	r0, 4514 <bt_buf_get_rx+0x20>
		return buf;
	}

	net_buf_reserve(buf, BT_BUF_RESERVE);
    450a:	4631      	mov	r1, r6
    450c:	3008      	adds	r0, #8
    450e:	f00f ffcc 	bl	144aa <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    4512:	7525      	strb	r5, [r4, #20]
	bt_buf_set_type(buf, type);

	return buf;
}
    4514:	4620      	mov	r0, r4
    4516:	bd70      	pop	{r4, r5, r6, pc}
	switch (type) {
    4518:	2400      	movs	r4, #0
    451a:	e7fb      	b.n	4514 <bt_buf_get_rx+0x20>
    451c:	20000538 	.word	0x20000538

00004520 <bt_buf_get_tx>:

struct net_buf *bt_buf_get_tx(enum bt_buf_type type, k_timeout_t timeout,
			      const void *data, size_t size)
{
    4520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf_pool *pool;
	struct net_buf *buf;

	switch (type) {
    4524:	2802      	cmp	r0, #2
{
    4526:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    452a:	4604      	mov	r4, r0
	switch (type) {
    452c:	d029      	beq.n	4582 <bt_buf_get_tx+0x62>
    452e:	2804      	cmp	r0, #4
    4530:	d002      	beq.n	4538 <bt_buf_get_tx+0x18>
    4532:	b340      	cbz	r0, 4586 <bt_buf_get_tx+0x66>
    4534:	2500      	movs	r5, #0
    4536:	e01e      	b.n	4576 <bt_buf_get_tx+0x56>
		break;
	case BT_BUF_ACL_OUT:
		pool = &hci_acl_pool;
		break;
	case BT_BUF_H4:
		if (IS_ENABLED(CONFIG_BT_HCI_RAW_H4) &&
    4538:	4914      	ldr	r1, [pc, #80]	; (458c <bt_buf_get_tx+0x6c>)
    453a:	7809      	ldrb	r1, [r1, #0]
    453c:	2901      	cmp	r1, #1
    453e:	d1f9      	bne.n	4534 <bt_buf_get_tx+0x14>
		    raw_mode == BT_HCI_RAW_MODE_H4) {
			switch (((u8_t *)data)[0]) {
    4540:	7834      	ldrb	r4, [r6, #0]
    4542:	2c01      	cmp	r4, #1
    4544:	d01a      	beq.n	457c <bt_buf_get_tx+0x5c>
    4546:	2c02      	cmp	r4, #2
    4548:	d1f4      	bne.n	4534 <bt_buf_get_tx+0x14>
    454a:	4811      	ldr	r0, [pc, #68]	; (4590 <bt_buf_get_tx+0x70>)
				LOG_ERR("Unknown H4 type %u", type);
				return NULL;
			}

			/* Adjust data pointer to discard the header */
			data = (u8_t *)data + 1;
    454c:	3601      	adds	r6, #1
			size--;
    454e:	3f01      	subs	r7, #1
	default:
		BT_ERR("Invalid type: %u", type);
		return NULL;
	}

	buf = net_buf_alloc(pool, timeout);
    4550:	f00f ff8c 	bl	1446c <net_buf_alloc_fixed>
	if (!buf) {
    4554:	4605      	mov	r5, r0
    4556:	2800      	cmp	r0, #0
    4558:	d0ec      	beq.n	4534 <bt_buf_get_tx+0x14>
		return buf;
	}

	net_buf_reserve(buf, BT_BUF_RESERVE);
    455a:	f100 0808 	add.w	r8, r0, #8
    455e:	2101      	movs	r1, #1
    4560:	4640      	mov	r0, r8
    4562:	f00f ffa2 	bl	144aa <net_buf_simple_reserve>
    4566:	752c      	strb	r4, [r5, #20]
	bt_buf_set_type(buf, type);

	if (data && size) {
    4568:	b12e      	cbz	r6, 4576 <bt_buf_get_tx+0x56>
    456a:	b127      	cbz	r7, 4576 <bt_buf_get_tx+0x56>
		net_buf_add_mem(buf, data, size);
    456c:	463a      	mov	r2, r7
    456e:	4631      	mov	r1, r6
    4570:	4640      	mov	r0, r8
    4572:	f00f ffb1 	bl	144d8 <net_buf_simple_add_mem>
	}

	return buf;
}
    4576:	4628      	mov	r0, r5
    4578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pool = &hci_cmd_pool;
    457c:	4805      	ldr	r0, [pc, #20]	; (4594 <bt_buf_get_tx+0x74>)
				type = BT_BUF_CMD;
    457e:	2400      	movs	r4, #0
    4580:	e7e4      	b.n	454c <bt_buf_get_tx+0x2c>
		pool = &hci_acl_pool;
    4582:	4803      	ldr	r0, [pc, #12]	; (4590 <bt_buf_get_tx+0x70>)
    4584:	e7e4      	b.n	4550 <bt_buf_get_tx+0x30>
	switch (type) {
    4586:	4803      	ldr	r0, [pc, #12]	; (4594 <bt_buf_get_tx+0x74>)
    4588:	e7e2      	b.n	4550 <bt_buf_get_tx+0x30>
    458a:	bf00      	nop
    458c:	20000410 	.word	0x20000410
    4590:	200004e8 	.word	0x200004e8
    4594:	20000510 	.word	0x20000510

00004598 <bt_recv>:
{
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}

int bt_recv(struct net_buf *buf)
{
    4598:	b510      	push	{r4, lr}
	BT_DBG("buf %p len %u", buf, buf->len);

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	if (IS_ENABLED(CONFIG_BT_HCI_RAW_H4) &&
    459a:	4b0d      	ldr	r3, [pc, #52]	; (45d0 <bt_recv+0x38>)
    459c:	781b      	ldrb	r3, [r3, #0]
    459e:	2b01      	cmp	r3, #1
{
    45a0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_HCI_RAW_H4) &&
    45a2:	d10c      	bne.n	45be <bt_recv+0x26>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    45a4:	7d03      	ldrb	r3, [r0, #20]
	    raw_mode == BT_HCI_RAW_MODE_H4) {
		switch (bt_buf_get_type(buf)) {
    45a6:	2b01      	cmp	r3, #1
    45a8:	d004      	beq.n	45b4 <bt_recv+0x1c>
    45aa:	2b03      	cmp	r3, #3
    45ac:	d00e      	beq.n	45cc <bt_recv+0x34>
    45ae:	f06f 0015 	mvn.w	r0, #21

	/* Queue to RAW rx queue */
	net_buf_put(raw_rx, buf);

	return 0;
}
    45b2:	bd10      	pop	{r4, pc}
			net_buf_push_u8(buf, H4_EVT);
    45b4:	2104      	movs	r1, #4
			net_buf_push_u8(buf, H4_ACL);
    45b6:	f104 0008 	add.w	r0, r4, #8
    45ba:	f00f ff96 	bl	144ea <net_buf_simple_push_u8>
	net_buf_put(raw_rx, buf);
    45be:	4b05      	ldr	r3, [pc, #20]	; (45d4 <bt_recv+0x3c>)
    45c0:	4621      	mov	r1, r4
    45c2:	6818      	ldr	r0, [r3, #0]
    45c4:	f00f ff75 	bl	144b2 <net_buf_put>
	return 0;
    45c8:	2000      	movs	r0, #0
    45ca:	e7f2      	b.n	45b2 <bt_recv+0x1a>
			net_buf_push_u8(buf, H4_ACL);
    45cc:	2102      	movs	r1, #2
    45ce:	e7f2      	b.n	45b6 <bt_recv+0x1e>
    45d0:	20000410 	.word	0x20000410
    45d4:	2000061c 	.word	0x2000061c

000045d8 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    45d8:	4b01      	ldr	r3, [pc, #4]	; (45e0 <bt_send+0x8>)
    45da:	681b      	ldr	r3, [r3, #0]
    45dc:	691b      	ldr	r3, [r3, #16]
    45de:	4718      	bx	r3
    45e0:	20000618 	.word	0x20000618

000045e4 <bt_enable_raw>:
	}
}

int bt_enable_raw(struct k_fifo *rx_queue)
{
	const struct bt_hci_driver *drv = bt_dev.drv;
    45e4:	4b04      	ldr	r3, [pc, #16]	; (45f8 <bt_enable_raw+0x14>)
	int err;

	BT_DBG("");

	raw_rx = rx_queue;
    45e6:	4a05      	ldr	r2, [pc, #20]	; (45fc <bt_enable_raw+0x18>)
	const struct bt_hci_driver *drv = bt_dev.drv;
    45e8:	681b      	ldr	r3, [r3, #0]
	raw_rx = rx_queue;
    45ea:	6010      	str	r0, [r2, #0]

	if (!bt_dev.drv) {
    45ec:	b10b      	cbz	r3, 45f2 <bt_enable_raw+0xe>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = drv->open();
    45ee:	68db      	ldr	r3, [r3, #12]
    45f0:	4718      	bx	r3
	}

	BT_INFO("Bluetooth enabled in RAW mode");

	return 0;
}
    45f2:	f06f 0012 	mvn.w	r0, #18
    45f6:	4770      	bx	lr
    45f8:	20000618 	.word	0x20000618
    45fc:	2000061c 	.word	0x2000061c

00004600 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    4600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4604:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    4606:	1dc2      	adds	r2, r0, #7
    4608:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    460c:	1e67      	subs	r7, r4, #1
    460e:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    4610:	6018      	str	r0, [r3, #0]
{
    4612:	b082      	sub	sp, #8
    4614:	4605      	mov	r5, r0
    4616:	460e      	mov	r6, r1
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    4618:	fb01 0007 	mla	r0, r1, r7, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    461c:	8014      	strh	r4, [r2, #0]
	(void)memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    461e:	2100      	movs	r1, #0
    4620:	2204      	movs	r2, #4
    4622:	f00f fea5 	bl	14370 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    4626:	b1b7      	cbz	r7, 4656 <mem_init+0x56>
    4628:	3c02      	subs	r4, #2
    462a:	b2a4      	uxth	r4, r4
    462c:	fb04 6306 	mla	r3, r4, r6, r6
    4630:	fb04 f706 	mul.w	r7, r4, r6
    4634:	441d      	add	r5, r3
    4636:	1aff      	subs	r7, r7, r3
    4638:	f64f 78ff 	movw	r8, #65535	; 0xffff
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    463c:	2204      	movs	r2, #4
	while (mem_count--) {
    463e:	3c01      	subs	r4, #1
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    4640:	19e8      	adds	r0, r5, r7
    4642:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    4646:	b2a4      	uxth	r4, r4
		next = (u32_t)((u8_t *) mem_pool +
    4648:	9501      	str	r5, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    464a:	f00f fe66 	bl	1431a <memcpy>
	while (mem_count--) {
    464e:	4544      	cmp	r4, r8
    4650:	eba5 0506 	sub.w	r5, r5, r6
    4654:	d1f2      	bne.n	463c <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    4656:	b002      	add	sp, #8
    4658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000465c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    465c:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    465e:	6805      	ldr	r5, [r0, #0]
{
    4660:	b082      	sub	sp, #8
	if (*mem_head) {
    4662:	b195      	cbz	r5, 468a <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    4664:	1deb      	adds	r3, r5, #7
    4666:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    466a:	2204      	movs	r2, #4
    466c:	4604      	mov	r4, r0
    466e:	4629      	mov	r1, r5
    4670:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    4674:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    4676:	f00f fe50 	bl	1431a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    467a:	9b01      	ldr	r3, [sp, #4]
    467c:	b123      	cbz	r3, 4688 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    467e:	1dda      	adds	r2, r3, #7
    4680:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    4684:	3e01      	subs	r6, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    4686:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    4688:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    468a:	4628      	mov	r0, r5
    468c:	b002      	add	sp, #8
    468e:	bd70      	pop	{r4, r5, r6, pc}

00004690 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    4690:	680b      	ldr	r3, [r1, #0]
{
    4692:	b570      	push	{r4, r5, r6, lr}
    4694:	460c      	mov	r4, r1
    4696:	4605      	mov	r5, r0
	if (*mem_head) {
    4698:	b183      	cbz	r3, 46bc <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    469a:	3307      	adds	r3, #7
    469c:	f023 0303 	bic.w	r3, r3, #3
    46a0:	881e      	ldrh	r6, [r3, #0]
    46a2:	3601      	adds	r6, #1
    46a4:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    46a6:	2204      	movs	r2, #4
    46a8:	4621      	mov	r1, r4
    46aa:	4628      	mov	r0, r5
    46ac:	f00f fe35 	bl	1431a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    46b0:	1deb      	adds	r3, r5, #7
    46b2:	f023 0303 	bic.w	r3, r3, #3
    46b6:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    46b8:	6025      	str	r5, [r4, #0]
}
    46ba:	bd70      	pop	{r4, r5, r6, pc}
    46bc:	2601      	movs	r6, #1
    46be:	e7f2      	b.n	46a6 <mem_release+0x16>

000046c0 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    46c0:	fb02 0001 	mla	r0, r2, r1, r0
    46c4:	4770      	bx	lr
    46c6:	bf00      	nop

000046c8 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    46c8:	1a40      	subs	r0, r0, r1
    46ca:	b280      	uxth	r0, r0
}
    46cc:	fbb0 f0f2 	udiv	r0, r0, r2
    46d0:	4770      	bx	lr
    46d2:	bf00      	nop

000046d4 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
	while (len--) {
    46d4:	1e53      	subs	r3, r2, #1
	src += len;
    46d6:	4411      	add	r1, r2
	while (len--) {
    46d8:	b29b      	uxth	r3, r3
    46da:	b142      	cbz	r2, 46ee <mem_rcopy+0x1a>
    46dc:	43db      	mvns	r3, r3
    46de:	18ca      	adds	r2, r1, r3
    46e0:	3801      	subs	r0, #1
		*dst++ = *--src;
    46e2:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    46e6:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    46ea:	4291      	cmp	r1, r2
    46ec:	d1f9      	bne.n	46e2 <mem_rcopy+0xe>
	}
}
    46ee:	4770      	bx	lr

000046f0 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    46f0:	4401      	add	r1, r0
    46f2:	e002      	b.n	46fa <mem_nz+0xa>
		if (*src++) {
    46f4:	f810 3b01 	ldrb.w	r3, [r0], #1
    46f8:	b91b      	cbnz	r3, 4702 <mem_nz+0x12>
	while (len--) {
    46fa:	4288      	cmp	r0, r1
    46fc:	d1fa      	bne.n	46f4 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    46fe:	2000      	movs	r0, #0
    4700:	4770      	bx	lr
			return 1;
    4702:	2001      	movs	r0, #1
}
    4704:	4770      	bx	lr
    4706:	bf00      	nop

00004708 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    4708:	6010      	str	r0, [r2, #0]
    470a:	6008      	str	r0, [r1, #0]

	return link;
}
    470c:	4770      	bx	lr
    470e:	bf00      	nop

00004710 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    4710:	680a      	ldr	r2, [r1, #0]
{
    4712:	4603      	mov	r3, r0
	if (*head != *tail) {
    4714:	6800      	ldr	r0, [r0, #0]
    4716:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    4718:	bf05      	ittet	eq
    471a:	2200      	moveq	r2, #0
    471c:	600a      	streq	r2, [r1, #0]
		return NULL;
    471e:	2000      	movne	r0, #0
	*head = *tail = NULL;
    4720:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    4722:	4770      	bx	lr

00004724 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    4724:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    4726:	6814      	ldr	r4, [r2, #0]
    4728:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    472a:	6814      	ldr	r4, [r2, #0]
    472c:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
    472e:	bc10      	pop	{r4}
	*tail = link;
    4730:	6010      	str	r0, [r2, #0]
}
    4732:	4770      	bx	lr

00004734 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    4734:	4288      	cmp	r0, r1
    4736:	d003      	beq.n	4740 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    4738:	b11a      	cbz	r2, 4742 <memq_peek+0xe>
		*mem = head->mem;
    473a:	6843      	ldr	r3, [r0, #4]
    473c:	6013      	str	r3, [r2, #0]
    473e:	4770      	bx	lr
		return NULL;
    4740:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    4742:	4770      	bx	lr

00004744 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    4744:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    4746:	4283      	cmp	r3, r0
    4748:	d009      	beq.n	475e <memq_dequeue+0x1a>
	if (mem) {
    474a:	b12a      	cbz	r2, 4758 <memq_dequeue+0x14>
		*mem = head->mem;
    474c:	6858      	ldr	r0, [r3, #4]
    474e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    4750:	681a      	ldr	r2, [r3, #0]
    4752:	600a      	str	r2, [r1, #0]

	return old_head;
}
    4754:	4618      	mov	r0, r3
    4756:	4770      	bx	lr
	if (old_head == NULL) {
    4758:	2b00      	cmp	r3, #0
    475a:	d1f9      	bne.n	4750 <memq_dequeue+0xc>
    475c:	e7fa      	b.n	4754 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    475e:	2300      	movs	r3, #0
    4760:	e7f8      	b.n	4754 <memq_dequeue+0x10>
    4762:	bf00      	nop

00004764 <mayfly_init>:
#if defined(MAYFLY_UT)
static u8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    4764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4768:	f8df 8034 	ldr.w	r8, [pc, #52]	; 47a0 <mayfly_init+0x3c>
    476c:	4e0b      	ldr	r6, [pc, #44]	; (479c <mayfly_init+0x38>)
    476e:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    4770:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    4774:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    4776:	1d22      	adds	r2, r4, #4
    4778:	4621      	mov	r1, r4
    477a:	4628      	mov	r0, r5
    477c:	3c0c      	subs	r4, #12
    477e:	f7ff ffc3 	bl	4708 <memq_init>
		while (caller_id--) {
    4782:	42b4      	cmp	r4, r6
    4784:	f1a5 0508 	sub.w	r5, r5, #8
    4788:	d1f5      	bne.n	4776 <mayfly_init+0x12>
	while (callee_id--) {
    478a:	3f04      	subs	r7, #4
    478c:	1d3b      	adds	r3, r7, #4
    478e:	f1a8 0820 	sub.w	r8, r8, #32
    4792:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    4796:	d1eb      	bne.n	4770 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    4798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    479c:	20000728 	.word	0x20000728
    47a0:	20000698 	.word	0x20000698

000047a4 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    47a4:	b430      	push	{r4, r5}
    47a6:	4603      	mov	r3, r0
    47a8:	460c      	mov	r4, r1
	if (enable) {
    47aa:	b19a      	cbz	r2, 47d4 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    47ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    47b0:	0108      	lsls	r0, r1, #4
    47b2:	4d14      	ldr	r5, [pc, #80]	; (4804 <mayfly_enable+0x60>)
    47b4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    47b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    47bc:	4429      	add	r1, r5
    47be:	7a48      	ldrb	r0, [r1, #9]
    47c0:	7a0d      	ldrb	r5, [r1, #8]
    47c2:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    47c4:	bf04      	itt	eq
    47c6:	3001      	addeq	r0, #1
    47c8:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    47ca:	4621      	mov	r1, r4
    47cc:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    47ce:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    47d0:	f00d b912 	b.w	119f8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    47d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    47d8:	4d0a      	ldr	r5, [pc, #40]	; (4804 <mayfly_enable+0x60>)
    47da:	0112      	lsls	r2, r2, #4
    47dc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    47e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    47e4:	442b      	add	r3, r5
    47e6:	7a9d      	ldrb	r5, [r3, #10]
    47e8:	7ada      	ldrb	r2, [r3, #11]
    47ea:	42aa      	cmp	r2, r5
    47ec:	d001      	beq.n	47f2 <mayfly_enable+0x4e>
}
    47ee:	bc30      	pop	{r4, r5}
    47f0:	4770      	bx	lr
			mfp[callee_id] = 1U;
    47f2:	4d05      	ldr	r5, [pc, #20]	; (4808 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    47f4:	3201      	adds	r2, #1
    47f6:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    47f8:	2301      	movs	r3, #1
    47fa:	546b      	strb	r3, [r5, r1]
}
    47fc:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    47fe:	f00d b959 	b.w	11ab4 <mayfly_pend>
    4802:	bf00      	nop
    4804:	200006a4 	.word	0x200006a4
    4808:	200006a0 	.word	0x200006a0

0000480c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    480c:	b570      	push	{r4, r5, r6, lr}
    480e:	461c      	mov	r4, r3
    4810:	4606      	mov	r6, r0
    4812:	460d      	mov	r5, r1
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    4814:	b322      	cbz	r2, 4860 <mayfly_enqueue+0x54>
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    4816:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    4818:	7822      	ldrb	r2, [r4, #0]
    481a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    481c:	f012 0203 	ands.w	r2, r2, #3
    4820:	d005      	beq.n	482e <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    4822:	2a01      	cmp	r2, #1
    4824:	d040      	beq.n	48a8 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    4826:	3301      	adds	r3, #1
    4828:	b2db      	uxtb	r3, r3
    482a:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    482c:	e00f      	b.n	484e <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    482e:	2230      	movs	r2, #48	; 0x30
    4830:	2104      	movs	r1, #4
    4832:	fb12 1105 	smlabb	r1, r2, r5, r1
    4836:	220c      	movs	r2, #12
    4838:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    483c:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    483e:	491b      	ldr	r1, [pc, #108]	; (48ac <mayfly_enqueue+0xa0>)
    4840:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    4842:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    4844:	440a      	add	r2, r1
	m->_req = ack + 1;
    4846:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    4848:	4621      	mov	r1, r4
    484a:	f7ff ff6b 	bl	4724 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    484e:	4b18      	ldr	r3, [pc, #96]	; (48b0 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    4850:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    4852:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    4854:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    4856:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    4858:	f00d f92c 	bl	11ab4 <mayfly_pend>

	return 0;
    485c:	2000      	movs	r0, #0
}
    485e:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    4860:	f00d f90a 	bl	11a78 <mayfly_prio_is_equal>
    4864:	2800      	cmp	r0, #0
    4866:	d0d6      	beq.n	4816 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    4868:	4629      	mov	r1, r5
    486a:	4630      	mov	r0, r6
    486c:	f00d f8e4 	bl	11a38 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    4870:	2800      	cmp	r0, #0
    4872:	d0d0      	beq.n	4816 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    4874:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4878:	011a      	lsls	r2, r3, #4
    487a:	490c      	ldr	r1, [pc, #48]	; (48ac <mayfly_enqueue+0xa0>)
    487c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4884:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    4886:	7a9a      	ldrb	r2, [r3, #10]
    4888:	7adb      	ldrb	r3, [r3, #11]
    488a:	429a      	cmp	r2, r3
    488c:	d1c3      	bne.n	4816 <mayfly_enqueue+0xa>
	ack = m->_ack;
    488e:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    4890:	7822      	ldrb	r2, [r4, #0]
    4892:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    4894:	0792      	lsls	r2, r2, #30
    4896:	d002      	beq.n	489e <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    4898:	3302      	adds	r3, #2
    489a:	b2db      	uxtb	r3, r3
    489c:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    489e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    48a2:	4798      	blx	r3
		return 0;
    48a4:	2000      	movs	r0, #0
}
    48a6:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    48a8:	4610      	mov	r0, r2
}
    48aa:	bd70      	pop	{r4, r5, r6, pc}
    48ac:	200006a4 	.word	0x200006a4
    48b0:	200006a0 	.word	0x200006a0

000048b4 <mayfly_run>:
{
	u8_t disable = 0U;
	u8_t enable = 0U;
	u8_t caller_id;

	if (!mfp[callee_id]) {
    48b4:	494c      	ldr	r1, [pc, #304]	; (49e8 <mayfly_run+0x134>)
    48b6:	5c0b      	ldrb	r3, [r1, r0]
    48b8:	2b00      	cmp	r3, #0
    48ba:	f000 8094 	beq.w	49e6 <mayfly_run+0x132>
{
    48be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    48c2:	4b4a      	ldr	r3, [pc, #296]	; (49ec <mayfly_run+0x138>)
    48c4:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    48c8:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    48ca:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    48cc:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    48d0:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    48d2:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    48d6:	f10b 0104 	add.w	r1, fp, #4
	u8_t enable = 0U;
    48da:	9203      	str	r2, [sp, #12]
    48dc:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	u8_t disable = 0U;
    48e0:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    48e2:	f04f 0903 	mov.w	r9, #3
    48e6:	4688      	mov	r8, r1
    48e8:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    48ea:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    48ec:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    48f0:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    48f2:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    48f4:	f7ff ff1e 	bl	4734 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    48f8:	f107 0624 	add.w	r6, r7, #36	; 0x24
    48fc:	4683      	mov	fp, r0
    48fe:	b388      	cbz	r0, 4964 <mayfly_run+0xb0>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    4900:	9c05      	ldr	r4, [sp, #20]
    4902:	7825      	ldrb	r5, [r4, #0]
    4904:	7863      	ldrb	r3, [r4, #1]
    4906:	1aed      	subs	r5, r5, r3
    4908:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    490c:	2d01      	cmp	r5, #1
    490e:	d106      	bne.n	491e <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    4910:	3b01      	subs	r3, #1
    4912:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    4914:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    4918:	4798      	blx	r3
    491a:	9c05      	ldr	r4, [sp, #20]
    491c:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    491e:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    4920:	1ac3      	subs	r3, r0, r3
    4922:	f003 0303 	and.w	r3, r3, #3
    4926:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    4928:	f04f 0200 	mov.w	r2, #0
    492c:	4631      	mov	r1, r6
	req = m->_req;
    492e:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    4932:	d00d      	beq.n	4950 <mayfly_run+0x9c>
		memq_dequeue(mft[callee_id][caller_id].tail,
    4934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4936:	f7ff ff05 	bl	4744 <memq_dequeue>
		ack = m->_ack;
    493a:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    493c:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    493e:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    4942:	1a9b      	subs	r3, r3, r2
    4944:	f003 0303 	and.w	r3, r3, #3
    4948:	2b01      	cmp	r3, #1
		m->_ack = req;
    494a:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    494e:	d043      	beq.n	49d8 <mayfly_run+0x124>

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    4950:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    4954:	aa05      	add	r2, sp, #20
    4956:	f7ff feed 	bl	4734 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    495a:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    495c:	4683      	mov	fp, r0
			if (state == 1U) {
    495e:	d029      	beq.n	49b4 <mayfly_run+0x100>
		while (link) {
    4960:	2800      	cmp	r0, #0
    4962:	d1cd      	bne.n	4900 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    4964:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    4968:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    496c:	429a      	cmp	r2, r3
    496e:	d003      	beq.n	4978 <mayfly_run+0xc4>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    4970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    4974:	2301      	movs	r3, #1
    4976:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    4978:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    497c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    4980:	429a      	cmp	r2, r3
    4982:	d003      	beq.n	498c <mayfly_run+0xd8>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    4984:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    4988:	2301      	movs	r3, #1
    498a:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    498c:	f109 39ff 	add.w	r9, r9, #4294967295
    4990:	fa5f f989 	uxtb.w	r9, r9
    4994:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    4998:	f1a7 070c 	sub.w	r7, r7, #12
    499c:	d1a5      	bne.n	48ea <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    499e:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    49a2:	b1b3      	cbz	r3, 49d2 <mayfly_run+0x11e>
    49a4:	9b03      	ldr	r3, [sp, #12]
    49a6:	b9a3      	cbnz	r3, 49d2 <mayfly_run+0x11e>
		mayfly_enable_cb(callee_id, callee_id, 0);
    49a8:	461a      	mov	r2, r3
    49aa:	4651      	mov	r1, sl
    49ac:	4650      	mov	r0, sl
    49ae:	f00d f823 	bl	119f8 <mayfly_enable_cb>
    49b2:	e00e      	b.n	49d2 <mayfly_run+0x11e>
				if (caller_id || link) {
    49b4:	f1b9 0f00 	cmp.w	r9, #0
    49b8:	d101      	bne.n	49be <mayfly_run+0x10a>
    49ba:	2800      	cmp	r0, #0
    49bc:	d0d2      	beq.n	4964 <mayfly_run+0xb0>
    49be:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    49c2:	4a09      	ldr	r2, [pc, #36]	; (49e8 <mayfly_run+0x134>)
    49c4:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    49c6:	4651      	mov	r1, sl
    49c8:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    49ca:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    49ce:	f00d f871 	bl	11ab4 <mayfly_pend>
	}
}
    49d2:	b007      	add	sp, #28
    49d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    49d8:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    49da:	4621      	mov	r1, r4
    49dc:	4658      	mov	r0, fp
    49de:	4642      	mov	r2, r8
    49e0:	f7ff fea0 	bl	4724 <memq_enqueue>
    49e4:	e7b4      	b.n	4950 <mayfly_run+0x9c>
    49e6:	4770      	bx	lr
    49e8:	200006a0 	.word	0x200006a0
    49ec:	200006a4 	.word	0x200006a4

000049f0 <util_ones_count_get>:
 */
u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
	u8_t one_count = 0U;

	while (octets_len--) {
    49f0:	b1a1      	cbz	r1, 4a1c <util_ones_count_get+0x2c>
    49f2:	1e4b      	subs	r3, r1, #1
    49f4:	b2db      	uxtb	r3, r3
{
    49f6:	b410      	push	{r4}
    49f8:	1e41      	subs	r1, r0, #1
    49fa:	18c4      	adds	r4, r0, r3
	u8_t one_count = 0U;
    49fc:	2000      	movs	r0, #0
		u8_t bite;

		bite = *octets;
    49fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    4a02:	b13b      	cbz	r3, 4a14 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    4a04:	b25b      	sxtb	r3, r3
    4a06:	1e5a      	subs	r2, r3, #1
    4a08:	4013      	ands	r3, r2
			one_count++;
    4a0a:	3001      	adds	r0, #1
		while (bite) {
    4a0c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    4a10:	b2c0      	uxtb	r0, r0
		while (bite) {
    4a12:	d1f7      	bne.n	4a04 <util_ones_count_get+0x14>
	while (octets_len--) {
    4a14:	42a1      	cmp	r1, r4
    4a16:	d1f2      	bne.n	49fe <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    4a18:	bc10      	pop	{r4}
    4a1a:	4770      	bx	lr
	u8_t one_count = 0U;
    4a1c:	4608      	mov	r0, r1
}
    4a1e:	4770      	bx	lr

00004a20 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    4a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    4a24:	7f82      	ldrb	r2, [r0, #30]
{
    4a26:	b089      	sub	sp, #36	; 0x24
	instance->worker_trigger = 1U;
    4a28:	2301      	movs	r3, #1
	if (instance->job_guard) {
    4a2a:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    4a2c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    4a2e:	2a00      	cmp	r2, #0
    4a30:	f040 80a5 	bne.w	4b7e <ticker_worker+0x15e>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    4a34:	7f43      	ldrb	r3, [r0, #29]
    4a36:	2bff      	cmp	r3, #255	; 0xff
    4a38:	4681      	mov	r9, r0
    4a3a:	f000 809f 	beq.w	4b7c <ticker_worker+0x15c>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    4a3e:	f00c fb1b 	bl	11078 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4a42:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    4a46:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    4a4a:	f899 a01d 	ldrb.w	sl, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4a4e:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    4a50:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4a52:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    4a56:	f000 80fc 	beq.w	4c52 <ticker_worker+0x232>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    4a5a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	u8_t slot_reserved = 0;
    4a5e:	455b      	cmp	r3, fp
    4a60:	bf94      	ite	ls
    4a62:	2300      	movls	r3, #0
    4a64:	2301      	movhi	r3, #1
    4a66:	9302      	str	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
    4a68:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	node = &instance->nodes[0];
    4a6c:	f8d9 8000 	ldr.w	r8, [r9]
	while (ticker_id_head != TICKER_NULL) {
    4a70:	f000 80f2 	beq.w	4c58 <ticker_worker+0x238>
	ticks_expired = 0U;
    4a74:	2500      	movs	r5, #0
			must_expire_skip = 1U;
    4a76:	f8cd 900c 	str.w	r9, [sp, #12]
		ticker = &node[ticker_id_head];
    4a7a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    4a7e:	eb08 140a 	add.w	r4, r8, sl, lsl #4
    4a82:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    4a86:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    4a88:	455b      	cmp	r3, fp
    4a8a:	d852      	bhi.n	4b32 <ticker_worker+0x112>
		if (ticker->ticks_slot != 0U &&
    4a8c:	69a6      	ldr	r6, [r4, #24]
		ticker_id_head = ticker->next;
    4a8e:	f818 a00a 	ldrb.w	sl, [r8, sl]
		ticks_elapsed -= ticks_to_expire;
    4a92:	ebab 0b03 	sub.w	fp, fp, r3
		ticks_expired += ticks_to_expire;
    4a96:	441d      	add	r5, r3
		if (ticker->ticks_slot != 0U &&
    4a98:	2e00      	cmp	r6, #0
    4a9a:	d077      	beq.n	4b8c <ticker_worker+0x16c>
    4a9c:	9b02      	ldr	r3, [sp, #8]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d07a      	beq.n	4b98 <ticker_worker+0x178>
    4aa2:	8be3      	ldrh	r3, [r4, #30]
    4aa4:	9301      	str	r3, [sp, #4]
			struct ticker_ext *ext_data = ticker->ext_data;
    4aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    4aa8:	b15b      	cbz	r3, 4ac2 <ticker_worker+0xa2>
    4aaa:	681a      	ldr	r2, [r3, #0]
    4aac:	b132      	cbz	r2, 4abc <ticker_worker+0x9c>
			    ext_data->ticks_slot_window != 0U &&
    4aae:	7a1a      	ldrb	r2, [r3, #8]
    4ab0:	b922      	cbnz	r2, 4abc <ticker_worker+0x9c>
			    TICKER_RESCHEDULE_STATE_NONE &&
    4ab2:	8ba2      	ldrh	r2, [r4, #28]
    4ab4:	9901      	ldr	r1, [sp, #4]
    4ab6:	428a      	cmp	r2, r1
    4ab8:	f240 80c7 	bls.w	4c4a <ticker_worker+0x22a>
				ext_data->reschedule_state =
    4abc:	f04f 0200 	mov.w	r2, #0
    4ac0:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    4ac2:	9a01      	ldr	r2, [sp, #4]
			if ((ticker->must_expire == 0U) ||
    4ac4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    4ac8:	3201      	adds	r2, #1
    4aca:	b292      	uxth	r2, r2
    4acc:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    4ace:	2900      	cmp	r1, #0
    4ad0:	d02c      	beq.n	4b2c <ticker_worker+0x10c>
    4ad2:	8ba1      	ldrh	r1, [r4, #28]
    4ad4:	4291      	cmp	r1, r2
    4ad6:	d229      	bcs.n	4b2c <ticker_worker+0x10c>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    4ad8:	2b00      	cmp	r3, #0
    4ada:	f000 80b4 	beq.w	4c46 <ticker_worker+0x226>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    4ade:	7a1a      	ldrb	r2, [r3, #8]
    4ae0:	2a01      	cmp	r2, #1
    4ae2:	d023      	beq.n	4b2c <ticker_worker+0x10c>
			must_expire_skip = 1U;
    4ae4:	2601      	movs	r6, #1
			ticker->ext_data->ticks_drift = 0U;
    4ae6:	2200      	movs	r2, #0
    4ae8:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
    4aea:	721a      	strb	r2, [r3, #8]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    4aec:	78a2      	ldrb	r2, [r4, #2]
    4aee:	7863      	ldrb	r3, [r4, #1]
    4af0:	1a9b      	subs	r3, r3, r2
    4af2:	b2db      	uxtb	r3, r3
    4af4:	2b01      	cmp	r3, #1
    4af6:	d119      	bne.n	4b2c <ticker_worker+0x10c>
		if (ticker->timeout_func) {
    4af8:	68e7      	ldr	r7, [r4, #12]
		ticker->ack--;
    4afa:	3a01      	subs	r2, #1
    4afc:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    4afe:	b1af      	cbz	r7, 4b2c <ticker_worker+0x10c>
					   ticks_expired -
    4b00:	9a03      	ldr	r2, [sp, #12]
    4b02:	6963      	ldr	r3, [r4, #20]
    4b04:	6950      	ldr	r0, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
    4b06:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    4b08:	1aeb      	subs	r3, r5, r3
    4b0a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    4b0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    4b10:	6923      	ldr	r3, [r4, #16]
    4b12:	2e00      	cmp	r6, #0
    4b14:	f040 8093 	bne.w	4c3e <ticker_worker+0x21e>
    4b18:	8be2      	ldrh	r2, [r4, #30]
    4b1a:	47b8      	blx	r7
				if (ticker->ticks_slot != 0U) {
    4b1c:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
    4b1e:	83e6      	strh	r6, [r4, #30]
					slot_reserved = 1U;
    4b20:	2b00      	cmp	r3, #0
    4b22:	9b02      	ldr	r3, [sp, #8]
				ticker->force = 0U;
    4b24:	70e6      	strb	r6, [r4, #3]
					slot_reserved = 1U;
    4b26:	bf18      	it	ne
    4b28:	2301      	movne	r3, #1
    4b2a:	9302      	str	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
    4b2c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    4b30:	d1a3      	bne.n	4a7a <ticker_worker+0x5a>
    4b32:	f8dd 900c 	ldr.w	r9, [sp, #12]
    4b36:	4629      	mov	r1, r5
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    4b38:	f899 300b 	ldrb.w	r3, [r9, #11]
    4b3c:	f899 200a 	ldrb.w	r2, [r9, #10]
    4b40:	429a      	cmp	r2, r3
    4b42:	d10a      	bne.n	4b5a <ticker_worker+0x13a>
	u8_t idx = *ticks_elapsed_index + 1;
    4b44:	3201      	adds	r2, #1
    4b46:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    4b48:	2a02      	cmp	r2, #2
    4b4a:	bf1c      	itt	ne
    4b4c:	4613      	movne	r3, r2
    4b4e:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    4b50:	9a04      	ldr	r2, [sp, #16]
    4b52:	f889 200b 	strb.w	r2, [r9, #11]
    4b56:	bf08      	it	eq
    4b58:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    4b5a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    4b5e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    4b62:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
    4b64:	2200      	movs	r2, #0
    4b66:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    4b6a:	464b      	mov	r3, r9
    4b6c:	2201      	movs	r2, #1
    4b6e:	2104      	movs	r1, #4
    4b70:	2003      	movs	r0, #3
    4b72:	46a4      	mov	ip, r4
}
    4b74:	b009      	add	sp, #36	; 0x24
    4b76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    4b7a:	4760      	bx	ip
		instance->worker_trigger = 0U;
    4b7c:	77c2      	strb	r2, [r0, #31]
}
    4b7e:	b009      	add	sp, #36	; 0x24
    4b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b84:	e9dd b505 	ldrd	fp, r5, [sp, #20]
    4b88:	f8dd a01c 	ldr.w	sl, [sp, #28]
		if (ticker->ext_data) {
    4b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b8e:	b10b      	cbz	r3, 4b94 <ticker_worker+0x174>
    4b90:	2600      	movs	r6, #0
    4b92:	e7a8      	b.n	4ae6 <ticker_worker+0xc6>
    4b94:	461e      	mov	r6, r3
    4b96:	e7a9      	b.n	4aec <ticker_worker+0xcc>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    4b98:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    4b9c:	461f      	mov	r7, r3
    4b9e:	3380      	adds	r3, #128	; 0x80
    4ba0:	d0f4      	beq.n	4b8c <ticker_worker+0x16c>
    4ba2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    4ba6:	d0f1      	beq.n	4b8c <ticker_worker+0x16c>
		s32_t lazy_current = ticker->lazy_current;
    4ba8:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    4baa:	8ba2      	ldrh	r2, [r4, #28]
		s32_t lazy_current = ticker->lazy_current;
    4bac:	9301      	str	r3, [sp, #4]
		if (lazy_current >= ticker->lazy_periodic) {
    4bae:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    4bb0:	bf28      	it	cs
    4bb2:	1a9b      	subcs	r3, r3, r2
		u32_t current_age = ticker->ticks_periodic +
    4bb4:	6862      	ldr	r2, [r4, #4]
		u32_t acc_ticks_to_expire = 0U;
    4bb6:	f8cd a01c 	str.w	sl, [sp, #28]
				(lazy_current - ticker->priority);
    4bba:	4639      	mov	r1, r7
		u32_t current_age = ticker->ticks_periodic +
    4bbc:	fb03 2202 	mla	r2, r3, r2, r2
				(lazy_current - ticker->priority);
    4bc0:	1bdf      	subs	r7, r3, r7
		u32_t acc_ticks_to_expire = 0U;
    4bc2:	e9cd b505 	strd	fp, r5, [sp, #20]
		u32_t current_age = ticker->ticks_periodic +
    4bc6:	4653      	mov	r3, sl
		u32_t acc_ticks_to_expire = 0U;
    4bc8:	2000      	movs	r0, #0
    4bca:	46b6      	mov	lr, r6
    4bcc:	460d      	mov	r5, r1
    4bce:	4692      	mov	sl, r2
    4bd0:	46bb      	mov	fp, r7
    4bd2:	e003      	b.n	4bdc <ticker_worker+0x1bc>
			id_head = ticker_next->next;
    4bd4:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
    4bd8:	2bff      	cmp	r3, #255	; 0xff
    4bda:	d0d3      	beq.n	4b84 <ticker_worker+0x164>
			struct ticker_node *ticker_next = &nodes[id_head];
    4bdc:	b21b      	sxth	r3, r3
    4bde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4be2:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    4be6:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    4be8:	6897      	ldr	r7, [r2, #8]
    4bea:	4438      	add	r0, r7
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    4bec:	4586      	cmp	lr, r0
    4bee:	d3c9      	bcc.n	4b84 <ticker_worker+0x164>
			if (ticker_next->ticks_slot == 0U) {
    4bf0:	6991      	ldr	r1, [r2, #24]
    4bf2:	2900      	cmp	r1, #0
    4bf4:	d0ee      	beq.n	4bd4 <ticker_worker+0x1b4>
			s32_t lazy_next = ticker_next->lazy_current;
    4bf6:	f8b2 c01e 	ldrh.w	ip, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    4bfa:	8b91      	ldrh	r1, [r2, #28]
			if (!lazy_next_periodic_skip) {
    4bfc:	458c      	cmp	ip, r1
    4bfe:	d3e9      	bcc.n	4bd4 <ticker_worker+0x1b4>
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
    4c00:	6856      	ldr	r6, [r2, #4]
				ticker_next->priority;
    4c02:	f992 902d 	ldrsb.w	r9, [r2, #45]	; 0x2d
				lazy_next -= ticker_next->lazy_periodic;
    4c06:	ebac 0101 	sub.w	r1, ip, r1
					  0U :
    4c0a:	b116      	cbz	r6, 4c12 <ticker_worker+0x1f2>
    4c0c:	1bf7      	subs	r7, r6, r7
			u32_t next_age = (ticker_next->ticks_periodic == 0U ?
    4c0e:	fb06 7601 	mla	r6, r6, r1, r7
			u8_t next_force = (ticker_next->force > ticker->force);
    4c12:	78d7      	ldrb	r7, [r2, #3]
    4c14:	78e2      	ldrb	r2, [r4, #3]
			if (!lazy_next_periodic_skip &&
    4c16:	42ba      	cmp	r2, r7
				(lazy_next - ticker_next->priority) >
    4c18:	eba1 0109 	sub.w	r1, r1, r9
			if (!lazy_next_periodic_skip &&
    4c1c:	d30a      	bcc.n	4c34 <ticker_worker+0x214>
			    (next_force ||
    4c1e:	f119 0f80 	cmn.w	r9, #128	; 0x80
    4c22:	d007      	beq.n	4c34 <ticker_worker+0x214>
			     next_is_critical ||
    4c24:	458b      	cmp	fp, r1
    4c26:	da01      	bge.n	4c2c <ticker_worker+0x20c>
			    (next_has_priority && !current_is_older) ||
    4c28:	45b2      	cmp	sl, r6
    4c2a:	d903      	bls.n	4c34 <ticker_worker+0x214>
    4c2c:	454d      	cmp	r5, r9
    4c2e:	d1d1      	bne.n	4bd4 <ticker_worker+0x1b4>
			    (equal_priority && next_is_older))) {
    4c30:	45b2      	cmp	sl, r6
    4c32:	d2cf      	bcs.n	4bd4 <ticker_worker+0x1b4>
    4c34:	e9dd b505 	ldrd	fp, r5, [sp, #20]
    4c38:	f8dd a01c 	ldr.w	sl, [sp, #28]
    4c3c:	e733      	b.n	4aa6 <ticker_worker+0x86>
			ticker->timeout_func(ticks_at_expire,
    4c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4c42:	47b8      	blx	r7
			if (must_expire_skip == 0U) {
    4c44:	e772      	b.n	4b2c <ticker_worker+0x10c>
			must_expire_skip = 1U;
    4c46:	2601      	movs	r6, #1
    4c48:	e750      	b.n	4aec <ticker_worker+0xcc>
				ext_data->reschedule_state =
    4c4a:	f04f 0201 	mov.w	r2, #1
    4c4e:	721a      	strb	r2, [r3, #8]
    4c50:	e737      	b.n	4ac2 <ticker_worker+0xa2>
	u8_t slot_reserved = 0;
    4c52:	9b04      	ldr	r3, [sp, #16]
    4c54:	9302      	str	r3, [sp, #8]
    4c56:	e707      	b.n	4a68 <ticker_worker+0x48>
	ticks_expired = 0U;
    4c58:	2300      	movs	r3, #0
    4c5a:	4619      	mov	r1, r3
    4c5c:	e76c      	b.n	4b38 <ticker_worker+0x118>
    4c5e:	bf00      	nop

00004c60 <ticker_job>:
	if (instance->worker_trigger) {
    4c60:	7fc2      	ldrb	r2, [r0, #31]
    4c62:	2a00      	cmp	r2, #0
    4c64:	f040 8628 	bne.w	58b8 <ticker_job+0xc58>
{
    4c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    4c6c:	7a83      	ldrb	r3, [r0, #10]
    4c6e:	7ac1      	ldrb	r1, [r0, #11]
{
    4c70:	b08f      	sub	sp, #60	; 0x3c
    4c72:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    4c74:	6940      	ldr	r0, [r0, #20]
    4c76:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    4c78:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    4c7a:	f04f 0001 	mov.w	r0, #1
    4c7e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    4c82:	f000 8097 	beq.w	4db4 <ticker_job+0x154>
	u8_t idx = *ticks_elapsed_index + 1;
    4c86:	4403      	add	r3, r0
    4c88:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    4c8a:	2b02      	cmp	r3, #2
		idx = 0U;
    4c8c:	bf08      	it	eq
    4c8e:	4613      	moveq	r3, r2
		ticks_elapsed =
    4c90:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    4c94:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    4c98:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    4c9a:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    4c9c:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    4c9e:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    4ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4ca4:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    4ca8:	2301      	movs	r3, #1
    4caa:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    4cac:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    4cb0:	f89b 201d 	ldrb.w	r2, [fp, #29]
    4cb4:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    4cb6:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    4cba:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    4cbe:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    4cc0:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    4cc2:	461a      	mov	r2, r3
    4cc4:	3b01      	subs	r3, #1
	users = &instance->users[0];
    4cc6:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    4cc8:	b2db      	uxtb	r3, r3
    4cca:	2a00      	cmp	r2, #0
    4ccc:	f000 8323 	beq.w	5316 <ticker_job+0x6b6>
    4cd0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	pending = 0U;
    4cd4:	2300      	movs	r3, #0
    4cd6:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    4cd8:	23ff      	movs	r3, #255	; 0xff
    4cda:	9301      	str	r3, [sp, #4]
    4cdc:	4647      	mov	r7, r8
		user_ops = &user->user_op[0];
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    4ce2:	f897 8003 	ldrb.w	r8, [r7, #3]
    4ce6:	78bb      	ldrb	r3, [r7, #2]
    4ce8:	46ba      	mov	sl, r7
    4cea:	9807      	ldr	r0, [sp, #28]
					ticks_used = 0;
    4cec:	4699      	mov	r9, r3
			user_op = &user_ops[user->middle];
    4cee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    4cf2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    4cf6:	1c59      	adds	r1, r3, #1
		while (user->middle != user->last) {
    4cf8:	4543      	cmp	r3, r8
			user_op = &user_ops[user->middle];
    4cfa:	eb00 0582 	add.w	r5, r0, r2, lsl #2
			middle = user->middle + 1;
    4cfe:	b2cb      	uxtb	r3, r1
		while (user->middle != user->last) {
    4d00:	f000 8188 	beq.w	5014 <ticker_job+0x3b4>
			if (middle == user->count_user_op) {
    4d04:	f89a 1000 	ldrb.w	r1, [sl]
				middle = 0U;
    4d08:	4299      	cmp	r1, r3
    4d0a:	bf08      	it	eq
    4d0c:	2300      	moveq	r3, #0
			user->middle = middle;
    4d0e:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    4d12:	f810 1022 	ldrb.w	r1, [r0, r2, lsl #2]
    4d16:	2904      	cmp	r1, #4
    4d18:	f240 817a 	bls.w	5010 <ticker_job+0x3b0>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    4d1c:	2907      	cmp	r1, #7
    4d1e:	f200 8088 	bhi.w	4e32 <ticker_job+0x1d2>
			ticker = &node[user_op->id];
    4d22:	786a      	ldrb	r2, [r5, #1]
    4d24:	9c04      	ldr	r4, [sp, #16]
    4d26:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    4d2a:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    4d2e:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    4d30:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    4d32:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    4d34:	7860      	ldrb	r0, [r4, #1]
    4d36:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    4d38:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
			ticker = &node[user_op->id];
    4d3c:	fa0f fc82 	sxth.w	ip, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    4d40:	d077      	beq.n	4e32 <ticker_job+0x1d2>
			    (state == 0U) ||
    4d42:	2905      	cmp	r1, #5
    4d44:	d065      	beq.n	4e12 <ticker_job+0x1b2>
			if (state == 1U) {
    4d46:	2801      	cmp	r0, #1
    4d48:	d137      	bne.n	4dba <ticker_job+0x15a>
	previous = instance->ticker_id_head;
    4d4a:	f89b e01d 	ldrb.w	lr, [fp, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4d4e:	f8db 3000 	ldr.w	r3, [fp]
	while (current != TICKER_NULL) {
    4d52:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    4d56:	d017      	beq.n	4d88 <ticker_job+0x128>
		ticker_current = &node[current];
    4d58:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
		if (current == id) {
    4d5c:	4572      	cmp	r2, lr
		ticker_current = &node[current];
    4d5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		if (current == id) {
    4d62:	f000 8152 	beq.w	500a <ticker_job+0x3aa>
	total = 0U;
    4d66:	2600      	movs	r6, #0
    4d68:	e001      	b.n	4d6e <ticker_job+0x10e>
		if (current == id) {
    4d6a:	4572      	cmp	r2, lr
    4d6c:	d070      	beq.n	4e50 <ticker_job+0x1f0>
		total += ticker_current->ticks_to_expire;
    4d6e:	46f0      	mov	r8, lr
		current = ticker_current->next;
    4d70:	f890 e000 	ldrb.w	lr, [r0]
		total += ticker_current->ticks_to_expire;
    4d74:	f8d0 9008 	ldr.w	r9, [r0, #8]
	while (current != TICKER_NULL) {
    4d78:	f1be 0fff 	cmp.w	lr, #255	; 0xff
		ticker_current = &node[current];
    4d7c:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
		total += ticker_current->ticks_to_expire;
    4d80:	444e      	add	r6, r9
		ticker_current = &node[current];
    4d82:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	while (current != TICKER_NULL) {
    4d86:	d1f0      	bne.n	4d6a <ticker_job+0x10a>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4d88:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4d8a:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4d8c:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4d8e:	f000 8127 	beq.w	4fe0 <ticker_job+0x380>
		ticker->req = ticker->ack;
    4d92:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    4d94:	f89b 301c 	ldrb.w	r3, [fp, #28]
    4d98:	4293      	cmp	r3, r2
    4d9a:	d022      	beq.n	4de2 <ticker_job+0x182>
	if (user_op->fp_op_func) {
    4d9c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    4d9e:	2000      	movs	r0, #0
    4da0:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    4da2:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    4da4:	b10b      	cbz	r3, 4daa <ticker_job+0x14a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    4da6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4da8:	4798      	blx	r3
    4daa:	f89a 8003 	ldrb.w	r8, [sl, #3]
    4dae:	f89a 3002 	ldrb.w	r3, [sl, #2]
    4db2:	e79a      	b.n	4cea <ticker_job+0x8a>
		flag_elapsed = 0U;
    4db4:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    4db6:	9202      	str	r2, [sp, #8]
    4db8:	e778      	b.n	4cac <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    4dba:	2104      	movs	r1, #4
    4dbc:	465b      	mov	r3, fp
    4dbe:	2201      	movs	r2, #1
    4dc0:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    4dc4:	4608      	mov	r0, r1
    4dc6:	47a0      	blx	r4
	while (count_user--) {
    4dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
    4dca:	f88a 9002 	strb.w	r9, [sl, #2]
    4dce:	4657      	mov	r7, sl
				pending = 1U;
    4dd0:	2301      	movs	r3, #1
	while (count_user--) {
    4dd2:	42ba      	cmp	r2, r7
				pending = 1U;
    4dd4:	9308      	str	r3, [sp, #32]
    4dd6:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    4dda:	f000 8122 	beq.w	5022 <ticker_job+0x3c2>
    4dde:	461f      	mov	r7, r3
    4de0:	e77d      	b.n	4cde <ticker_job+0x7e>
			instance->ticker_id_slot_previous = TICKER_NULL;
    4de2:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    4de4:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    4de6:	f88b 301c 	strb.w	r3, [fp, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    4dea:	f040 81db 	bne.w	51a4 <ticker_job+0x544>
				ticks_at_stop =
    4dee:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    4df0:	f8db 3014 	ldr.w	r3, [fp, #20]
			if (!((ticks_at_stop - ticks_current) &
    4df4:	1ac2      	subs	r2, r0, r3
    4df6:	0211      	lsls	r1, r2, #8
    4df8:	f100 81cb 	bmi.w	5192 <ticker_job+0x532>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4dfc:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    4e00:	9a02      	ldr	r2, [sp, #8]
    4e02:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    4e04:	f8db 2018 	ldr.w	r2, [fp, #24]
    4e08:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    4e0a:	bf88      	it	hi
    4e0c:	f8cb 3018 	strhi.w	r3, [fp, #24]
    4e10:	e7c4      	b.n	4d9c <ticker_job+0x13c>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    4e12:	686e      	ldr	r6, [r5, #4]
    4e14:	2e00      	cmp	r6, #0
    4e16:	d196      	bne.n	4d46 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    4e18:	68ae      	ldr	r6, [r5, #8]
    4e1a:	2e00      	cmp	r6, #0
    4e1c:	d193      	bne.n	4d46 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    4e1e:	68ee      	ldr	r6, [r5, #12]
    4e20:	2e00      	cmp	r6, #0
    4e22:	d190      	bne.n	4d46 <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    4e24:	692e      	ldr	r6, [r5, #16]
    4e26:	2e00      	cmp	r6, #0
    4e28:	d18d      	bne.n	4d46 <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
    4e2a:	696e      	ldr	r6, [r5, #20]
    4e2c:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    4e30:	d189      	bne.n	4d46 <ticker_job+0xe6>
	if (user_op->fp_op_func) {
    4e32:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    4e34:	2100      	movs	r1, #0
	user_op->status = status;
    4e36:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    4e38:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    4e3a:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    4e3c:	2a00      	cmp	r2, #0
    4e3e:	f43f af54 	beq.w	4cea <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    4e42:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4e44:	4790      	blx	r2
    4e46:	f89a 8003 	ldrb.w	r8, [sl, #3]
    4e4a:	f89a 3002 	ldrb.w	r3, [sl, #2]
    4e4e:	e74c      	b.n	4cea <ticker_job+0x8a>
	if (previous == current) {
    4e50:	4590      	cmp	r8, r2
    4e52:	d017      	beq.n	4e84 <ticker_job+0x224>
    4e54:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    4e58:	eb03 1c08 	add.w	ip, r3, r8, lsl #4
	node[previous].next = ticker_current->next;
    4e5c:	7807      	ldrb	r7, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    4e5e:	6882      	ldr	r2, [r0, #8]
	node[previous].next = ticker_current->next;
    4e60:	f88c 7000 	strb.w	r7, [ip]
	if (ticker_current->next != TICKER_NULL) {
    4e64:	2fff      	cmp	r7, #255	; 0xff
    4e66:	d006      	beq.n	4e76 <ticker_job+0x216>
		node[ticker_current->next].ticks_to_expire += timeout;
    4e68:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    4e6c:	eb03 1707 	add.w	r7, r3, r7, lsl #4
    4e70:	68b8      	ldr	r0, [r7, #8]
    4e72:	4410      	add	r0, r2
    4e74:	60b8      	str	r0, [r7, #8]
	return (total + timeout);
    4e76:	4416      	add	r6, r2
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4e78:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4e7a:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4e7c:	d00b      	beq.n	4e96 <ticker_job+0x236>
    4e7e:	78a7      	ldrb	r7, [r4, #2]
    4e80:	786a      	ldrb	r2, [r5, #1]
    4e82:	e786      	b.n	4d92 <ticker_job+0x132>
    4e84:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    4e88:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
		instance->ticker_id_head = ticker_current->next;
    4e8c:	7802      	ldrb	r2, [r0, #0]
    4e8e:	f88b 201d 	strb.w	r2, [fp, #29]
    4e92:	7829      	ldrb	r1, [r5, #0]
    4e94:	e7e2      	b.n	4e5c <ticker_job+0x1fc>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    4e96:	f8db 7014 	ldr.w	r7, [fp, #20]
    4e9a:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    4e9c:	f00c f8ec 	bl	11078 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4ea0:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4ea2:	eba0 0c07 	sub.w	ip, r0, r7
    4ea6:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4eaa:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    4eac:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    4eae:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    4eb0:	f240 80a2 	bls.w	4ff8 <ticker_job+0x398>
		ticks_to_expire -= ticks_elapsed;
    4eb4:	6962      	ldr	r2, [r4, #20]
    4eb6:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    4eb8:	6866      	ldr	r6, [r4, #4]
    4eba:	2e00      	cmp	r6, #0
    4ebc:	d053      	beq.n	4f66 <ticker_job+0x306>
	    (user_op->params.update.lazy != 0U)) {
    4ebe:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d050      	beq.n	4f66 <ticker_job+0x306>
		user_op->params.update.lazy--;
    4ec4:	3801      	subs	r0, #1
    4ec6:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    4ec8:	429e      	cmp	r6, r3
    4eca:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
    4ecc:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    4ece:	d225      	bcs.n	4f1c <ticker_job+0x2bc>
    4ed0:	f106 0901 	add.w	r9, r6, #1
    4ed4:	920b      	str	r2, [sp, #44]	; 0x2c
    4ed6:	e011      	b.n	4efc <ticker_job+0x29c>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    4ed8:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    4edc:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    4ee0:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    4ee4:	46ce      	mov	lr, r9
	ticker->remainder_current -= ticker->remainder_periodic;
    4ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
    4ee8:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    4eea:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    4eee:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    4ef0:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    4ef2:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    4ef4:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    4ef6:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    4ef8:	d20e      	bcs.n	4f18 <ticker_job+0x2b8>
    4efa:	8aa8      	ldrh	r0, [r5, #20]
    4efc:	4288      	cmp	r0, r1
    4efe:	f080 81b1 	bcs.w	5264 <ticker_job+0x604>
					   ticker_remainder_dec(ticker);
    4f02:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    4f06:	f8df e2c8 	ldr.w	lr, [pc, #712]	; 51d0 <ticker_job+0x570>
					   ticker_remainder_dec(ticker);
    4f0a:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
    4f0c:	4aaf      	ldr	r2, [pc, #700]	; (51cc <ticker_job+0x56c>)
    4f0e:	4486      	add	lr, r0
    4f10:	4596      	cmp	lr, r2
    4f12:	d8e1      	bhi.n	4ed8 <ticker_job+0x278>
    4f14:	46b6      	mov	lr, r6
    4f16:	e7e6      	b.n	4ee6 <ticker_job+0x286>
    4f18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f1a:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    4f1c:	4281      	cmp	r1, r0
    4f1e:	d221      	bcs.n	4f64 <ticker_job+0x304>
					   ticker_remainder_inc(ticker);
    4f20:	6a20      	ldr	r0, [r4, #32]
    4f22:	9009      	str	r0, [sp, #36]	; 0x24
    4f24:	f106 0e01 	add.w	lr, r6, #1
    4f28:	920b      	str	r2, [sp, #44]	; 0x2c
    4f2a:	e007      	b.n	4f3c <ticker_job+0x2dc>
	ticker->remainder_current += ticker->remainder_periodic;
    4f2c:	6260      	str	r0, [r4, #36]	; 0x24
    4f2e:	46b1      	mov	r9, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    4f30:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    4f32:	3101      	adds	r1, #1
    4f34:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    4f36:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    4f38:	444b      	add	r3, r9
		while (ticker->lazy_current < user_op->params.update.lazy) {
    4f3a:	d211      	bcs.n	4f60 <ticker_job+0x300>
	ticker->remainder_current += ticker->remainder_periodic;
    4f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4f3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    4f40:	f8df 928c 	ldr.w	r9, [pc, #652]	; 51d0 <ticker_job+0x570>
	ticker->remainder_current += ticker->remainder_periodic;
    4f44:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    4f46:	4aa1      	ldr	r2, [pc, #644]	; (51cc <ticker_job+0x56c>)
    4f48:	4481      	add	r9, r0
    4f4a:	4591      	cmp	r9, r2
    4f4c:	d8ee      	bhi.n	4f2c <ticker_job+0x2cc>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    4f4e:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    4f52:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    4f56:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    4f5a:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    4f5c:	46f1      	mov	r9, lr
    4f5e:	e7e7      	b.n	4f30 <ticker_job+0x2d0>
    4f60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f62:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    4f64:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    4f66:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    4f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    4f6c:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    4f6e:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    4f70:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    4f72:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    4f74:	b136      	cbz	r6, 4f84 <ticker_job+0x324>
    4f76:	6831      	ldr	r1, [r6, #0]
    4f78:	b121      	cbz	r1, 4f84 <ticker_job+0x324>
			user_op->params.update.ticks_drift_plus -
    4f7a:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    4f7e:	6070      	str	r0, [r6, #4]
    4f80:	68a3      	ldr	r3, [r4, #8]
    4f82:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    4f84:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    4f88:	d121      	bne.n	4fce <ticker_job+0x36e>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    4f8a:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    4f8c:	4293      	cmp	r3, r2
    4f8e:	d91b      	bls.n	4fc8 <ticker_job+0x368>
		ticks_to_expire -= ticks_to_expire_minus;
    4f90:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    4f92:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    4f94:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    4f96:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    4f98:	68e9      	ldr	r1, [r5, #12]
    4f9a:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    4f9c:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    4f9e:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    4fa0:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    4fa2:	bf88      	it	hi
    4fa4:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    4fa6:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    4fa8:	bf98      	it	ls
    4faa:	2300      	movls	r3, #0
    4fac:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    4fae:	b102      	cbz	r2, 4fb2 <ticker_job+0x352>
		ticker->force = user_op->params.update.force;
    4fb0:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
    4fb2:	9b04      	ldr	r3, [sp, #16]
    4fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4fb6:	4619      	mov	r1, r3
    4fb8:	9b01      	ldr	r3, [sp, #4]
    4fba:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    4fbc:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    4fbe:	786a      	ldrb	r2, [r5, #1]
    4fc0:	9201      	str	r2, [sp, #4]
		ticker->req++;
    4fc2:	3301      	adds	r3, #1
    4fc4:	7063      	strb	r3, [r4, #1]
    4fc6:	e6e9      	b.n	4d9c <ticker_job+0x13c>
    4fc8:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    4fca:	2300      	movs	r3, #0
    4fcc:	e7e2      	b.n	4f94 <ticker_job+0x334>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4fce:	9903      	ldr	r1, [sp, #12]
    4fd0:	eba1 0708 	sub.w	r7, r1, r8
    4fd4:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    4fd8:	429f      	cmp	r7, r3
    4fda:	d213      	bcs.n	5004 <ticker_job+0x3a4>
			ticks_to_expire -= delta_current_start;
    4fdc:	1bdb      	subs	r3, r3, r7
    4fde:	e7d5      	b.n	4f8c <ticker_job+0x32c>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    4fe0:	f8db 7014 	ldr.w	r7, [fp, #20]
    4fe4:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    4fe6:	f00c f847 	bl	11078 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4fea:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    4fec:	eba0 0c07 	sub.w	ip, r0, r7
    4ff0:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    4ff4:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4ff6:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    4ff8:	6961      	ldr	r1, [r4, #20]
    4ffa:	440b      	add	r3, r1
    4ffc:	1b9a      	subs	r2, r3, r6
    4ffe:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    5000:	2300      	movs	r3, #0
    5002:	e759      	b.n	4eb8 <ticker_job+0x258>
			ticks_to_expire_minus +=
    5004:	443a      	add	r2, r7
    5006:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    5008:	e7df      	b.n	4fca <ticker_job+0x36a>
		if (current == id) {
    500a:	4684      	mov	ip, r0
	total = 0U;
    500c:	2600      	movs	r6, #0
    500e:	e73d      	b.n	4e8c <ticker_job+0x22c>
    5010:	4699      	mov	r9, r3
    5012:	e66c      	b.n	4cee <ticker_job+0x8e>
	while (count_user--) {
    5014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5016:	4657      	mov	r7, sl
    5018:	42ba      	cmp	r2, r7
    501a:	f1a7 0308 	sub.w	r3, r7, #8
    501e:	f47f aede 	bne.w	4dde <ticker_job+0x17e>
    5022:	f89b a01d 	ldrb.w	sl, [fp, #29]
    5026:	9b06      	ldr	r3, [sp, #24]
    5028:	ebb3 030a 	subs.w	r3, r3, sl
    502c:	bf18      	it	ne
    502e:	2301      	movne	r3, #1
    5030:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
    5032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5034:	2b00      	cmp	r3, #0
    5036:	f040 8176 	bne.w	5326 <ticker_job+0x6c6>
	count_user = instance->count_user;
    503a:	f89b 2009 	ldrb.w	r2, [fp, #9]
	node = &instance->nodes[0];
    503e:	f8db 3000 	ldr.w	r3, [fp]
	users = &instance->users[0];
    5042:	f8db 1004 	ldr.w	r1, [fp, #4]
	node = &instance->nodes[0];
    5046:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    5048:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    504a:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    504c:	b2db      	uxtb	r3, r3
    504e:	2a00      	cmp	r2, #0
    5050:	f000 810c 	beq.w	526c <ticker_job+0x60c>
    5054:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    5058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    505a:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    505c:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    5060:	f898 4001 	ldrb.w	r4, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    5064:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    5066:	9b01      	ldr	r3, [sp, #4]
    5068:	2bff      	cmp	r3, #255	; 0xff
    506a:	d058      	beq.n	511e <ticker_job+0x4be>
				ticker = &node[id_insert];
    506c:	f8dd a004 	ldr.w	sl, [sp, #4]
    5070:	9a04      	ldr	r2, [sp, #16]
    5072:	fa0f f38a 	sxth.w	r3, sl
    5076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    507a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    507e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
				insert_head = ticker->next;
    5082:	f812 200c 	ldrb.w	r2, [r2, ip]
    5086:	9201      	str	r2, [sp, #4]
				user_op = NULL;
    5088:	2200      	movs	r2, #0
	ticker->next = TICKER_NULL;
    508a:	20ff      	movs	r0, #255	; 0xff
    508c:	7018      	strb	r0, [r3, #0]
	(void)ticker_enqueue(instance, id_insert);
    508e:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    5092:	f89b 101d 	ldrb.w	r1, [fp, #29]
	ticker_new = &node[id];
    5096:	eb07 060c 	add.w	r6, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    509a:	4281      	cmp	r1, r0
	ticks_to_expire = ticker_new->ticks_to_expire;
    509c:	68b5      	ldr	r5, [r6, #8]
	previous = TICKER_NULL;
    509e:	bf18      	it	ne
    50a0:	9302      	strne	r3, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    50a2:	d111      	bne.n	50c8 <ticker_job+0x468>
    50a4:	e08d      	b.n	51c2 <ticker_job+0x562>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    50a6:	ebb5 050c 	subs.w	r5, r5, ip
    50aa:	d106      	bne.n	50ba <ticker_job+0x45a>
    50ac:	f8be e01e 	ldrh.w	lr, [lr, #30]
    50b0:	f8b6 901e 	ldrh.w	r9, [r6, #30]
    50b4:	45f1      	cmp	r9, lr
    50b6:	f200 80d2 	bhi.w	525e <ticker_job+0x5fe>
		current = ticker_current->next;
    50ba:	f817 c003 	ldrb.w	ip, [r7, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    50be:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    50c2:	4608      	mov	r0, r1
    50c4:	d071      	beq.n	51aa <ticker_job+0x54a>
    50c6:	4661      	mov	r1, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    50c8:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    50cc:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    50d0:	ea4f 130c 	mov.w	r3, ip, lsl #4
		(ticks_to_expire_current =
    50d4:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    50d8:	45ac      	cmp	ip, r5
    50da:	d9e4      	bls.n	50a6 <ticker_job+0x446>
    50dc:	9b02      	ldr	r3, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    50de:	60b5      	str	r5, [r6, #8]
	if (previous == TICKER_NULL) {
    50e0:	28ff      	cmp	r0, #255	; 0xff
	ticker_new->next = current;
    50e2:	7031      	strb	r1, [r6, #0]
	if (previous == TICKER_NULL) {
    50e4:	d166      	bne.n	51b4 <ticker_job+0x554>
		instance->ticker_id_head = id;
    50e6:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    50ea:	29ff      	cmp	r1, #255	; 0xff
    50ec:	d006      	beq.n	50fc <ticker_job+0x49c>
		node[current].ticks_to_expire -= ticks_to_expire;
    50ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    50f2:	eb07 1701 	add.w	r7, r7, r1, lsl #4
    50f6:	68b9      	ldr	r1, [r7, #8]
    50f8:	1b4d      	subs	r5, r1, r5
    50fa:	60bd      	str	r5, [r7, #8]
	ticker->req = ticker->ack + 1;
    50fc:	7899      	ldrb	r1, [r3, #2]
    50fe:	3101      	adds	r1, #1
    5100:	7059      	strb	r1, [r3, #1]
			if (user_op) {
    5102:	2a00      	cmp	r2, #0
    5104:	d0af      	beq.n	5066 <ticker_job+0x406>
	if (user_op->fp_op_func) {
    5106:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    5108:	9903      	ldr	r1, [sp, #12]
    510a:	7011      	strb	r1, [r2, #0]
	user_op->status = status;
    510c:	6291      	str	r1, [r2, #40]	; 0x28
	if (user_op->fp_op_func) {
    510e:	2b00      	cmp	r3, #0
    5110:	d0a9      	beq.n	5066 <ticker_job+0x406>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    5112:	6b11      	ldr	r1, [r2, #48]	; 0x30
    5114:	2000      	movs	r0, #0
    5116:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    5118:	9b01      	ldr	r3, [sp, #4]
    511a:	2bff      	cmp	r3, #255	; 0xff
    511c:	d1a6      	bne.n	506c <ticker_job+0x40c>
    511e:	f898 3002 	ldrb.w	r3, [r8, #2]
    5122:	42a3      	cmp	r3, r4
    5124:	d02e      	beq.n	5184 <ticker_job+0x524>
    5126:	9e05      	ldr	r6, [sp, #20]
				if (first == user->count_user_op) {
    5128:	f898 2000 	ldrb.w	r2, [r8]
				user_op = &user_ops[user_ops_first];
    512c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    5130:	eb04 0181 	add.w	r1, r4, r1, lsl #2
				first = user_ops_first + 1;
    5134:	3401      	adds	r4, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    5136:	f816 0021 	ldrb.w	r0, [r6, r1, lsl #2]
				first = user_ops_first + 1;
    513a:	b2e4      	uxtb	r4, r4
					first = 0U;
    513c:	42a2      	cmp	r2, r4
    513e:	bf08      	it	eq
    5140:	2400      	moveq	r4, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    5142:	2804      	cmp	r0, #4
				user_op = &user_ops[user_ops_first];
    5144:	eb06 0281 	add.w	r2, r6, r1, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    5148:	d11a      	bne.n	5180 <ticker_job+0x520>
				id_insert = user_op->id;
    514a:	f892 a001 	ldrb.w	sl, [r2, #1]
				ticker = &node[id_insert];
    514e:	9b04      	ldr	r3, [sp, #16]
    5150:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    5154:	eb03 130c 	add.w	r3, r3, ip, lsl #4
    5158:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    515c:	785d      	ldrb	r5, [r3, #1]
				      ticker->ack) & 0xff) != 0U) {
    515e:	7898      	ldrb	r0, [r3, #2]
				if (((ticker->req -
    5160:	1a2d      	subs	r5, r5, r0
    5162:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    5166:	d035      	beq.n	51d4 <ticker_job+0x574>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    5168:	9b03      	ldr	r3, [sp, #12]
    516a:	f806 3021 	strb.w	r3, [r6, r1, lsl #2]
	if (user_op->fp_op_func) {
    516e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	user_op->status = status;
    5170:	2101      	movs	r1, #1
    5172:	6291      	str	r1, [r2, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    5174:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    5176:	b10b      	cbz	r3, 517c <ticker_job+0x51c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    5178:	6b11      	ldr	r1, [r2, #48]	; 0x30
    517a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    517c:	f898 3002 	ldrb.w	r3, [r8, #2]
    5180:	42a3      	cmp	r3, r4
    5182:	d1d1      	bne.n	5128 <ticker_job+0x4c8>
	while (count_user--) {
    5184:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5186:	4542      	cmp	r2, r8
    5188:	f1a8 0308 	sub.w	r3, r8, #8
    518c:	d06c      	beq.n	5268 <ticker_job+0x608>
    518e:	4698      	mov	r8, r3
    5190:	e764      	b.n	505c <ticker_job+0x3fc>
				if (ticks_elapsed > ticks_used) {
    5192:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5194:	1a1b      	subs	r3, r3, r0
    5196:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    519a:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    519c:	bf8c      	ite	hi
    519e:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    51a0:	2300      	movls	r3, #0
    51a2:	e62f      	b.n	4e04 <ticker_job+0x1a4>
				ticks_at_stop = cntr_cnt_get();
    51a4:	f00b ff68 	bl	11078 <cntr_cnt_get>
    51a8:	e622      	b.n	4df0 <ticker_job+0x190>
    51aa:	9b02      	ldr	r3, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    51ac:	60b5      	str	r5, [r6, #8]
	ticker_new->next = current;
    51ae:	f886 c000 	strb.w	ip, [r6]
    51b2:	4661      	mov	r1, ip
		node[previous].next = id;
    51b4:	b200      	sxth	r0, r0
    51b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    51ba:	0100      	lsls	r0, r0, #4
    51bc:	f807 a000 	strb.w	sl, [r7, r0]
    51c0:	e793      	b.n	50ea <ticker_job+0x48a>
	ticker_new->next = current;
    51c2:	f807 100c 	strb.w	r1, [r7, ip]
		instance->ticker_id_head = id;
    51c6:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    51ca:	e797      	b.n	50fc <ticker_job+0x49c>
    51cc:	7f172b59 	.word	0x7f172b59
    51d0:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    51d4:	8a91      	ldrh	r1, [r2, #20]
				ticker_job_op_start(ticker, user_op,
    51d6:	f8db 6014 	ldr.w	r6, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    51da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    51de:	4281      	cmp	r1, r0
    51e0:	d031      	beq.n	5246 <ticker_job+0x5e6>
    51e2:	f883 502c 	strb.w	r5, [r3, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    51e6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    51e8:	68d7      	ldr	r7, [r2, #12]
	ticker->ext_data = start->ext_data;
    51ea:	6298      	str	r0, [r3, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    51ec:	6910      	ldr	r0, [r2, #16]
    51ee:	6218      	str	r0, [r3, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    51f0:	605f      	str	r7, [r3, #4]
	ticker->timeout_func = start->fp_timeout_func;
    51f2:	e9d2 0906 	ldrd	r0, r9, [r2, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    51f6:	6857      	ldr	r7, [r2, #4]
	ticker->ticks_slot = start->ticks_slot;
    51f8:	6198      	str	r0, [r3, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    51fa:	eba7 0e06 	sub.w	lr, r7, r6
	ticker->context = start->context;
    51fe:	6a10      	ldr	r0, [r2, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    5200:	8399      	strh	r1, [r3, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    5202:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
	ticker->context = start->context;
    5206:	e9c3 9003 	strd	r9, r0, [r3, #12]
	ticker->ticks_to_expire = start->ticks_first;
    520a:	6891      	ldr	r1, [r2, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    520c:	d10c      	bne.n	5228 <ticker_job+0x5c8>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    520e:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    5212:	4471      	add	r1, lr
	if (ticks_to_expire > ticks_to_expire_minus) {
    5214:	b181      	cbz	r1, 5238 <ticker_job+0x5d8>
	ticker->ticks_to_expire = ticks_to_expire;
    5216:	6099      	str	r1, [r3, #8]
	ticker->remainder_current = 0U;
    5218:	9903      	ldr	r1, [sp, #12]
    521a:	6259      	str	r1, [r3, #36]	; 0x24
	ticker->lazy_current = 0U;
    521c:	83d9      	strh	r1, [r3, #30]
	ticker->force = 1U;
    521e:	f04f 0101 	mov.w	r1, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    5222:	615d      	str	r5, [r3, #20]
	ticker->force = 1U;
    5224:	70d9      	strb	r1, [r3, #3]
}
    5226:	e730      	b.n	508a <ticker_job+0x42a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5228:	1bf6      	subs	r6, r6, r7
    522a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    522e:	42b1      	cmp	r1, r6
    5230:	d905      	bls.n	523e <ticker_job+0x5de>
			ticks_to_expire -= delta_current_start;
    5232:	1b89      	subs	r1, r1, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    5234:	2900      	cmp	r1, #0
    5236:	d1ee      	bne.n	5216 <ticker_job+0x5b6>
		ticks_to_expire_minus -= ticks_to_expire;
    5238:	460d      	mov	r5, r1
		ticks_to_expire = 0U;
    523a:	2100      	movs	r1, #0
    523c:	e7eb      	b.n	5216 <ticker_job+0x5b6>
			    (delta_current_start - ticks_to_expire);
    523e:	1a71      	subs	r1, r6, r1
		ticks_to_expire_minus -= ticks_to_expire;
    5240:	460d      	mov	r5, r1
		ticks_to_expire = 0U;
    5242:	2100      	movs	r1, #0
    5244:	e7e7      	b.n	5216 <ticker_job+0x5b6>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    5246:	f04f 0101 	mov.w	r1, #1
    524a:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    524e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    5250:	68d1      	ldr	r1, [r2, #12]
	ticker->ext_data = start->ext_data;
    5252:	6298      	str	r0, [r3, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    5254:	6910      	ldr	r0, [r2, #16]
    5256:	6218      	str	r0, [r3, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    5258:	6059      	str	r1, [r3, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    525a:	4629      	mov	r1, r5
    525c:	e7c9      	b.n	51f2 <ticker_job+0x592>
    525e:	9b02      	ldr	r3, [sp, #8]
    5260:	4665      	mov	r5, ip
    5262:	e73c      	b.n	50de <ticker_job+0x47e>
    5264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5266:	e659      	b.n	4f1c <ticker_job+0x2bc>
    5268:	f89b a01d 	ldrb.w	sl, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    526c:	9b06      	ldr	r3, [sp, #24]
    526e:	459a      	cmp	sl, r3
    5270:	f000 832c 	beq.w	58cc <ticker_job+0xc6c>
	if (!pending) {
    5274:	9b08      	ldr	r3, [sp, #32]
    5276:	2b00      	cmp	r3, #0
    5278:	f000 834b 	beq.w	5912 <ticker_job+0xcb2>
	instance->job_guard = 0U;
    527c:	2300      	movs	r3, #0
    527e:	f89b a01d 	ldrb.w	sl, [fp, #29]
    5282:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
    5286:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    528a:	f000 83d4 	beq.w	5a36 <ticker_job+0xdd6>
	if (ticker_id_old_head == TICKER_NULL) {
    528e:	9b06      	ldr	r3, [sp, #24]
    5290:	2bff      	cmp	r3, #255	; 0xff
    5292:	f000 83ea 	beq.w	5a6a <ticker_job+0xe0a>
	ticks_to_expire = ticker->ticks_to_expire;
    5296:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    529a:	f8df 8288 	ldr.w	r8, [pc, #648]	; 5524 <ticker_job+0x8c4>
    529e:	4f9e      	ldr	r7, [pc, #632]	; (5518 <ticker_job+0x8b8>)
    52a0:	4e9e      	ldr	r6, [pc, #632]	; (551c <ticker_job+0x8bc>)
	ticker = &instance->nodes[instance->ticker_id_head];
    52a2:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    52a6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    52aa:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    52ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
		ctr = cntr_cnt_get();
    52b0:	f00b fee2 	bl	11078 <cntr_cnt_get>
		cc = instance->ticks_current;
    52b4:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    52b8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    52bc:	1ac4      	subs	r4, r0, r3
    52be:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    52c2:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    52c4:	454c      	cmp	r4, r9
    52c6:	bf2c      	ite	cs
    52c8:	191b      	addcs	r3, r3, r4
    52ca:	444b      	addcc	r3, r9
		cc &= HAL_TICKER_CNTR_MASK;
    52cc:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    52d0:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    52d2:	4620      	mov	r0, r4
    52d4:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    52d6:	f00b fecf 	bl	11078 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    52da:	eba0 000a 	sub.w	r0, r0, sl
    52de:	eba4 040a 	sub.w	r4, r4, sl
    52e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    52e6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    52ea:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    52ec:	42a0      	cmp	r0, r4
		i--;
    52ee:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
    52f2:	f240 82f6 	bls.w	58e2 <ticker_job+0xc82>
		LL_ASSERT(i);
    52f6:	2d00      	cmp	r5, #0
    52f8:	d1da      	bne.n	52b0 <ticker_job+0x650>
    52fa:	f640 0371 	movw	r3, #2161	; 0x871
    52fe:	4642      	mov	r2, r8
    5300:	4639      	mov	r1, r7
    5302:	4630      	mov	r0, r6
    5304:	f00e fcf6 	bl	13cf4 <printk>
    5308:	4040      	eors	r0, r0
    530a:	f380 8811 	msr	BASEPRI, r0
    530e:	f04f 0003 	mov.w	r0, #3
    5312:	df02      	svc	2
    5314:	e7cc      	b.n	52b0 <ticker_job+0x650>
	if (flag_elapsed) {
    5316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5318:	2b00      	cmp	r3, #0
    531a:	f000 82f0 	beq.w	58fe <ticker_job+0xc9e>
	pending = 0U;
    531e:	9b07      	ldr	r3, [sp, #28]
    5320:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    5322:	23ff      	movs	r3, #255	; 0xff
    5324:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    5326:	f00b fea7 	bl	11078 <cntr_cnt_get>
	node = &instance->nodes[0];
    532a:	f8db 3000 	ldr.w	r3, [fp]
    532e:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5330:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
    5332:	f89b a01d 	ldrb.w	sl, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5336:	1ac0      	subs	r0, r0, r3
    5338:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    533c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5340:	9304      	str	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
    5342:	f000 80b0 	beq.w	54a6 <ticker_job+0x846>
    5346:	f8dd 9008 	ldr.w	r9, [sp, #8]
	ticks_expired = 0U;
    534a:	f04f 0800 	mov.w	r8, #0
    534e:	e02e      	b.n	53ae <ticker_job+0x74e>
		is_must_expire_skip = (ticker->must_expire &&
    5350:	8bdc      	ldrh	r4, [r3, #30]
    5352:	3c00      	subs	r4, #0
    5354:	bf18      	it	ne
    5356:	2401      	movne	r4, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    5358:	f8db 1018 	ldr.w	r1, [fp, #24]
    535c:	428a      	cmp	r2, r1
			instance->ticker_id_slot_previous = TICKER_NULL;
    535e:	bf24      	itt	cs
    5360:	f04f 32ff 	movcs.w	r2, #4294967295
    5364:	f88b 201c 	strbcs.w	r2, [fp, #28]
		if ((ticker->ticks_slot != 0U) &&
    5368:	699d      	ldr	r5, [r3, #24]
			instance->ticks_slot_previous -= ticks_to_expire;
    536a:	bf34      	ite	cc
    536c:	1a8a      	subcc	r2, r1, r2
			instance->ticks_slot_previous = 0U;
    536e:	2200      	movcs	r2, #0
    5370:	f8cb 2018 	str.w	r2, [fp, #24]
		if ((ticker->ticks_slot != 0U) &&
    5374:	b135      	cbz	r5, 5384 <ticker_job+0x724>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    5376:	785a      	ldrb	r2, [r3, #1]
    5378:	7899      	ldrb	r1, [r3, #2]
    537a:	1a52      	subs	r2, r2, r1
    537c:	b2d2      	uxtb	r2, r2
		if ((ticker->ticks_slot != 0U) &&
    537e:	2a02      	cmp	r2, #2
    5380:	f000 815b 	beq.w	563a <ticker_job+0x9da>
    5384:	6a99      	ldr	r1, [r3, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
    5386:	2200      	movs	r2, #0
    5388:	609a      	str	r2, [r3, #8]
		instance->ticker_id_head = ticker->next;
    538a:	9a03      	ldr	r2, [sp, #12]
    538c:	f812 200e 	ldrb.w	r2, [r2, lr]
    5390:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    5394:	685c      	ldr	r4, [r3, #4]
    5396:	bb0c      	cbnz	r4, 53dc <ticker_job+0x77c>
    5398:	b111      	cbz	r1, 53a0 <ticker_job+0x740>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    539a:	7a0a      	ldrb	r2, [r1, #8]
    539c:	2a01      	cmp	r2, #1
    539e:	d05e      	beq.n	545e <ticker_job+0x7fe>
			ticker->req = ticker->ack;
    53a0:	789a      	ldrb	r2, [r3, #2]
    53a2:	705a      	strb	r2, [r3, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    53a4:	f89b a01d 	ldrb.w	sl, [fp, #29]
    53a8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    53ac:	d07b      	beq.n	54a6 <ticker_job+0x846>
		ticker = &node[id_expired];
    53ae:	9b03      	ldr	r3, [sp, #12]
    53b0:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    53b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    53b8:	ea4f 1e02 	mov.w	lr, r2, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    53bc:	689a      	ldr	r2, [r3, #8]
		if (ticks_elapsed < ticks_to_expire) {
    53be:	454a      	cmp	r2, r9
    53c0:	f200 82a3 	bhi.w	590a <ticker_job+0xcaa>
		ticks_latency -= ticks_to_expire;
    53c4:	9904      	ldr	r1, [sp, #16]
		is_must_expire_skip = (ticker->must_expire &&
    53c6:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
		ticks_latency -= ticks_to_expire;
    53ca:	1a89      	subs	r1, r1, r2
		ticks_elapsed -= ticks_to_expire;
    53cc:	eba9 0902 	sub.w	r9, r9, r2
		ticks_expired += ticks_to_expire;
    53d0:	4490      	add	r8, r2
		ticks_latency -= ticks_to_expire;
    53d2:	9104      	str	r1, [sp, #16]
		is_must_expire_skip = (ticker->must_expire &&
    53d4:	2800      	cmp	r0, #0
    53d6:	d1bb      	bne.n	5350 <ticker_job+0x6f0>
    53d8:	4604      	mov	r4, r0
    53da:	e7bd      	b.n	5358 <ticker_job+0x6f8>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    53dc:	b111      	cbz	r1, 53e4 <ticker_job+0x784>
    53de:	7a0a      	ldrb	r2, [r1, #8]
    53e0:	2a01      	cmp	r2, #1
    53e2:	d03c      	beq.n	545e <ticker_job+0x7fe>
				if (!ticker->lazy_current) {
    53e4:	8bda      	ldrh	r2, [r3, #30]
    53e6:	920b      	str	r2, [sp, #44]	; 0x2c
    53e8:	2a00      	cmp	r2, #0
    53ea:	f040 8137 	bne.w	565c <ticker_job+0x9fc>
					lazy_periodic = ticker->lazy_periodic;
    53ee:	8b9a      	ldrh	r2, [r3, #28]
    53f0:	785d      	ldrb	r5, [r3, #1]
    53f2:	9209      	str	r2, [sp, #36]	; 0x24
    53f4:	4694      	mov	ip, r2
				while (count--) {
    53f6:	1c66      	adds	r6, r4, #1
    53f8:	960a      	str	r6, [sp, #40]	; 0x28
    53fa:	e9d3 7108 	ldrd	r7, r1, [r3, #32]
				ticks_to_expire = 0U;
    53fe:	2200      	movs	r2, #0
    5400:	930c      	str	r3, [sp, #48]	; 0x30
    5402:	4666      	mov	r6, ip
    5404:	e004      	b.n	5410 <ticker_job+0x7b0>
				while (count--) {
    5406:	3e01      	subs	r6, #1
    5408:	46a4      	mov	ip, r4
    540a:	1c73      	adds	r3, r6, #1
					ticks_to_expire +=
    540c:	4462      	add	r2, ip
				while (count--) {
    540e:	d012      	beq.n	5436 <ticker_job+0x7d6>
	if ((ticker->remainder_current < BIT(31)) &&
    5410:	f8df c114 	ldr.w	ip, [pc, #276]	; 5528 <ticker_job+0x8c8>
    5414:	4b42      	ldr	r3, [pc, #264]	; (5520 <ticker_job+0x8c0>)
	ticker->remainder_current += ticker->remainder_periodic;
    5416:	4439      	add	r1, r7
	if ((ticker->remainder_current < BIT(31)) &&
    5418:	448c      	add	ip, r1
    541a:	459c      	cmp	ip, r3
    541c:	d8f3      	bhi.n	5406 <ticker_job+0x7a6>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    541e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    5422:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
				while (count--) {
    5426:	3e01      	subs	r6, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    5428:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
				while (count--) {
    542c:	1c73      	adds	r3, r6, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    542e:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
					ticks_to_expire +=
    5432:	4462      	add	r2, ip
				while (count--) {
    5434:	d1ec      	bne.n	5410 <ticker_job+0x7b0>
    5436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5438:	970a      	str	r7, [sp, #40]	; 0x28
    543a:	6259      	str	r1, [r3, #36]	; 0x24
				if (!ticker->must_expire) {
    543c:	2800      	cmp	r0, #0
    543e:	f000 8211 	beq.w	5864 <ticker_job+0xc04>
				ticker->lazy_current += (lazy_periodic + lazy);
    5442:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5444:	9809      	ldr	r0, [sp, #36]	; 0x24
    5446:	4401      	add	r1, r0
    5448:	83d9      	strh	r1, [r3, #30]
    544a:	e00a      	b.n	5462 <ticker_job+0x802>
		instance->ticker_id_head = ticker->next;
    544c:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = 0U;
    544e:	609c      	str	r4, [r3, #8]
		instance->ticker_id_head = ticker->next;
    5450:	f812 200e 	ldrb.w	r2, [r2, lr]
    5454:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    5458:	685a      	ldr	r2, [r3, #4]
    545a:	2a00      	cmp	r2, #0
    545c:	d09d      	beq.n	539a <ticker_job+0x73a>
				ticker->req = ticker->ack;
    545e:	789d      	ldrb	r5, [r3, #2]
    5460:	464a      	mov	r2, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
    5462:	9c05      	ldr	r4, [sp, #20]
    5464:	f8db 1014 	ldr.w	r1, [fp, #20]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    5468:	6958      	ldr	r0, [r3, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    546a:	eb04 0608 	add.w	r6, r4, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    546e:	1a74      	subs	r4, r6, r1
    5470:	0227      	lsls	r7, r4, #8
    5472:	f100 80d6 	bmi.w	5622 <ticker_job+0x9c2>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5476:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    547a:	4422      	add	r2, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
    547c:	4290      	cmp	r0, r2
    547e:	f080 80d9 	bcs.w	5634 <ticker_job+0x9d4>
		ticks_to_expire -= ticks_to_expire_minus;
    5482:	1a12      	subs	r2, r2, r0
		ticks_to_expire_minus = 0U;
    5484:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
    5486:	609a      	str	r2, [r3, #8]
			ticker->next = *insert_head;
    5488:	9a03      	ldr	r2, [sp, #12]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    548a:	6158      	str	r0, [r3, #20]
			ticker->next = *insert_head;
    548c:	4611      	mov	r1, r2
    548e:	9a01      	ldr	r2, [sp, #4]
    5490:	f801 200e 	strb.w	r2, [r1, lr]
			ticker->req++;
    5494:	3501      	adds	r5, #1
    5496:	705d      	strb	r5, [r3, #1]
    5498:	f8cd a004 	str.w	sl, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    549c:	f89b a01d 	ldrb.w	sl, [fp, #29]
    54a0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    54a4:	d183      	bne.n	53ae <ticker_job+0x74e>
			flag_compare_update = 1U;
    54a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
	count_user = instance->count_user;
    54aa:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    54ae:	f8db 3004 	ldr.w	r3, [fp, #4]
    54b2:	9309      	str	r3, [sp, #36]	; 0x24
			flag_compare_update = 1U;
    54b4:	4550      	cmp	r0, sl
    54b6:	bf18      	it	ne
    54b8:	2101      	movne	r1, #1
	while (count_user--) {
    54ba:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    54bc:	9107      	str	r1, [sp, #28]
	while (count_user--) {
    54be:	b2db      	uxtb	r3, r3
    54c0:	2a00      	cmp	r2, #0
    54c2:	f000 812a 	beq.w	571a <ticker_job+0xaba>
    54c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    54c8:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    54cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    54d0:	f898 4001 	ldrb.w	r4, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    54d4:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    54d6:	9b01      	ldr	r3, [sp, #4]
    54d8:	2bff      	cmp	r3, #255	; 0xff
    54da:	d067      	beq.n	55ac <ticker_job+0x94c>
				ticker = &node[id_insert];
    54dc:	f8dd a004 	ldr.w	sl, [sp, #4]
    54e0:	9a03      	ldr	r2, [sp, #12]
    54e2:	fa0f f38a 	sxth.w	r3, sl
    54e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    54ea:	ea4f 1c03 	mov.w	ip, r3, lsl #4
    54ee:	eb02 1303 	add.w	r3, r2, r3, lsl #4
				insert_head = ticker->next;
    54f2:	f812 200c 	ldrb.w	r2, [r2, ip]
    54f6:	9201      	str	r2, [sp, #4]
				user_op = NULL;
    54f8:	2200      	movs	r2, #0
	ticker->next = TICKER_NULL;
    54fa:	20ff      	movs	r0, #255	; 0xff
    54fc:	7018      	strb	r0, [r3, #0]
	(void)ticker_enqueue(instance, id_insert);
    54fe:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    5502:	f89b 101d 	ldrb.w	r1, [fp, #29]
	ticker_new = &node[id];
    5506:	eb07 060c 	add.w	r6, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    550a:	4281      	cmp	r1, r0
	ticks_to_expire = ticker_new->ticks_to_expire;
    550c:	68b5      	ldr	r5, [r6, #8]
	previous = TICKER_NULL;
    550e:	bf18      	it	ne
    5510:	9304      	strne	r3, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    5512:	d11d      	bne.n	5550 <ticker_job+0x8f0>
    5514:	e0ec      	b.n	56f0 <ticker_job+0xa90>
    5516:	bf00      	nop
    5518:	00015284 	.word	0x00015284
    551c:	0001525c 	.word	0x0001525c
    5520:	7f172b59 	.word	0x7f172b59
    5524:	0001521c 	.word	0x0001521c
    5528:	ff172b5a 	.word	0xff172b5a
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    552c:	ebb5 050c 	subs.w	r5, r5, ip
    5530:	d106      	bne.n	5540 <ticker_job+0x8e0>
    5532:	f8be e01e 	ldrh.w	lr, [lr, #30]
    5536:	f8b6 901e 	ldrh.w	r9, [r6, #30]
    553a:	45f1      	cmp	r9, lr
    553c:	f200 80a0 	bhi.w	5680 <ticker_job+0xa20>
		current = ticker_current->next;
    5540:	f817 c003 	ldrb.w	ip, [r7, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    5544:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    5548:	4608      	mov	r0, r1
    554a:	f000 808d 	beq.w	5668 <ticker_job+0xa08>
    554e:	4661      	mov	r1, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    5550:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    5554:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    5558:	ea4f 130c 	mov.w	r3, ip, lsl #4
		(ticks_to_expire_current =
    555c:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    5560:	45ac      	cmp	ip, r5
    5562:	d9e3      	bls.n	552c <ticker_job+0x8cc>
    5564:	9b04      	ldr	r3, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
    5566:	60b5      	str	r5, [r6, #8]
	if (previous == TICKER_NULL) {
    5568:	28ff      	cmp	r0, #255	; 0xff
	ticker_new->next = current;
    556a:	7031      	strb	r1, [r6, #0]
	if (previous == TICKER_NULL) {
    556c:	f040 8081 	bne.w	5672 <ticker_job+0xa12>
		instance->ticker_id_head = id;
    5570:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    5574:	29ff      	cmp	r1, #255	; 0xff
    5576:	d006      	beq.n	5586 <ticker_job+0x926>
		node[current].ticks_to_expire -= ticks_to_expire;
    5578:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    557c:	eb07 1701 	add.w	r7, r7, r1, lsl #4
    5580:	68b9      	ldr	r1, [r7, #8]
    5582:	1b4d      	subs	r5, r1, r5
    5584:	60bd      	str	r5, [r7, #8]
	ticker->req = ticker->ack + 1;
    5586:	7899      	ldrb	r1, [r3, #2]
    5588:	3101      	adds	r1, #1
    558a:	7059      	strb	r1, [r3, #1]
			if (user_op) {
    558c:	2a00      	cmp	r2, #0
    558e:	d0a2      	beq.n	54d6 <ticker_job+0x876>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    5590:	f04f 0100 	mov.w	r1, #0
	if (user_op->fp_op_func) {
    5594:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    5596:	7011      	strb	r1, [r2, #0]
	user_op->status = status;
    5598:	2100      	movs	r1, #0
    559a:	6291      	str	r1, [r2, #40]	; 0x28
	if (user_op->fp_op_func) {
    559c:	2b00      	cmp	r3, #0
    559e:	d09a      	beq.n	54d6 <ticker_job+0x876>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    55a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
    55a2:	2000      	movs	r0, #0
    55a4:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    55a6:	9b01      	ldr	r3, [sp, #4]
    55a8:	2bff      	cmp	r3, #255	; 0xff
    55aa:	d197      	bne.n	54dc <ticker_job+0x87c>
    55ac:	f898 3002 	ldrb.w	r3, [r8, #2]
    55b0:	42a3      	cmp	r3, r4
    55b2:	d02f      	beq.n	5614 <ticker_job+0x9b4>
    55b4:	9e05      	ldr	r6, [sp, #20]
				if (first == user->count_user_op) {
    55b6:	f898 2000 	ldrb.w	r2, [r8]
				user_op = &user_ops[user_ops_first];
    55ba:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    55be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
				first = user_ops_first + 1;
    55c2:	3401      	adds	r4, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    55c4:	f816 0021 	ldrb.w	r0, [r6, r1, lsl #2]
				first = user_ops_first + 1;
    55c8:	b2e4      	uxtb	r4, r4
					first = 0U;
    55ca:	42a2      	cmp	r2, r4
    55cc:	bf08      	it	eq
    55ce:	2400      	moveq	r4, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    55d0:	2804      	cmp	r0, #4
				user_op = &user_ops[user_ops_first];
    55d2:	eb06 0281 	add.w	r2, r6, r1, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    55d6:	d11b      	bne.n	5610 <ticker_job+0x9b0>
				id_insert = user_op->id;
    55d8:	f892 a001 	ldrb.w	sl, [r2, #1]
				ticker = &node[id_insert];
    55dc:	9b03      	ldr	r3, [sp, #12]
    55de:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    55e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
    55e6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    55ea:	785d      	ldrb	r5, [r3, #1]
				      ticker->ack) & 0xff) != 0U) {
    55ec:	7898      	ldrb	r0, [r3, #2]
				if (((ticker->req -
    55ee:	1a2d      	subs	r5, r5, r0
    55f0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    55f4:	d047      	beq.n	5686 <ticker_job+0xa26>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    55f6:	f04f 0300 	mov.w	r3, #0
    55fa:	f806 3021 	strb.w	r3, [r6, r1, lsl #2]
	if (user_op->fp_op_func) {
    55fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	user_op->status = status;
    5600:	2101      	movs	r1, #1
    5602:	6291      	str	r1, [r2, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    5604:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    5606:	b10b      	cbz	r3, 560c <ticker_job+0x9ac>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    5608:	6b11      	ldr	r1, [r2, #48]	; 0x30
    560a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    560c:	f898 3002 	ldrb.w	r3, [r8, #2]
    5610:	42a3      	cmp	r3, r4
    5612:	d1d0      	bne.n	55b6 <ticker_job+0x956>
	while (count_user--) {
    5614:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5616:	4542      	cmp	r2, r8
    5618:	f1a8 0308 	sub.w	r3, r8, #8
    561c:	d07d      	beq.n	571a <ticker_job+0xaba>
    561e:	4698      	mov	r8, r3
    5620:	e754      	b.n	54cc <ticker_job+0x86c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5622:	1b89      	subs	r1, r1, r6
    5624:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    5628:	4291      	cmp	r1, r2
    562a:	d214      	bcs.n	5656 <ticker_job+0x9f6>
			ticks_to_expire -= delta_current_start;
    562c:	1a52      	subs	r2, r2, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    562e:	4290      	cmp	r0, r2
    5630:	f4ff af27 	bcc.w	5482 <ticker_job+0x822>
    5634:	1a80      	subs	r0, r0, r2
		ticks_to_expire = 0U;
    5636:	2200      	movs	r2, #0
    5638:	e725      	b.n	5486 <ticker_job+0x826>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    563a:	6a99      	ldr	r1, [r3, #40]	; 0x28
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    563c:	2c00      	cmp	r4, #0
    563e:	f47f aea2 	bne.w	5386 <ticker_job+0x726>
		    !is_must_expire_skip &&
    5642:	b119      	cbz	r1, 564c <ticker_job+0x9ec>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    5644:	7a0a      	ldrb	r2, [r1, #8]
    5646:	2a01      	cmp	r2, #1
    5648:	f43f af00 	beq.w	544c <ticker_job+0x7ec>
			instance->ticker_id_slot_previous = id_expired;
    564c:	f88b a01c 	strb.w	sl, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    5650:	f8cb 5018 	str.w	r5, [fp, #24]
    5654:	e697      	b.n	5386 <ticker_job+0x726>
			ticks_to_expire_minus +=
    5656:	4408      	add	r0, r1
    5658:	1a80      	subs	r0, r0, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    565a:	e7ec      	b.n	5636 <ticker_job+0x9d6>
					ticker->req = ticker->ack;
    565c:	f04f 0c00 	mov.w	ip, #0
    5660:	789d      	ldrb	r5, [r3, #2]
					lazy_periodic = 0U;
    5662:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    5666:	e6c6      	b.n	53f6 <ticker_job+0x796>
    5668:	9b04      	ldr	r3, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
    566a:	60b5      	str	r5, [r6, #8]
	ticker_new->next = current;
    566c:	f886 c000 	strb.w	ip, [r6]
    5670:	4661      	mov	r1, ip
		node[previous].next = id;
    5672:	b200      	sxth	r0, r0
    5674:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5678:	0100      	lsls	r0, r0, #4
    567a:	f807 a000 	strb.w	sl, [r7, r0]
    567e:	e779      	b.n	5574 <ticker_job+0x914>
    5680:	9b04      	ldr	r3, [sp, #16]
    5682:	4665      	mov	r5, ip
    5684:	e76f      	b.n	5566 <ticker_job+0x906>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    5686:	8a91      	ldrh	r1, [r2, #20]
				ticker_job_op_start(ticker, user_op,
    5688:	f8db 6014 	ldr.w	r6, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    568c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5690:	4281      	cmp	r1, r0
    5692:	d032      	beq.n	56fa <ticker_job+0xa9a>
    5694:	f883 502c 	strb.w	r5, [r3, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    5698:	6a50      	ldr	r0, [r2, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    569a:	68d7      	ldr	r7, [r2, #12]
	ticker->ext_data = start->ext_data;
    569c:	6298      	str	r0, [r3, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    569e:	6910      	ldr	r0, [r2, #16]
    56a0:	6218      	str	r0, [r3, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    56a2:	605f      	str	r7, [r3, #4]
	ticker->timeout_func = start->fp_timeout_func;
    56a4:	e9d2 0906 	ldrd	r0, r9, [r2, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    56a8:	6857      	ldr	r7, [r2, #4]
	ticker->ticks_slot = start->ticks_slot;
    56aa:	6198      	str	r0, [r3, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    56ac:	eba7 0e06 	sub.w	lr, r7, r6
	ticker->context = start->context;
    56b0:	6a10      	ldr	r0, [r2, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    56b2:	8399      	strh	r1, [r3, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    56b4:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
	ticker->context = start->context;
    56b8:	e9c3 9003 	strd	r9, r0, [r3, #12]
	ticker->ticks_to_expire = start->ticks_first;
    56bc:	6891      	ldr	r1, [r2, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    56be:	d10c      	bne.n	56da <ticker_job+0xa7a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    56c0:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    56c4:	4471      	add	r1, lr
	if (ticks_to_expire > ticks_to_expire_minus) {
    56c6:	b181      	cbz	r1, 56ea <ticker_job+0xa8a>
	ticker->ticks_to_expire = ticks_to_expire;
    56c8:	6099      	str	r1, [r3, #8]
	ticker->remainder_current = 0U;
    56ca:	2100      	movs	r1, #0
    56cc:	6259      	str	r1, [r3, #36]	; 0x24
	ticker->lazy_current = 0U;
    56ce:	83d9      	strh	r1, [r3, #30]
	ticker->force = 1U;
    56d0:	f04f 0101 	mov.w	r1, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    56d4:	615d      	str	r5, [r3, #20]
	ticker->force = 1U;
    56d6:	70d9      	strb	r1, [r3, #3]
}
    56d8:	e70f      	b.n	54fa <ticker_job+0x89a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    56da:	1bf6      	subs	r6, r6, r7
    56dc:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    56e0:	42b1      	cmp	r1, r6
    56e2:	d916      	bls.n	5712 <ticker_job+0xab2>
			ticks_to_expire -= delta_current_start;
    56e4:	1b89      	subs	r1, r1, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    56e6:	2900      	cmp	r1, #0
    56e8:	d1ee      	bne.n	56c8 <ticker_job+0xa68>
		ticks_to_expire_minus -= ticks_to_expire;
    56ea:	460d      	mov	r5, r1
		ticks_to_expire = 0U;
    56ec:	2100      	movs	r1, #0
    56ee:	e7eb      	b.n	56c8 <ticker_job+0xa68>
	ticker_new->next = current;
    56f0:	f807 100c 	strb.w	r1, [r7, ip]
		instance->ticker_id_head = id;
    56f4:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    56f8:	e745      	b.n	5586 <ticker_job+0x926>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    56fa:	f04f 0101 	mov.w	r1, #1
    56fe:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    5702:	6a50      	ldr	r0, [r2, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    5704:	68d1      	ldr	r1, [r2, #12]
	ticker->ext_data = start->ext_data;
    5706:	6298      	str	r0, [r3, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    5708:	6910      	ldr	r0, [r2, #16]
    570a:	6218      	str	r0, [r3, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    570c:	6059      	str	r1, [r3, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    570e:	4629      	mov	r1, r5
    5710:	e7c8      	b.n	56a4 <ticker_job+0xa44>
			    (delta_current_start - ticks_to_expire);
    5712:	1a71      	subs	r1, r6, r1
		ticks_to_expire_minus -= ticks_to_expire;
    5714:	460d      	mov	r5, r1
		ticks_to_expire = 0U;
    5716:	2100      	movs	r1, #0
    5718:	e7d6      	b.n	56c8 <ticker_job+0xa68>
	nodes = &instance->nodes[0];
    571a:	f89b a01d 	ldrb.w	sl, [fp, #29]
    571e:	f8db 4000 	ldr.w	r4, [fp]
	u8_t  rescheduled = 0U;
    5722:	2200      	movs	r2, #0
    5724:	46d1      	mov	r9, sl
		while (ticker_id_head != TICKER_NULL) {
    5726:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    572a:	46ca      	mov	sl, r9
    572c:	d011      	beq.n	5752 <ticker_job+0xaf2>
			ticker = &nodes[ticker_id_head];
    572e:	fa0f f38a 	sxth.w	r3, sl
    5732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5736:	eb04 1103 	add.w	r1, r4, r3, lsl #4
    573a:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    573c:	6a88      	ldr	r0, [r1, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    573e:	b110      	cbz	r0, 5746 <ticker_job+0xae6>
    5740:	7a05      	ldrb	r5, [r0, #8]
    5742:	2d01      	cmp	r5, #1
    5744:	d014      	beq.n	5770 <ticker_job+0xb10>
			ticker_id_head = ticker->next;
    5746:	f814 a003 	ldrb.w	sl, [r4, r3]
		while (ticker_id_head != TICKER_NULL) {
    574a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    574e:	d1ee      	bne.n	572e <ticker_job+0xace>
    5750:	46ca      	mov	sl, r9
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    5752:	2a00      	cmp	r2, #0
    5754:	f43f ad8a 	beq.w	526c <ticker_job+0x60c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    5758:	9b06      	ldr	r3, [sp, #24]
    575a:	4553      	cmp	r3, sl
    575c:	f47f ad8a 	bne.w	5274 <ticker_job+0x614>
	if (!pending) {
    5760:	9b08      	ldr	r3, [sp, #32]
    5762:	2b00      	cmp	r3, #0
    5764:	f000 8175 	beq.w	5a52 <ticker_job+0xdf2>
	instance->job_guard = 0U;
    5768:	2300      	movs	r3, #0
    576a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    576e:	e58a      	b.n	5286 <ticker_job+0x626>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    5770:	f89b 301c 	ldrb.w	r3, [fp, #28]
    5774:	2bff      	cmp	r3, #255	; 0xff
    5776:	4684      	mov	ip, r0
    5778:	d04f      	beq.n	581a <ticker_job+0xbba>
			instance->ticks_slot_previous > ticks_elapsed) {
    577a:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    577e:	9b02      	ldr	r3, [sp, #8]
    5780:	4283      	cmp	r3, r0
    5782:	d24a      	bcs.n	581a <ticker_job+0xbba>
			window_start_ticks = instance->ticks_slot_previous -
    5784:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    5786:	e9dc 5300 	ldrd	r5, r3, [ip]
    578a:	42ab      	cmp	r3, r5
		ticker_id_iter = nodes[ticker_id_head].next;
    578c:	780f      	ldrb	r7, [r1, #0]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    578e:	d239      	bcs.n	5804 <ticker_job+0xba4>
		while (ticker_id_iter != TICKER_NULL &&
    5790:	2fff      	cmp	r7, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    5792:	eba5 0503 	sub.w	r5, r5, r3
		while (ticker_id_iter != TICKER_NULL &&
    5796:	d035      	beq.n	5804 <ticker_job+0xba4>
		       ticks_start_offset + ticker->ticks_slot <=
    5798:	698e      	ldr	r6, [r1, #24]
		while (ticker_id_iter != TICKER_NULL &&
    579a:	42b5      	cmp	r5, r6
    579c:	f04f 0300 	mov.w	r3, #0
    57a0:	d33f      	bcc.n	5822 <ticker_job+0xbc2>
    57a2:	e9cd 1703 	strd	r1, r7, [sp, #12]
    57a6:	469e      	mov	lr, r3
    57a8:	9601      	str	r6, [sp, #4]
    57aa:	463a      	mov	r2, r7
    57ac:	e01c      	b.n	57e8 <ticker_job+0xb88>
			if (node->ticks_to_expire >
    57ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
					MIN(ticks_slot_window,
    57b2:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
    57b4:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
    57b6:	4473      	add	r3, lr
			if (node->ticks_to_expire >
    57b8:	d909      	bls.n	57ce <ticker_job+0xb6e>
				window_end_ticks =
    57ba:	42ab      	cmp	r3, r5
			if (window_end_ticks > ticks_start_offset +
    57bc:	9f01      	ldr	r7, [sp, #4]
				window_end_ticks =
    57be:	bf28      	it	cs
    57c0:	462b      	movcs	r3, r5
			if (window_end_ticks > ticks_start_offset +
    57c2:	42bb      	cmp	r3, r7
    57c4:	d903      	bls.n	57ce <ticker_job+0xb6e>
			if (ticks_to_expire != 0U &&
    57c6:	1b9b      	subs	r3, r3, r6
    57c8:	d001      	beq.n	57ce <ticker_job+0xb6e>
    57ca:	4283      	cmp	r3, r0
    57cc:	d227      	bcs.n	581e <ticker_job+0xbbe>
			window_start_ticks  = node->ticks_to_expire +
    57ce:	f8d8 0018 	ldr.w	r0, [r8, #24]
			ticker_id_iter = node->next;
    57d2:	5ca2      	ldrb	r2, [r4, r2]
			window_start_ticks  = node->ticks_to_expire +
    57d4:	4408      	add	r0, r1
			ticks_start_offset += node->ticks_to_expire;
    57d6:	448e      	add	lr, r1
			ticks_to_expire     = ticks_slot_window -
    57d8:	1bab      	subs	r3, r5, r6
		       ticks_start_offset + ticker->ticks_slot <=
    57da:	eb0e 0106 	add.w	r1, lr, r6
		while (ticker_id_iter != TICKER_NULL &&
    57de:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    57e0:	9101      	str	r1, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
    57e2:	d01c      	beq.n	581e <ticker_job+0xbbe>
    57e4:	428d      	cmp	r5, r1
    57e6:	d31a      	bcc.n	581e <ticker_job+0xbbe>
			node = &nodes[ticker_id_iter];
    57e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    57ec:	eb04 1802 	add.w	r8, r4, r2, lsl #4
    57f0:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    57f2:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    57f6:	2900      	cmp	r1, #0
    57f8:	d0d9      	beq.n	57ae <ticker_job+0xb4e>
    57fa:	7a09      	ldrb	r1, [r1, #8]
    57fc:	2901      	cmp	r1, #1
    57fe:	d1d6      	bne.n	57ae <ticker_job+0xb4e>
				ticker_id_iter = node->next;
    5800:	5ca2      	ldrb	r2, [r4, r2]
				continue;
    5802:	e7ea      	b.n	57da <ticker_job+0xb7a>
		ticker->ticks_to_expire = ticks_to_expire;
    5804:	2300      	movs	r3, #0
    5806:	608b      	str	r3, [r1, #8]
		ticker->lazy_current--;
    5808:	8bcb      	ldrh	r3, [r1, #30]
    580a:	3b01      	subs	r3, #1
    580c:	83cb      	strh	r3, [r1, #30]
		ext_data->reschedule_state =
    580e:	f04f 0302 	mov.w	r3, #2
		rescheduled  = 1U;
    5812:	2201      	movs	r2, #1
		ext_data->reschedule_state =
    5814:	f88c 3008 	strb.w	r3, [ip, #8]
		rescheduled  = 1U;
    5818:	e785      	b.n	5726 <ticker_job+0xac6>
		window_start_ticks = 0U;
    581a:	2000      	movs	r0, #0
    581c:	e7b3      	b.n	5786 <ticker_job+0xb26>
    581e:	e9dd 1703 	ldrd	r1, r7, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    5822:	608b      	str	r3, [r1, #8]
    5824:	463d      	mov	r5, r7
    5826:	f04f 0eff 	mov.w	lr, #255	; 0xff
    582a:	e000      	b.n	582e <ticker_job+0xbce>
    582c:	4605      	mov	r5, r0
			node = &nodes[ticker_id_iter];
    582e:	b22a      	sxth	r2, r5
    5830:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    5834:	eb04 1800 	add.w	r8, r4, r0, lsl #4
    5838:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    583a:	f8d8 6008 	ldr.w	r6, [r8, #8]
    583e:	429e      	cmp	r6, r3
    5840:	d23b      	bcs.n	58ba <ticker_job+0xc5a>
				ticker->ticks_to_expire -=
    5842:	1b9b      	subs	r3, r3, r6
    5844:	608b      	str	r3, [r1, #8]
			ticker_id_iter = node->next;
    5846:	5c20      	ldrb	r0, [r4, r0]
		while (ticker_id_iter != TICKER_NULL) {
    5848:	28ff      	cmp	r0, #255	; 0xff
    584a:	46ae      	mov	lr, r5
    584c:	d1ee      	bne.n	582c <ticker_job+0xbcc>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    584e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5852:	0112      	lsls	r2, r2, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    5854:	f88b 701d 	strb.w	r7, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    5858:	5ca3      	ldrb	r3, [r4, r2]
    585a:	700b      	strb	r3, [r1, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    585c:	46b9      	mov	r9, r7
    585e:	f804 a002 	strb.w	sl, [r4, r2]
    5862:	e7d1      	b.n	5808 <ticker_job+0xba8>
					while (ticks_to_expire <
    5864:	9e04      	ldr	r6, [sp, #16]
    5866:	4296      	cmp	r6, r2
    5868:	f67f adeb 	bls.w	5442 <ticker_job+0x7e2>
    586c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    586e:	950d      	str	r5, [sp, #52]	; 0x34
    5870:	f104 0c01 	add.w	ip, r4, #1
    5874:	4633      	mov	r3, r6
    5876:	e005      	b.n	5884 <ticker_job+0xc24>
    5878:	4626      	mov	r6, r4
						ticks_to_expire +=
    587a:	4432      	add	r2, r6
						lazy++;
    587c:	3001      	adds	r0, #1
					while (ticks_to_expire <
    587e:	4293      	cmp	r3, r2
						lazy++;
    5880:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    5882:	d911      	bls.n	58a8 <ticker_job+0xc48>
	if ((ticker->remainder_current < BIT(31)) &&
    5884:	4e82      	ldr	r6, [pc, #520]	; (5a90 <ticker_job+0xe30>)
    5886:	4d83      	ldr	r5, [pc, #524]	; (5a94 <ticker_job+0xe34>)
	ticker->remainder_current += ticker->remainder_periodic;
    5888:	4439      	add	r1, r7
	if ((ticker->remainder_current < BIT(31)) &&
    588a:	198e      	adds	r6, r1, r6
    588c:	42ae      	cmp	r6, r5
    588e:	d8f3      	bhi.n	5878 <ticker_job+0xc18>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    5890:	4666      	mov	r6, ip
    5892:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
						ticks_to_expire +=
    5896:	4432      	add	r2, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    5898:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
						lazy++;
    589c:	3001      	adds	r0, #1
					while (ticks_to_expire <
    589e:	4293      	cmp	r3, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    58a0:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
						lazy++;
    58a4:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    58a6:	d8ed      	bhi.n	5884 <ticker_job+0xc24>
    58a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    58aa:	e9dd 350c 	ldrd	r3, r5, [sp, #48]	; 0x30
    58ae:	4404      	add	r4, r0
    58b0:	b2a0      	uxth	r0, r4
    58b2:	9009      	str	r0, [sp, #36]	; 0x24
    58b4:	6259      	str	r1, [r3, #36]	; 0x24
    58b6:	e5c4      	b.n	5442 <ticker_job+0x7e2>
    58b8:	4770      	bx	lr
				node->ticks_to_expire -=
    58ba:	1af3      	subs	r3, r6, r3
		if (ticker_id_prev != TICKER_NULL) {
    58bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    58c0:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    58c4:	d0a0      	beq.n	5808 <ticker_job+0xba8>
    58c6:	fa0f f28e 	sxth.w	r2, lr
    58ca:	e7c0      	b.n	584e <ticker_job+0xbee>
	if (!pending) {
    58cc:	9b08      	ldr	r3, [sp, #32]
    58ce:	2b00      	cmp	r3, #0
    58d0:	f000 80a7 	beq.w	5a22 <ticker_job+0xdc2>
	instance->job_guard = 0U;
    58d4:	2300      	movs	r3, #0
    58d6:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    58da:	9b07      	ldr	r3, [sp, #28]
    58dc:	2b00      	cmp	r3, #0
    58de:	f040 80c1 	bne.w	5a64 <ticker_job+0xe04>
    58e2:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
    58e6:	b16a      	cbz	r2, 5904 <ticker_job+0xca4>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    58e8:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    58ec:	465b      	mov	r3, fp
    58ee:	2201      	movs	r2, #1
    58f0:	2103      	movs	r1, #3
    58f2:	2004      	movs	r0, #4
    58f4:	46a4      	mov	ip, r4
}
    58f6:	b00f      	add	sp, #60	; 0x3c
    58f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    58fc:	4760      	bx	ip
	instance->job_guard = 0U;
    58fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5900:	f88b 301e 	strb.w	r3, [fp, #30]
}
    5904:	b00f      	add	sp, #60	; 0x3c
    5906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
    590a:	eba2 0209 	sub.w	r2, r2, r9
    590e:	609a      	str	r2, [r3, #8]
			break;
    5910:	e5c9      	b.n	54a6 <ticker_job+0x846>
	count_user = instance->count_user;
    5912:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    5916:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    591a:	1e5c      	subs	r4, r3, #1
    591c:	b2e4      	uxtb	r4, r4
    591e:	2b00      	cmp	r3, #0
    5920:	f43f acac 	beq.w	527c <ticker_job+0x61c>
		flag_compare_update = 1U;
    5924:	2301      	movs	r3, #1
    5926:	9307      	str	r3, [sp, #28]
    5928:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    592c:	f04f 0900 	mov.w	r9, #0
			uop->status = TICKER_STATUS_FAILURE;
    5930:	f04f 0a01 	mov.w	sl, #1
    5934:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
    5936:	7863      	ldrb	r3, [r4, #1]
    5938:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    593a:	6866      	ldr	r6, [r4, #4]
		while (user->first != user->last) {
    593c:	4299      	cmp	r1, r3
    593e:	d10c      	bne.n	595a <ticker_job+0xcfa>
    5940:	e05c      	b.n	59fc <ticker_job+0xd9c>
	switch (uop->op) {
    5942:	2b01      	cmp	r3, #1
    5944:	d056      	beq.n	59f4 <ticker_job+0xd94>
			first = user->first + 1;
    5946:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    5948:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    594a:	3301      	adds	r3, #1
    594c:	b2db      	uxtb	r3, r3
				first = 0U;
    594e:	429a      	cmp	r2, r3
    5950:	bf08      	it	eq
    5952:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    5954:	4299      	cmp	r1, r3
			user->first = first;
    5956:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    5958:	d050      	beq.n	59fc <ticker_job+0xd9c>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    595a:	b21b      	sxth	r3, r3
    595c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    5960:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5964:	eb06 0283 	add.w	r2, r6, r3, lsl #2
	switch (uop->op) {
    5968:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
    596c:	2b02      	cmp	r3, #2
    596e:	d01b      	beq.n	59a8 <ticker_job+0xd48>
    5970:	2b03      	cmp	r3, #3
    5972:	d1e6      	bne.n	5942 <ticker_job+0xce2>
		if (uop->id < instance->count_node) {
    5974:	7853      	ldrb	r3, [r2, #1]
    5976:	f89b 1008 	ldrb.w	r1, [fp, #8]
    597a:	4299      	cmp	r1, r3
    597c:	d911      	bls.n	59a2 <ticker_job+0xd42>
			node[uop->id].priority =
    597e:	f8db 1000 	ldr.w	r1, [fp]
    5982:	7910      	ldrb	r0, [r2, #4]
    5984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5988:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    598c:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    5990:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    5994:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    5996:	b113      	cbz	r3, 599e <ticker_job+0xd3e>
		fp_op_func(uop->status, uop->op_context);
    5998:	6b11      	ldr	r1, [r2, #48]	; 0x30
    599a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    599c:	4798      	blx	r3
    599e:	78e1      	ldrb	r1, [r4, #3]
    59a0:	e7d1      	b.n	5946 <ticker_job+0xce6>
			uop->status = TICKER_STATUS_FAILURE;
    59a2:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
    59a6:	e7f5      	b.n	5994 <ticker_job+0xd34>
		ticker_by_next_slot_get(instance,
    59a8:	e9d2 c101 	ldrd	ip, r1, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    59ac:	f89c 3000 	ldrb.w	r3, [ip]
		ticker_by_next_slot_get(instance,
    59b0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
	node = instance->nodes;
    59b4:	f8db 5000 	ldr.w	r5, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    59b8:	f8db 0014 	ldr.w	r0, [fp, #20]
    59bc:	2bff      	cmp	r3, #255	; 0xff
    59be:	d002      	beq.n	59c6 <ticker_job+0xd66>
    59c0:	680f      	ldr	r7, [r1, #0]
    59c2:	4287      	cmp	r7, r0
    59c4:	d026      	beq.n	5a14 <ticker_job+0xdb4>
		_ticker_id_head = instance->ticker_id_head;
    59c6:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    59ca:	6008      	str	r0, [r1, #0]
		_ticks_to_expire = 0U;
    59cc:	2100      	movs	r1, #0
    59ce:	e00b      	b.n	59e8 <ticker_job+0xd88>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    59d0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    59d4:	eb05 1800 	add.w	r8, r5, r0, lsl #4
    59d8:	0100      	lsls	r0, r0, #4
	while ((_ticker_id_head != TICKER_NULL) &&
    59da:	f8d8 7018 	ldr.w	r7, [r8, #24]
    59de:	b9af      	cbnz	r7, 5a0c <ticker_job+0xdac>
		_ticks_to_expire += ticker->ticks_to_expire;
    59e0:	f8d8 8008 	ldr.w	r8, [r8, #8]
		_ticker_id_head = ticker->next;
    59e4:	5c2b      	ldrb	r3, [r5, r0]
		_ticks_to_expire += ticker->ticks_to_expire;
    59e6:	4441      	add	r1, r8
	while ((_ticker_id_head != TICKER_NULL) &&
    59e8:	2bff      	cmp	r3, #255	; 0xff
    59ea:	d1f1      	bne.n	59d0 <ticker_job+0xd70>
	*ticker_id_head = _ticker_id_head;
    59ec:	f88c 3000 	strb.w	r3, [ip]
	*ticks_to_expire = _ticks_to_expire;
    59f0:	f8ce 1000 	str.w	r1, [lr]
		fp_op_func = uop->fp_op_func;
    59f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    59f6:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    59fa:	e7cc      	b.n	5996 <ticker_job+0xd36>
	while (count_user--) {
    59fc:	9a01      	ldr	r2, [sp, #4]
    59fe:	42a2      	cmp	r2, r4
    5a00:	f1a4 0308 	sub.w	r3, r4, #8
    5a04:	f43f af66 	beq.w	58d4 <ticker_job+0xc74>
    5a08:	461c      	mov	r4, r3
    5a0a:	e794      	b.n	5936 <ticker_job+0xcd6>
		_ticks_to_expire += ticker->ticks_to_expire;
    5a0c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    5a10:	4401      	add	r1, r0
    5a12:	e7eb      	b.n	59ec <ticker_job+0xd8c>
		ticker = &node[_ticker_id_head];
    5a14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5a18:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    5a1a:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    5a1e:	5ceb      	ldrb	r3, [r5, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    5a20:	e7e2      	b.n	59e8 <ticker_job+0xd88>
	count_user = instance->count_user;
    5a22:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    5a26:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    5a2a:	1e5c      	subs	r4, r3, #1
    5a2c:	b2e4      	uxtb	r4, r4
    5a2e:	2b00      	cmp	r3, #0
    5a30:	f47f af7a 	bne.w	5928 <ticker_job+0xcc8>
    5a34:	e74e      	b.n	58d4 <ticker_job+0xc74>
		if (cntr_stop() == 0) {
    5a36:	f00b faf9 	bl	1102c <cntr_stop>
    5a3a:	2800      	cmp	r0, #0
    5a3c:	f47f af51 	bne.w	58e2 <ticker_job+0xc82>
			instance->ticks_slot_previous = 0U;
    5a40:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    5a44:	f00b fb18 	bl	11078 <cntr_cnt_get>
    5a48:	f89b 201f 	ldrb.w	r2, [fp, #31]
    5a4c:	f8cb 0014 	str.w	r0, [fp, #20]
    5a50:	e749      	b.n	58e6 <ticker_job+0xc86>
	count_user = instance->count_user;
    5a52:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    5a56:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    5a5a:	1e5c      	subs	r4, r3, #1
    5a5c:	b2e4      	uxtb	r4, r4
    5a5e:	b18b      	cbz	r3, 5a84 <ticker_job+0xe24>
			flag_compare_update = 1U;
    5a60:	9207      	str	r2, [sp, #28]
    5a62:	e761      	b.n	5928 <ticker_job+0xcc8>
    5a64:	f89b a01d 	ldrb.w	sl, [fp, #29]
    5a68:	e40d      	b.n	5286 <ticker_job+0x626>
		ticks_current = cntr_cnt_get();
    5a6a:	f00b fb05 	bl	11078 <cntr_cnt_get>
    5a6e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    5a70:	f00b facc 	bl	1100c <cntr_start>
    5a74:	f89b a01d 	ldrb.w	sl, [fp, #29]
    5a78:	2800      	cmp	r0, #0
    5a7a:	f47f ac0c 	bne.w	5296 <ticker_job+0x636>
			instance->ticks_current = ticks_current;
    5a7e:	f8cb 4014 	str.w	r4, [fp, #20]
    5a82:	e408      	b.n	5296 <ticker_job+0x636>
	instance->job_guard = 0U;
    5a84:	9b08      	ldr	r3, [sp, #32]
    5a86:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    5a8a:	f7ff bbfc 	b.w	5286 <ticker_job+0x626>
    5a8e:	bf00      	nop
    5a90:	ff172b5a 	.word	0xff172b5a
    5a94:	7f172b59 	.word	0x7f172b59

00005a98 <ticker_init>:
{
    5a98:	b4f0      	push	{r4, r5, r6, r7}
    5a9a:	9f04      	ldr	r7, [sp, #16]
    5a9c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5aa0:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d13e      	bne.n	5b24 <ticker_init+0x8c>
	instance->count_node = count_node;
    5aa6:	f8df c084 	ldr.w	ip, [pc, #132]	; 5b2c <ticker_init+0x94>
	while (count_node--) {
    5aaa:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    5aac:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    5ab0:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    5ab4:	b2ed      	uxtb	r5, r5
    5ab6:	b149      	cbz	r1, 5acc <ticker_init+0x34>
    5ab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5abc:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    5ac0:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    5ac2:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    5ac6:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    5aca:	d1f9      	bne.n	5ac0 <ticker_init+0x28>
	while (count_user--) {
    5acc:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    5ace:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    5ad2:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    5ad6:	b2d2      	uxtb	r2, r2
    5ad8:	b17b      	cbz	r3, 5afa <ticker_init+0x62>
    5ada:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    5ade:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    5ae0:	4611      	mov	r1, r2
    5ae2:	f812 3908 	ldrb.w	r3, [r2], #-8
    5ae6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    5aea:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    5aec:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    5aee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    5af2:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    5af4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    5af8:	d1f1      	bne.n	5ade <ticker_init+0x46>
	if (count_op) {
    5afa:	b99c      	cbnz	r4, 5b24 <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    5afc:	9a07      	ldr	r2, [sp, #28]
    5afe:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    5b02:	9a08      	ldr	r2, [sp, #32]
    5b04:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    5b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    5b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    5b0e:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    5b12:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    5b14:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    5b18:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    5b1a:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    5b1e:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    5b22:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    5b24:	2001      	movs	r0, #1
}
    5b26:	bcf0      	pop	{r4, r5, r6, r7}
    5b28:	4770      	bx	lr
    5b2a:	bf00      	nop
    5b2c:	20000764 	.word	0x20000764

00005b30 <ticker_trigger>:
	if (instance->sched_cb) {
    5b30:	4b0a      	ldr	r3, [pc, #40]	; (5b5c <ticker_trigger+0x2c>)
    5b32:	222c      	movs	r2, #44	; 0x2c
    5b34:	fb02 3200 	mla	r2, r2, r0, r3
{
    5b38:	b410      	push	{r4}
	if (instance->sched_cb) {
    5b3a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    5b3c:	b15c      	cbz	r4, 5b56 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    5b3e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    5b42:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    5b46:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    5b4a:	46a4      	mov	ip, r4
    5b4c:	2201      	movs	r2, #1
}
    5b4e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    5b50:	2103      	movs	r1, #3
    5b52:	2002      	movs	r0, #2
    5b54:	4760      	bx	ip
}
    5b56:	bc10      	pop	{r4}
    5b58:	4770      	bx	lr
    5b5a:	bf00      	nop
    5b5c:	20000764 	.word	0x20000764

00005b60 <ticker_start_ext>:
{
    5b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    5b64:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5c08 <ticker_start_ext+0xa8>
{
    5b68:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    5b6c:	272c      	movs	r7, #44	; 0x2c
    5b6e:	fb07 8700 	mla	r7, r7, r0, r8
{
    5b72:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    5b74:	687d      	ldr	r5, [r7, #4]
    5b76:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    5b7a:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    5b7e:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    5b82:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    5b86:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    5b8a:	1c75      	adds	r5, r6, #1
{
    5b8c:	4608      	mov	r0, r1
	last = user->last + 1;
    5b8e:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    5b90:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    5b94:	45a9      	cmp	r9, r5
    5b96:	bf98      	it	ls
    5b98:	2500      	movls	r5, #0
	if (last == user->first) {
    5b9a:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    5b9c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    5ba0:	d02f      	beq.n	5c02 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    5ba2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    5ba6:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    5baa:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    5bae:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    5bb2:	f04f 0904 	mov.w	r9, #4
    5bb6:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    5bba:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    5bbc:	9b08      	ldr	r3, [sp, #32]
    5bbe:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    5bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5bc2:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    5bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5bc6:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    5bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5bca:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    5bcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5bce:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    5bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5bd2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    5bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5bd6:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    5bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5bda:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    5bdc:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    5bde:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    5be0:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    5be2:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    5be6:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    5be8:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    5bea:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5bee:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    5bf2:	4798      	blx	r3
    5bf4:	4643      	mov	r3, r8
    5bf6:	4649      	mov	r1, r9
    5bf8:	2200      	movs	r2, #0
    5bfa:	47a8      	blx	r5
	return user_op->status;
    5bfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    5bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    5c02:	2001      	movs	r0, #1
}
    5c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c08:	20000764 	.word	0x20000764

00005c0c <ticker_start>:
{
    5c0c:	b530      	push	{r4, r5, lr}
    5c0e:	b08b      	sub	sp, #44	; 0x2c
    5c10:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    5c14:	9500      	str	r5, [sp, #0]
{
    5c16:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    5c18:	9401      	str	r4, [sp, #4]
    5c1a:	9502      	str	r5, [sp, #8]
{
    5c1c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    5c20:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    5c22:	9403      	str	r4, [sp, #12]
    5c24:	9504      	str	r5, [sp, #16]
{
    5c26:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    5c28:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    5c2a:	9405      	str	r4, [sp, #20]
    5c2c:	9506      	str	r5, [sp, #24]
{
    5c2e:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5c30:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    5c32:	9407      	str	r4, [sp, #28]
    5c34:	2400      	movs	r4, #0
    5c36:	e9cd 5408 	strd	r5, r4, [sp, #32]
    5c3a:	f7ff ff91 	bl	5b60 <ticker_start_ext>
}
    5c3e:	b00b      	add	sp, #44	; 0x2c
    5c40:	bd30      	pop	{r4, r5, pc}
    5c42:	bf00      	nop

00005c44 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
    5c44:	f8df c098 	ldr.w	ip, [pc, #152]	; 5ce0 <ticker_update+0x9c>
{
    5c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
    5c4c:	272c      	movs	r7, #44	; 0x2c
    5c4e:	fb07 c700 	mla	r7, r7, r0, ip
{
    5c52:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    5c54:	687d      	ldr	r5, [r7, #4]
{
    5c56:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    5c5a:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
    5c5e:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    5c60:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    5c64:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    5c68:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    5c6a:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    5c6e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    5c72:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    5c76:	1c75      	adds	r5, r6, #1
    5c78:	b2ed      	uxtb	r5, r5
		last = 0U;
    5c7a:	45aa      	cmp	sl, r5
    5c7c:	bf98      	it	ls
    5c7e:	2500      	movls	r5, #0
	if (last == user->first) {
    5c80:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    5c82:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    5c86:	d028      	beq.n	5cda <ticker_update+0x96>
	user_op = &user->user_op[user->last];
    5c88:	f8d1 c004 	ldr.w	ip, [r1, #4]
    5c8c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    5c90:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    5c94:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    5c98:	f04f 0905 	mov.w	r9, #5
    5c9c:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    5ca0:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    5ca2:	9b08      	ldr	r3, [sp, #32]
    5ca4:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    5ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ca8:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    5caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cac:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    5cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    5cb2:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    5cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    5cb6:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    5cb8:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    5cbc:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    5cbe:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
    5cc2:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    5cc4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5cc6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    5cca:	4798      	blx	r3
    5ccc:	4653      	mov	r3, sl
    5cce:	2200      	movs	r2, #0
    5cd0:	2104      	movs	r1, #4
    5cd2:	47a8      	blx	r5
	return user_op->status;
    5cd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    5cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    5cda:	2001      	movs	r0, #1
}
    5cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ce0:	20000764 	.word	0x20000764

00005ce4 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    5ce4:	f8df c084 	ldr.w	ip, [pc, #132]	; 5d6c <ticker_stop+0x88>
{
    5ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    5cec:	272c      	movs	r7, #44	; 0x2c
    5cee:	fb07 c700 	mla	r7, r7, r0, ip
{
    5cf2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    5cf4:	687d      	ldr	r5, [r7, #4]
{
    5cf6:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    5cf8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    5cfc:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    5d00:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    5d02:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    5d06:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    5d0a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    5d0e:	1c75      	adds	r5, r6, #1
    5d10:	b2ed      	uxtb	r5, r5
		last = 0U;
    5d12:	45a8      	cmp	r8, r5
    5d14:	bf98      	it	ls
    5d16:	2500      	movls	r5, #0
	if (last == user->first) {
    5d18:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    5d1a:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    5d1e:	d021      	beq.n	5d64 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    5d20:	f8d1 c004 	ldr.w	ip, [r1, #4]
    5d24:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    5d28:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    5d2c:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    5d30:	f04f 0e06 	mov.w	lr, #6
    5d34:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    5d38:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    5d3c:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    5d3e:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    5d40:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    5d44:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    5d48:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    5d4c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    5d4e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    5d52:	4798      	blx	r3
    5d54:	4623      	mov	r3, r4
    5d56:	2200      	movs	r2, #0
    5d58:	2104      	movs	r1, #4
    5d5a:	47a8      	blx	r5
	return user_op->status;
    5d5c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    5d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    5d64:	2001      	movs	r0, #1
}
    5d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d6a:	bf00      	nop
    5d6c:	20000764 	.word	0x20000764

00005d70 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    5d70:	f00b b982 	b.w	11078 <cntr_cnt_get>

00005d74 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    5d74:	1a40      	subs	r0, r0, r1
}
    5d76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5d7a:	4770      	bx	lr

00005d7c <ll_addr_get>:
static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
    5d7c:	2801      	cmp	r0, #1
    5d7e:	d813      	bhi.n	5da8 <ll_addr_get+0x2c>
{
    5d80:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
    5d82:	b948      	cbnz	r0, 5d98 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    5d84:	b131      	cbz	r1, 5d94 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    5d86:	4608      	mov	r0, r1
    5d88:	2206      	movs	r2, #6
    5d8a:	4909      	ldr	r1, [pc, #36]	; (5db0 <ll_addr_get+0x34>)
    5d8c:	f00e fac5 	bl	1431a <memcpy>
	}

	return pub_addr;
    5d90:	4807      	ldr	r0, [pc, #28]	; (5db0 <ll_addr_get+0x34>)
}
    5d92:	bd08      	pop	{r3, pc}
	return pub_addr;
    5d94:	4806      	ldr	r0, [pc, #24]	; (5db0 <ll_addr_get+0x34>)
}
    5d96:	bd08      	pop	{r3, pc}
		if (bdaddr) {
    5d98:	b141      	cbz	r1, 5dac <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    5d9a:	4608      	mov	r0, r1
    5d9c:	2206      	movs	r2, #6
    5d9e:	4905      	ldr	r1, [pc, #20]	; (5db4 <ll_addr_get+0x38>)
    5da0:	f00e fabb 	bl	1431a <memcpy>
		return rnd_addr;
    5da4:	4803      	ldr	r0, [pc, #12]	; (5db4 <ll_addr_get+0x38>)
}
    5da6:	bd08      	pop	{r3, pc}
		return NULL;
    5da8:	2000      	movs	r0, #0
}
    5daa:	4770      	bx	lr
		return rnd_addr;
    5dac:	4801      	ldr	r0, [pc, #4]	; (5db4 <ll_addr_get+0x38>)
}
    5dae:	bd08      	pop	{r3, pc}
    5db0:	20000790 	.word	0x20000790
    5db4:	20000798 	.word	0x20000798

00005db8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    5db8:	b570      	push	{r4, r5, r6, lr}
    5dba:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
	    ull_adv_is_enabled(0)) {
    5dbc:	2000      	movs	r0, #0
{
    5dbe:	460d      	mov	r5, r1
	    ull_adv_is_enabled(0)) {
    5dc0:	f003 fe98 	bl	9af4 <ull_adv_is_enabled>
	if (IS_ENABLED(CONFIG_BT_BROADCASTER) &&
    5dc4:	b988      	cbnz	r0, 5dea <ll_addr_set+0x32>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    5dc6:	f004 f82b 	bl	9e20 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    5dca:	f010 0406 	ands.w	r4, r0, #6
    5dce:	d10c      	bne.n	5dea <ll_addr_set+0x32>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    5dd0:	4629      	mov	r1, r5
    5dd2:	2206      	movs	r2, #6
	if (addr_type) {
    5dd4:	b926      	cbnz	r6, 5de0 <ll_addr_set+0x28>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    5dd6:	4806      	ldr	r0, [pc, #24]	; (5df0 <ll_addr_set+0x38>)
    5dd8:	f00e fa9f 	bl	1431a <memcpy>
	}

	return 0;
}
    5ddc:	4620      	mov	r0, r4
    5dde:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    5de0:	4804      	ldr	r0, [pc, #16]	; (5df4 <ll_addr_set+0x3c>)
    5de2:	f00e fa9a 	bl	1431a <memcpy>
}
    5de6:	4620      	mov	r0, r4
    5de8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    5dea:	240c      	movs	r4, #12
}
    5dec:	4620      	mov	r0, r4
    5dee:	bd70      	pop	{r4, r5, r6, pc}
    5df0:	20000790 	.word	0x20000790
    5df4:	20000798 	.word	0x20000798

00005df8 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

u8_t ll_tx_pwr_lvl_get(u8_t handle_type,
		       u16_t handle, u8_t type, s8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    5df8:	2802      	cmp	r0, #2
    5dfa:	d001      	beq.n	5e00 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    5dfc:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    5dfe:	4770      	bx	lr
{
    5e00:	b538      	push	{r3, r4, r5, lr}
    5e02:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    5e04:	4608      	mov	r0, r1
    5e06:	461d      	mov	r5, r3
    5e08:	f004 fbfa 	bl	a600 <ll_connected_get>
			if (!conn) {
    5e0c:	b110      	cbz	r0, 5e14 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    5e0e:	2000      	movs	r0, #0
    5e10:	7028      	strb	r0, [r5, #0]
}
    5e12:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    5e14:	4620      	mov	r0, r4
}
    5e16:	bd38      	pop	{r3, r4, r5, pc}

00005e18 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    5e18:	2300      	movs	r3, #0
    5e1a:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    5e1c:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    5e1e:	4770      	bx	lr

00005e20 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
    5e20:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    5e22:	4802      	ldr	r0, [pc, #8]	; (5e2c <hci_driver_init+0xc>)
    5e24:	f7fe fb54 	bl	44d0 <bt_hci_driver_register>

	return 0;
}
    5e28:	2000      	movs	r0, #0
    5e2a:	bd08      	pop	{r3, pc}
    5e2c:	000152ec 	.word	0x000152ec

00005e30 <hci_driver_send>:
{
    5e30:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    5e32:	8983      	ldrh	r3, [r0, #12]
{
    5e34:	b083      	sub	sp, #12
	if (!buf->len) {
    5e36:	b123      	cbz	r3, 5e42 <hci_driver_send+0x12>
    5e38:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    5e3a:	4604      	mov	r4, r0
    5e3c:	b1c3      	cbz	r3, 5e70 <hci_driver_send+0x40>
    5e3e:	2b02      	cmp	r3, #2
    5e40:	d004      	beq.n	5e4c <hci_driver_send+0x1c>
    5e42:	f06f 0515 	mvn.w	r5, #21
}
    5e46:	4628      	mov	r0, r5
    5e48:	b003      	add	sp, #12
    5e4a:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    5e4c:	a901      	add	r1, sp, #4
    5e4e:	f001 f965 	bl	711c <hci_acl_handle>
	if (evt) {
    5e52:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    5e54:	4605      	mov	r5, r0
	if (evt) {
    5e56:	b113      	cbz	r3, 5e5e <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    5e58:	4618      	mov	r0, r3
    5e5a:	f00e fafb 	bl	14454 <bt_recv_prio>
	if (!err) {
    5e5e:	2d00      	cmp	r5, #0
    5e60:	d1f1      	bne.n	5e46 <hci_driver_send+0x16>
		net_buf_unref(buf);
    5e62:	4620      	mov	r0, r4
    5e64:	f00c f862 	bl	11f2c <net_buf_unref>
    5e68:	2500      	movs	r5, #0
}
    5e6a:	4628      	mov	r0, r5
    5e6c:	b003      	add	sp, #12
    5e6e:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    5e70:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    5e72:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    5e74:	f000 fc4a 	bl	670c <hci_cmd_handle>
	if (evt) {
    5e78:	2800      	cmp	r0, #0
    5e7a:	d0f2      	beq.n	5e62 <hci_driver_send+0x32>
		bt_recv_prio(evt);
    5e7c:	f00e faea 	bl	14454 <bt_recv_prio>
		if (node_rx) {
    5e80:	9d01      	ldr	r5, [sp, #4]
    5e82:	2d00      	cmp	r5, #0
    5e84:	d0ed      	beq.n	5e62 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    5e86:	4628      	mov	r0, r5
    5e88:	f001 fe98 	bl	7bbc <hci_get_class>
    5e8c:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    5e8e:	9901      	ldr	r1, [sp, #4]
    5e90:	4801      	ldr	r0, [pc, #4]	; (5e98 <hci_driver_send+0x68>)
    5e92:	f00e fd33 	bl	148fc <k_queue_append>
	if (!err) {
    5e96:	e7e4      	b.n	5e62 <hci_driver_send+0x32>
    5e98:	200004d0 	.word	0x200004d0

00005e9c <prio_recv_thread>:
{
    5e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    5ea0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5f58 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    5ea4:	4f2b      	ldr	r7, [pc, #172]	; (5f54 <prio_recv_thread+0xb8>)
{
    5ea6:	b082      	sub	sp, #8
    5ea8:	e00c      	b.n	5ec4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    5eaa:	f00e fad0 	bl	1444e <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    5eae:	4622      	mov	r2, r4
    5eb0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    5eb4:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    5eb6:	f001 fe69 	bl	7b8c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    5eba:	4620      	mov	r0, r4
    5ebc:	f00e faca 	bl	14454 <bt_recv_prio>
	z_impl_k_yield();
    5ec0:	f00d fb3c 	bl	1353c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    5ec4:	f10d 0102 	add.w	r1, sp, #2
    5ec8:	a801      	add	r0, sp, #4
    5eca:	f002 fc51 	bl	8770 <ll_rx_get>
    5ece:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    5ed0:	f04f 32ff 	mov.w	r2, #4294967295
    5ed4:	f04f 33ff 	mov.w	r3, #4294967295
    5ed8:	2100      	movs	r1, #0
    5eda:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    5edc:	2c00      	cmp	r4, #0
    5ede:	d1e4      	bne.n	5eaa <prio_recv_thread+0xe>
		if (node_rx) {
    5ee0:	9b01      	ldr	r3, [sp, #4]
    5ee2:	b193      	cbz	r3, 5f0a <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    5ee4:	f002 fd1e 	bl	8924 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    5ee8:	9e01      	ldr	r6, [sp, #4]
    5eea:	4630      	mov	r0, r6
    5eec:	f001 fe66 	bl	7bbc <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    5ef0:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    5ef2:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    5ef4:	796b      	ldrb	r3, [r5, #5]
    5ef6:	2b03      	cmp	r3, #3
    5ef8:	d102      	bne.n	5f00 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    5efa:	792b      	ldrb	r3, [r5, #4]
    5efc:	2b09      	cmp	r3, #9
    5efe:	d00c      	beq.n	5f1a <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    5f00:	4629      	mov	r1, r5
    5f02:	4638      	mov	r0, r7
    5f04:	f00e fcfa 	bl	148fc <k_queue_append>
			continue;
    5f08:	e7dc      	b.n	5ec4 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    5f0a:	f04f 32ff 	mov.w	r2, #4294967295
    5f0e:	f04f 33ff 	mov.w	r3, #4294967295
    5f12:	4640      	mov	r0, r8
    5f14:	f00d fbac 	bl	13670 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    5f18:	e7d4      	b.n	5ec4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    5f1a:	4621      	mov	r1, r4
    5f1c:	f04f 33ff 	mov.w	r3, #4294967295
    5f20:	f04f 32ff 	mov.w	r2, #4294967295
    5f24:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    5f26:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    5f28:	f00e fa91 	bl	1444e <bt_buf_get_evt>
    5f2c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    5f2e:	4622      	mov	r2, r4
    5f30:	f105 0020 	add.w	r0, r5, #32
    5f34:	4631      	mov	r1, r6
    5f36:	f001 f957 	bl	71e8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    5f3a:	4630      	mov	r0, r6
    5f3c:	f001 f966 	bl	720c <hci_disconn_complete_process>
				bt_recv_prio(buf);
    5f40:	4620      	mov	r0, r4
			if (buf) {
    5f42:	b124      	cbz	r4, 5f4e <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    5f44:	f00e fa86 	bl	14454 <bt_recv_prio>
					net_buf_unref(buf);
    5f48:	4620      	mov	r0, r4
    5f4a:	f00b ffef 	bl	11f2c <net_buf_unref>
    5f4e:	9d01      	ldr	r5, [sp, #4]
    5f50:	e7d6      	b.n	5f00 <prio_recv_thread+0x64>
    5f52:	bf00      	nop
    5f54:	200004d0 	.word	0x200004d0
    5f58:	20000474 	.word	0x20000474

00005f5c <hci_driver_open>:
{
    5f5c:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    5f5e:	481b      	ldr	r0, [pc, #108]	; (5fcc <hci_driver_open+0x70>)
{
    5f60:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    5f62:	f002 f8f3 	bl	814c <ll_init>
	if (err) {
    5f66:	4604      	mov	r4, r0
    5f68:	2800      	cmp	r0, #0
    5f6a:	d12c      	bne.n	5fc6 <hci_driver_open+0x6a>
	hci_init(&hbuf_signal);
    5f6c:	4818      	ldr	r0, [pc, #96]	; (5fd0 <hci_driver_open+0x74>)
    5f6e:	f001 fe3d 	bl	7bec <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    5f72:	2600      	movs	r6, #0
    5f74:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5f76:	f06f 0309 	mvn.w	r3, #9
    5f7a:	9303      	str	r3, [sp, #12]
    5f7c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    5f80:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5f84:	4b13      	ldr	r3, [pc, #76]	; (5fd4 <hci_driver_open+0x78>)
    5f86:	4914      	ldr	r1, [pc, #80]	; (5fd8 <hci_driver_open+0x7c>)
    5f88:	9404      	str	r4, [sp, #16]
    5f8a:	9400      	str	r4, [sp, #0]
    5f8c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    5f90:	4812      	ldr	r0, [pc, #72]	; (5fdc <hci_driver_open+0x80>)
    5f92:	f00d fbd5 	bl	13740 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5f96:	4912      	ldr	r1, [pc, #72]	; (5fe0 <hci_driver_open+0x84>)
    5f98:	4810      	ldr	r0, [pc, #64]	; (5fdc <hci_driver_open+0x80>)
    5f9a:	f00e fe11 	bl	14bc0 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5f9e:	f06f 0307 	mvn.w	r3, #7
    5fa2:	9303      	str	r3, [sp, #12]
    5fa4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    5fa8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5fac:	4b0d      	ldr	r3, [pc, #52]	; (5fe4 <hci_driver_open+0x88>)
    5fae:	490e      	ldr	r1, [pc, #56]	; (5fe8 <hci_driver_open+0x8c>)
    5fb0:	9404      	str	r4, [sp, #16]
    5fb2:	9400      	str	r4, [sp, #0]
    5fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
    5fb8:	480c      	ldr	r0, [pc, #48]	; (5fec <hci_driver_open+0x90>)
    5fba:	f00d fbc1 	bl	13740 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5fbe:	490c      	ldr	r1, [pc, #48]	; (5ff0 <hci_driver_open+0x94>)
    5fc0:	480a      	ldr	r0, [pc, #40]	; (5fec <hci_driver_open+0x90>)
    5fc2:	f00e fdfd 	bl	14bc0 <z_impl_k_thread_name_set>
}
    5fc6:	4620      	mov	r0, r4
    5fc8:	b008      	add	sp, #32
    5fca:	bdd0      	pop	{r4, r6, r7, pc}
    5fcc:	20000474 	.word	0x20000474
    5fd0:	20000040 	.word	0x20000040
    5fd4:	00005e9d 	.word	0x00005e9d
    5fd8:	20002478 	.word	0x20002478
    5fdc:	200007ac 	.word	0x200007ac
    5fe0:	0001527c 	.word	0x0001527c
    5fe4:	00005ff5 	.word	0x00005ff5
    5fe8:	20002638 	.word	0x20002638
    5fec:	20000820 	.word	0x20000820
    5ff0:	00015288 	.word	0x00015288

00005ff4 <recv_thread>:
{
    5ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ff8:	4db0      	ldr	r5, [pc, #704]	; (62bc <recv_thread+0x2c8>)
    5ffa:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 62e0 <recv_thread+0x2ec>
    5ffe:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 62e4 <recv_thread+0x2f0>
    6002:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 62e8 <recv_thread+0x2f4>
    6006:	b083      	sub	sp, #12
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6008:	48ac      	ldr	r0, [pc, #688]	; (62bc <recv_thread+0x2c8>)
    600a:	f04f 32ff 	mov.w	r2, #4294967295
    600e:	f04f 33ff 	mov.w	r3, #4294967295
    6012:	2102      	movs	r1, #2
    6014:	f00d fdaa 	bl	13b6c <z_impl_k_poll>
		LL_ASSERT(err == 0);
    6018:	2800      	cmp	r0, #0
    601a:	f040 80ac 	bne.w	6176 <recv_thread+0x182>
		if (events[0].state == K_POLL_STATE_SIGNALED) {
    601e:	68eb      	ldr	r3, [r5, #12]
    6020:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
    6024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    6028:	f000 80a1 	beq.w	616e <recv_thread+0x17a>
		} else if (events[1].state ==
    602c:	6a2b      	ldr	r3, [r5, #32]
    602e:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
    6032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6036:	f000 8104 	beq.w	6242 <recv_thread+0x24e>
		struct node_rx_pdu *node_rx = NULL;
    603a:	2400      	movs	r4, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    603c:	68ea      	ldr	r2, [r5, #12]
		events[1].state = K_POLL_STATE_NOT_READY;
    603e:	6a2b      	ldr	r3, [r5, #32]
	s32_t hbuf_total = hci_hbuf_total;
    6040:	499f      	ldr	r1, [pc, #636]	; (62c0 <recv_thread+0x2cc>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6042:	f36f 3210 	bfc	r2, #12, #5
	s32_t hbuf_total = hci_hbuf_total;
    6046:	f8d1 8000 	ldr.w	r8, [r1]
		events[0].state = K_POLL_STATE_NOT_READY;
    604a:	60ea      	str	r2, [r5, #12]
		events[1].state = K_POLL_STATE_NOT_READY;
    604c:	f36f 3310 	bfc	r3, #12, #5
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6050:	4a9c      	ldr	r2, [pc, #624]	; (62c4 <recv_thread+0x2d0>)
    6052:	622b      	str	r3, [r5, #32]
    6054:	f3bf 8f5b 	dmb	ish
    6058:	e852 3f00 	ldrex	r3, [r2]
    605c:	f023 0101 	bic.w	r1, r3, #1
    6060:	e842 1000 	strex	r0, r1, [r2]
    6064:	2800      	cmp	r0, #0
    6066:	d1f7      	bne.n	6058 <recv_thread+0x64>
    6068:	f3bf 8f5b 	dmb	ish
	if (reset) {
    606c:	07db      	lsls	r3, r3, #31
	list->head = NULL;
    606e:	bf44      	itt	mi
    6070:	2300      	movmi	r3, #0
	list->tail = NULL;
    6072:	e9c9 3300 	strdmi	r3, r3, [r9]
	if (hbuf_total <= 0) {
    6076:	f1b8 0f00 	cmp.w	r8, #0
    607a:	f340 80e9 	ble.w	6250 <recv_thread+0x25c>
	hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    607e:	f8db 3000 	ldr.w	r3, [fp]
    6082:	f8da 2000 	ldr.w	r2, [sl]
	node_rx = (void *)sys_slist_peek_head(&hbuf_pend);
    6086:	f8d9 6000 	ldr.w	r6, [r9]
	hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    608a:	eba8 0303 	sub.w	r3, r8, r3
    608e:	4413      	add	r3, r2
    6090:	4a8d      	ldr	r2, [pc, #564]	; (62c8 <recv_thread+0x2d4>)
    6092:	6013      	str	r3, [r2, #0]
	if (!node_rx) {
    6094:	2e00      	cmp	r6, #0
    6096:	f000 8106 	beq.w	62a6 <recv_thread+0x2b2>
	class = node_rx->hdr.user_meta;
    609a:	7977      	ldrb	r7, [r6, #5]
	if (n) {
    609c:	2c00      	cmp	r4, #0
    609e:	d17b      	bne.n	6198 <recv_thread+0x1a4>
	switch (class) {
    60a0:	2f04      	cmp	r7, #4
    60a2:	d84a      	bhi.n	613a <recv_thread+0x146>
    60a4:	2f02      	cmp	r7, #2
    60a6:	f200 80ba 	bhi.w	621e <recv_thread+0x22a>
		LL_ASSERT(0);
    60aa:	4a88      	ldr	r2, [pc, #544]	; (62cc <recv_thread+0x2d8>)
    60ac:	4988      	ldr	r1, [pc, #544]	; (62d0 <recv_thread+0x2dc>)
    60ae:	4889      	ldr	r0, [pc, #548]	; (62d4 <recv_thread+0x2e0>)
    60b0:	f44f 73a1 	mov.w	r3, #322	; 0x142
    60b4:	f00d fe1e 	bl	13cf4 <printk>
    60b8:	4040      	eors	r0, r0
    60ba:	f380 8811 	msr	BASEPRI, r0
    60be:	f04f 0003 	mov.w	r0, #3
    60c2:	df02      	svc	2
	switch (class) {
    60c4:	2f04      	cmp	r7, #4
    60c6:	9601      	str	r6, [sp, #4]
    60c8:	f240 8094 	bls.w	61f4 <recv_thread+0x200>
    60cc:	2f05      	cmp	r7, #5
    60ce:	d041      	beq.n	6154 <recv_thread+0x160>
		LL_ASSERT(0);
    60d0:	4a7e      	ldr	r2, [pc, #504]	; (62cc <recv_thread+0x2d8>)
    60d2:	497f      	ldr	r1, [pc, #508]	; (62d0 <recv_thread+0x2dc>)
    60d4:	487f      	ldr	r0, [pc, #508]	; (62d4 <recv_thread+0x2e0>)
    60d6:	23d4      	movs	r3, #212	; 0xd4
    60d8:	f00d fe0c 	bl	13cf4 <printk>
    60dc:	4040      	eors	r0, r0
    60de:	f380 8811 	msr	BASEPRI, r0
    60e2:	f04f 0003 	mov.w	r0, #3
    60e6:	df02      	svc	2
	node_rx->hdr.next = NULL;
    60e8:	9b01      	ldr	r3, [sp, #4]
    60ea:	2200      	movs	r2, #0
    60ec:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    60ee:	a801      	add	r0, sp, #4
    60f0:	f002 fce8 	bl	8ac4 <ll_rx_mem_release>
		hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    60f4:	f8db 3000 	ldr.w	r3, [fp]
    60f8:	f8da 1000 	ldr.w	r1, [sl]
		node_rx = (void *)sys_slist_peek_head(&hbuf_pend);
    60fc:	f8d9 2000 	ldr.w	r2, [r9]
		hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    6100:	eba8 0303 	sub.w	r3, r8, r3
    6104:	440b      	add	r3, r1
    6106:	4970      	ldr	r1, [pc, #448]	; (62c8 <recv_thread+0x2d4>)
    6108:	600b      	str	r3, [r1, #0]
		if (node_rx) {
    610a:	b12a      	cbz	r2, 6118 <recv_thread+0x124>
			class = node_rx->hdr.user_meta;
    610c:	7952      	ldrb	r2, [r2, #5]
			if (class == HCI_CLASS_EVT_CONNECTION ||
    610e:	1ed1      	subs	r1, r2, #3
    6110:	2901      	cmp	r1, #1
    6112:	d90d      	bls.n	6130 <recv_thread+0x13c>
			    class == HCI_CLASS_EVT_LLCP ||
    6114:	2a05      	cmp	r2, #5
    6116:	d009      	beq.n	612c <recv_thread+0x138>
		if (buf) {
    6118:	b12c      	cbz	r4, 6126 <recv_thread+0x132>
			if (buf->len) {
    611a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    611c:	4620      	mov	r0, r4
			if (buf->len) {
    611e:	2b00      	cmp	r3, #0
    6120:	d037      	beq.n	6192 <recv_thread+0x19e>
				bt_recv(buf);
    6122:	f7fe fa39 	bl	4598 <bt_recv>
	z_impl_k_yield();
    6126:	f00d fa09 	bl	1353c <z_impl_k_yield>
	while (1) {
    612a:	e76d      	b.n	6008 <recv_thread+0x14>
			    (class == HCI_CLASS_ACL_DATA && hbuf_count)) {
    612c:	2b00      	cmp	r3, #0
    612e:	d0f3      	beq.n	6118 <recv_thread+0x124>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    6130:	2100      	movs	r1, #0
    6132:	4869      	ldr	r0, [pc, #420]	; (62d8 <recv_thread+0x2e4>)
    6134:	f00d fd7a 	bl	13c2c <z_impl_k_poll_signal_raise>
    6138:	e7ee      	b.n	6118 <recv_thread+0x124>
	switch (class) {
    613a:	2f05      	cmp	r7, #5
    613c:	d1b5      	bne.n	60aa <recv_thread+0xb6>
		if (hbuf_count) {
    613e:	2b00      	cmp	r3, #0
    6140:	d0f1      	beq.n	6126 <recv_thread+0x132>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6142:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6146:	6833      	ldr	r3, [r6, #0]
	list->head = node;
    6148:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    614c:	4296      	cmp	r6, r2
    614e:	f000 80e3 	beq.w	6318 <recv_thread+0x324>
		buf = encode_node(node_rx, class);
    6152:	9601      	str	r6, [sp, #4]
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    6154:	f04f 32ff 	mov.w	r2, #4294967295
    6158:	f04f 33ff 	mov.w	r3, #4294967295
    615c:	2003      	movs	r0, #3
    615e:	f7fe f9c9 	bl	44f4 <bt_buf_get_rx>
    6162:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    6164:	4601      	mov	r1, r0
    6166:	9801      	ldr	r0, [sp, #4]
    6168:	f001 f87c 	bl	7264 <hci_acl_encode>
		break;
    616c:	e7bc      	b.n	60e8 <recv_thread+0xf4>
			events[0].signal->signaled = 0U;
    616e:	692b      	ldr	r3, [r5, #16]
    6170:	2400      	movs	r4, #0
    6172:	609c      	str	r4, [r3, #8]
    6174:	e762      	b.n	603c <recv_thread+0x48>
		LL_ASSERT(err == 0);
    6176:	4a55      	ldr	r2, [pc, #340]	; (62cc <recv_thread+0x2d8>)
    6178:	4958      	ldr	r1, [pc, #352]	; (62dc <recv_thread+0x2e8>)
    617a:	4856      	ldr	r0, [pc, #344]	; (62d4 <recv_thread+0x2e0>)
    617c:	f44f 73bd 	mov.w	r3, #378	; 0x17a
    6180:	f00d fdb8 	bl	13cf4 <printk>
    6184:	4040      	eors	r0, r0
    6186:	f380 8811 	msr	BASEPRI, r0
    618a:	f04f 0003 	mov.w	r0, #3
    618e:	df02      	svc	2
    6190:	e745      	b.n	601e <recv_thread+0x2a>
				net_buf_unref(buf);
    6192:	f00b fecb 	bl	11f2c <net_buf_unref>
    6196:	e7c6      	b.n	6126 <recv_thread+0x132>
		if (class == HCI_CLASS_EVT_CONNECTION ||
    6198:	1efa      	subs	r2, r7, #3
    619a:	2a01      	cmp	r2, #1
    619c:	d972      	bls.n	6284 <recv_thread+0x290>
		    class == HCI_CLASS_EVT_LLCP ||
    619e:	2f05      	cmp	r7, #5
    61a0:	f000 8085 	beq.w	62ae <recv_thread+0x2ba>
	if (hbuf_count != -1) {
    61a4:	3301      	adds	r3, #1
	u8_t class = node_rx->hdr.user_meta;
    61a6:	7962      	ldrb	r2, [r4, #5]
	if (hbuf_count != -1) {
    61a8:	d05a      	beq.n	6260 <recv_thread+0x26c>
    61aa:	f8d9 6000 	ldr.w	r6, [r9]
		switch (class) {
    61ae:	2a04      	cmp	r2, #4
    61b0:	d86f      	bhi.n	6292 <recv_thread+0x29e>
    61b2:	2a02      	cmp	r2, #2
    61b4:	f200 80c1 	bhi.w	633a <recv_thread+0x346>
    61b8:	1e53      	subs	r3, r2, #1
    61ba:	2b01      	cmp	r3, #1
    61bc:	f200 80af 	bhi.w	631e <recv_thread+0x32a>
	buf = encode_node(node_rx, class);
    61c0:	9401      	str	r4, [sp, #4]
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    61c2:	2a02      	cmp	r2, #2
    61c4:	f000 80ce 	beq.w	6364 <recv_thread+0x370>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    61c8:	f04f 32ff 	mov.w	r2, #4294967295
    61cc:	f04f 33ff 	mov.w	r3, #4294967295
    61d0:	2001      	movs	r0, #1
    61d2:	f7fe f98f 	bl	44f4 <bt_buf_get_rx>
    61d6:	4604      	mov	r4, r0
		if (buf) {
    61d8:	2c00      	cmp	r4, #0
    61da:	f000 80bd 	beq.w	6358 <recv_thread+0x364>
			hci_evt_encode(node_rx, buf);
    61de:	9801      	ldr	r0, [sp, #4]
    61e0:	4621      	mov	r1, r4
    61e2:	f001 f8b9 	bl	7358 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    61e6:	9b01      	ldr	r3, [sp, #4]
    61e8:	2200      	movs	r2, #0
    61ea:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    61ec:	a801      	add	r0, sp, #4
    61ee:	f002 fc69 	bl	8ac4 <ll_rx_mem_release>
	return buf;
    61f2:	e791      	b.n	6118 <recv_thread+0x124>
	switch (class) {
    61f4:	2f00      	cmp	r7, #0
    61f6:	f43f af6b 	beq.w	60d0 <recv_thread+0xdc>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    61fa:	2f02      	cmp	r7, #2
    61fc:	d019      	beq.n	6232 <recv_thread+0x23e>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    61fe:	f04f 32ff 	mov.w	r2, #4294967295
    6202:	f04f 33ff 	mov.w	r3, #4294967295
    6206:	2001      	movs	r0, #1
    6208:	f7fe f974 	bl	44f4 <bt_buf_get_rx>
    620c:	4604      	mov	r4, r0
		if (buf) {
    620e:	2c00      	cmp	r4, #0
    6210:	f43f af6a 	beq.w	60e8 <recv_thread+0xf4>
			hci_evt_encode(node_rx, buf);
    6214:	9801      	ldr	r0, [sp, #4]
    6216:	4621      	mov	r1, r4
    6218:	f001 f89e 	bl	7358 <hci_evt_encode>
    621c:	e764      	b.n	60e8 <recv_thread+0xf4>
    621e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6222:	6833      	ldr	r3, [r6, #0]
	list->head = node;
    6224:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6228:	4296      	cmp	r6, r2
    622a:	d044      	beq.n	62b6 <recv_thread+0x2c2>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    622c:	2f02      	cmp	r7, #2
    622e:	9601      	str	r6, [sp, #4]
    6230:	d1e5      	bne.n	61fe <recv_thread+0x20a>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    6232:	2200      	movs	r2, #0
    6234:	2300      	movs	r3, #0
    6236:	2101      	movs	r1, #1
    6238:	2000      	movs	r0, #0
    623a:	f00e f908 	bl	1444e <bt_buf_get_evt>
    623e:	4604      	mov	r4, r0
    6240:	e7e5      	b.n	620e <recv_thread+0x21a>
			node_rx = k_fifo_get(events[1].fifo, K_NO_WAIT);
    6242:	6a68      	ldr	r0, [r5, #36]	; 0x24
	return z_impl_k_queue_get(queue, timeout);
    6244:	2200      	movs	r2, #0
    6246:	2300      	movs	r3, #0
    6248:	f00c feac 	bl	12fa4 <z_impl_k_queue_get>
    624c:	4604      	mov	r4, r0
    624e:	e6f5      	b.n	603c <recv_thread+0x48>
		hbuf_count = -1;
    6250:	4a1d      	ldr	r2, [pc, #116]	; (62c8 <recv_thread+0x2d4>)
    6252:	f04f 33ff 	mov.w	r3, #4294967295
    6256:	6013      	str	r3, [r2, #0]
		if (node_rx && !buf) {
    6258:	2c00      	cmp	r4, #0
    625a:	f43f af64 	beq.w	6126 <recv_thread+0x132>
	u8_t class = node_rx->hdr.user_meta;
    625e:	7962      	ldrb	r2, [r4, #5]
	buf = encode_node(node_rx, class);
    6260:	9401      	str	r4, [sp, #4]
	switch (class) {
    6262:	2a04      	cmp	r2, #4
    6264:	d942      	bls.n	62ec <recv_thread+0x2f8>
    6266:	2a05      	cmp	r2, #5
    6268:	d143      	bne.n	62f2 <recv_thread+0x2fe>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    626a:	f04f 32ff 	mov.w	r2, #4294967295
    626e:	f04f 33ff 	mov.w	r3, #4294967295
    6272:	2003      	movs	r0, #3
    6274:	f7fe f93e 	bl	44f4 <bt_buf_get_rx>
    6278:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    627a:	4601      	mov	r1, r0
    627c:	9801      	ldr	r0, [sp, #4]
    627e:	f000 fff1 	bl	7264 <hci_acl_encode>
		break;
    6282:	e7b0      	b.n	61e6 <recv_thread+0x1f2>
	return z_impl_k_poll_signal_raise(signal, result);
    6284:	4814      	ldr	r0, [pc, #80]	; (62d8 <recv_thread+0x2e4>)
    6286:	2100      	movs	r1, #0
    6288:	f00d fcd0 	bl	13c2c <z_impl_k_poll_signal_raise>
		if (node_rx && !buf) {
    628c:	4b0e      	ldr	r3, [pc, #56]	; (62c8 <recv_thread+0x2d4>)
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	e788      	b.n	61a4 <recv_thread+0x1b0>
		switch (class) {
    6292:	2a05      	cmp	r2, #5
    6294:	d143      	bne.n	631e <recv_thread+0x32a>
			if (pend || !hbuf_count) {
    6296:	2e00      	cmp	r6, #0
    6298:	d155      	bne.n	6346 <recv_thread+0x352>
    629a:	4b0b      	ldr	r3, [pc, #44]	; (62c8 <recv_thread+0x2d4>)
    629c:	681b      	ldr	r3, [r3, #0]
    629e:	2b00      	cmp	r3, #0
    62a0:	d051      	beq.n	6346 <recv_thread+0x352>
	buf = encode_node(node_rx, class);
    62a2:	9401      	str	r4, [sp, #4]
	switch (class) {
    62a4:	e7e1      	b.n	626a <recv_thread+0x276>
		if (node_rx && !buf) {
    62a6:	2c00      	cmp	r4, #0
    62a8:	f47f af7c 	bne.w	61a4 <recv_thread+0x1b0>
    62ac:	e73b      	b.n	6126 <recv_thread+0x132>
		    (class == HCI_CLASS_ACL_DATA && hbuf_count)) {
    62ae:	2b00      	cmp	r3, #0
    62b0:	d1e8      	bne.n	6284 <recv_thread+0x290>
	u8_t class = node_rx->hdr.user_meta;
    62b2:	7962      	ldrb	r2, [r4, #5]
	if (hbuf_count != -1) {
    62b4:	e77b      	b.n	61ae <recv_thread+0x1ba>
	list->tail = node;
    62b6:	f8c9 3004 	str.w	r3, [r9, #4]
}
    62ba:	e7b7      	b.n	622c <recv_thread+0x238>
    62bc:	20000018 	.word	0x20000018
    62c0:	20000930 	.word	0x20000930
    62c4:	20000934 	.word	0x20000934
    62c8:	200007a0 	.word	0x200007a0
    62cc:	00015290 	.word	0x00015290
    62d0:	000152dc 	.word	0x000152dc
    62d4:	0001525c 	.word	0x0001525c
    62d8:	20000040 	.word	0x20000040
    62dc:	000152d0 	.word	0x000152d0
    62e0:	200007a4 	.word	0x200007a4
    62e4:	2000092c 	.word	0x2000092c
    62e8:	20000924 	.word	0x20000924
	switch (class) {
    62ec:	2a00      	cmp	r2, #0
    62ee:	f47f af68 	bne.w	61c2 <recv_thread+0x1ce>
		LL_ASSERT(0);
    62f2:	4a22      	ldr	r2, [pc, #136]	; (637c <recv_thread+0x388>)
    62f4:	4922      	ldr	r1, [pc, #136]	; (6380 <recv_thread+0x38c>)
    62f6:	4823      	ldr	r0, [pc, #140]	; (6384 <recv_thread+0x390>)
    62f8:	23d4      	movs	r3, #212	; 0xd4
    62fa:	f00d fcfb 	bl	13cf4 <printk>
    62fe:	4040      	eors	r0, r0
    6300:	f380 8811 	msr	BASEPRI, r0
    6304:	f04f 0003 	mov.w	r0, #3
    6308:	df02      	svc	2
	node_rx->hdr.next = NULL;
    630a:	9b01      	ldr	r3, [sp, #4]
    630c:	2200      	movs	r2, #0
    630e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    6310:	a801      	add	r0, sp, #4
    6312:	f002 fbd7 	bl	8ac4 <ll_rx_mem_release>
		if (buf) {
    6316:	e706      	b.n	6126 <recv_thread+0x132>
	list->tail = node;
    6318:	f8c9 3004 	str.w	r3, [r9, #4]
}
    631c:	e719      	b.n	6152 <recv_thread+0x15e>
			LL_ASSERT(0);
    631e:	4a17      	ldr	r2, [pc, #92]	; (637c <recv_thread+0x388>)
    6320:	4917      	ldr	r1, [pc, #92]	; (6380 <recv_thread+0x38c>)
    6322:	4818      	ldr	r0, [pc, #96]	; (6384 <recv_thread+0x390>)
    6324:	23f9      	movs	r3, #249	; 0xf9
    6326:	f00d fce5 	bl	13cf4 <printk>
    632a:	4040      	eors	r0, r0
    632c:	f380 8811 	msr	BASEPRI, r0
    6330:	f04f 0003 	mov.w	r0, #3
    6334:	df02      	svc	2
	buf = encode_node(node_rx, class);
    6336:	9401      	str	r4, [sp, #4]
	switch (class) {
    6338:	e7db      	b.n	62f2 <recv_thread+0x2fe>
			hbuf_count = 1;
    633a:	4a13      	ldr	r2, [pc, #76]	; (6388 <recv_thread+0x394>)
    633c:	2301      	movs	r3, #1
    633e:	6013      	str	r3, [r2, #0]
			if (pend || !hbuf_count) {
    6340:	b90e      	cbnz	r6, 6346 <recv_thread+0x352>
	buf = encode_node(node_rx, class);
    6342:	9401      	str	r4, [sp, #4]
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    6344:	e740      	b.n	61c8 <recv_thread+0x1d4>
Z_GENLIST_APPEND(slist, snode)
    6346:	f8d9 3004 	ldr.w	r3, [r9, #4]
	parent->next = child;
    634a:	2200      	movs	r2, #0
    634c:	6022      	str	r2, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    634e:	b18b      	cbz	r3, 6374 <recv_thread+0x380>
	parent->next = child;
    6350:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6352:	f8c9 4004 	str.w	r4, [r9, #4]
		if (buf) {
    6356:	e6e6      	b.n	6126 <recv_thread+0x132>
	node_rx->hdr.next = NULL;
    6358:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    635a:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    635c:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    635e:	f002 fbb1 	bl	8ac4 <ll_rx_mem_release>
		if (buf) {
    6362:	e6e0      	b.n	6126 <recv_thread+0x132>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    6364:	2200      	movs	r2, #0
    6366:	2300      	movs	r3, #0
    6368:	2101      	movs	r1, #1
    636a:	2000      	movs	r0, #0
    636c:	f00e f86f 	bl	1444e <bt_buf_get_evt>
    6370:	4604      	mov	r4, r0
    6372:	e731      	b.n	61d8 <recv_thread+0x1e4>
	list->head = node;
    6374:	e9c9 4400 	strd	r4, r4, [r9]
		if (buf) {
    6378:	e6d5      	b.n	6126 <recv_thread+0x132>
    637a:	bf00      	nop
    637c:	00015290 	.word	0x00015290
    6380:	000152dc 	.word	0x000152dc
    6384:	0001525c 	.word	0x0001525c
    6388:	200007a0 	.word	0x200007a0

0000638c <meta_evt>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    638c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    638e:	f100 0408 	add.w	r4, r0, #8
{
    6392:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    6394:	4620      	mov	r0, r4
    6396:	2102      	movs	r1, #2
{
    6398:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    639a:	f00e f897 	bl	144cc <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    639e:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    63a0:	223e      	movs	r2, #62	; 0x3e
    63a2:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    63a4:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
    63a6:	2101      	movs	r1, #1
    63a8:	4620      	mov	r0, r4
    63aa:	f00e f88f 	bl	144cc <net_buf_simple_add>
	me->subevent = subevt;
    63ae:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    63b0:	4629      	mov	r1, r5
    63b2:	4620      	mov	r0, r4
}
    63b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    63b8:	f00e b888 	b.w	144cc <net_buf_simple_add>

000063bc <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    63bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    63c0:	4c17      	ldr	r4, [pc, #92]	; (6420 <le_remote_feat_complete+0x64>)
    63c2:	6866      	ldr	r6, [r4, #4]
    63c4:	f04f 0900 	mov.w	r9, #0
    63c8:	464c      	mov	r4, r9
    63ca:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    63ce:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    63d0:	ea54 0205 	orrs.w	r2, r4, r5
    63d4:	d009      	beq.n	63ea <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    63d6:	4a13      	ldr	r2, [pc, #76]	; (6424 <le_remote_feat_complete+0x68>)
    63d8:	6812      	ldr	r2, [r2, #0]
    63da:	4606      	mov	r6, r0
    63dc:	4688      	mov	r8, r1
    63de:	f002 0008 	and.w	r0, r2, #8
    63e2:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    63e4:	ea50 0201 	orrs.w	r2, r0, r1
    63e8:	d101      	bne.n	63ee <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    63ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    63ee:	4618      	mov	r0, r3
    63f0:	220b      	movs	r2, #11
    63f2:	2104      	movs	r1, #4
    63f4:	f7ff ffca 	bl	638c <meta_evt>
	sep->status = status;
    63f8:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    63fa:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
    63fe:	b93e      	cbnz	r6, 6410 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
    6400:	f108 0104 	add.w	r1, r8, #4
    6404:	3003      	adds	r0, #3
}
    6406:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
    640a:	2208      	movs	r2, #8
    640c:	f00d bf85 	b.w	1431a <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    6410:	4649      	mov	r1, r9
    6412:	3003      	adds	r0, #3
}
    6414:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    6418:	2208      	movs	r2, #8
    641a:	f00d bfa9 	b.w	14370 <memset>
    641e:	bf00      	nop
    6420:	20000000 	.word	0x20000000
    6424:	20000008 	.word	0x20000008

00006428 <encrypt_change.part.0>:
static void encrypt_change(u8_t err, u16_t handle,
    6428:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    642a:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(u8_t err, u16_t handle,
    642e:	4604      	mov	r4, r0
    6430:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    6432:	4628      	mov	r0, r5
    6434:	2102      	movs	r1, #2
    6436:	f00e f849 	bl	144cc <net_buf_simple_add>
    643a:	4603      	mov	r3, r0
	hdr->evt = evt;
    643c:	2208      	movs	r2, #8
	hdr->len = len;
    643e:	2104      	movs	r1, #4
	hdr->evt = evt;
    6440:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    6442:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    6444:	4628      	mov	r0, r5
    6446:	f00e f841 	bl	144cc <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    644a:	fab4 f384 	clz	r3, r4
    644e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    6450:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    6452:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    6454:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    6458:	bd70      	pop	{r4, r5, r6, pc}
    645a:	bf00      	nop

0000645c <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, u16_t handle,
    645c:	b538      	push	{r3, r4, r5, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    645e:	f101 0408 	add.w	r4, r1, #8
void hci_disconn_complete_encode(struct pdu_data *pdu_data, u16_t handle,
    6462:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6464:	2102      	movs	r1, #2
    6466:	4620      	mov	r0, r4
    6468:	f00e f830 	bl	144cc <net_buf_simple_add>
    646c:	4603      	mov	r3, r0
	hdr->evt = evt;
    646e:	2205      	movs	r2, #5
	hdr->len = len;
    6470:	2104      	movs	r1, #4
	hdr->evt = evt;
    6472:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    6474:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    6476:	4620      	mov	r0, r4
    6478:	f00e f828 	bl	144cc <net_buf_simple_add>
	ep->status = 0x00;
    647c:	2300      	movs	r3, #0
    647e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    6480:	f8a0 5001 	strh.w	r5, [r0, #1]
}
    6484:	bd38      	pop	{r3, r4, r5, pc}
    6486:	bf00      	nop

00006488 <bt_hci_evt_create>:
{
    6488:	b570      	push	{r4, r5, r6, lr}
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    648a:	f04f 32ff 	mov.w	r2, #4294967295
{
    648e:	460e      	mov	r6, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    6490:	f04f 33ff 	mov.w	r3, #4294967295
    6494:	2100      	movs	r1, #0
{
    6496:	4605      	mov	r5, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    6498:	f00d ffd9 	bl	1444e <bt_buf_get_evt>
	hdr = net_buf_add(buf, sizeof(*hdr));
    649c:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
    649e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    64a0:	3008      	adds	r0, #8
    64a2:	f00e f813 	bl	144cc <net_buf_simple_add>
    64a6:	4603      	mov	r3, r0
}
    64a8:	4620      	mov	r0, r4
	hdr->len = len;
    64aa:	705e      	strb	r6, [r3, #1]
	hdr->evt = evt;
    64ac:	701d      	strb	r5, [r3, #0]
}
    64ae:	bd70      	pop	{r4, r5, r6, pc}

000064b0 <bt_hci_cmd_complete_create>:
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    64b0:	3103      	adds	r1, #3
{
    64b2:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    64b4:	b2c9      	uxtb	r1, r1
{
    64b6:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    64b8:	200e      	movs	r0, #14
    64ba:	f7ff ffe5 	bl	6488 <bt_hci_evt_create>
	cc = net_buf_add(buf, sizeof(*cc));
    64be:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    64c0:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
    64c2:	3008      	adds	r0, #8
    64c4:	f00e f802 	bl	144cc <net_buf_simple_add>
    64c8:	4603      	mov	r3, r0
	cc->ncmd = 1U;
    64ca:	2201      	movs	r2, #1
	cc->opcode = sys_cpu_to_le16(op);
    64cc:	f8a0 5001 	strh.w	r5, [r0, #1]
	cc->ncmd = 1U;
    64d0:	701a      	strb	r2, [r3, #0]
}
    64d2:	4620      	mov	r0, r4
    64d4:	bd38      	pop	{r3, r4, r5, pc}
    64d6:	bf00      	nop

000064d8 <bt_hci_cmd_status_create>:
{
    64d8:	b570      	push	{r4, r5, r6, lr}
    64da:	4605      	mov	r5, r0
    64dc:	460e      	mov	r6, r1
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    64de:	200f      	movs	r0, #15
    64e0:	2104      	movs	r1, #4
    64e2:	f7ff ffd1 	bl	6488 <bt_hci_evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    64e6:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    64e8:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
    64ea:	3008      	adds	r0, #8
    64ec:	f00d ffee 	bl	144cc <net_buf_simple_add>
    64f0:	4603      	mov	r3, r0
	cs->ncmd = 1U;
    64f2:	2201      	movs	r2, #1
	cs->status = status;
    64f4:	7006      	strb	r6, [r0, #0]
	cs->opcode = sys_cpu_to_le16(op);
    64f6:	8045      	strh	r5, [r0, #2]
	cs->ncmd = 1U;
    64f8:	705a      	strb	r2, [r3, #1]
}
    64fa:	4620      	mov	r0, r4
    64fc:	bd70      	pop	{r4, r5, r6, pc}
    64fe:	bf00      	nop

00006500 <hci_cmd_complete>:
{
    6500:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    6502:	4b06      	ldr	r3, [pc, #24]	; (651c <hci_cmd_complete+0x1c>)
{
    6504:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    6506:	8818      	ldrh	r0, [r3, #0]
{
    6508:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    650a:	f7ff ffd1 	bl	64b0 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
    650e:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    6510:	6028      	str	r0, [r5, #0]
}
    6512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    6516:	3008      	adds	r0, #8
    6518:	f00d bfd8 	b.w	144cc <net_buf_simple_add>
    651c:	2000205c 	.word	0x2000205c

00006520 <reset>:
{
    6520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dup_count = -1;
    6522:	4e27      	ldr	r6, [pc, #156]	; (65c0 <reset+0xa0>)
	event_mask = DEFAULT_EVENT_MASK;
    6524:	4d27      	ldr	r5, [pc, #156]	; (65c4 <reset+0xa4>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    6526:	4a28      	ldr	r2, [pc, #160]	; (65c8 <reset+0xa8>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    6528:	4b28      	ldr	r3, [pc, #160]	; (65cc <reset+0xac>)
	dup_count = -1;
    652a:	f04f 37ff 	mov.w	r7, #4294967295
    652e:	6037      	str	r7, [r6, #0]
	event_mask = DEFAULT_EVENT_MASK;
    6530:	f04f 36ff 	mov.w	r6, #4294967295
    6534:	f641 77ff 	movw	r7, #8191	; 0x1fff
    6538:	e9c5 6700 	strd	r6, r7, [r5]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    653c:	2600      	movs	r6, #0
    653e:	2700      	movs	r7, #0
    6540:	e9c2 6700 	strd	r6, r7, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    6544:	261f      	movs	r6, #31
    6546:	2700      	movs	r7, #0
    6548:	e9c3 6700 	strd	r6, r7, [r3]
	if (buf) {
    654c:	b348      	cbz	r0, 65a2 <reset+0x82>
    654e:	460c      	mov	r4, r1
		ll_reset();
    6550:	f001 ff6e 	bl	8430 <ll_reset>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6554:	4620      	mov	r0, r4
    6556:	2101      	movs	r1, #1
    6558:	f7ff ffd2 	bl	6500 <hci_cmd_complete>
	conn_count = 0U;
    655c:	4a1c      	ldr	r2, [pc, #112]	; (65d0 <reset+0xb0>)
	hci_hbuf_acked = 0U;
    655e:	4b1d      	ldr	r3, [pc, #116]	; (65d4 <reset+0xb4>)
	hci_hbuf_total = 0;
    6560:	4e1d      	ldr	r6, [pc, #116]	; (65d8 <reset+0xb8>)
	hci_hbuf_sent = 0U;
    6562:	4d1e      	ldr	r5, [pc, #120]	; (65dc <reset+0xbc>)
		ccst->status = 0x00;
    6564:	2400      	movs	r4, #0
    6566:	7004      	strb	r4, [r0, #0]
	conn_count = 0U;
    6568:	6014      	str	r4, [r2, #0]
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    656a:	481d      	ldr	r0, [pc, #116]	; (65e0 <reset+0xc0>)
	hci_hbuf_acked = 0U;
    656c:	601c      	str	r4, [r3, #0]
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    656e:	4621      	mov	r1, r4
    6570:	2202      	movs	r2, #2
	hci_hbuf_total = 0;
    6572:	6034      	str	r4, [r6, #0]
	hci_hbuf_sent = 0U;
    6574:	602c      	str	r4, [r5, #0]
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    6576:	f00d fefb 	bl	14370 <memset>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    657a:	f3bf 8f5b 	dmb	ish
    657e:	4b19      	ldr	r3, [pc, #100]	; (65e4 <reset+0xc4>)
    6580:	e853 2f00 	ldrex	r2, [r3]
    6584:	f042 0201 	orr.w	r2, r2, #1
    6588:	e843 2100 	strex	r1, r2, [r3]
    658c:	2900      	cmp	r1, #0
    658e:	d1f7      	bne.n	6580 <reset+0x60>
    6590:	f3bf 8f5b 	dmb	ish
		k_poll_signal_raise(hbuf_signal, 0x0);
    6594:	4b14      	ldr	r3, [pc, #80]	; (65e8 <reset+0xc8>)
    6596:	6818      	ldr	r0, [r3, #0]
    6598:	4621      	mov	r1, r4
}
    659a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    659e:	f00d bb45 	b.w	13c2c <z_impl_k_poll_signal_raise>
	conn_count = 0U;
    65a2:	4d0b      	ldr	r5, [pc, #44]	; (65d0 <reset+0xb0>)
	hci_hbuf_total = 0;
    65a4:	4a0c      	ldr	r2, [pc, #48]	; (65d8 <reset+0xb8>)
	hci_hbuf_sent = 0U;
    65a6:	4c0d      	ldr	r4, [pc, #52]	; (65dc <reset+0xbc>)
	hci_hbuf_acked = 0U;
    65a8:	4b0a      	ldr	r3, [pc, #40]	; (65d4 <reset+0xb4>)
    65aa:	4601      	mov	r1, r0
	conn_count = 0U;
    65ac:	6029      	str	r1, [r5, #0]
	hci_hbuf_total = 0;
    65ae:	6011      	str	r1, [r2, #0]
	hci_hbuf_sent = 0U;
    65b0:	6021      	str	r1, [r4, #0]
	hci_hbuf_acked = 0U;
    65b2:	6019      	str	r1, [r3, #0]
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    65b4:	480a      	ldr	r0, [pc, #40]	; (65e0 <reset+0xc0>)
}
    65b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    65ba:	2202      	movs	r2, #2
    65bc:	f00d bed8 	b.w	14370 <memset>
    65c0:	20000898 	.word	0x20000898
    65c4:	20000000 	.word	0x20000000
    65c8:	20000560 	.word	0x20000560
    65cc:	20000008 	.word	0x20000008
    65d0:	20000894 	.word	0x20000894
    65d4:	20000924 	.word	0x20000924
    65d8:	20000930 	.word	0x20000930
    65dc:	2000092c 	.word	0x2000092c
    65e0:	20000928 	.word	0x20000928
    65e4:	20000934 	.word	0x20000934
    65e8:	20000920 	.word	0x20000920

000065ec <hci_vendor_cmd_handle_common>:
{
    65ec:	b570      	push	{r4, r5, r6, lr}
    65ee:	1e43      	subs	r3, r0, #1
    65f0:	b086      	sub	sp, #24
    65f2:	4614      	mov	r4, r2
    65f4:	2b09      	cmp	r3, #9
    65f6:	d806      	bhi.n	6606 <hci_vendor_cmd_handle_common+0x1a>
    65f8:	e8df f003 	tbb	[pc, r3]
    65fc:	05372009 	.word	0x05372009
    6600:	52054505 	.word	0x52054505
    6604:	7869      	.short	0x7869
	return 0;
    6606:	f06f 0015 	mvn.w	r0, #21
}
    660a:	b006      	add	sp, #24
    660c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    660e:	4620      	mov	r0, r4
    6610:	210d      	movs	r1, #13
    6612:	f7ff ff75 	bl	6500 <hci_cmd_complete>
    6616:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    6618:	2202      	movs	r2, #2
	rp->status = 0x00;
    661a:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    661c:	2103      	movs	r1, #3
    661e:	71d9      	strb	r1, [r3, #7]
	rp->status = 0x00;
    6620:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    6622:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    6624:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    6626:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    6628:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    662a:	7258      	strb	r0, [r3, #9]
    662c:	7298      	strb	r0, [r3, #10]
    662e:	72d8      	strb	r0, [r3, #11]
    6630:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    6632:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    6634:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    6636:	719a      	strb	r2, [r3, #6]
}
    6638:	b006      	add	sp, #24
    663a:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    663c:	4620      	mov	r0, r4
    663e:	2141      	movs	r1, #65	; 0x41
    6640:	f7ff ff5e 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6644:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6646:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    6648:	4621      	mov	r1, r4
	rp->status = 0x00;
    664a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    664e:	2240      	movs	r2, #64	; 0x40
    6650:	f00d fe8e 	bl	14370 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    6654:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    6656:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    6658:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    665c:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    6660:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    6662:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    6664:	70ab      	strb	r3, [r5, #2]
}
    6666:	b006      	add	sp, #24
    6668:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    666a:	4620      	mov	r0, r4
    666c:	2109      	movs	r1, #9
    666e:	f7ff ff47 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6672:	2400      	movs	r4, #0
    6674:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    6678:	4621      	mov	r1, r4
    667a:	2208      	movs	r2, #8
    667c:	f00d fe78 	bl	14370 <memset>
	return 0;
    6680:	4620      	mov	r0, r4
}
    6682:	b006      	add	sp, #24
    6684:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    6686:	6889      	ldr	r1, [r1, #8]
    6688:	2000      	movs	r0, #0
    668a:	f7ff fb95 	bl	5db8 <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    668e:	4620      	mov	r0, r4
    6690:	2101      	movs	r1, #1
    6692:	f7ff ff35 	bl	6500 <hci_cmd_complete>
    6696:	4603      	mov	r3, r0
	ccst->status = 0x00;
    6698:	2000      	movs	r0, #0
    669a:	7018      	strb	r0, [r3, #0]
}
    669c:	b006      	add	sp, #24
    669e:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    66a0:	4e19      	ldr	r6, [pc, #100]	; (6708 <hci_vendor_cmd_handle_common+0x11c>)
    66a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    66a4:	466d      	mov	r5, sp
    66a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    66a8:	e896 0003 	ldmia.w	r6, {r0, r1}
    66ac:	f845 0b04 	str.w	r0, [r5], #4
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    66b0:	4620      	mov	r0, r4
	const char build_info[] = HCI_VS_BUILD_INFO;
    66b2:	7029      	strb	r1, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    66b4:	2116      	movs	r1, #22
    66b6:	f7ff ff23 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    66ba:	2400      	movs	r4, #0
    66bc:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    66c0:	2215      	movs	r2, #21
    66c2:	4669      	mov	r1, sp
    66c4:	f00d fe29 	bl	1431a <memcpy>
	return 0;
    66c8:	4620      	mov	r0, r4
}
    66ca:	b006      	add	sp, #24
    66cc:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    66ce:	4620      	mov	r0, r4
    66d0:	2118      	movs	r1, #24
    66d2:	f7ff ff15 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    66d6:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    66d8:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    66da:	2101      	movs	r1, #1
	rp->status = 0x00;
    66dc:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    66e0:	f00b fab6 	bl	11c50 <hci_vendor_read_static_addr>
    66e4:	7068      	strb	r0, [r5, #1]
	return 0;
    66e6:	4620      	mov	r0, r4
}
    66e8:	b006      	add	sp, #24
    66ea:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    66ec:	4620      	mov	r0, r4
    66ee:	2121      	movs	r1, #33	; 0x21
    66f0:	f7ff ff06 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    66f4:	4601      	mov	r1, r0
    66f6:	2400      	movs	r4, #0
    66f8:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    66fc:	3001      	adds	r0, #1
    66fe:	f00b fb19 	bl	11d34 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    6702:	4620      	mov	r0, r4
}
    6704:	b006      	add	sp, #24
    6706:	bd70      	pop	{r4, r5, r6, pc}
    6708:	00015300 	.word	0x00015300

0000670c <hci_cmd_handle>:
{
    670c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    670e:	8983      	ldrh	r3, [r0, #12]
{
    6710:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    6712:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    6714:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    6716:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
    6718:	f240 8090 	bls.w	683c <hci_cmd_handle+0x130>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    671c:	4604      	mov	r4, r0
    671e:	460d      	mov	r5, r1
    6720:	3008      	adds	r0, #8
    6722:	2103      	movs	r1, #3
    6724:	f00d fef2 	bl	1450c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    6728:	89a2      	ldrh	r2, [r4, #12]
    672a:	7883      	ldrb	r3, [r0, #2]
    672c:	429a      	cmp	r2, r3
    672e:	f0c0 8085 	bcc.w	683c <hci_cmd_handle+0x130>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    6732:	8803      	ldrh	r3, [r0, #0]
    6734:	4e7d      	ldr	r6, [pc, #500]	; (692c <hci_cmd_handle+0x220>)
	switch (BT_OGF(_opcode)) {
    6736:	f3c3 2285 	ubfx	r2, r3, #10, #6
    673a:	2a08      	cmp	r2, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    673c:	b298      	uxth	r0, r3
    673e:	8033      	strh	r3, [r6, #0]
	ocf = BT_OCF(_opcode);
    6740:	f3c3 0309 	ubfx	r3, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    6744:	d86b      	bhi.n	681e <hci_cmd_handle+0x112>
    6746:	2a00      	cmp	r2, #0
    6748:	d073      	beq.n	6832 <hci_cmd_handle+0x126>
    674a:	3a01      	subs	r2, #1
    674c:	2a07      	cmp	r2, #7
    674e:	d870      	bhi.n	6832 <hci_cmd_handle+0x126>
    6750:	e8df f002 	tbb	[pc, r2]
    6754:	579f6f91 	.word	0x579f6f91
    6758:	046f6f77 	.word	0x046f6f77
	switch (ocf) {
    675c:	3b01      	subs	r3, #1
    675e:	2b4d      	cmp	r3, #77	; 0x4d
    6760:	d867      	bhi.n	6832 <hci_cmd_handle+0x126>
    6762:	e8df f013 	tbh	[pc, r3, lsl #1]
    6766:	023a      	.short	0x023a
    6768:	02670279 	.word	0x02670279
    676c:	02620066 	.word	0x02620066
    6770:	03db0247 	.word	0x03db0247
    6774:	03cf03d5 	.word	0x03cf03d5
    6778:	02b403ca 	.word	0x02b403ca
    677c:	028a02a3 	.word	0x028a02a3
    6780:	03be0286 	.word	0x03be0286
    6784:	03b003b4 	.word	0x03b003b4
    6788:	045a03ac 	.word	0x045a03ac
    678c:	030d031d 	.word	0x030d031d
    6790:	043d0451 	.word	0x043d0451
    6794:	04230431 	.word	0x04230431
    6798:	0413041b 	.word	0x0413041b
    679c:	006603ff 	.word	0x006603ff
    67a0:	00660066 	.word	0x00660066
    67a4:	03e403f0 	.word	0x03e403f0
    67a8:	020f0225 	.word	0x020f0225
    67ac:	00660209 	.word	0x00660209
    67b0:	02020066 	.word	0x02020066
    67b4:	01ed01f7 	.word	0x01ed01f7
    67b8:	038f03a0 	.word	0x038f03a0
    67bc:	0371037e 	.word	0x0371037e
    67c0:	0349036a 	.word	0x0349036a
    67c4:	02c00321 	.word	0x02c00321
    67c8:	006602df 	.word	0x006602df
    67cc:	00660066 	.word	0x00660066
    67d0:	00660066 	.word	0x00660066
    67d4:	00660066 	.word	0x00660066
    67d8:	00660066 	.word	0x00660066
    67dc:	00660066 	.word	0x00660066
    67e0:	00660066 	.word	0x00660066
    67e4:	00660066 	.word	0x00660066
    67e8:	00660066 	.word	0x00660066
    67ec:	00660066 	.word	0x00660066
    67f0:	00660066 	.word	0x00660066
    67f4:	00660066 	.word	0x00660066
    67f8:	046d0066 	.word	0x046d0066
    67fc:	00660066 	.word	0x00660066
    6800:	0235      	.short	0x0235
	switch (ocf) {
    6802:	3b01      	subs	r3, #1
    6804:	2b08      	cmp	r3, #8
    6806:	d814      	bhi.n	6832 <hci_cmd_handle+0x126>
    6808:	e8df f013 	tbh	[pc, r3, lsl #1]
    680c:	009400ee 	.word	0x009400ee
    6810:	00130111 	.word	0x00130111
    6814:	00130013 	.word	0x00130013
    6818:	00130013 	.word	0x00130013
    681c:	0105      	.short	0x0105
	switch (BT_OGF(_opcode)) {
    681e:	2a3f      	cmp	r2, #63	; 0x3f
    6820:	d107      	bne.n	6832 <hci_cmd_handle+0x126>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(u16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    6822:	4621      	mov	r1, r4
    6824:	4618      	mov	r0, r3
    6826:	aa09      	add	r2, sp, #36	; 0x24
    6828:	f7ff fee0 	bl	65ec <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    682c:	3016      	adds	r0, #22
    682e:	d11f      	bne.n	6870 <hci_cmd_handle+0x164>
    6830:	8830      	ldrh	r0, [r6, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    6832:	2101      	movs	r1, #1
    6834:	f7ff fe50 	bl	64d8 <bt_hci_cmd_status_create>
}
    6838:	b00f      	add	sp, #60	; 0x3c
    683a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    683c:	2000      	movs	r0, #0
}
    683e:	b00f      	add	sp, #60	; 0x3c
    6840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    6842:	2b05      	cmp	r3, #5
    6844:	d1f5      	bne.n	6832 <hci_cmd_handle+0x126>
	handle = sys_le16_to_cpu(cmd->handle);
    6846:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6848:	2104      	movs	r1, #4
    684a:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
    684c:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    684e:	f7ff fe57 	bl	6500 <hci_cmd_complete>
    6852:	4604      	mov	r4, r0
	rp->status = ll_rssi_get(handle, &rp->rssi);
    6854:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    6856:	b2a8      	uxth	r0, r5
	rp->status = ll_rssi_get(handle, &rp->rssi);
    6858:	f004 f934 	bl	aac4 <ll_rssi_get>
	rp->handle = sys_cpu_to_le16(handle);
    685c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = ll_rssi_get(handle, &rp->rssi);
    6860:	7020      	strb	r0, [r4, #0]
	rp->rssi = (!rp->status) ? -rp->rssi : 127;
    6862:	2800      	cmp	r0, #0
    6864:	f040 83f8 	bne.w	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    6868:	78e3      	ldrb	r3, [r4, #3]
    686a:	425b      	negs	r3, r3
    686c:	b25b      	sxtb	r3, r3
    686e:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
    6870:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    6872:	b00f      	add	sp, #60	; 0x3c
    6874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    6876:	2b06      	cmp	r3, #6
    6878:	f000 8400 	beq.w	707c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
    687c:	2b1d      	cmp	r3, #29
    687e:	d1d8      	bne.n	6832 <hci_cmd_handle+0x126>
	handle = sys_le16_to_cpu(cmd->handle);
    6880:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    6882:	8818      	ldrh	r0, [r3, #0]
    6884:	f004 f822 	bl	a8cc <ll_version_ind_send>
    6888:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    688a:	8830      	ldrh	r0, [r6, #0]
    688c:	f7ff fe24 	bl	64d8 <bt_hci_cmd_status_create>
}
    6890:	e7d2      	b.n	6838 <hci_cmd_handle+0x12c>
	switch (ocf) {
    6892:	2b35      	cmp	r3, #53	; 0x35
    6894:	d824      	bhi.n	68e0 <hci_cmd_handle+0x1d4>
    6896:	2b2c      	cmp	r3, #44	; 0x2c
    6898:	d80a      	bhi.n	68b0 <hci_cmd_handle+0x1a4>
    689a:	2b01      	cmp	r3, #1
    689c:	f000 83df 	beq.w	705e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e>
    68a0:	2b03      	cmp	r3, #3
    68a2:	d1c6      	bne.n	6832 <hci_cmd_handle+0x126>
		reset(cmd, evt);
    68a4:	4620      	mov	r0, r4
    68a6:	a909      	add	r1, sp, #36	; 0x24
    68a8:	f7ff fe3a 	bl	6520 <reset>
		break;
    68ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    68ae:	e7c3      	b.n	6838 <hci_cmd_handle+0x12c>
    68b0:	3b2d      	subs	r3, #45	; 0x2d
    68b2:	2b08      	cmp	r3, #8
    68b4:	d8bd      	bhi.n	6832 <hci_cmd_handle+0x126>
    68b6:	a201      	add	r2, pc, #4	; (adr r2, 68bc <hci_cmd_handle+0x1b0>)
    68b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    68bc:	00006b1b 	.word	0x00006b1b
    68c0:	00006833 	.word	0x00006833
    68c4:	00006833 	.word	0x00006833
    68c8:	00006833 	.word	0x00006833
    68cc:	00006acd 	.word	0x00006acd
    68d0:	00006833 	.word	0x00006833
    68d4:	00006aa7 	.word	0x00006aa7
    68d8:	00006833 	.word	0x00006833
    68dc:	00006a4d 	.word	0x00006a4d
	switch (ocf) {
    68e0:	2b7b      	cmp	r3, #123	; 0x7b
    68e2:	f000 83de 	beq.w	70a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
    68e6:	2b7c      	cmp	r3, #124	; 0x7c
    68e8:	d10f      	bne.n	690a <hci_cmd_handle+0x1fe>
		write_auth_payload_timeout(cmd, evt);
    68ea:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    68ec:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    68ee:	8859      	ldrh	r1, [r3, #2]
    68f0:	b2a8      	uxth	r0, r5
    68f2:	f004 f921 	bl	ab38 <ll_apto_set>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    68f6:	2103      	movs	r1, #3
	status = ll_apto_set(handle, auth_payload_timeout);
    68f8:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    68fa:	a809      	add	r0, sp, #36	; 0x24
    68fc:	f7ff fe00 	bl	6500 <hci_cmd_complete>
	rp->status = status;
    6900:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    6902:	f8a0 5001 	strh.w	r5, [r0, #1]
    6906:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    6908:	e796      	b.n	6838 <hci_cmd_handle+0x12c>
	switch (ocf) {
    690a:	2b63      	cmp	r3, #99	; 0x63
    690c:	d191      	bne.n	6832 <hci_cmd_handle+0x126>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    690e:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    6910:	4b07      	ldr	r3, [pc, #28]	; (6930 <hci_cmd_handle+0x224>)
    6912:	6811      	ldr	r1, [r2, #0]
    6914:	6019      	str	r1, [r3, #0]
    6916:	6852      	ldr	r2, [r2, #4]
    6918:	605a      	str	r2, [r3, #4]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    691a:	2101      	movs	r1, #1
    691c:	a809      	add	r0, sp, #36	; 0x24
    691e:	f7ff fdef 	bl	6500 <hci_cmd_complete>
	ccst->status = 0x00;
    6922:	2300      	movs	r3, #0
    6924:	7003      	strb	r3, [r0, #0]
    6926:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    6928:	e786      	b.n	6838 <hci_cmd_handle+0x12c>
    692a:	bf00      	nop
    692c:	2000205c 	.word	0x2000205c
    6930:	20000560 	.word	0x20000560
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6934:	2141      	movs	r1, #65	; 0x41
    6936:	a809      	add	r0, sp, #36	; 0x24
    6938:	f7ff fde2 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    693c:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    693e:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    6940:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    6942:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    6946:	f00d fd13 	bl	14370 <memset>
	rp->commands[2] |= BIT(7);
    694a:	78e2      	ldrb	r2, [r4, #3]
	rp->commands[0] |= BIT(5);
    694c:	7863      	ldrb	r3, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    694e:	7be5      	ldrb	r5, [r4, #15]
	rp->commands[15] |= BIT(5);
    6950:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[22] |= BIT(2);
    6952:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[5] |= BIT(6) | BIT(7);
    6954:	f894 c006 	ldrb.w	ip, [r4, #6]
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
    6958:	7ae7      	ldrb	r7, [r4, #11]
	rp->commands[32] |= BIT(4) | BIT(5);
    695a:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[2] |= BIT(7);
    695e:	f062 027f 	orn	r2, r2, #127	; 0x7f
	rp->commands[0] |= BIT(5);
    6962:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[2] |= BIT(7);
    6966:	70e2      	strb	r2, [r4, #3]
	rp->commands[0] |= BIT(5);
    6968:	7063      	strb	r3, [r4, #1]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    696a:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    696c:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[14] |= BIT(3) | BIT(5);
    696e:	f045 0528 	orr.w	r5, r5, #40	; 0x28
	rp->commands[15] |= BIT(5);
    6972:	f040 0022 	orr.w	r0, r0, #34	; 0x22
	rp->commands[22] |= BIT(2);
    6976:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    697a:	f062 0208 	orn	r2, r2, #8
	rp->commands[28] |= BIT(1) | BIT(2);
    697e:	f043 030f 	orr.w	r3, r3, #15
	rp->commands[14] |= BIT(3) | BIT(5);
    6982:	73e5      	strb	r5, [r4, #15]
	rp->commands[33] |= BIT(4) | BIT(5);
    6984:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[15] |= BIT(5);
    6988:	7420      	strb	r0, [r4, #16]
	rp->commands[22] |= BIT(2);
    698a:	75e1      	strb	r1, [r4, #23]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    698c:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    6990:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    6994:	76a2      	strb	r2, [r4, #26]
	rp->commands[28] |= BIT(1) | BIT(2);
    6996:	7763      	strb	r3, [r4, #29]
	rp->commands[39] |= BIT(2);
    6998:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    699c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[33] |= BIT(6) | BIT(7);
    69a0:	f065 050f 	orn	r5, r5, #15
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    69a4:	f060 0006 	orn	r0, r0, #6
	rp->commands[33] |= BIT(6) | BIT(7);
    69a8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[5] |= BIT(6) | BIT(7);
    69ac:	f06c 0c3f 	orn	ip, ip, #63	; 0x3f
	rp->commands[26] |= BIT(4) | BIT(5);
    69b0:	25ff      	movs	r5, #255	; 0xff
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
    69b2:	f067 071b 	orn	r7, r7, #27
	rp->commands[32] |= BIT(4) | BIT(5);
    69b6:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    69ba:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
    69be:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
    69c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[5] |= BIT(6) | BIT(7);
    69c6:	f884 c006 	strb.w	ip, [r4, #6]
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
    69ca:	72e7      	strb	r7, [r4, #11]
	rp->commands[32] |= BIT(4) | BIT(5);
    69cc:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    69d0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    69d4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    69d8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    69dc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	rp->commands[26] |= BIT(4) | BIT(5);
    69e0:	76e5      	strb	r5, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    69e2:	7725      	strb	r5, [r4, #28]
	rp->commands[38] |= BIT(7);
    69e4:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    69e6:	e727      	b.n	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    69e8:	2109      	movs	r1, #9
    69ea:	a809      	add	r0, sp, #36	; 0x24
    69ec:	f7ff fd88 	bl	6500 <hci_cmd_complete>
    69f0:	4603      	mov	r3, r0
	rp->status = 0x00;
    69f2:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    69f4:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    69f6:	f04f 31ff 	mov.w	r1, #4294967295
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    69fa:	f06f 050e 	mvn.w	r5, #14
    69fe:	2405      	movs	r4, #5
	rp->status = 0x00;
    6a00:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    6a02:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    6a04:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    6a06:	715d      	strb	r5, [r3, #5]
    6a08:	9809      	ldr	r0, [sp, #36]	; 0x24
    6a0a:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    6a0c:	709a      	strb	r2, [r3, #2]
    6a0e:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    6a10:	71d9      	strb	r1, [r3, #7]
    6a12:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    6a14:	e710      	b.n	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6a16:	2107      	movs	r1, #7
    6a18:	a809      	add	r0, sp, #36	; 0x24
    6a1a:	f7ff fd71 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6a1e:	4601      	mov	r1, r0
    6a20:	2000      	movs	r0, #0
    6a22:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    6a26:	f7ff f9a9 	bl	5d7c <ll_addr_get>
    6a2a:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    6a2c:	e704      	b.n	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6a2e:	2109      	movs	r1, #9
    6a30:	a809      	add	r0, sp, #36	; 0x24
    6a32:	f7ff fd65 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6a36:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6a38:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    6a3a:	2208      	movs	r2, #8
	rp->status = 0x00;
    6a3c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    6a40:	f00d fc96 	bl	14370 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    6a44:	2360      	movs	r3, #96	; 0x60
    6a46:	9809      	ldr	r0, [sp, #36]	; 0x24
    6a48:	7163      	strb	r3, [r4, #5]
}
    6a4a:	e6f5      	b.n	6838 <hci_cmd_handle+0x12c>
	if (hci_hbuf_total <= 0) {
    6a4c:	4bad      	ldr	r3, [pc, #692]	; (6d04 <hci_cmd_handle+0x5f8>)
    6a4e:	681b      	ldr	r3, [r3, #0]
    6a50:	2b00      	cmp	r3, #0
    6a52:	f340 831e 	ble.w	7092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
	} else if (!conn_count) {
    6a56:	4bac      	ldr	r3, [pc, #688]	; (6d08 <hci_cmd_handle+0x5fc>)
    6a58:	681b      	ldr	r3, [r3, #0]
    6a5a:	b1e3      	cbz	r3, 6a96 <hci_cmd_handle+0x38a>
		host_num_completed_packets(cmd, evt);
    6a5c:	68a6      	ldr	r6, [r4, #8]
	for (i = 0; i < cmd->num_handles; i++) {
    6a5e:	7837      	ldrb	r7, [r6, #0]
	u32_t count = 0U;
    6a60:	463c      	mov	r4, r7
	for (i = 0; i < cmd->num_handles; i++) {
    6a62:	2f00      	cmp	r7, #0
    6a64:	f000 8332 	beq.w	70cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
	u32_t count = 0U;
    6a68:	2400      	movs	r4, #0
		    (c > hci_hbuf_pend[h])) {
    6a6a:	48a8      	ldr	r0, [pc, #672]	; (6d0c <hci_cmd_handle+0x600>)
	for (i = 0; i < cmd->num_handles; i++) {
    6a6c:	4622      	mov	r2, r4
    6a6e:	e008      	b.n	6a82 <hci_cmd_handle+0x376>
		    (c > hci_hbuf_pend[h])) {
    6a70:	8801      	ldrh	r1, [r0, #0]
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    6a72:	428b      	cmp	r3, r1
		hci_hbuf_pend[h] -= c;
    6a74:	eba1 0503 	sub.w	r5, r1, r3
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    6a78:	d80d      	bhi.n	6a96 <hci_cmd_handle+0x38a>
	for (i = 0; i < cmd->num_handles; i++) {
    6a7a:	42ba      	cmp	r2, r7
		hci_hbuf_pend[h] -= c;
    6a7c:	8005      	strh	r5, [r0, #0]
	for (i = 0; i < cmd->num_handles; i++) {
    6a7e:	f000 8325 	beq.w	70cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
		hci_hbuf_pend[h] -= c;
    6a82:	eb06 0382 	add.w	r3, r6, r2, lsl #2
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    6a86:	3201      	adds	r2, #1
    6a88:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		u16_t c = sys_le16_to_cpu(cmd->h[i].count);
    6a8c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
		count += c;
    6a90:	441c      	add	r4, r3
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    6a92:	2900      	cmp	r1, #0
    6a94:	d0ec      	beq.n	6a70 <hci_cmd_handle+0x364>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6a96:	2101      	movs	r1, #1
    6a98:	a809      	add	r0, sp, #36	; 0x24
    6a9a:	f7ff fd31 	bl	6500 <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    6a9e:	2312      	movs	r3, #18
    6aa0:	7003      	strb	r3, [r0, #0]
		return;
    6aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
    6aa4:	e6c8      	b.n	6838 <hci_cmd_handle+0x12c>
		host_buffer_size(cmd, evt);
    6aa6:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6aa8:	2101      	movs	r1, #1
    6aaa:	a809      	add	r0, sp, #36	; 0x24
	u16_t acl_pkts = sys_le16_to_cpu(cmd->acl_pkts);
    6aac:	f8b3 4003 	ldrh.w	r4, [r3, #3]
	u16_t acl_mtu = sys_le16_to_cpu(cmd->acl_mtu);
    6ab0:	881d      	ldrh	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6ab2:	f7ff fd25 	bl	6500 <hci_cmd_complete>
	if (hci_hbuf_total) {
    6ab6:	4b93      	ldr	r3, [pc, #588]	; (6d04 <hci_cmd_handle+0x5f8>)
    6ab8:	681a      	ldr	r2, [r3, #0]
    6aba:	2a00      	cmp	r2, #0
    6abc:	f040 82ed 	bne.w	709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
	if (acl_mtu < LL_LENGTH_OCTETS_RX_MAX) {
    6ac0:	2d1a      	cmp	r5, #26
    6ac2:	d9ec      	bls.n	6a9e <hci_cmd_handle+0x392>
	hci_hbuf_total = -acl_pkts;
    6ac4:	4264      	negs	r4, r4
    6ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ac8:	601c      	str	r4, [r3, #0]
    6aca:	e6b5      	b.n	6838 <hci_cmd_handle+0x12c>
	u8_t flow_enable = cmd->flow_enable;
    6acc:	68a3      	ldr	r3, [r4, #8]
	if (!hci_hbuf_total || conn_count) {
    6ace:	4c8d      	ldr	r4, [pc, #564]	; (6d04 <hci_cmd_handle+0x5f8>)
	u8_t flow_enable = cmd->flow_enable;
    6ad0:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6ad2:	2101      	movs	r1, #1
    6ad4:	a809      	add	r0, sp, #36	; 0x24
    6ad6:	f7ff fd13 	bl	6500 <hci_cmd_complete>
	if (!hci_hbuf_total || conn_count) {
    6ada:	6823      	ldr	r3, [r4, #0]
    6adc:	2b00      	cmp	r3, #0
    6ade:	f000 82dc 	beq.w	709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
    6ae2:	4a89      	ldr	r2, [pc, #548]	; (6d08 <hci_cmd_handle+0x5fc>)
    6ae4:	6812      	ldr	r2, [r2, #0]
    6ae6:	2a00      	cmp	r2, #0
    6ae8:	f040 82d7 	bne.w	709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
		ccst->status = 0x00;
    6aec:	7002      	strb	r2, [r0, #0]
	switch (flow_enable) {
    6aee:	2d00      	cmp	r5, #0
    6af0:	f000 82fd 	beq.w	70ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee>
    6af4:	2d01      	cmp	r5, #1
    6af6:	d1d2      	bne.n	6a9e <hci_cmd_handle+0x392>
		if (hci_hbuf_total > 0) {
    6af8:	2b00      	cmp	r3, #0
    6afa:	f73f aeb9 	bgt.w	6870 <hci_cmd_handle+0x164>
	hci_hbuf_sent = 0U;
    6afe:	4a84      	ldr	r2, [pc, #528]	; (6d10 <hci_cmd_handle+0x604>)
	hci_hbuf_acked = 0U;
    6b00:	4b84      	ldr	r3, [pc, #528]	; (6d14 <hci_cmd_handle+0x608>)
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    6b02:	4882      	ldr	r0, [pc, #520]	; (6d0c <hci_cmd_handle+0x600>)
	hci_hbuf_sent = 0U;
    6b04:	2100      	movs	r1, #0
    6b06:	6011      	str	r1, [r2, #0]
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    6b08:	2202      	movs	r2, #2
	hci_hbuf_acked = 0U;
    6b0a:	6019      	str	r1, [r3, #0]
	(void)memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    6b0c:	f00d fc30 	bl	14370 <memset>
	hci_hbuf_total = -hci_hbuf_total;
    6b10:	6823      	ldr	r3, [r4, #0]
    6b12:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b14:	425b      	negs	r3, r3
    6b16:	6023      	str	r3, [r4, #0]
    6b18:	e68e      	b.n	6838 <hci_cmd_handle+0x12c>
		read_tx_power_level(cmd, evt);
    6b1a:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6b1c:	2104      	movs	r1, #4
    6b1e:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
    6b20:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    6b22:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6b24:	f7ff fcec 	bl	6500 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    6b28:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6b2a:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    6b2c:	1cc3      	adds	r3, r0, #3
    6b2e:	4632      	mov	r2, r6
    6b30:	2002      	movs	r0, #2
    6b32:	f7ff f961 	bl	5df8 <ll_tx_pwr_lvl_get>
	rp->status = status;
    6b36:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    6b38:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b3a:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    6b3e:	e67b      	b.n	6838 <hci_cmd_handle+0x12c>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6b40:	2101      	movs	r1, #1
    6b42:	a809      	add	r0, sp, #36	; 0x24
    6b44:	f7ff fcdc 	bl	6500 <hci_cmd_complete>
    6b48:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    6b4a:	f007 f949 	bl	dde0 <ll_rl_clear>
    6b4e:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    6b50:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b52:	e671      	b.n	6838 <hci_cmd_handle+0x12c>
	status = ll_rl_remove(&cmd->peer_id_addr);
    6b54:	68a0      	ldr	r0, [r4, #8]
    6b56:	f007 fd37 	bl	e5c8 <ll_rl_remove>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    6b5a:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6b5c:	2101      	movs	r1, #1
    6b5e:	a809      	add	r0, sp, #36	; 0x24
    6b60:	f7ff fcce 	bl	6500 <hci_cmd_complete>
	ccst->status = status;
    6b64:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
    6b66:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b68:	e666      	b.n	6838 <hci_cmd_handle+0x12c>
		le_add_dev_to_rl(cmd, evt);
    6b6a:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    6b6c:	f100 0217 	add.w	r2, r0, #23
    6b70:	1dc1      	adds	r1, r0, #7
    6b72:	f007 fc6b 	bl	e44c <ll_rl_add>
    6b76:	e7f0      	b.n	6b5a <hci_cmd_handle+0x44e>
		le_write_default_data_len(cmd, evt);
    6b78:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    6b7a:	8859      	ldrh	r1, [r3, #2]
    6b7c:	8818      	ldrh	r0, [r3, #0]
    6b7e:	f003 ff17 	bl	a9b0 <ll_length_default_set>
    6b82:	e7ea      	b.n	6b5a <hci_cmd_handle+0x44e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6b84:	2105      	movs	r1, #5
    6b86:	a809      	add	r0, sp, #36	; 0x24
    6b88:	f7ff fcba 	bl	6500 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    6b8c:	a90a      	add	r1, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6b8e:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    6b90:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    6b94:	f003 ff00 	bl	a998 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    6b98:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    6b9c:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    6ba0:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    6ba2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    6ba6:	7022      	strb	r2, [r4, #0]
    6ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    6baa:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    6bae:	e643      	b.n	6838 <hci_cmd_handle+0x12c>
		le_set_data_len(cmd, evt);
    6bb0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6bb2:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    6bb4:	889a      	ldrh	r2, [r3, #4]
    6bb6:	8859      	ldrh	r1, [r3, #2]
    6bb8:	b2a8      	uxth	r0, r5
    6bba:	f003 fea3 	bl	a904 <ll_length_req_send>
    6bbe:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6bc0:	2103      	movs	r1, #3
    6bc2:	a809      	add	r0, sp, #36	; 0x24
    6bc4:	f7ff fc9c 	bl	6500 <hci_cmd_complete>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    6bc8:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    6bca:	f8a0 5001 	strh.w	r5, [r0, #1]
    6bce:	e64f      	b.n	6870 <hci_cmd_handle+0x164>
		le_set_privacy_mode(cmd, evt);
    6bd0:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    6bd2:	79c1      	ldrb	r1, [r0, #7]
    6bd4:	f007 fddc 	bl	e790 <ll_priv_mode_set>
    6bd8:	e7bf      	b.n	6b5a <hci_cmd_handle+0x44e>
    6bda:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    6bdc:	4b4e      	ldr	r3, [pc, #312]	; (6d18 <hci_cmd_handle+0x60c>)
    6bde:	6811      	ldr	r1, [r2, #0]
    6be0:	6852      	ldr	r2, [r2, #4]
    6be2:	6019      	str	r1, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6be4:	a809      	add	r0, sp, #36	; 0x24
    6be6:	2101      	movs	r1, #1
	le_event_mask = sys_get_le64(cmd->events);
    6be8:	605a      	str	r2, [r3, #4]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6bea:	f7ff fc89 	bl	6500 <hci_cmd_complete>
	ccst->status = 0x00;
    6bee:	2200      	movs	r2, #0
    6bf0:	7002      	strb	r2, [r0, #0]
	if (err == -EINVAL) {
    6bf2:	e63d      	b.n	6870 <hci_cmd_handle+0x164>
		le_set_adv_param(cmd, evt);
    6bf4:	68a4      	ldr	r4, [r4, #8]
	    (cmd->type != BT_HCI_ADV_DIRECT_IND)) {
    6bf6:	7921      	ldrb	r1, [r4, #4]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    6bf8:	8820      	ldrh	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CTLR_PARAM_CHECK) &&
    6bfa:	2901      	cmp	r1, #1
    6bfc:	d00a      	beq.n	6c14 <hci_cmd_handle+0x508>
		u16_t max_interval = sys_le16_to_cpu(cmd->max_interval);
    6bfe:	8863      	ldrh	r3, [r4, #2]
		if ((min_interval > max_interval) ||
    6c00:	4298      	cmp	r0, r3
    6c02:	f63f af48 	bhi.w	6a96 <hci_cmd_handle+0x38a>
    6c06:	281f      	cmp	r0, #31
    6c08:	f67f af45 	bls.w	6a96 <hci_cmd_handle+0x38a>
		    (min_interval < 0x0020) ||
    6c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6c10:	f63f af41 	bhi.w	6a96 <hci_cmd_handle+0x38a>
	status = ll_adv_params_set(min_interval, cmd->type,
    6c14:	7ba5      	ldrb	r5, [r4, #14]
    6c16:	79a3      	ldrb	r3, [r4, #6]
    6c18:	7962      	ldrb	r2, [r4, #5]
    6c1a:	9502      	str	r5, [sp, #8]
    6c1c:	7b65      	ldrb	r5, [r4, #13]
    6c1e:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    6c20:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    6c22:	9400      	str	r4, [sp, #0]
    6c24:	f002 fd74 	bl	9710 <ll_adv_params_set>
    6c28:	e797      	b.n	6b5a <hci_cmd_handle+0x44e>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    6c2a:	68a1      	ldr	r1, [r4, #8]
    6c2c:	2001      	movs	r0, #1
    6c2e:	f7ff f8c3 	bl	5db8 <ll_addr_set>
    6c32:	e792      	b.n	6b5a <hci_cmd_handle+0x44e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6c34:	2109      	movs	r1, #9
    6c36:	a809      	add	r0, sp, #36	; 0x24
    6c38:	f7ff fc62 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6c3c:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6c3e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    6c40:	2208      	movs	r2, #8
	rp->status = 0x00;
    6c42:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    6c46:	f00d fb93 	bl	14370 <memset>
	dst[0] = val;
    6c4a:	21ff      	movs	r1, #255	; 0xff
	dst[1] = val >> 8;
    6c4c:	2241      	movs	r2, #65	; 0x41
	dst[2] = val >> 16;
    6c4e:	2301      	movs	r3, #1
	dst[0] = val;
    6c50:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
    6c52:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
    6c54:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
    6c56:	e60b      	b.n	6870 <hci_cmd_handle+0x164>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6c58:	2104      	movs	r1, #4
    6c5a:	a809      	add	r0, sp, #36	; 0x24
    6c5c:	f7ff fc50 	bl	6500 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    6c60:	2107      	movs	r1, #7
	rp->status = 0x00;
    6c62:	2200      	movs	r2, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    6c64:	70c1      	strb	r1, [r0, #3]
	rp->status = 0x00;
    6c66:	7002      	strb	r2, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    6c68:	211b      	movs	r1, #27
    6c6a:	7041      	strb	r1, [r0, #1]
    6c6c:	7082      	strb	r2, [r0, #2]
	if (err == -EINVAL) {
    6c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    6c70:	e5e2      	b.n	6838 <hci_cmd_handle+0x12c>
	status = ll_connect_disable(node_rx);
    6c72:	4628      	mov	r0, r5
    6c74:	f006 fe52 	bl	d91c <ll_connect_disable>
    6c78:	e76f      	b.n	6b5a <hci_cmd_handle+0x44e>
		le_create_connection(cmd, evt);
    6c7a:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    6c7c:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    6c80:	8861      	ldrh	r1, [r4, #2]
    6c82:	7963      	ldrb	r3, [r4, #5]
    6c84:	7922      	ldrb	r2, [r4, #4]
    6c86:	8820      	ldrh	r0, [r4, #0]
    6c88:	9504      	str	r5, [sp, #16]
    6c8a:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    6c8e:	9503      	str	r5, [sp, #12]
    6c90:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    6c94:	9502      	str	r5, [sp, #8]
    6c96:	7b25      	ldrb	r5, [r4, #12]
    6c98:	9501      	str	r5, [sp, #4]
    6c9a:	3406      	adds	r4, #6
    6c9c:	9400      	str	r4, [sp, #0]
    6c9e:	f006 fbaf 	bl	d400 <ll_create_connection>
    6ca2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    6ca4:	8830      	ldrh	r0, [r6, #0]
    6ca6:	f7ff fc17 	bl	64d8 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    6caa:	e5c5      	b.n	6838 <hci_cmd_handle+0x12c>
		le_set_scan_enable(cmd, evt);
    6cac:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
    6cae:	7818      	ldrb	r0, [r3, #0]
    6cb0:	2800      	cmp	r0, #0
    6cb2:	f000 8217 	beq.w	70e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
    6cb6:	785b      	ldrb	r3, [r3, #1]
    6cb8:	2b00      	cmp	r3, #0
    6cba:	f000 8213 	beq.w	70e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
		dup_count = 0;
    6cbe:	4917      	ldr	r1, [pc, #92]	; (6d1c <hci_cmd_handle+0x610>)
		dup_curr = 0U;
    6cc0:	4a17      	ldr	r2, [pc, #92]	; (6d20 <hci_cmd_handle+0x614>)
		dup_count = 0;
    6cc2:	2300      	movs	r3, #0
    6cc4:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
    6cc6:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    6cc8:	f003 f828 	bl	9d1c <ll_scan_enable>
    6ccc:	e745      	b.n	6b5a <hci_cmd_handle+0x44e>
		le_set_scan_param(cmd, evt);
    6cce:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    6cd0:	7963      	ldrb	r3, [r4, #5]
    6cd2:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    6cd6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    6cda:	7820      	ldrb	r0, [r4, #0]
    6cdc:	79a4      	ldrb	r4, [r4, #6]
    6cde:	9400      	str	r4, [sp, #0]
    6ce0:	f7f9 fe7a 	bl	9d8 <ll_scan_params_set>
    6ce4:	e739      	b.n	6b5a <hci_cmd_handle+0x44e>
		le_set_default_phy(cmd, evt);
    6ce6:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    6ce8:	781a      	ldrb	r2, [r3, #0]
    6cea:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    6cec:	bf44      	itt	mi
    6cee:	2107      	movmi	r1, #7
    6cf0:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    6cf2:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    6cf4:	bf44      	itt	mi
    6cf6:	2207      	movmi	r2, #7
    6cf8:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    6cfa:	7899      	ldrb	r1, [r3, #2]
    6cfc:	7858      	ldrb	r0, [r3, #1]
    6cfe:	f003 fe89 	bl	aa14 <ll_phy_default_set>
    6d02:	e72a      	b.n	6b5a <hci_cmd_handle+0x44e>
    6d04:	20000930 	.word	0x20000930
    6d08:	20000894 	.word	0x20000894
    6d0c:	20000928 	.word	0x20000928
    6d10:	2000092c 	.word	0x2000092c
    6d14:	20000924 	.word	0x20000924
    6d18:	20000008 	.word	0x20000008
    6d1c:	20000898 	.word	0x20000898
    6d20:	2000089c 	.word	0x2000089c
		le_set_phy(cmd, evt);
    6d24:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    6d26:	7899      	ldrb	r1, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    6d28:	881d      	ldrh	r5, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    6d2a:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    6d2e:	07cf      	lsls	r7, r1, #31
    6d30:	d503      	bpl.n	6d3a <hci_cmd_handle+0x62e>
		cmd->tx_phys |= mask_phys;
    6d32:	78da      	ldrb	r2, [r3, #3]
    6d34:	f042 0203 	orr.w	r2, r2, #3
    6d38:	70da      	strb	r2, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    6d3a:	078a      	lsls	r2, r1, #30
    6d3c:	d503      	bpl.n	6d46 <hci_cmd_handle+0x63a>
		cmd->rx_phys |= mask_phys;
    6d3e:	791a      	ldrb	r2, [r3, #4]
    6d40:	f042 0203 	orr.w	r2, r2, #3
    6d44:	711a      	strb	r2, [r3, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    6d46:	78d9      	ldrb	r1, [r3, #3]
    6d48:	791b      	ldrb	r3, [r3, #4]
    6d4a:	ea41 0203 	orr.w	r2, r1, r3
    6d4e:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    6d52:	f040 81d6 	bne.w	7102 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x102>
	if (!(cmd->tx_phys & 0x07) ||
    6d56:	074f      	lsls	r7, r1, #29
    6d58:	f000 81ce 	beq.w	70f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
    6d5c:	075a      	lsls	r2, r3, #29
    6d5e:	f000 81cb 	beq.w	70f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>
	if (phy_opts & 0x03) {
    6d62:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    6d66:	bf1c      	itt	ne
    6d68:	f104 34ff 	addne.w	r4, r4, #4294967295
		phy_opts &= 1;
    6d6c:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    6d70:	4628      	mov	r0, r5
    6d72:	f003 fe59 	bl	aa28 <ll_phy_req_send>
    6d76:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    6d78:	8830      	ldrh	r0, [r6, #0]
    6d7a:	f7ff fbad 	bl	64d8 <bt_hci_cmd_status_create>
    6d7e:	e55b      	b.n	6838 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
    6d80:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6d82:	2108      	movs	r1, #8
    6d84:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
    6d86:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6d88:	f7ff fbba 	bl	6500 <hci_cmd_complete>
    6d8c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    6d8e:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    6d90:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    6d92:	f003 fd45 	bl	a820 <ll_chm_get>
	rp->status = status;
    6d96:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    6d98:	9809      	ldr	r0, [sp, #36]	; 0x24
    6d9a:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    6d9e:	e54b      	b.n	6838 <hci_cmd_handle+0x12c>
	status = ll_chm_update(&cmd->ch_map[0]);
    6da0:	68a0      	ldr	r0, [r4, #8]
    6da2:	f006 fe01 	bl	d9a8 <ll_chm_update>
    6da6:	e6d8      	b.n	6b5a <hci_cmd_handle+0x44e>
	handle = sys_le16_to_cpu(cmd->handle);
    6da8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6daa:	2105      	movs	r1, #5
    6dac:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
    6dae:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6db0:	f7ff fba6 	bl	6500 <hci_cmd_complete>
    6db4:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    6db6:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    6db8:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    6dba:	1ce1      	adds	r1, r4, #3
    6dbc:	f003 fe0c 	bl	a9d8 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    6dc0:	78e2      	ldrb	r2, [r4, #3]
    6dc2:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    6dc4:	7020      	strb	r0, [r4, #0]
    6dc6:	2a00      	cmp	r2, #0
    6dc8:	fa92 f2a2 	rbit	r2, r2
    6dcc:	fab2 f282 	clz	r2, r2
    6dd0:	bf08      	it	eq
    6dd2:	f04f 32ff 	moveq.w	r2, #4294967295
    6dd6:	2b00      	cmp	r3, #0
    6dd8:	fa93 f3a3 	rbit	r3, r3
    6ddc:	fab3 f383 	clz	r3, r3
    6de0:	f102 0201 	add.w	r2, r2, #1
    6de4:	bf08      	it	eq
    6de6:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    6dea:	70e2      	strb	r2, [r4, #3]
    6dec:	3301      	adds	r3, #1
    6dee:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    6df0:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    6df4:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    6df6:	e51f      	b.n	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6df8:	2109      	movs	r1, #9
    6dfa:	a809      	add	r0, sp, #36	; 0x24
    6dfc:	f7ff fb80 	bl	6500 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    6e00:	ab0a      	add	r3, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6e02:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    6e04:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    6e08:	f10d 001e 	add.w	r0, sp, #30
    6e0c:	a908      	add	r1, sp, #32
    6e0e:	f003 fdd9 	bl	a9c4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    6e12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    6e16:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    6e1a:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    6e1e:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    6e22:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    6e26:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    6e2a:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    6e2c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    6e30:	7022      	strb	r2, [r4, #0]
    6e32:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    6e34:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    6e38:	e4fe      	b.n	6838 <hci_cmd_handle+0x12c>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    6e3a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    6e3c:	8818      	ldrh	r0, [r3, #0]
    6e3e:	f007 f831 	bl	dea4 <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6e42:	2101      	movs	r1, #1
    6e44:	a809      	add	r0, sp, #36	; 0x24
    6e46:	e6d0      	b.n	6bea <hci_cmd_handle+0x4de>
	u8_t enable = cmd->enable;
    6e48:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6e4a:	2101      	movs	r1, #1
    6e4c:	a809      	add	r0, sp, #36	; 0x24
	u8_t enable = cmd->enable;
    6e4e:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6e50:	f7ff fb56 	bl	6500 <hci_cmd_complete>
    6e54:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    6e56:	4628      	mov	r0, r5
    6e58:	f007 f808 	bl	de6c <ll_rl_enable>
    6e5c:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    6e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    6e60:	e4ea      	b.n	6838 <hci_cmd_handle+0x12c>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6e62:	68a1      	ldr	r1, [r4, #8]
    6e64:	2207      	movs	r2, #7
    6e66:	a80a      	add	r0, sp, #40	; 0x28
    6e68:	f00d fa57 	bl	1431a <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6e6c:	2107      	movs	r1, #7
    6e6e:	a809      	add	r0, sp, #36	; 0x24
    6e70:	f7ff fb46 	bl	6500 <hci_cmd_complete>
    6e74:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    6e76:	1c61      	adds	r1, r4, #1
    6e78:	a80a      	add	r0, sp, #40	; 0x28
    6e7a:	f007 fc6d 	bl	e758 <ll_rl_lrpa_get>
    6e7e:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    6e80:	9809      	ldr	r0, [sp, #36]	; 0x24
    6e82:	e4d9      	b.n	6838 <hci_cmd_handle+0x12c>
    6e84:	68a1      	ldr	r1, [r4, #8]
    6e86:	2207      	movs	r2, #7
    6e88:	a80a      	add	r0, sp, #40	; 0x28
    6e8a:	f00d fa46 	bl	1431a <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6e8e:	2107      	movs	r1, #7
    6e90:	a809      	add	r0, sp, #36	; 0x24
    6e92:	f7ff fb35 	bl	6500 <hci_cmd_complete>
    6e96:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    6e98:	1c61      	adds	r1, r4, #1
    6e9a:	a80a      	add	r0, sp, #40	; 0x28
    6e9c:	f007 fc3a 	bl	e714 <ll_rl_crpa_get>
    6ea0:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    6ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ea4:	e4c8      	b.n	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6ea6:	2102      	movs	r1, #2
    6ea8:	a809      	add	r0, sp, #36	; 0x24
    6eaa:	f7ff fb29 	bl	6500 <hci_cmd_complete>
    6eae:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    6eb0:	f006 ff94 	bl	dddc <ll_rl_size_get>
	rp->status = 0x00;
    6eb4:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    6eb6:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    6eb8:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    6eba:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ebc:	e4bc      	b.n	6838 <hci_cmd_handle+0x12c>
	status = ll_wl_remove(&cmd->addr);
    6ebe:	68a0      	ldr	r0, [r4, #8]
    6ec0:	f006 ff0e 	bl	dce0 <ll_wl_remove>
    6ec4:	e649      	b.n	6b5a <hci_cmd_handle+0x44e>
	status = ll_wl_add(&cmd->addr);
    6ec6:	68a0      	ldr	r0, [r4, #8]
    6ec8:	f007 fa5e 	bl	e388 <ll_wl_add>
    6ecc:	e645      	b.n	6b5a <hci_cmd_handle+0x44e>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    6ece:	2101      	movs	r1, #1
    6ed0:	a809      	add	r0, sp, #36	; 0x24
    6ed2:	f7ff fb15 	bl	6500 <hci_cmd_complete>
    6ed6:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    6ed8:	f006 fed4 	bl	dc84 <ll_wl_clear>
    6edc:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    6ede:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ee0:	e4aa      	b.n	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6ee2:	2102      	movs	r1, #2
    6ee4:	a809      	add	r0, sp, #36	; 0x24
    6ee6:	f7ff fb0b 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6eea:	2300      	movs	r3, #0
    6eec:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6eee:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    6ef0:	f006 fec6 	bl	dc80 <ll_wl_size_get>
    6ef4:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    6ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ef8:	e49e      	b.n	6838 <hci_cmd_handle+0x12c>
	status = ll_adv_enable(cmd->enable);
    6efa:	68a3      	ldr	r3, [r4, #8]
    6efc:	7818      	ldrb	r0, [r3, #0]
    6efe:	f7f9 fa6b 	bl	3d8 <ll_adv_enable>
    6f02:	e62a      	b.n	6b5a <hci_cmd_handle+0x44e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    6f04:	68a1      	ldr	r1, [r4, #8]
    6f06:	f811 0b01 	ldrb.w	r0, [r1], #1
    6f0a:	f002 fce7 	bl	98dc <ll_adv_scan_rsp_set>
    6f0e:	e624      	b.n	6b5a <hci_cmd_handle+0x44e>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    6f10:	68a1      	ldr	r1, [r4, #8]
    6f12:	f811 0b01 	ldrb.w	r0, [r1], #1
    6f16:	f002 fc99 	bl	984c <ll_adv_data_set>
    6f1a:	e61e      	b.n	6b5a <hci_cmd_handle+0x44e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6f1c:	2102      	movs	r1, #2
    6f1e:	a809      	add	r0, sp, #36	; 0x24
    6f20:	f7ff faee 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6f24:	2200      	movs	r2, #0
    6f26:	7002      	strb	r2, [r0, #0]
	rp->tx_power_level = 0;
    6f28:	7042      	strb	r2, [r0, #1]
	if (err == -EINVAL) {
    6f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f2c:	e484      	b.n	6838 <hci_cmd_handle+0x12c>
		le_conn_param_req_neg_reply(cmd, evt);
    6f2e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6f30:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    6f32:	789a      	ldrb	r2, [r3, #2]
    6f34:	2300      	movs	r3, #0
    6f36:	e9cd 3301 	strd	r3, r3, [sp, #4]
    6f3a:	b2a8      	uxth	r0, r5
    6f3c:	9300      	str	r3, [sp, #0]
    6f3e:	2102      	movs	r1, #2
    6f40:	f003 fbea 	bl	a718 <ll_conn_update>
    6f44:	e63b      	b.n	6bbe <hci_cmd_handle+0x4b2>
		le_conn_param_req_reply(cmd, evt);
    6f46:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    6f48:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6f4a:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    6f4c:	8853      	ldrh	r3, [r2, #2]
    6f4e:	9102      	str	r1, [sp, #8]
    6f50:	88d1      	ldrh	r1, [r2, #6]
    6f52:	9101      	str	r1, [sp, #4]
    6f54:	8892      	ldrh	r2, [r2, #4]
    6f56:	9200      	str	r2, [sp, #0]
    6f58:	b2a8      	uxth	r0, r5
    6f5a:	2200      	movs	r2, #0
    6f5c:	2102      	movs	r1, #2
    6f5e:	f003 fbdb 	bl	a718 <ll_conn_update>
    6f62:	e62c      	b.n	6bbe <hci_cmd_handle+0x4b2>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6f64:	2109      	movs	r1, #9
    6f66:	a809      	add	r0, sp, #36	; 0x24
    6f68:	f7ff faca 	bl	6500 <hci_cmd_complete>
    6f6c:	4603      	mov	r3, r0
	dst[0] = val;
    6f6e:	22ff      	movs	r2, #255	; 0xff
	rp->status = 0x00;
    6f70:	2100      	movs	r1, #0
    6f72:	203f      	movs	r0, #63	; 0x3f
    6f74:	70d8      	strb	r0, [r3, #3]
    6f76:	7019      	strb	r1, [r3, #0]
	dst[1] = val >> 8;
    6f78:	2003      	movs	r0, #3
	dst[0] = val;
    6f7a:	705a      	strb	r2, [r3, #1]
	dst[1] = val >> 8;
    6f7c:	709a      	strb	r2, [r3, #2]
    6f7e:	7198      	strb	r0, [r3, #6]
	dst[0] = val;
    6f80:	71d9      	strb	r1, [r3, #7]
    6f82:	9809      	ldr	r0, [sp, #36]	; 0x24
	dst[1] = val >> 8;
    6f84:	7219      	strb	r1, [r3, #8]
    6f86:	711a      	strb	r2, [r3, #4]
	dst[0] = val;
    6f88:	715a      	strb	r2, [r3, #5]
	if (err == -EINVAL) {
    6f8a:	e455      	b.n	6838 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
    6f8c:	68a3      	ldr	r3, [r4, #8]
    6f8e:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    6f90:	2200      	movs	r2, #0
    6f92:	b2a8      	uxth	r0, r5
    6f94:	2106      	movs	r1, #6
    6f96:	f006 f973 	bl	d280 <ll_start_enc_req_send>
    6f9a:	e610      	b.n	6bbe <hci_cmd_handle+0x4b2>
	handle = sys_le16_to_cpu(cmd->handle);
    6f9c:	68a2      	ldr	r2, [r4, #8]
    6f9e:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    6fa2:	2100      	movs	r1, #0
    6fa4:	b2a8      	uxth	r0, r5
    6fa6:	f006 f96b 	bl	d280 <ll_start_enc_req_send>
    6faa:	e608      	b.n	6bbe <hci_cmd_handle+0x4b2>
		le_start_encryption(cmd, evt);
    6fac:	68a2      	ldr	r2, [r4, #8]
				 (u8_t *)&cmd->rand,
    6fae:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
    6fb0:	f102 030c 	add.w	r3, r2, #12
    6fb4:	f831 0b02 	ldrh.w	r0, [r1], #2
    6fb8:	320a      	adds	r2, #10
    6fba:	f006 fd1f 	bl	d9fc <ll_enc_req_send>
    6fbe:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    6fc0:	8830      	ldrh	r0, [r6, #0]
    6fc2:	f7ff fa89 	bl	64d8 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    6fc6:	e437      	b.n	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6fc8:	2109      	movs	r1, #9
    6fca:	a809      	add	r0, sp, #36	; 0x24
    6fcc:	f7ff fa98 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6fd0:	2300      	movs	r3, #0
    6fd2:	f800 3b01 	strb.w	r3, [r0], #1
	lll_trng_get(rp->rand, count);
    6fd6:	2108      	movs	r1, #8
    6fd8:	f008 f826 	bl	f028 <lll_trng_get>
	if (err == -EINVAL) {
    6fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
    6fde:	e42b      	b.n	6838 <hci_cmd_handle+0x12c>
		le_encrypt(cmd, evt);
    6fe0:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    6fe2:	aa0a      	add	r2, sp, #40	; 0x28
    6fe4:	f100 0110 	add.w	r1, r0, #16
    6fe8:	2300      	movs	r3, #0
    6fea:	f00a f87d 	bl	110e8 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    6fee:	2111      	movs	r1, #17
    6ff0:	a809      	add	r0, sp, #36	; 0x24
    6ff2:	f7ff fa85 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    6ff6:	2300      	movs	r3, #0
    6ff8:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    6ffc:	a90a      	add	r1, sp, #40	; 0x28
    6ffe:	2210      	movs	r2, #16
    7000:	f00d f98b 	bl	1431a <memcpy>
	if (err == -EINVAL) {
    7004:	9809      	ldr	r0, [sp, #36]	; 0x24
    7006:	e417      	b.n	6838 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
    7008:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    700a:	8818      	ldrh	r0, [r3, #0]
    700c:	f003 fc42 	bl	a894 <ll_feature_req_send>
    7010:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    7012:	8830      	ldrh	r0, [r6, #0]
    7014:	f7ff fa60 	bl	64d8 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    7018:	e40e      	b.n	6838 <hci_cmd_handle+0x12c>
		le_conn_update(cmd, evt);
    701a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    701c:	8911      	ldrh	r1, [r2, #8]
    701e:	8853      	ldrh	r3, [r2, #2]
    7020:	8810      	ldrh	r0, [r2, #0]
    7022:	9102      	str	r1, [sp, #8]
    7024:	88d1      	ldrh	r1, [r2, #6]
    7026:	9101      	str	r1, [sp, #4]
    7028:	8892      	ldrh	r2, [r2, #4]
    702a:	9200      	str	r2, [sp, #0]
    702c:	2200      	movs	r2, #0
    702e:	4611      	mov	r1, r2
    7030:	f003 fb72 	bl	a718 <ll_conn_update>
    7034:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    7036:	8830      	ldrh	r0, [r6, #0]
    7038:	f7ff fa4e 	bl	64d8 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    703c:	f7ff bbfc 	b.w	6838 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    7040:	2103      	movs	r1, #3
    7042:	a809      	add	r0, sp, #36	; 0x24
    7044:	f7ff fa5c 	bl	6500 <hci_cmd_complete>
	rp->status = 0x00;
    7048:	4601      	mov	r1, r0
    704a:	2300      	movs	r3, #0
    704c:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    7050:	3001      	adds	r0, #1
    7052:	f7fe fee1 	bl	5e18 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    7056:	e40b      	b.n	6870 <hci_cmd_handle+0x164>
	rp->rssi = (!rp->status) ? -rp->rssi : 127;
    7058:	237f      	movs	r3, #127	; 0x7f
	dst[2] = val >> 16;
    705a:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
    705c:	e408      	b.n	6870 <hci_cmd_handle+0x164>
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    705e:	68a1      	ldr	r1, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    7060:	4a2a      	ldr	r2, [pc, #168]	; (710c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    7062:	6808      	ldr	r0, [r1, #0]
    7064:	684c      	ldr	r4, [r1, #4]
    7066:	6010      	str	r0, [r2, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    7068:	4619      	mov	r1, r3
    706a:	a809      	add	r0, sp, #36	; 0x24
	event_mask = sys_get_le64(cmd->events);
    706c:	6054      	str	r4, [r2, #4]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    706e:	f7ff fa47 	bl	6500 <hci_cmd_complete>
	ccst->status = 0x00;
    7072:	2300      	movs	r3, #0
    7074:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
    7076:	9809      	ldr	r0, [sp, #36]	; 0x24
    7078:	f7ff bbde 	b.w	6838 <hci_cmd_handle+0x12c>
		disconnect(cmd, evt);
    707c:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    707e:	7899      	ldrb	r1, [r3, #2]
    7080:	8818      	ldrh	r0, [r3, #0]
    7082:	f003 fbed 	bl	a860 <ll_terminate_ind_send>
    7086:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    7088:	8830      	ldrh	r0, [r6, #0]
    708a:	f7ff fa25 	bl	64d8 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    708e:	f7ff bbd3 	b.w	6838 <hci_cmd_handle+0x12c>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
    7092:	2101      	movs	r1, #1
    7094:	a809      	add	r0, sp, #36	; 0x24
    7096:	f7ff fa33 	bl	6500 <hci_cmd_complete>
		ccst->status = BT_HCI_ERR_CMD_DISALLOWED;
    709a:	230c      	movs	r3, #12
    709c:	7003      	strb	r3, [r0, #0]
		return;
    709e:	f7ff bbe7 	b.w	6870 <hci_cmd_handle+0x164>
	handle = sys_le16_to_cpu(cmd->handle);
    70a2:	68a3      	ldr	r3, [r4, #8]
    70a4:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    70a6:	a90a      	add	r1, sp, #40	; 0x28
    70a8:	b2a8      	uxth	r0, r5
    70aa:	f003 fd21 	bl	aaf0 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    70ae:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    70b0:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    70b2:	a809      	add	r0, sp, #36	; 0x24
    70b4:	f7ff fa24 	bl	6500 <hci_cmd_complete>
	rp->status = status;
    70b8:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    70ba:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    70be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    70c2:	f8a0 3003 	strh.w	r3, [r0, #3]
    70c6:	9809      	ldr	r0, [sp, #36]	; 0x24
}
    70c8:	f7ff bbb6 	b.w	6838 <hci_cmd_handle+0x12c>
	hci_hbuf_acked += count;
    70cc:	4a10      	ldr	r2, [pc, #64]	; (7110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
	k_poll_signal_raise(hbuf_signal, 0x0);
    70ce:	4911      	ldr	r1, [pc, #68]	; (7114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
	hci_hbuf_acked += count;
    70d0:	6813      	ldr	r3, [r2, #0]
	k_poll_signal_raise(hbuf_signal, 0x0);
    70d2:	6808      	ldr	r0, [r1, #0]
	hci_hbuf_acked += count;
    70d4:	4423      	add	r3, r4
    70d6:	6013      	str	r3, [r2, #0]
    70d8:	2100      	movs	r1, #0
    70da:	f00c fda7 	bl	13c2c <z_impl_k_poll_signal_raise>
    70de:	9809      	ldr	r0, [sp, #36]	; 0x24
    70e0:	f7ff bbaa 	b.w	6838 <hci_cmd_handle+0x12c>
		dup_count = -1;
    70e4:	4b0c      	ldr	r3, [pc, #48]	; (7118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    70e6:	f04f 32ff 	mov.w	r2, #4294967295
    70ea:	601a      	str	r2, [r3, #0]
    70ec:	e5ec      	b.n	6cc8 <hci_cmd_handle+0x5bc>
		if (hci_hbuf_total < 0) {
    70ee:	2b00      	cmp	r3, #0
    70f0:	f6bf ad05 	bge.w	6afe <hci_cmd_handle+0x3f2>
    70f4:	f7ff bbbc 	b.w	6870 <hci_cmd_handle+0x164>
	return bt_hci_cmd_status_create(_opcode, status);
    70f8:	2112      	movs	r1, #18
    70fa:	f7ff f9ed 	bl	64d8 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    70fe:	f7ff bb9b 	b.w	6838 <hci_cmd_handle+0x12c>
	return bt_hci_cmd_status_create(_opcode, status);
    7102:	2111      	movs	r1, #17
    7104:	f7ff f9e8 	bl	64d8 <bt_hci_cmd_status_create>
		return;
    7108:	f7ff bb96 	b.w	6838 <hci_cmd_handle+0x12c>
    710c:	20000000 	.word	0x20000000
    7110:	20000924 	.word	0x20000924
    7114:	20000920 	.word	0x20000920
    7118:	20000898 	.word	0x20000898

0000711c <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    711c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    711e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    7120:	2b03      	cmp	r3, #3
	*evt = NULL;
    7122:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    7124:	d941      	bls.n	71aa <hci_acl_handle+0x8e>
{
    7126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    712a:	4605      	mov	r5, r0
    712c:	460e      	mov	r6, r1
	acl = net_buf_pull_mem(buf, sizeof(*acl));
    712e:	3008      	adds	r0, #8
    7130:	2104      	movs	r1, #4
    7132:	f00d f9eb 	bl	1450c <net_buf_simple_pull_mem>
	if (buf->len < len) {
    7136:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    7138:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    713a:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    713e:	42bb      	cmp	r3, r7
    7140:	d30a      	bcc.n	7158 <hci_acl_handle+0x3c>
	node_tx = ll_tx_mem_acquire();
    7142:	f003 fa6f 	bl	a624 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    7146:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    714a:	4604      	mov	r4, r0
    714c:	b318      	cbz	r0, 7196 <hci_acl_handle+0x7a>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    714e:	089a      	lsrs	r2, r3, #2
    7150:	d102      	bne.n	7158 <hci_acl_handle+0x3c>
	switch (bt_acl_flags_pb(flags)) {
    7152:	b1d3      	cbz	r3, 718a <hci_acl_handle+0x6e>
    7154:	2b01      	cmp	r3, #1
    7156:	d003      	beq.n	7160 <hci_acl_handle+0x44>
		return -EINVAL;
    7158:	f06f 0015 	mvn.w	r0, #21
}
    715c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7160:	7902      	ldrb	r2, [r0, #4]
    7162:	f363 0201 	bfi	r2, r3, #0, #2
    7166:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    7168:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    716a:	68a9      	ldr	r1, [r5, #8]
    716c:	463a      	mov	r2, r7
    716e:	1de0      	adds	r0, r4, #7
    7170:	f00d f8d3 	bl	1431a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    7174:	4621      	mov	r1, r4
    7176:	f3c8 000b 	ubfx	r0, r8, #0, #12
    717a:	f003 fa5f 	bl	a63c <ll_tx_mem_enqueue>
    717e:	2800      	cmp	r0, #0
    7180:	d0ec      	beq.n	715c <hci_acl_handle+0x40>
		ll_tx_mem_release(node_tx);
    7182:	4620      	mov	r0, r4
    7184:	f003 fa54 	bl	a630 <ll_tx_mem_release>
    7188:	e7e6      	b.n	7158 <hci_acl_handle+0x3c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    718a:	7903      	ldrb	r3, [r0, #4]
    718c:	2202      	movs	r2, #2
    718e:	f362 0301 	bfi	r3, r2, #0, #2
    7192:	7103      	strb	r3, [r0, #4]
		break;
    7194:	e7e8      	b.n	7168 <hci_acl_handle+0x4c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    7196:	4b13      	ldr	r3, [pc, #76]	; (71e4 <hci_acl_handle+0xc8>)
    7198:	6819      	ldr	r1, [r3, #0]
    719a:	4603      	mov	r3, r0
    719c:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    71a0:	4313      	orrs	r3, r2
    71a2:	d105      	bne.n	71b0 <hci_acl_handle+0x94>
		return -ENOBUFS;
    71a4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    71a8:	e7d8      	b.n	715c <hci_acl_handle+0x40>
		return -EINVAL;
    71aa:	f06f 0015 	mvn.w	r0, #21
}
    71ae:	4770      	bx	lr
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    71b0:	f04f 33ff 	mov.w	r3, #4294967295
    71b4:	f04f 32ff 	mov.w	r2, #4294967295
    71b8:	2001      	movs	r0, #1
    71ba:	f7fd f99b 	bl	44f4 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    71be:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    71c0:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
    71c2:	3008      	adds	r0, #8
    71c4:	f00d f982 	bl	144cc <net_buf_simple_add>
	hdr->len = len;
    71c8:	2401      	movs	r4, #1
	hdr->evt = evt;
    71ca:	221a      	movs	r2, #26
    71cc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    71ce:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
    71d0:	6830      	ldr	r0, [r6, #0]
    71d2:	4621      	mov	r1, r4
    71d4:	3008      	adds	r0, #8
    71d6:	f00d f979 	bl	144cc <net_buf_simple_add>
    71da:	4603      	mov	r3, r0
		return -ENOBUFS;
    71dc:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    71e0:	701c      	strb	r4, [r3, #0]
    71e2:	e7bb      	b.n	715c <hci_acl_handle+0x40>
    71e4:	20000000 	.word	0x20000000

000071e8 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    71e8:	4b07      	ldr	r3, [pc, #28]	; (7208 <hci_disconn_complete_encode+0x20>)
    71ea:	681b      	ldr	r3, [r3, #0]
{
    71ec:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    71ee:	f003 0410 	and.w	r4, r3, #16
    71f2:	2500      	movs	r5, #0
    71f4:	ea54 0305 	orrs.w	r3, r4, r5
    71f8:	d101      	bne.n	71fe <hci_disconn_complete_encode+0x16>
}
    71fa:	bc30      	pop	{r4, r5}
    71fc:	4770      	bx	lr
    71fe:	4608      	mov	r0, r1
    7200:	bc30      	pop	{r4, r5}
    7202:	4611      	mov	r1, r2
    7204:	f7ff b92a 	b.w	645c <hci_disconn_complete_encode.part.0>
    7208:	20000000 	.word	0x20000000

0000720c <hci_disconn_complete_process>:
{
    720c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    720e:	4604      	mov	r4, r0
    7210:	b970      	cbnz	r0, 7230 <hci_disconn_complete_process+0x24>
	hci_hbuf_acked += hci_hbuf_pend[handle];
    7212:	4d0e      	ldr	r5, [pc, #56]	; (724c <hci_disconn_complete_process+0x40>)
    7214:	480e      	ldr	r0, [pc, #56]	; (7250 <hci_disconn_complete_process+0x44>)
	conn_count--;
    7216:	490f      	ldr	r1, [pc, #60]	; (7254 <hci_disconn_complete_process+0x48>)
	hci_hbuf_acked += hci_hbuf_pend[handle];
    7218:	682e      	ldr	r6, [r5, #0]
    721a:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
	conn_count--;
    721e:	680b      	ldr	r3, [r1, #0]
	hci_hbuf_acked += hci_hbuf_pend[handle];
    7220:	4432      	add	r2, r6
	conn_count--;
    7222:	3b01      	subs	r3, #1
	hci_hbuf_acked += hci_hbuf_pend[handle];
    7224:	602a      	str	r2, [r5, #0]
	hci_hbuf_pend[handle] = 0U;
    7226:	2200      	movs	r2, #0
    7228:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
	conn_count--;
    722c:	600b      	str	r3, [r1, #0]
}
    722e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    7230:	4a09      	ldr	r2, [pc, #36]	; (7258 <hci_disconn_complete_process+0x4c>)
    7232:	490a      	ldr	r1, [pc, #40]	; (725c <hci_disconn_complete_process+0x50>)
    7234:	480a      	ldr	r0, [pc, #40]	; (7260 <hci_disconn_complete_process+0x54>)
    7236:	f640 3372 	movw	r3, #2930	; 0xb72
    723a:	f00c fd5b 	bl	13cf4 <printk>
    723e:	4040      	eors	r0, r0
    7240:	f380 8811 	msr	BASEPRI, r0
    7244:	f04f 0003 	mov.w	r0, #3
    7248:	df02      	svc	2
    724a:	e7e2      	b.n	7212 <hci_disconn_complete_process+0x6>
    724c:	20000924 	.word	0x20000924
    7250:	20000928 	.word	0x20000928
    7254:	20000894 	.word	0x20000894
    7258:	00015318 	.word	0x00015318
    725c:	00015354 	.word	0x00015354
    7260:	0001525c 	.word	0x0001525c

00007264 <hci_acl_encode>:
	u16_t handle;
	u8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    7264:	f890 3020 	ldrb.w	r3, [r0, #32]
    7268:	f003 0303 	and.w	r3, r3, #3
    726c:	3b01      	subs	r3, #1
    726e:	2b01      	cmp	r3, #1
{
    7270:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    7272:	d90d      	bls.n	7290 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    7274:	4a2f      	ldr	r2, [pc, #188]	; (7334 <hci_acl_encode+0xd0>)
    7276:	4930      	ldr	r1, [pc, #192]	; (7338 <hci_acl_encode+0xd4>)
    7278:	4830      	ldr	r0, [pc, #192]	; (733c <hci_acl_encode+0xd8>)
    727a:	f640 5361 	movw	r3, #3425	; 0xd61
    727e:	f00c fd39 	bl	13cf4 <printk>
    7282:	4040      	eors	r0, r0
    7284:	f380 8811 	msr	BASEPRI, r0
    7288:	f04f 0003 	mov.w	r0, #3
    728c:	df02      	svc	2
		break;
	}
}
    728e:	bd70      	pop	{r4, r5, r6, pc}
    7290:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    7292:	f101 0508 	add.w	r5, r1, #8
    7296:	4628      	mov	r0, r5
    7298:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    729a:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    729c:	f00d f916 	bl	144cc <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    72a0:	f894 3020 	ldrb.w	r3, [r4, #32]
    72a4:	f003 0303 	and.w	r3, r3, #3
    72a8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    72aa:	bf0c      	ite	eq
    72ac:	f446 5300 	orreq.w	r3, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    72b0:	f446 5380 	orrne.w	r3, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    72b4:	8003      	strh	r3, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    72b6:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    72ba:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    72bc:	4628      	mov	r0, r5
    72be:	f00d f905 	bl	144cc <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    72c2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    72c6:	f104 0123 	add.w	r1, r4, #35	; 0x23
    72ca:	f00d f826 	bl	1431a <memcpy>
		if (hci_hbuf_total > 0) {
    72ce:	4b1c      	ldr	r3, [pc, #112]	; (7340 <hci_acl_encode+0xdc>)
    72d0:	681a      	ldr	r2, [r3, #0]
    72d2:	2a00      	cmp	r2, #0
    72d4:	dddb      	ble.n	728e <hci_acl_encode+0x2a>
			LL_ASSERT((hci_hbuf_sent - hci_hbuf_acked) <
    72d6:	4c1b      	ldr	r4, [pc, #108]	; (7344 <hci_acl_encode+0xe0>)
    72d8:	491b      	ldr	r1, [pc, #108]	; (7348 <hci_acl_encode+0xe4>)
    72da:	6823      	ldr	r3, [r4, #0]
    72dc:	6809      	ldr	r1, [r1, #0]
    72de:	1a59      	subs	r1, r3, r1
    72e0:	4291      	cmp	r1, r2
    72e2:	d217      	bcs.n	7314 <hci_acl_encode+0xb0>
			hci_hbuf_sent++;
    72e4:	3301      	adds	r3, #1
    72e6:	6023      	str	r3, [r4, #0]
			LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    72e8:	b936      	cbnz	r6, 72f8 <hci_acl_encode+0x94>
			hci_hbuf_pend[handle]++;
    72ea:	4a18      	ldr	r2, [pc, #96]	; (734c <hci_acl_encode+0xe8>)
    72ec:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
    72f0:	3301      	adds	r3, #1
    72f2:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
}
    72f6:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    72f8:	4a0e      	ldr	r2, [pc, #56]	; (7334 <hci_acl_encode+0xd0>)
    72fa:	4915      	ldr	r1, [pc, #84]	; (7350 <hci_acl_encode+0xec>)
    72fc:	480f      	ldr	r0, [pc, #60]	; (733c <hci_acl_encode+0xd8>)
    72fe:	f640 535a 	movw	r3, #3418	; 0xd5a
    7302:	f00c fcf7 	bl	13cf4 <printk>
    7306:	4040      	eors	r0, r0
    7308:	f380 8811 	msr	BASEPRI, r0
    730c:	f04f 0003 	mov.w	r0, #3
    7310:	df02      	svc	2
    7312:	e7ea      	b.n	72ea <hci_acl_encode+0x86>
			LL_ASSERT((hci_hbuf_sent - hci_hbuf_acked) <
    7314:	4a07      	ldr	r2, [pc, #28]	; (7334 <hci_acl_encode+0xd0>)
    7316:	490f      	ldr	r1, [pc, #60]	; (7354 <hci_acl_encode+0xf0>)
    7318:	4808      	ldr	r0, [pc, #32]	; (733c <hci_acl_encode+0xd8>)
    731a:	f640 5354 	movw	r3, #3412	; 0xd54
    731e:	f00c fce9 	bl	13cf4 <printk>
    7322:	4040      	eors	r0, r0
    7324:	f380 8811 	msr	BASEPRI, r0
    7328:	f04f 0003 	mov.w	r0, #3
    732c:	df02      	svc	2
    732e:	6823      	ldr	r3, [r4, #0]
    7330:	e7d8      	b.n	72e4 <hci_acl_encode+0x80>
    7332:	bf00      	nop
    7334:	00015318 	.word	0x00015318
    7338:	000152dc 	.word	0x000152dc
    733c:	0001525c 	.word	0x0001525c
    7340:	20000930 	.word	0x20000930
    7344:	2000092c 	.word	0x2000092c
    7348:	20000924 	.word	0x20000924
    734c:	20000928 	.word	0x20000928
    7350:	00015354 	.word	0x00015354
    7354:	00015420 	.word	0x00015420

00007358 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    7358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = PDU_DATA(node_rx);

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    735c:	7905      	ldrb	r5, [r0, #4]
    735e:	2d02      	cmp	r5, #2
{
    7360:	b089      	sub	sp, #36	; 0x24
    7362:	4604      	mov	r4, r0
    7364:	460e      	mov	r6, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7366:	d010      	beq.n	738a <hci_evt_encode+0x32>
	handle = node_rx->hdr.handle;
    7368:	3d04      	subs	r5, #4
    736a:	88c7      	ldrh	r7, [r0, #6]
	switch (node_rx->hdr.type) {
    736c:	2d0a      	cmp	r5, #10
    736e:	d828      	bhi.n	73c2 <hci_evt_encode+0x6a>
    7370:	e8df f015 	tbh	[pc, r5, lsl #1]
    7374:	00270037 	.word	0x00270037
    7378:	00270027 	.word	0x00270027
    737c:	0199014d 	.word	0x0199014d
    7380:	01e501c0 	.word	0x01e501c0
    7384:	0132011b 	.word	0x0132011b
    7388:	00e7      	.short	0x00e7
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
    738a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    738e:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->llctrl.opcode) {
    7390:	3b03      	subs	r3, #3
    7392:	2b12      	cmp	r3, #18
    7394:	f200 81ed 	bhi.w	7772 <hci_evt_encode+0x41a>
    7398:	e8df f013 	tbh	[pc, r3, lsl #1]
    739c:	01eb020e 	.word	0x01eb020e
    73a0:	029201eb 	.word	0x029201eb
    73a4:	01eb029e 	.word	0x01eb029e
    73a8:	01eb0236 	.word	0x01eb0236
    73ac:	024001eb 	.word	0x024001eb
    73b0:	01eb0263 	.word	0x01eb0263
    73b4:	01eb0274 	.word	0x01eb0274
    73b8:	01eb01eb 	.word	0x01eb01eb
    73bc:	01ee01eb 	.word	0x01ee01eb
    73c0:	01ee      	.short	0x01ee
		LL_ASSERT(0);
    73c2:	f640 436c 	movw	r3, #3180	; 0xc6c
		LL_ASSERT(0);
    73c6:	4abf      	ldr	r2, [pc, #764]	; (76c4 <hci_evt_encode+0x36c>)
    73c8:	49bf      	ldr	r1, [pc, #764]	; (76c8 <hci_evt_encode+0x370>)
    73ca:	48c0      	ldr	r0, [pc, #768]	; (76cc <hci_evt_encode+0x374>)
    73cc:	f00c fc92 	bl	13cf4 <printk>
    73d0:	4040      	eors	r0, r0
    73d2:	f380 8811 	msr	BASEPRI, r0
    73d6:	f04f 0003 	mov.w	r0, #3
    73da:	df02      	svc	2
	}
}
    73dc:	b009      	add	sp, #36	; 0x24
    73de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    73e2:	4abb      	ldr	r2, [pc, #748]	; (76d0 <hci_evt_encode+0x378>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    73e4:	7f03      	ldrb	r3, [r0, #28]
	if (adv->tx_addr) {
    73e6:	f890 5020 	ldrb.w	r5, [r0, #32]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
    73ea:	f890 901e 	ldrb.w	r9, [r0, #30]
	direct = node_rx->hdr.rx_ftr.direct;
    73ee:	f894 801f 	ldrb.w	r8, [r4, #31]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    73f2:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    73f6:	425b      	negs	r3, r3
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    73f8:	0c0a      	lsrs	r2, r1, #16
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    73fa:	b25b      	sxtb	r3, r3
	if (adv->tx_addr) {
    73fc:	066f      	lsls	r7, r5, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    73fe:	9006      	str	r0, [sp, #24]
    7400:	f8ad 101c 	strh.w	r1, [sp, #28]
    7404:	f88d 201e 	strb.w	r2, [sp, #30]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    7408:	9305      	str	r3, [sp, #20]
	if (adv->tx_addr) {
    740a:	f100 826f 	bmi.w	78ec <hci_evt_encode+0x594>
	if (direct) {
    740e:	f1b8 0f00 	cmp.w	r8, #0
    7412:	f040 829b 	bne.w	794c <hci_evt_encode+0x5f4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7416:	49af      	ldr	r1, [pc, #700]	; (76d4 <hci_evt_encode+0x37c>)
    7418:	6849      	ldr	r1, [r1, #4]
    741a:	4642      	mov	r2, r8
    741c:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    7420:	4313      	orrs	r3, r2
    7422:	d0db      	beq.n	73dc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    7424:	4bac      	ldr	r3, [pc, #688]	; (76d8 <hci_evt_encode+0x380>)
    7426:	6819      	ldr	r1, [r3, #0]
    7428:	4643      	mov	r3, r8
    742a:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    742e:	4313      	orrs	r3, r2
    7430:	d0d4      	beq.n	73dc <hci_evt_encode+0x84>
	if (dup_count >= 0) {
    7432:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 76f0 <hci_evt_encode+0x398>
    7436:	f8da 2000 	ldr.w	r2, [sl]
    743a:	2a00      	cmp	r2, #0
    743c:	db47      	blt.n	74ce <hci_evt_encode+0x176>
		for (i = 0; i < dup_count; i++) {
    743e:	bf08      	it	eq
    7440:	f104 0b22 	addeq.w	fp, r4, #34	; 0x22
    7444:	d019      	beq.n	747a <hci_evt_encode+0x122>
    7446:	4da5      	ldr	r5, [pc, #660]	; (76dc <hci_evt_encode+0x384>)
    7448:	f104 0b22 	add.w	fp, r4, #34	; 0x22
    744c:	4647      	mov	r7, r8
			if (!memcmp(&adv->adv_ind.addr[0],
    744e:	2206      	movs	r2, #6
    7450:	4629      	mov	r1, r5
    7452:	4658      	mov	r0, fp
    7454:	f00c ff51 	bl	142fa <memcmp>
    7458:	b940      	cbnz	r0, 746c <hci_evt_encode+0x114>
			    adv->tx_addr == dup_filter[i].addr.type) {
    745a:	f894 2020 	ldrb.w	r2, [r4, #32]
    745e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    7462:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
    7466:	4288      	cmp	r0, r1
    7468:	f000 8350 	beq.w	7b0c <hci_evt_encode+0x7b4>
		for (i = 0; i < dup_count; i++) {
    746c:	f8da 2000 	ldr.w	r2, [sl]
    7470:	3701      	adds	r7, #1
    7472:	4297      	cmp	r7, r2
    7474:	f105 0508 	add.w	r5, r5, #8
    7478:	dbe9      	blt.n	744e <hci_evt_encode+0xf6>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    747a:	4d99      	ldr	r5, [pc, #612]	; (76e0 <hci_evt_encode+0x388>)
    747c:	4f99      	ldr	r7, [pc, #612]	; (76e4 <hci_evt_encode+0x38c>)
    747e:	682a      	ldr	r2, [r5, #0]
    7480:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
    7484:	4659      	mov	r1, fp
    7486:	1c90      	adds	r0, r2, #2
    7488:	2206      	movs	r2, #6
    748a:	f00c ff46 	bl	1431a <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    748e:	682a      	ldr	r2, [r5, #0]
    7490:	f894 1020 	ldrb.w	r1, [r4, #32]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7494:	f8da 3000 	ldr.w	r3, [sl]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    7498:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
    749c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    74a0:	7041      	strb	r1, [r0, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    74a2:	f894 0020 	ldrb.w	r0, [r4, #32]
    74a6:	2101      	movs	r1, #1
    74a8:	f000 000f 	and.w	r0, r0, #15
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    74ac:	2b0f      	cmp	r3, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
    74ae:	fa01 f100 	lsl.w	r1, r1, r0
    74b2:	f807 1032 	strb.w	r1, [r7, r2, lsl #3]
			dup_count++;
    74b6:	bfdb      	ittet	le
    74b8:	1c59      	addle	r1, r3, #1
			dup_curr = dup_count;
    74ba:	460a      	movle	r2, r1
			dup_curr++;
    74bc:	3201      	addgt	r2, #1
			dup_count++;
    74be:	f8ca 1000 	strle.w	r1, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    74c2:	2a10      	cmp	r2, #16
			dup_curr = 0U;
    74c4:	bf08      	it	eq
    74c6:	2300      	moveq	r3, #0
			dup_curr++;
    74c8:	602a      	str	r2, [r5, #0]
			dup_curr = 0U;
    74ca:	bf08      	it	eq
    74cc:	602b      	streq	r3, [r5, #0]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    74ce:	f894 3020 	ldrb.w	r3, [r4, #32]
    74d2:	f003 030f 	and.w	r3, r3, #15
    74d6:	2b01      	cmp	r3, #1
    74d8:	f000 8315 	beq.w	7b06 <hci_evt_encode+0x7ae>
		data_len = (adv->len - BDADDR_SIZE);
    74dc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    74e0:	f1a3 0806 	sub.w	r8, r3, #6
    74e4:	fa5f f888 	uxtb.w	r8, r8
    74e8:	3305      	adds	r3, #5
    74ea:	b2da      	uxtb	r2, r3
    74ec:	4647      	mov	r7, r8
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    74ee:	2102      	movs	r1, #2
    74f0:	4630      	mov	r0, r6
    74f2:	f7fe ff4b 	bl	638c <meta_evt>
	sep->num_reports = 1U;
    74f6:	2301      	movs	r3, #1
    74f8:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    74fa:	f894 3020 	ldrb.w	r3, [r4, #32]
    74fe:	aa08      	add	r2, sp, #32
    7500:	f003 030f 	and.w	r3, r3, #15
    7504:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    7506:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    7508:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    750c:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    750e:	f006 fc65 	bl	dddc <ll_rl_size_get>
    7512:	4581      	cmp	r9, r0
    7514:	f080 82eb 	bcs.w	7aee <hci_evt_encode+0x796>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    7518:	4648      	mov	r0, r9
    751a:	1cea      	adds	r2, r5, #3
    751c:	1ca9      	adds	r1, r5, #2
    751e:	f006 fc19 	bl	dd54 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    7522:	78ab      	ldrb	r3, [r5, #2]
    7524:	3302      	adds	r3, #2
    7526:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    7528:	f105 060a 	add.w	r6, r5, #10
	adv_info->length = data_len;
    752c:	f885 8009 	strb.w	r8, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    7530:	f104 0128 	add.w	r1, r4, #40	; 0x28
    7534:	4630      	mov	r0, r6
    7536:	463a      	mov	r2, r7
    7538:	f00c feef 	bl	1431a <memcpy>
	*prssi = rssi;
    753c:	9b05      	ldr	r3, [sp, #20]
    753e:	55f3      	strb	r3, [r6, r7]
    7540:	e74c      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7542:	4b64      	ldr	r3, [pc, #400]	; (76d4 <hci_evt_encode+0x37c>)
    7544:	6858      	ldr	r0, [r3, #4]
    7546:	2100      	movs	r1, #0
    7548:	460a      	mov	r2, r1
    754a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    754e:	4313      	orrs	r3, r2
    7550:	f43f af44 	beq.w	73dc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    7554:	4b60      	ldr	r3, [pc, #384]	; (76d8 <hci_evt_encode+0x380>)
    7556:	6818      	ldr	r0, [r3, #0]
    7558:	460b      	mov	r3, r1
    755a:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    755e:	4313      	orrs	r3, r2
    7560:	f43f af3c 	beq.w	73dc <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    7564:	2205      	movs	r2, #5
    7566:	4630      	mov	r0, r6
    7568:	210c      	movs	r1, #12
    756a:	f7fe ff0f 	bl	638c <meta_evt>
	sep->status = pu->status;
    756e:	f894 3020 	ldrb.w	r3, [r4, #32]
    7572:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    7574:	f8a0 7001 	strh.w	r7, [r0, #1]
    7578:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    757c:	2a00      	cmp	r2, #0
    757e:	fa92 f3a2 	rbit	r3, r2
    7582:	fab3 f383 	clz	r3, r3
    7586:	bf08      	it	eq
    7588:	f04f 33ff 	moveq.w	r3, #4294967295
    758c:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    758e:	70c3      	strb	r3, [r0, #3]
    7590:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    7594:	fa92 f3a2 	rbit	r3, r2
    7598:	2a00      	cmp	r2, #0
    759a:	fab3 f383 	clz	r3, r3
    759e:	bf08      	it	eq
    75a0:	f04f 33ff 	moveq.w	r3, #4294967295
    75a4:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    75a6:	7103      	strb	r3, [r0, #4]
    75a8:	e718      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    75aa:	4b4f      	ldr	r3, [pc, #316]	; (76e8 <hci_evt_encode+0x390>)
    75ac:	6819      	ldr	r1, [r3, #0]
    75ae:	2300      	movs	r3, #0
    75b0:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    75b4:	4313      	orrs	r3, r2
    75b6:	f43f af11 	beq.w	73dc <hci_evt_encode+0x84>
	hdr = net_buf_add(buf, sizeof(*hdr));
    75ba:	3608      	adds	r6, #8
    75bc:	2102      	movs	r1, #2
    75be:	4630      	mov	r0, r6
    75c0:	f00c ff84 	bl	144cc <net_buf_simple_add>
    75c4:	4603      	mov	r3, r0
	hdr->evt = evt;
    75c6:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    75c8:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
    75ca:	4630      	mov	r0, r6
	hdr->evt = evt;
    75cc:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    75ce:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    75d0:	f00c ff7c 	bl	144cc <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    75d4:	8007      	strh	r7, [r0, #0]
    75d6:	e701      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    75d8:	4b3e      	ldr	r3, [pc, #248]	; (76d4 <hci_evt_encode+0x37c>)
    75da:	6858      	ldr	r0, [r3, #4]
    75dc:	2100      	movs	r1, #0
    75de:	460a      	mov	r2, r1
    75e0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    75e4:	4313      	orrs	r3, r2
    75e6:	f43f aef9 	beq.w	73dc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    75ea:	4b3b      	ldr	r3, [pc, #236]	; (76d8 <hci_evt_encode+0x380>)
    75ec:	6818      	ldr	r0, [r3, #0]
    75ee:	460b      	mov	r3, r1
    75f0:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    75f4:	4313      	orrs	r3, r2
    75f6:	f43f aef1 	beq.w	73dc <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    75fa:	4630      	mov	r0, r6
    75fc:	2203      	movs	r2, #3
    75fe:	2114      	movs	r1, #20
    7600:	f7fe fec4 	bl	638c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    7604:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    7606:	f894 3020 	ldrb.w	r3, [r4, #32]
    760a:	7083      	strb	r3, [r0, #2]
    760c:	e6e6      	b.n	73dc <hci_evt_encode+0x84>
	u8_t status = node_rx->status;
    760e:	f890 5020 	ldrb.w	r5, [r0, #32]
	if (!status) {
    7612:	2d00      	cmp	r5, #0
    7614:	f000 8172 	beq.w	78fc <hci_evt_encode+0x5a4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7618:	4b2e      	ldr	r3, [pc, #184]	; (76d4 <hci_evt_encode+0x37c>)
    761a:	6859      	ldr	r1, [r3, #4]
    761c:	f04f 0800 	mov.w	r8, #0
    7620:	4642      	mov	r2, r8
    7622:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    7626:	4313      	orrs	r3, r2
    7628:	f43f aed8 	beq.w	73dc <hci_evt_encode+0x84>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    762c:	4b2a      	ldr	r3, [pc, #168]	; (76d8 <hci_evt_encode+0x380>)
    762e:	f8d3 c000 	ldr.w	ip, [r3]
    7632:	f240 2101 	movw	r1, #513	; 0x201
    7636:	ea0c 0201 	and.w	r2, ip, r1
    763a:	4643      	mov	r3, r8
    763c:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    763e:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    7642:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    7644:	f43f aeca 	beq.w	73dc <hci_evt_encode+0x84>
	if (!status) {
    7648:	2d00      	cmp	r5, #0
    764a:	f040 816b 	bne.w	7924 <hci_evt_encode+0x5cc>
		conn_count++;
    764e:	4a27      	ldr	r2, [pc, #156]	; (76ec <hci_evt_encode+0x394>)
    7650:	6813      	ldr	r3, [r2, #0]
    7652:	3301      	adds	r3, #1
    7654:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    7656:	ea50 0301 	orrs.w	r3, r0, r1
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    765a:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    765c:	f040 820c 	bne.w	7a78 <hci_evt_encode+0x720>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    7660:	2212      	movs	r2, #18
    7662:	2101      	movs	r1, #1
    7664:	f7fe fe92 	bl	638c <meta_evt>
    7668:	4606      	mov	r6, r0
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
    766a:	2206      	movs	r2, #6
	lecc->status = 0x00;
    766c:	7035      	strb	r5, [r6, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    766e:	f8a6 7001 	strh.w	r7, [r6, #1]
	lecc->role = node_rx->role;
    7672:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    7676:	70f3      	strb	r3, [r6, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
    7678:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    767c:	f003 0301 	and.w	r3, r3, #1
    7680:	7133      	strb	r3, [r6, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
    7682:	f104 0123 	add.w	r1, r4, #35	; 0x23
    7686:	3005      	adds	r0, #5
    7688:	f00c fe47 	bl	1431a <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    768c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
    768e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
    7690:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    7692:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
    7696:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    769a:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
    769e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    76a2:	7473      	strb	r3, [r6, #17]
    76a4:	e69a      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    76a6:	4b0b      	ldr	r3, [pc, #44]	; (76d4 <hci_evt_encode+0x37c>)
    76a8:	6819      	ldr	r1, [r3, #0]
    76aa:	2300      	movs	r3, #0
    76ac:	f001 0210 	and.w	r2, r1, #16
    76b0:	4313      	orrs	r3, r2
    76b2:	f43f ae93 	beq.w	73dc <hci_evt_encode+0x84>
    76b6:	4631      	mov	r1, r6
    76b8:	4638      	mov	r0, r7
}
    76ba:	b009      	add	sp, #36	; 0x24
    76bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76c0:	f7fe becc 	b.w	645c <hci_disconn_complete_encode.part.0>
    76c4:	00015318 	.word	0x00015318
    76c8:	000152dc 	.word	0x000152dc
    76cc:	0001525c 	.word	0x0001525c
    76d0:	000151a0 	.word	0x000151a0
    76d4:	20000000 	.word	0x20000000
    76d8:	20000008 	.word	0x20000008
    76dc:	200008a2 	.word	0x200008a2
    76e0:	2000089c 	.word	0x2000089c
    76e4:	200008a0 	.word	0x200008a0
    76e8:	20000560 	.word	0x20000560
    76ec:	20000894 	.word	0x20000894
    76f0:	20000898 	.word	0x20000898
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    76f4:	4b93      	ldr	r3, [pc, #588]	; (7944 <hci_evt_encode+0x5ec>)
    76f6:	6858      	ldr	r0, [r3, #4]
    76f8:	2100      	movs	r1, #0
    76fa:	460a      	mov	r2, r1
    76fc:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    7700:	4313      	orrs	r3, r2
    7702:	f43f ae6b 	beq.w	73dc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    7706:	4b90      	ldr	r3, [pc, #576]	; (7948 <hci_evt_encode+0x5f0>)
    7708:	6818      	ldr	r0, [r3, #0]
    770a:	460b      	mov	r3, r1
    770c:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7710:	4313      	orrs	r3, r2
    7712:	f43f ae63 	beq.w	73dc <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    7716:	2209      	movs	r2, #9
    7718:	2103      	movs	r1, #3
    771a:	4630      	mov	r0, r6
    771c:	f7fe fe36 	bl	638c <meta_evt>
	sep->status = cu->status;
    7720:	f894 3020 	ldrb.w	r3, [r4, #32]
    7724:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    7726:	8c61      	ldrh	r1, [r4, #34]	; 0x22
	sep->latency = sys_cpu_to_le16(cu->latency);
    7728:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    772a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    772c:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    7730:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    7734:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    7738:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    773c:	e64e      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    773e:	4b81      	ldr	r3, [pc, #516]	; (7944 <hci_evt_encode+0x5ec>)
    7740:	6859      	ldr	r1, [r3, #4]
    7742:	2400      	movs	r4, #0
    7744:	4622      	mov	r2, r4
    7746:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    774a:	4313      	orrs	r3, r2
    774c:	f43f ae46 	beq.w	73dc <hci_evt_encode+0x84>
	hdr = net_buf_add(buf, sizeof(*hdr));
    7750:	3608      	adds	r6, #8
    7752:	2102      	movs	r1, #2
    7754:	4630      	mov	r0, r6
    7756:	f00c feb9 	bl	144cc <net_buf_simple_add>
    775a:	4603      	mov	r3, r0
	hdr->evt = evt;
    775c:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    775e:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
    7760:	4630      	mov	r0, r6
	hdr->evt = evt;
    7762:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    7764:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    7766:	f00c feb1 	bl	144cc <net_buf_simple_add>
	ep->status = 0x00;
    776a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    776c:	f8a0 7001 	strh.w	r7, [r0, #1]
    7770:	e634      	b.n	73dc <hci_evt_encode+0x84>
		LL_ASSERT(0);
    7772:	f640 5335 	movw	r3, #3381	; 0xd35
    7776:	e626      	b.n	73c6 <hci_evt_encode+0x6e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7778:	4b72      	ldr	r3, [pc, #456]	; (7944 <hci_evt_encode+0x5ec>)
    777a:	6858      	ldr	r0, [r3, #4]
    777c:	2100      	movs	r1, #0
    777e:	460a      	mov	r2, r1
    7780:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    7784:	4313      	orrs	r3, r2
    7786:	f43f ae29 	beq.w	73dc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    778a:	4b6f      	ldr	r3, [pc, #444]	; (7948 <hci_evt_encode+0x5f0>)
    778c:	6818      	ldr	r0, [r3, #0]
    778e:	460b      	mov	r3, r1
    7790:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7794:	4313      	orrs	r3, r2
    7796:	f43f ae21 	beq.w	73dc <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    779a:	4630      	mov	r0, r6
    779c:	220a      	movs	r2, #10
    779e:	2107      	movs	r1, #7
    77a0:	f7fe fdf4 	bl	638c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    77a4:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    77a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    77a8:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    77aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    77ac:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    77ae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    77b0:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    77b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    77b4:	8103      	strh	r3, [r0, #8]
    77b6:	e611      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    77b8:	4b62      	ldr	r3, [pc, #392]	; (7944 <hci_evt_encode+0x5ec>)
    77ba:	6858      	ldr	r0, [r3, #4]
    77bc:	2100      	movs	r1, #0
    77be:	460a      	mov	r2, r1
    77c0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    77c4:	4313      	orrs	r3, r2
    77c6:	f43f ae09 	beq.w	73dc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    77ca:	4b5f      	ldr	r3, [pc, #380]	; (7948 <hci_evt_encode+0x5f0>)
    77cc:	6818      	ldr	r0, [r3, #0]
    77ce:	460b      	mov	r3, r1
    77d0:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    77d4:	4313      	orrs	r3, r2
    77d6:	f43f ae01 	beq.w	73dc <hci_evt_encode+0x84>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    77da:	4630      	mov	r0, r6
    77dc:	220c      	movs	r2, #12
    77de:	2105      	movs	r1, #5
    77e0:	f7fe fdd4 	bl	638c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    77e4:	f104 0124 	add.w	r1, r4, #36	; 0x24
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    77e8:	4606      	mov	r6, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    77ea:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    77ec:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    77f0:	f00c fd93 	bl	1431a <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    77f4:	f106 000a 	add.w	r0, r6, #10
    77f8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    77fc:	2202      	movs	r2, #2
}
    77fe:	b009      	add	sp, #36	; 0x24
    7800:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    7804:	f00c bd89 	b.w	1431a <memcpy>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    7808:	460b      	mov	r3, r1
    780a:	462a      	mov	r2, r5
    780c:	f100 0120 	add.w	r1, r0, #32
    7810:	2000      	movs	r0, #0
}
    7812:	b009      	add	sp, #36	; 0x24
    7814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    7818:	f7fe bdd0 	b.w	63bc <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    781c:	4b49      	ldr	r3, [pc, #292]	; (7944 <hci_evt_encode+0x5ec>)
    781e:	6819      	ldr	r1, [r3, #0]
    7820:	2700      	movs	r7, #0
    7822:	f401 6200 	and.w	r2, r1, #2048	; 0x800
    7826:	463b      	mov	r3, r7
    7828:	4313      	orrs	r3, r2
    782a:	f43f add7 	beq.w	73dc <hci_evt_encode+0x84>
	hdr = net_buf_add(buf, sizeof(*hdr));
    782e:	3608      	adds	r6, #8
    7830:	2102      	movs	r1, #2
    7832:	4630      	mov	r0, r6
    7834:	f00c fe4a 	bl	144cc <net_buf_simple_add>
    7838:	4603      	mov	r3, r0
	hdr->evt = evt;
    783a:	220c      	movs	r2, #12
	hdr->len = len;
    783c:	2108      	movs	r1, #8
	hdr->evt = evt;
    783e:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    7840:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    7842:	4630      	mov	r0, r6
    7844:	f00c fe42 	bl	144cc <net_buf_simple_add>
	ep->status = 0x00;
    7848:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    784a:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->version = ver_ind->version_number;
    784e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    7852:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = ver_ind->company_id;
    7854:	f8b4 3025 	ldrh.w	r3, [r4, #37]	; 0x25
    7858:	8083      	strh	r3, [r0, #4]
	ep->subversion = ver_ind->sub_version_number;
    785a:	f8b4 3027 	ldrh.w	r3, [r4, #39]	; 0x27
    785e:	80c3      	strh	r3, [r0, #6]
    7860:	e5bc      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    7862:	4b38      	ldr	r3, [pc, #224]	; (7944 <hci_evt_encode+0x5ec>)
    7864:	6819      	ldr	r1, [r3, #0]
    7866:	2300      	movs	r3, #0
    7868:	f001 0280 	and.w	r2, r1, #128	; 0x80
    786c:	4313      	orrs	r3, r2
    786e:	f43f adb5 	beq.w	73dc <hci_evt_encode+0x84>
    7872:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    7876:	4632      	mov	r2, r6
    7878:	4629      	mov	r1, r5
}
    787a:	b009      	add	sp, #36	; 0x24
    787c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7880:	f7fe bdd2 	b.w	6428 <encrypt_change.part.0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7884:	4b2f      	ldr	r3, [pc, #188]	; (7944 <hci_evt_encode+0x5ec>)
    7886:	6858      	ldr	r0, [r3, #4]
    7888:	2100      	movs	r1, #0
    788a:	460a      	mov	r2, r1
    788c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    7890:	4313      	orrs	r3, r2
    7892:	d03d      	beq.n	7910 <hci_evt_encode+0x5b8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    7894:	4b2c      	ldr	r3, [pc, #176]	; (7948 <hci_evt_encode+0x5f0>)
    7896:	6818      	ldr	r0, [r3, #0]
    7898:	460b      	mov	r3, r1
    789a:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    789e:	4313      	orrs	r3, r2
    78a0:	d036      	beq.n	7910 <hci_evt_encode+0x5b8>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    78a2:	4630      	mov	r0, r6
    78a4:	220a      	movs	r2, #10
    78a6:	2106      	movs	r1, #6
    78a8:	f7fe fd70 	bl	638c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    78ac:	8005      	strh	r5, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    78ae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    78b0:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    78b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    78b4:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    78b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    78b8:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    78ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    78bc:	8103      	strh	r3, [r0, #8]
    78be:	e58d      	b.n	73dc <hci_evt_encode+0x84>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    78c0:	4b20      	ldr	r3, [pc, #128]	; (7944 <hci_evt_encode+0x5ec>)
    78c2:	6819      	ldr	r1, [r3, #0]
    78c4:	2000      	movs	r0, #0
    78c6:	f001 0280 	and.w	r2, r1, #128	; 0x80
    78ca:	4603      	mov	r3, r0
    78cc:	4313      	orrs	r3, r2
    78ce:	f43f ad85 	beq.w	73dc <hci_evt_encode+0x84>
    78d2:	4632      	mov	r2, r6
    78d4:	4629      	mov	r1, r5
    78d6:	e7d0      	b.n	787a <hci_evt_encode+0x522>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    78d8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    78dc:	2b0e      	cmp	r3, #14
    78de:	f47f ad7d 	bne.w	73dc <hci_evt_encode+0x84>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    78e2:	460b      	mov	r3, r1
    78e4:	462a      	mov	r2, r5
    78e6:	2100      	movs	r1, #0
    78e8:	201a      	movs	r0, #26
    78ea:	e792      	b.n	7812 <hci_evt_encode+0x4ba>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    78ec:	2100      	movs	r1, #0
    78ee:	4608      	mov	r0, r1
    78f0:	f104 0322 	add.w	r3, r4, #34	; 0x22
    78f4:	464a      	mov	r2, r9
    78f6:	f006 fee9 	bl	e6cc <ll_rl_crpa_set>
    78fa:	e588      	b.n	740e <hci_evt_encode+0xb6>
		ll_rl_crpa_set(node_rx->peer_addr_type,
    78fc:	f100 0329 	add.w	r3, r0, #41	; 0x29
    7900:	f100 0123 	add.w	r1, r0, #35	; 0x23
    7904:	22ff      	movs	r2, #255	; 0xff
    7906:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    790a:	f006 fedf 	bl	e6cc <ll_rl_crpa_set>
    790e:	e683      	b.n	7618 <hci_evt_encode+0x2c0>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    7910:	2300      	movs	r3, #0
    7912:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7916:	4628      	mov	r0, r5
    7918:	9300      	str	r3, [sp, #0]
    791a:	221a      	movs	r2, #26
    791c:	2102      	movs	r1, #2
    791e:	f002 fefb 	bl	a718 <ll_conn_update>
		return;
    7922:	e55b      	b.n	73dc <hci_evt_encode+0x84>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    7924:	ea50 0301 	orrs.w	r3, r0, r1
    7928:	f040 80d5 	bne.w	7ad6 <hci_evt_encode+0x77e>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    792c:	2212      	movs	r2, #18
    792e:	2101      	movs	r1, #1
    7930:	4630      	mov	r0, r6
    7932:	f7fe fd2b 	bl	638c <meta_evt>
    7936:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    7938:	4641      	mov	r1, r8
    793a:	2212      	movs	r2, #18
    793c:	f00c fd18 	bl	14370 <memset>
		lecc->status = status;
    7940:	7025      	strb	r5, [r4, #0]
		return;
    7942:	e54b      	b.n	73dc <hci_evt_encode+0x84>
    7944:	20000000 	.word	0x20000000
    7948:	20000008 	.word	0x20000008
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    794c:	4b86      	ldr	r3, [pc, #536]	; (7b68 <hci_evt_encode+0x810>)
    794e:	6858      	ldr	r0, [r3, #4]
    7950:	2100      	movs	r1, #0
    7952:	460a      	mov	r2, r1
    7954:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    7958:	4313      	orrs	r3, r2
    795a:	f43f ad3f 	beq.w	73dc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    795e:	4b83      	ldr	r3, [pc, #524]	; (7b6c <hci_evt_encode+0x814>)
    7960:	6818      	ldr	r0, [r3, #0]
    7962:	460b      	mov	r3, r1
    7964:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7968:	4313      	orrs	r3, r2
    796a:	f43f ad37 	beq.w	73dc <hci_evt_encode+0x84>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    796e:	f894 3020 	ldrb.w	r3, [r4, #32]
    7972:	f003 030f 	and.w	r3, r3, #15
    7976:	2b01      	cmp	r3, #1
    7978:	d00c      	beq.n	7994 <hci_evt_encode+0x63c>
    797a:	4a7d      	ldr	r2, [pc, #500]	; (7b70 <hci_evt_encode+0x818>)
    797c:	497d      	ldr	r1, [pc, #500]	; (7b74 <hci_evt_encode+0x81c>)
    797e:	487e      	ldr	r0, [pc, #504]	; (7b78 <hci_evt_encode+0x820>)
    7980:	f640 13a3 	movw	r3, #2467	; 0x9a3
    7984:	f00c f9b6 	bl	13cf4 <printk>
    7988:	4040      	eors	r0, r0
    798a:	f380 8811 	msr	BASEPRI, r0
    798e:	f04f 0003 	mov.w	r0, #3
    7992:	df02      	svc	2
	if (dup_count >= 0) {
    7994:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 7b88 <hci_evt_encode+0x830>
    7998:	f8da 2000 	ldr.w	r2, [sl]
    799c:	2a00      	cmp	r2, #0
    799e:	db4a      	blt.n	7a36 <hci_evt_encode+0x6de>
		for (i = 0; i < dup_count; i++) {
    79a0:	bf08      	it	eq
    79a2:	f104 0b22 	addeq.w	fp, r4, #34	; 0x22
    79a6:	d019      	beq.n	79dc <hci_evt_encode+0x684>
    79a8:	4d74      	ldr	r5, [pc, #464]	; (7b7c <hci_evt_encode+0x824>)
    79aa:	f104 0b22 	add.w	fp, r4, #34	; 0x22
    79ae:	2700      	movs	r7, #0
			if (!memcmp(&adv->adv_ind.addr[0],
    79b0:	2206      	movs	r2, #6
    79b2:	4629      	mov	r1, r5
    79b4:	4658      	mov	r0, fp
    79b6:	f00c fca0 	bl	142fa <memcmp>
    79ba:	b940      	cbnz	r0, 79ce <hci_evt_encode+0x676>
			    adv->tx_addr == dup_filter[i].addr.type) {
    79bc:	f894 2020 	ldrb.w	r2, [r4, #32]
    79c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    79c4:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
    79c8:	4288      	cmp	r0, r1
    79ca:	f000 80bc 	beq.w	7b46 <hci_evt_encode+0x7ee>
		for (i = 0; i < dup_count; i++) {
    79ce:	f8da 2000 	ldr.w	r2, [sl]
    79d2:	3701      	adds	r7, #1
    79d4:	4297      	cmp	r7, r2
    79d6:	f105 0508 	add.w	r5, r5, #8
    79da:	dbe9      	blt.n	79b0 <hci_evt_encode+0x658>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    79dc:	4d68      	ldr	r5, [pc, #416]	; (7b80 <hci_evt_encode+0x828>)
    79de:	4f69      	ldr	r7, [pc, #420]	; (7b84 <hci_evt_encode+0x82c>)
    79e0:	682a      	ldr	r2, [r5, #0]
    79e2:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
    79e6:	4659      	mov	r1, fp
    79e8:	1c90      	adds	r0, r2, #2
    79ea:	2206      	movs	r2, #6
    79ec:	f00c fc95 	bl	1431a <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    79f0:	682a      	ldr	r2, [r5, #0]
    79f2:	f894 0020 	ldrb.w	r0, [r4, #32]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    79f6:	f8da 1000 	ldr.w	r1, [sl]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    79fa:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
    79fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7a02:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    7a06:	f894 c020 	ldrb.w	ip, [r4, #32]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7a0a:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
    7a0c:	f04f 0001 	mov.w	r0, #1
    7a10:	f00c 0c0f 	and.w	ip, ip, #15
			dup_count++;
    7a14:	bfd8      	it	le
    7a16:	3101      	addle	r1, #1
		dup_filter[dup_curr].mask = BIT(adv->type);
    7a18:	fa00 f00c 	lsl.w	r0, r0, ip
    7a1c:	f807 0032 	strb.w	r0, [r7, r2, lsl #3]
			dup_curr = dup_count;
    7a20:	bfd6      	itet	le
    7a22:	460a      	movle	r2, r1
			dup_curr++;
    7a24:	3201      	addgt	r2, #1
			dup_count++;
    7a26:	f8ca 1000 	strle.w	r1, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7a2a:	2a10      	cmp	r2, #16
			dup_curr = 0U;
    7a2c:	bf08      	it	eq
    7a2e:	2300      	moveq	r3, #0
			dup_curr++;
    7a30:	602a      	str	r2, [r5, #0]
			dup_curr = 0U;
    7a32:	bf08      	it	eq
    7a34:	602b      	streq	r3, [r5, #0]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    7a36:	2211      	movs	r2, #17
    7a38:	210b      	movs	r1, #11
    7a3a:	4630      	mov	r0, r6
    7a3c:	f7fe fca6 	bl	638c <meta_evt>
	drp->num_reports = 1U;
    7a40:	2301      	movs	r3, #1
    7a42:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    7a44:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    7a46:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
    7a48:	f006 f9c8 	bl	dddc <ll_rl_size_get>
    7a4c:	4581      	cmp	r9, r0
    7a4e:	d26e      	bcs.n	7b2e <hci_evt_encode+0x7d6>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    7a50:	4648      	mov	r0, r9
    7a52:	1cea      	adds	r2, r5, #3
    7a54:	1ca9      	adds	r1, r5, #2
    7a56:	f006 f97d 	bl	dd54 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
    7a5a:	78ab      	ldrb	r3, [r5, #2]
    7a5c:	3302      	adds	r3, #2
    7a5e:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = 0x1;
    7a60:	2301      	movs	r3, #1
    7a62:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    7a64:	f104 0128 	add.w	r1, r4, #40	; 0x28
    7a68:	2206      	movs	r2, #6
    7a6a:	f105 000a 	add.w	r0, r5, #10
    7a6e:	f00c fc54 	bl	1431a <memcpy>
	dir_info->rssi = rssi;
    7a72:	9b05      	ldr	r3, [sp, #20]
    7a74:	742b      	strb	r3, [r5, #16]
    7a76:	e4b1      	b.n	73dc <hci_evt_encode+0x84>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7a78:	221e      	movs	r2, #30
    7a7a:	210a      	movs	r1, #10
    7a7c:	f7fe fc86 	bl	638c <meta_evt>
    7a80:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
    7a82:	2206      	movs	r2, #6
		leecc->status = 0x00;
    7a84:	7035      	strb	r5, [r6, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    7a86:	f8a6 7001 	strh.w	r7, [r6, #1]
		leecc->role = node_rx->role;
    7a8a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    7a8e:	70f3      	strb	r3, [r6, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
    7a90:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    7a94:	7133      	strb	r3, [r6, #4]
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
    7a96:	f104 0123 	add.w	r1, r4, #35	; 0x23
    7a9a:	3005      	adds	r0, #5
    7a9c:	f00c fc3d 	bl	1431a <memcpy>
		memcpy(&leecc->local_rpa.val[0], &node_rx->local_rpa[0],
    7aa0:	2206      	movs	r2, #6
    7aa2:	f104 012f 	add.w	r1, r4, #47	; 0x2f
    7aa6:	f106 000b 	add.w	r0, r6, #11
    7aaa:	f00c fc36 	bl	1431a <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
    7aae:	2206      	movs	r2, #6
    7ab0:	f104 0129 	add.w	r1, r4, #41	; 0x29
    7ab4:	f106 0011 	add.w	r0, r6, #17
    7ab8:	f00c fc2f 	bl	1431a <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    7abc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
    7abe:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
    7ac0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    7ac2:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
    7ac6:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    7aca:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
    7ace:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7ad2:	7773      	strb	r3, [r6, #29]
		return;
    7ad4:	e482      	b.n	73dc <hci_evt_encode+0x84>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    7ad6:	221e      	movs	r2, #30
    7ad8:	210a      	movs	r1, #10
    7ada:	4630      	mov	r0, r6
    7adc:	f7fe fc56 	bl	638c <meta_evt>
    7ae0:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    7ae2:	4641      	mov	r1, r8
    7ae4:	221e      	movs	r2, #30
    7ae6:	f00c fc43 	bl	14370 <memset>
			leecc->status = status;
    7aea:	7025      	strb	r5, [r4, #0]
			return;
    7aec:	e476      	b.n	73dc <hci_evt_encode+0x84>
		adv_info->addr.type = adv->tx_addr;
    7aee:	f894 3020 	ldrb.w	r3, [r4, #32]
    7af2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7af6:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    7af8:	2206      	movs	r2, #6
    7afa:	f104 0122 	add.w	r1, r4, #34	; 0x22
    7afe:	1ce8      	adds	r0, r5, #3
    7b00:	f00c fc0b 	bl	1431a <memcpy>
    7b04:	e510      	b.n	7528 <hci_evt_encode+0x1d0>
    7b06:	2700      	movs	r7, #0
    7b08:	220b      	movs	r2, #11
    7b0a:	e4f0      	b.n	74ee <hci_evt_encode+0x196>
				if (dup_filter[i].mask & BIT(adv->type)) {
    7b0c:	491d      	ldr	r1, [pc, #116]	; (7b84 <hci_evt_encode+0x82c>)
    7b0e:	f811 3037 	ldrb.w	r3, [r1, r7, lsl #3]
    7b12:	f002 020f 	and.w	r2, r2, #15
    7b16:	fa23 f002 	lsr.w	r0, r3, r2
    7b1a:	07c0      	lsls	r0, r0, #31
    7b1c:	f53f ac5e 	bmi.w	73dc <hci_evt_encode+0x84>
				dup_filter[i].mask |= BIT(adv->type);
    7b20:	2001      	movs	r0, #1
    7b22:	fa00 f202 	lsl.w	r2, r0, r2
    7b26:	4313      	orrs	r3, r2
    7b28:	f801 3037 	strb.w	r3, [r1, r7, lsl #3]
				return false;
    7b2c:	e4cf      	b.n	74ce <hci_evt_encode+0x176>
		dir_info->addr.type = adv->tx_addr;
    7b2e:	f894 3020 	ldrb.w	r3, [r4, #32]
    7b32:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7b36:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    7b38:	2206      	movs	r2, #6
    7b3a:	f104 0122 	add.w	r1, r4, #34	; 0x22
    7b3e:	1ce8      	adds	r0, r5, #3
    7b40:	f00c fbeb 	bl	1431a <memcpy>
    7b44:	e78c      	b.n	7a60 <hci_evt_encode+0x708>
				if (dup_filter[i].mask & BIT(adv->type)) {
    7b46:	480f      	ldr	r0, [pc, #60]	; (7b84 <hci_evt_encode+0x82c>)
    7b48:	f810 3037 	ldrb.w	r3, [r0, r7, lsl #3]
    7b4c:	f002 020f 	and.w	r2, r2, #15
    7b50:	fa23 f102 	lsr.w	r1, r3, r2
    7b54:	07cd      	lsls	r5, r1, #31
    7b56:	f53f ac41 	bmi.w	73dc <hci_evt_encode+0x84>
				dup_filter[i].mask |= BIT(adv->type);
    7b5a:	2101      	movs	r1, #1
    7b5c:	fa01 f202 	lsl.w	r2, r1, r2
    7b60:	4313      	orrs	r3, r2
    7b62:	f800 3037 	strb.w	r3, [r0, r7, lsl #3]
				return false;
    7b66:	e766      	b.n	7a36 <hci_evt_encode+0x6de>
    7b68:	20000000 	.word	0x20000000
    7b6c:	20000008 	.word	0x20000008
    7b70:	00015318 	.word	0x00015318
    7b74:	00015454 	.word	0x00015454
    7b78:	0001525c 	.word	0x0001525c
    7b7c:	200008a2 	.word	0x200008a2
    7b80:	2000089c 	.word	0x2000089c
    7b84:	200008a0 	.word	0x200008a0
    7b88:	20000898 	.word	0x20000898

00007b8c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    7b8c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b8e:	f100 0408 	add.w	r4, r0, #8
{
    7b92:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b94:	4620      	mov	r0, r4
    7b96:	2102      	movs	r1, #2
{
    7b98:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    7b9a:	f00c fc97 	bl	144cc <net_buf_simple_add>
    7b9e:	4603      	mov	r3, r0
	hdr->evt = evt;
    7ba0:	2213      	movs	r2, #19
	hdr->len = len;
    7ba2:	2105      	movs	r1, #5
	hdr->evt = evt;
    7ba4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    7ba6:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
    7ba8:	4620      	mov	r0, r4
    7baa:	f00c fc8f 	bl	144cc <net_buf_simple_add>
	ep->num_handles = num_handles;
    7bae:	2301      	movs	r3, #1
    7bb0:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    7bb2:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    7bb6:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    7bba:	bd70      	pop	{r4, r5, r6, pc}

00007bbc <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = PDU_DATA(node_rx);
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7bbc:	7903      	ldrb	r3, [r0, #4]
    7bbe:	2b02      	cmp	r3, #2
    7bc0:	d008      	beq.n	7bd4 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
    7bc2:	3b04      	subs	r3, #4
    7bc4:	b2db      	uxtb	r3, r3
    7bc6:	2b0a      	cmp	r3, #10
    7bc8:	d901      	bls.n	7bce <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7bca:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    7bcc:	4770      	bx	lr
    7bce:	4a06      	ldr	r2, [pc, #24]	; (7be8 <hci_get_class+0x2c>)
    7bd0:	5cd0      	ldrb	r0, [r2, r3]
    7bd2:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    7bd4:	f890 3020 	ldrb.w	r3, [r0, #32]
    7bd8:	f003 0303 	and.w	r3, r3, #3
    7bdc:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    7bde:	bf0c      	ite	eq
    7be0:	2004      	moveq	r0, #4
    7be2:	2005      	movne	r0, #5
    7be4:	4770      	bx	lr
    7be6:	bf00      	nop
    7be8:	0001547c 	.word	0x0001547c

00007bec <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
    7bec:	4b03      	ldr	r3, [pc, #12]	; (7bfc <hci_init+0x10>)
#endif
	reset(NULL, NULL);
    7bee:	2100      	movs	r1, #0
{
    7bf0:	4602      	mov	r2, r0
	reset(NULL, NULL);
    7bf2:	4608      	mov	r0, r1
	hbuf_signal = signal_host_buf;
    7bf4:	601a      	str	r2, [r3, #0]
	reset(NULL, NULL);
    7bf6:	f7fe bc93 	b.w	6520 <reset>
    7bfa:	bf00      	nop
    7bfc:	20000920 	.word	0x20000920

00007c00 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_trng_get(buf, len);
    7c00:	f007 ba12 	b.w	f028 <lll_trng_get>

00007c04 <bt_encrypt_le>:
}

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    7c04:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    7c06:	2300      	movs	r3, #0
    7c08:	f009 fa6e 	bl	110e8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    7c0c:	2000      	movs	r0, #0
    7c0e:	bd08      	pop	{r3, pc}

00007c10 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    7c10:	b510      	push	{r4, lr}
    7c12:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    7c14:	f007 fa2a 	bl	f06c <lll_reset>
	LL_ASSERT(!err);
    7c18:	b970      	cbnz	r0, 7c38 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    7c1a:	f007 ffff 	bl	fc1c <lll_adv_reset>
	LL_ASSERT(!err);
    7c1e:	b9e0      	cbnz	r0, 7c5a <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    7c20:	f008 fb3c 	bl	1029c <lll_scan_reset>
	LL_ASSERT(!err);
    7c24:	bb50      	cbnz	r0, 7c7c <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    7c26:	f008 fc2d 	bl	10484 <lll_conn_reset>
	LL_ASSERT(!err);
    7c2a:	2800      	cmp	r0, #0
    7c2c:	d137      	bne.n	7c9e <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
    7c2e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    7c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c34:	f00b bcf6 	b.w	13624 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    7c38:	4a22      	ldr	r2, [pc, #136]	; (7cc4 <perform_lll_reset+0xb4>)
    7c3a:	4923      	ldr	r1, [pc, #140]	; (7cc8 <perform_lll_reset+0xb8>)
    7c3c:	4823      	ldr	r0, [pc, #140]	; (7ccc <perform_lll_reset+0xbc>)
    7c3e:	f240 43cf 	movw	r3, #1231	; 0x4cf
    7c42:	f00c f857 	bl	13cf4 <printk>
    7c46:	4040      	eors	r0, r0
    7c48:	f380 8811 	msr	BASEPRI, r0
    7c4c:	f04f 0003 	mov.w	r0, #3
    7c50:	df02      	svc	2
	err = lll_adv_reset();
    7c52:	f007 ffe3 	bl	fc1c <lll_adv_reset>
	LL_ASSERT(!err);
    7c56:	2800      	cmp	r0, #0
    7c58:	d0e2      	beq.n	7c20 <perform_lll_reset+0x10>
    7c5a:	4a1a      	ldr	r2, [pc, #104]	; (7cc4 <perform_lll_reset+0xb4>)
    7c5c:	491a      	ldr	r1, [pc, #104]	; (7cc8 <perform_lll_reset+0xb8>)
    7c5e:	481b      	ldr	r0, [pc, #108]	; (7ccc <perform_lll_reset+0xbc>)
    7c60:	f240 43d4 	movw	r3, #1236	; 0x4d4
    7c64:	f00c f846 	bl	13cf4 <printk>
    7c68:	4040      	eors	r0, r0
    7c6a:	f380 8811 	msr	BASEPRI, r0
    7c6e:	f04f 0003 	mov.w	r0, #3
    7c72:	df02      	svc	2
	err = lll_scan_reset();
    7c74:	f008 fb12 	bl	1029c <lll_scan_reset>
	LL_ASSERT(!err);
    7c78:	2800      	cmp	r0, #0
    7c7a:	d0d4      	beq.n	7c26 <perform_lll_reset+0x16>
    7c7c:	4a11      	ldr	r2, [pc, #68]	; (7cc4 <perform_lll_reset+0xb4>)
    7c7e:	4912      	ldr	r1, [pc, #72]	; (7cc8 <perform_lll_reset+0xb8>)
    7c80:	4812      	ldr	r0, [pc, #72]	; (7ccc <perform_lll_reset+0xbc>)
    7c82:	f240 43da 	movw	r3, #1242	; 0x4da
    7c86:	f00c f835 	bl	13cf4 <printk>
    7c8a:	4040      	eors	r0, r0
    7c8c:	f380 8811 	msr	BASEPRI, r0
    7c90:	f04f 0003 	mov.w	r0, #3
    7c94:	df02      	svc	2
	err = lll_conn_reset();
    7c96:	f008 fbf5 	bl	10484 <lll_conn_reset>
	LL_ASSERT(!err);
    7c9a:	2800      	cmp	r0, #0
    7c9c:	d0c7      	beq.n	7c2e <perform_lll_reset+0x1e>
    7c9e:	4a09      	ldr	r2, [pc, #36]	; (7cc4 <perform_lll_reset+0xb4>)
    7ca0:	4909      	ldr	r1, [pc, #36]	; (7cc8 <perform_lll_reset+0xb8>)
    7ca2:	480a      	ldr	r0, [pc, #40]	; (7ccc <perform_lll_reset+0xbc>)
    7ca4:	f44f 639c 	mov.w	r3, #1248	; 0x4e0
    7ca8:	f00c f824 	bl	13cf4 <printk>
    7cac:	4040      	eors	r0, r0
    7cae:	f380 8811 	msr	BASEPRI, r0
    7cb2:	f04f 0003 	mov.w	r0, #3
    7cb6:	df02      	svc	2
    7cb8:	4620      	mov	r0, r4
}
    7cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cbe:	f00b bcb1 	b.w	13624 <z_impl_k_sem_give>
    7cc2:	bf00      	nop
    7cc4:	00015488 	.word	0x00015488
    7cc8:	000154c4 	.word	0x000154c4
    7ccc:	0001525c 	.word	0x0001525c

00007cd0 <disabled_cb>:
    7cd0:	f00b bca8 	b.w	13624 <z_impl_k_sem_give>

00007cd4 <tx_cmplt_get>:
	}
}

#if defined(CONFIG_BT_CONN)
static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    7cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	u8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    7cd8:	4f2f      	ldr	r7, [pc, #188]	; (7d98 <tx_cmplt_get+0xc4>)
					   u8_t first, u8_t last, u8_t *idx)
{
	void *p;
	u8_t i;

	if (*idx >= count) {
    7cda:	780b      	ldrb	r3, [r1, #0]
    7cdc:	783c      	ldrb	r4, [r7, #0]
{
    7cde:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    7ce0:	7879      	ldrb	r1, [r7, #1]
    7ce2:	4299      	cmp	r1, r3
    7ce4:	bf9c      	itt	ls
    7ce6:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    7ce8:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    7cea:	429a      	cmp	r2, r3
{
    7cec:	4683      	mov	fp, r0
    7cee:	4692      	mov	sl, r2
    7cf0:	d046      	beq.n	7d80 <tx_cmplt_get+0xac>
		return NULL;
	}

	i = *idx + 1;
    7cf2:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    7cf4:	4e29      	ldr	r6, [pc, #164]	; (7d9c <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    7cf6:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    7cf8:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    7cfc:	4291      	cmp	r1, r2
    7cfe:	bf08      	it	eq
    7d00:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    7d02:	18f1      	adds	r1, r6, r3

	*idx = i;
    7d04:	702a      	strb	r2, [r5, #0]
    7d06:	d03b      	beq.n	7d80 <tx_cmplt_get+0xac>
		return 0;
	}

	*handle = tx->handle;
    7d08:	5af3      	ldrh	r3, [r6, r3]
    7d0a:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    7d0c:	f04f 0800 	mov.w	r8, #0
    7d10:	f04f 0901 	mov.w	r9, #1
    7d14:	e020      	b.n	7d58 <tx_cmplt_get+0x84>
		    (((u32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
    7d16:	f108 0801 	add.w	r8, r8, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((u32_t)node_tx & ~3)) {
    7d1a:	f030 0303 	bics.w	r3, r0, #3
			cmplt++;
    7d1e:	fa5f f888 	uxtb.w	r8, r8
    7d22:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((u32_t)node_tx & ~3)) {
    7d26:	d125      	bne.n	7d74 <tx_cmplt_get+0xa0>
	if (*idx >= count) {
    7d28:	782b      	ldrb	r3, [r5, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    7d2a:	7879      	ldrb	r1, [r7, #1]
    7d2c:	7838      	ldrb	r0, [r7, #0]
    7d2e:	4299      	cmp	r1, r3
    7d30:	bf9c      	itt	ls
    7d32:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    7d34:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    7d36:	459a      	cmp	sl, r3
    7d38:	d024      	beq.n	7d84 <tx_cmplt_get+0xb0>
	i = *idx + 1;
    7d3a:	1c5c      	adds	r4, r3, #1
    7d3c:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    7d3e:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    7d42:	42a1      	cmp	r1, r4
    7d44:	bf08      	it	eq
    7d46:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    7d48:	18f1      	adds	r1, r6, r3
	*idx = i;
    7d4a:	702c      	strb	r4, [r5, #0]
    7d4c:	d01a      	beq.n	7d84 <tx_cmplt_get+0xb0>
    7d4e:	5af0      	ldrh	r0, [r6, r3]
    7d50:	f8bb 3000 	ldrh.w	r3, [fp]
    7d54:	4298      	cmp	r0, r3
    7d56:	d115      	bne.n	7d84 <tx_cmplt_get+0xb0>
		node_tx = tx->node;
    7d58:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    7d5a:	2801      	cmp	r0, #1
    7d5c:	d9db      	bls.n	7d16 <tx_cmplt_get+0x42>
    7d5e:	f030 0303 	bics.w	r3, r0, #3
    7d62:	d00a      	beq.n	7d7a <tx_cmplt_get+0xa6>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    7d64:	7903      	ldrb	r3, [r0, #4]
    7d66:	f003 0303 	and.w	r3, r3, #3
		    (((u32_t)node_tx & ~3) &&
    7d6a:	3b01      	subs	r3, #1
    7d6c:	2b01      	cmp	r3, #1
    7d6e:	d90c      	bls.n	7d8a <tx_cmplt_get+0xb6>
    7d70:	2302      	movs	r3, #2
    7d72:	604b      	str	r3, [r1, #4]
			ll_tx_mem_release(node_tx);
    7d74:	f002 fc5c 	bl	a630 <ll_tx_mem_release>
    7d78:	e7d6      	b.n	7d28 <tx_cmplt_get+0x54>
    7d7a:	2302      	movs	r3, #2
    7d7c:	604b      	str	r3, [r1, #4]
		if (((u32_t)node_tx & ~3)) {
    7d7e:	e7d3      	b.n	7d28 <tx_cmplt_get+0x54>
		return 0;
    7d80:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    7d84:	4640      	mov	r0, r8
    7d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    7d8a:	f108 0801 	add.w	r8, r8, #1
    7d8e:	fa5f f888 	uxtb.w	r8, r8
    7d92:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((u32_t)node_tx & ~3)) {
    7d96:	e7ed      	b.n	7d74 <tx_cmplt_get+0xa0>
    7d98:	200001c8 	.word	0x200001c8
    7d9c:	200001cc 	.word	0x200001cc

00007da0 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
    7da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7da4:	4ca7      	ldr	r4, [pc, #668]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
	k_sem_give(sem_recv);
    7da6:	4ea8      	ldr	r6, [pc, #672]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			u32_t ret;

			mfy.param = next;
    7da8:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>
{
    7dac:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    7dae:	e9d4 0100 	ldrd	r0, r1, [r4]
    7db2:	aa03      	add	r2, sp, #12
    7db4:	f7fc fcbe 	bl	4734 <memq_peek>
		if (link) {
    7db8:	4607      	mov	r7, r0
    7dba:	2800      	cmp	r0, #0
    7dbc:	d040      	beq.n	7e40 <rx_demux+0xa0>
			LL_ASSERT(rx);
    7dbe:	9b03      	ldr	r3, [sp, #12]
    7dc0:	2b00      	cmp	r3, #0
    7dc2:	f000 812f 	beq.w	8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    7dc6:	7818      	ldrb	r0, [r3, #0]
    7dc8:	aa04      	add	r2, sp, #16
    7dca:	a902      	add	r1, sp, #8
    7dcc:	f004 ff84 	bl	ccd8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    7dd0:	4605      	mov	r5, r0
    7dd2:	2800      	cmp	r0, #0
    7dd4:	d06a      	beq.n	7eac <rx_demux+0x10c>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    7dd6:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    7dda:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    7dde:	f891 9000 	ldrb.w	r9, [r1]
    7de2:	9205      	str	r2, [sp, #20]
    7de4:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(u8_t ack_last, u16_t handle,
    7de8:	f10d 0814 	add.w	r8, sp, #20
    7dec:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    7df0:	f004 ff88 	bl	cd04 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
    7df4:	4629      	mov	r1, r5
    7df6:	9a05      	ldr	r2, [sp, #20]
    7df8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7dfc:	f004 ffca 	bl	cd94 <ull_conn_tx_ack>
    7e00:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
    7e02:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
    7e04:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
    7e06:	f004 ff41 	bl	cc8c <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
    7e0a:	2001      	movs	r0, #1
    7e0c:	f004 fbaa 	bl	c564 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
    7e10:	2101      	movs	r1, #1
    7e12:	4628      	mov	r0, r5
		if (conn) {
    7e14:	b10d      	cbz	r5, 7e1a <rx_demux+0x7a>
			ull_conn_tx_lll_enqueue(conn, 1);
    7e16:	f004 fe43 	bl	caa0 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    7e1a:	4642      	mov	r2, r8
    7e1c:	4639      	mov	r1, r7
    7e1e:	4648      	mov	r0, r9
    7e20:	f004 ff5a 	bl	ccd8 <ull_conn_ack_by_last_peek>
	} while (link);
    7e24:	4605      	mov	r5, r0
    7e26:	2800      	cmp	r0, #0
    7e28:	d1e2      	bne.n	7df0 <rx_demux+0x50>
	k_sem_give(sem_recv);
    7e2a:	6830      	ldr	r0, [r6, #0]
    7e2c:	f00b fbfa 	bl	13624 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    7e30:	e9d4 0100 	ldrd	r0, r1, [r4]
    7e34:	aa03      	add	r2, sp, #12
    7e36:	f7fc fc7d 	bl	4734 <memq_peek>
		if (link) {
    7e3a:	4607      	mov	r7, r0
    7e3c:	2800      	cmp	r0, #0
    7e3e:	d1be      	bne.n	7dbe <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    7e40:	aa04      	add	r2, sp, #16
    7e42:	a902      	add	r1, sp, #8
    7e44:	f10d 0007 	add.w	r0, sp, #7
    7e48:	f004 ff2c 	bl	cca4 <ull_conn_ack_peek>
			if (link) {
    7e4c:	4605      	mov	r5, r0
    7e4e:	2800      	cmp	r0, #0
    7e50:	d069      	beq.n	7f26 <rx_demux+0x186>
				rx_demux_conn_tx_ack(ack_last, handle,
    7e52:	9a04      	ldr	r2, [sp, #16]
    7e54:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    7e58:	f89d 9007 	ldrb.w	r9, [sp, #7]
    7e5c:	9205      	str	r2, [sp, #20]
    7e5e:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(u8_t ack_last, u16_t handle,
    7e62:	f10d 0814 	add.w	r8, sp, #20
    7e66:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    7e6a:	f004 ff4b 	bl	cd04 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
    7e6e:	4629      	mov	r1, r5
    7e70:	9a05      	ldr	r2, [sp, #20]
    7e72:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7e76:	f004 ff8d 	bl	cd94 <ull_conn_tx_ack>
    7e7a:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
    7e7c:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
    7e7e:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
    7e80:	f004 ff04 	bl	cc8c <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
    7e84:	2001      	movs	r0, #1
    7e86:	f004 fb6d 	bl	c564 <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
    7e8a:	2101      	movs	r1, #1
    7e8c:	4628      	mov	r0, r5
		if (conn) {
    7e8e:	b10d      	cbz	r5, 7e94 <rx_demux+0xf4>
			ull_conn_tx_lll_enqueue(conn, 1);
    7e90:	f004 fe06 	bl	caa0 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    7e94:	4642      	mov	r2, r8
    7e96:	4639      	mov	r1, r7
    7e98:	4648      	mov	r0, r9
    7e9a:	f004 ff1d 	bl	ccd8 <ull_conn_ack_by_last_peek>
	} while (link);
    7e9e:	4605      	mov	r5, r0
    7ea0:	2800      	cmp	r0, #0
    7ea2:	d1e2      	bne.n	7e6a <rx_demux+0xca>
	k_sem_give(sem_recv);
    7ea4:	6830      	ldr	r0, [r6, #0]
    7ea6:	f00b fbbd 	bl	13624 <z_impl_k_sem_give>
			if (nack) {
    7eaa:	e7c1      	b.n	7e30 <rx_demux+0x90>
				nack = rx_demux_rx(link, rx);
    7eac:	9b03      	ldr	r3, [sp, #12]
    7eae:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    7eb0:	791b      	ldrb	r3, [r3, #4]
    7eb2:	3b01      	subs	r3, #1
    7eb4:	2b08      	cmp	r3, #8
    7eb6:	d817      	bhi.n	7ee8 <rx_demux+0x148>
    7eb8:	e8df f003 	tbb	[pc, r3]
    7ebc:	05162e38 	.word	0x05162e38
    7ec0:	24161616 	.word	0x24161616
    7ec4:	05          	.byte	0x05
    7ec5:	00          	.byte	0x00
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    7ec6:	495f      	ldr	r1, [pc, #380]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7ec8:	6860      	ldr	r0, [r4, #4]
    7eca:	2200      	movs	r2, #0
    7ecc:	f7fc fc3a 	bl	4744 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    7ed0:	4b5e      	ldr	r3, [pc, #376]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
		ll_rx_put(link, rx);
    7ed2:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    7ed4:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    7ed6:	4a5e      	ldr	r2, [pc, #376]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    7ed8:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    7eda:	4638      	mov	r0, r7
    7edc:	f7fc fc22 	bl	4724 <memq_enqueue>
	k_sem_give(sem_recv);
    7ee0:	6830      	ldr	r0, [r6, #0]
    7ee2:	f00b fb9f 	bl	13624 <z_impl_k_sem_give>
			if (nack) {
    7ee6:	e7a3      	b.n	7e30 <rx_demux+0x90>
		LL_ASSERT(0);
    7ee8:	4a5a      	ldr	r2, [pc, #360]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    7eea:	495b      	ldr	r1, [pc, #364]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    7eec:	485b      	ldr	r0, [pc, #364]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    7eee:	f240 6362 	movw	r3, #1634	; 0x662
    7ef2:	f00b feff 	bl	13cf4 <printk>
    7ef6:	4040      	eors	r0, r0
    7ef8:	f380 8811 	msr	BASEPRI, r0
    7efc:	f04f 0003 	mov.w	r0, #3
    7f00:	df02      	svc	2
			if (nack) {
    7f02:	e754      	b.n	7dae <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    7f04:	494f      	ldr	r1, [pc, #316]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7f06:	6860      	ldr	r0, [r4, #4]
    7f08:	2200      	movs	r2, #0
    7f0a:	f7fc fc1b 	bl	4744 <memq_dequeue>
		ull_conn_setup(link, rx);
    7f0e:	9905      	ldr	r1, [sp, #20]
    7f10:	4638      	mov	r0, r7
    7f12:	f002 fee5 	bl	ace0 <ull_conn_setup>
			if (nack) {
    7f16:	e74a      	b.n	7dae <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
    7f18:	a905      	add	r1, sp, #20
    7f1a:	4638      	mov	r0, r7
    7f1c:	f002 fef0 	bl	ad00 <ull_conn_rx>
		if (nack) {
    7f20:	2800      	cmp	r0, #0
    7f22:	f000 80c8 	beq.w	80b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6>
}
    7f26:	b007      	add	sp, #28
    7f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    7f2c:	4945      	ldr	r1, [pc, #276]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7f2e:	6860      	ldr	r0, [r4, #4]
    7f30:	2200      	movs	r2, #0
    7f32:	f7fc fc07 	bl	4744 <memq_dequeue>
		rx_demux_event_done(link, rx);
    7f36:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
    7f38:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	ull_hdr = done->param;
    7f3c:	f8d5 a020 	ldr.w	sl, [r5, #32]
	switch (done->extra.type) {
    7f40:	b17b      	cbz	r3, 7f62 <rx_demux+0x1c2>
    7f42:	2b01      	cmp	r3, #1
    7f44:	f000 80b3 	beq.w	80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
		LL_ASSERT(0);
    7f48:	4a42      	ldr	r2, [pc, #264]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    7f4a:	4943      	ldr	r1, [pc, #268]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    7f4c:	4843      	ldr	r0, [pc, #268]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    7f4e:	f240 638a 	movw	r3, #1674	; 0x68a
    7f52:	f00b fecf 	bl	13cf4 <printk>
    7f56:	4040      	eors	r0, r0
    7f58:	f380 8811 	msr	BASEPRI, r0
    7f5c:	f04f 0003 	mov.w	r0, #3
    7f60:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    7f62:	4a3f      	ldr	r2, [pc, #252]	; (8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>)
    7f64:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    7f66:	f892 c001 	ldrb.w	ip, [r2, #1]
    7f6a:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
    7f6c:	1c4b      	adds	r3, r1, #1
    7f6e:	b2db      	uxtb	r3, r3
		last = 0U;
    7f70:	459c      	cmp	ip, r3
    7f72:	bf08      	it	eq
    7f74:	2300      	moveq	r3, #0
	if (last == first) {
    7f76:	4298      	cmp	r0, r3
	done->extra.type = 0U;
    7f78:	f04f 0c00 	mov.w	ip, #0
    7f7c:	f885 c024 	strb.w	ip, [r5, #36]	; 0x24
    7f80:	f000 80ad 	beq.w	80de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xde>
	done->hdr.link = link;
    7f84:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    7f86:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    7f88:	fb00 2101 	mla	r1, r0, r1, r2
    7f8c:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
    7f8e:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
    7f90:	4d34      	ldr	r5, [pc, #208]	; (8064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64>)
    7f92:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
    7f94:	78ea      	ldrb	r2, [r5, #3]
    7f96:	f895 c000 	ldrb.w	ip, [r5]
    7f9a:	429a      	cmp	r2, r3
    7f9c:	d02a      	beq.n	7ff4 <rx_demux+0x254>
	return (void *)(fifo + first * size);
    7f9e:	f105 0904 	add.w	r9, r5, #4
    7fa2:	fb03 9c0c 	mla	ip, r3, ip, r9
	while (next) {
    7fa6:	f1bc 0f00 	cmp.w	ip, #0
    7faa:	d023      	beq.n	7ff4 <rx_demux+0x254>
		u8_t is_aborted = next->is_aborted;
    7fac:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
    7fb0:	079a      	lsls	r2, r3, #30
		u8_t is_aborted = next->is_aborted;
    7fb2:	f3c3 0740 	ubfx	r7, r3, #1, #1
		u8_t is_resume = next->is_resume;
    7fb6:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
    7fba:	d559      	bpl.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    7fbc:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(u8_t *fifo, u8_t size, u8_t count,
				  u8_t last, u8_t *first)
{
	u8_t _first = *first; /* Copy read-index */
    7fbe:	78ab      	ldrb	r3, [r5, #2]
    7fc0:	f895 c000 	ldrb.w	ip, [r5]
    7fc4:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    7fc6:	429a      	cmp	r2, r3
    7fc8:	d014      	beq.n	7ff4 <rx_demux+0x254>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    7fca:	3301      	adds	r3, #1
    7fcc:	b2db      	uxtb	r3, r3
	if (_first == count) {
    7fce:	4299      	cmp	r1, r3
    7fd0:	d066      	beq.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
	if (first == last) {
    7fd2:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
    7fd4:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    7fd6:	d00d      	beq.n	7ff4 <rx_demux+0x254>
	return (void *)(fifo + first * size);
    7fd8:	fb03 9c0c 	mla	ip, r3, ip, r9

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    7fdc:	f1bc 0f00 	cmp.w	ip, #0
    7fe0:	d008      	beq.n	7ff4 <rx_demux+0x254>
    7fe2:	2f00      	cmp	r7, #0
    7fe4:	d1e2      	bne.n	7fac <rx_demux+0x20c>
    7fe6:	f1b8 0f00 	cmp.w	r8, #0
    7fea:	d003      	beq.n	7ff4 <rx_demux+0x254>
    7fec:	f89c 3020 	ldrb.w	r3, [ip, #32]
    7ff0:	07db      	lsls	r3, r3, #31
    7ff2:	d5db      	bpl.n	7fac <rx_demux+0x20c>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    7ff4:	f1ba 0f00 	cmp.w	sl, #0
    7ff8:	f43f aed9 	beq.w	7dae <rx_demux+0xe>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
    7ffc:	f89a 3000 	ldrb.w	r3, [sl]
    8000:	2b00      	cmp	r3, #0
    8002:	d07a      	beq.n	80fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfa>
	return hdr->ref--;
    8004:	3b01      	subs	r3, #1
    8006:	b2db      	uxtb	r3, r3
    8008:	f88a 3000 	strb.w	r3, [sl]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
    800c:	2b00      	cmp	r3, #0
    800e:	f47f aece 	bne.w	7dae <rx_demux+0xe>
    8012:	f8da 3004 	ldr.w	r3, [sl, #4]
    8016:	2b00      	cmp	r3, #0
    8018:	f43f aec9 	beq.w	7dae <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    801c:	f8da 0008 	ldr.w	r0, [sl, #8]
    8020:	4798      	blx	r3
			if (nack) {
    8022:	e6c4      	b.n	7dae <rx_demux+0xe>
			LL_ASSERT(rx);
    8024:	4a0b      	ldr	r2, [pc, #44]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    8026:	4910      	ldr	r1, [pc, #64]	; (8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    8028:	480c      	ldr	r0, [pc, #48]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    802a:	f240 53d1 	movw	r3, #1489	; 0x5d1
    802e:	f00b fe61 	bl	13cf4 <printk>
    8032:	4040      	eors	r0, r0
    8034:	f380 8811 	msr	BASEPRI, r0
    8038:	f04f 0003 	mov.w	r0, #3
    803c:	df02      	svc	2
    803e:	9b03      	ldr	r3, [sp, #12]
    8040:	e6c1      	b.n	7dc6 <rx_demux+0x26>
    8042:	bf00      	nop
    8044:	20000edc 	.word	0x20000edc
    8048:	20000ee4 	.word	0x20000ee4
    804c:	200001c8 	.word	0x200001c8
    8050:	20000ed8 	.word	0x20000ed8
    8054:	00015488 	.word	0x00015488
    8058:	000152dc 	.word	0x000152dc
    805c:	0001525c 	.word	0x0001525c
    8060:	20000050 	.word	0x20000050
    8064:	200000a4 	.word	0x200000a4
    8068:	000154cc 	.word	0x000154cc
    806c:	2000023c 	.word	0x2000023c
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    8070:	465b      	mov	r3, fp
    8072:	463a      	mov	r2, r7
    8074:	4639      	mov	r1, r7
    8076:	2001      	movs	r0, #1
			mfy.param = next;
    8078:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    807c:	f7fc fbc6 	bl	480c <mayfly_enqueue>
			LL_ASSERT(!ret);
    8080:	2800      	cmp	r0, #0
    8082:	d09b      	beq.n	7fbc <rx_demux+0x21c>
    8084:	4a28      	ldr	r2, [pc, #160]	; (8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>)
    8086:	4929      	ldr	r1, [pc, #164]	; (812c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c>)
    8088:	4829      	ldr	r0, [pc, #164]	; (8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>)
    808a:	f240 63a2 	movw	r3, #1698	; 0x6a2
    808e:	f00b fe31 	bl	13cf4 <printk>
    8092:	4040      	eors	r0, r0
    8094:	f380 8811 	msr	BASEPRI, r0
    8098:	f04f 0003 	mov.w	r0, #3
    809c:	df02      	svc	2
    809e:	e78d      	b.n	7fbc <rx_demux+0x21c>
	*first = _first; /* Write back read-index */
    80a0:	2300      	movs	r3, #0
    80a2:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    80a4:	2a00      	cmp	r2, #0
    80a6:	d0a5      	beq.n	7ff4 <rx_demux+0x254>
	return (void *)(fifo + first * size);
    80a8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
    80ac:	e799      	b.n	7fe2 <rx_demux+0x242>
		ull_conn_done(done);
    80ae:	4628      	mov	r0, r5
    80b0:	f004 fb54 	bl	c75c <ull_conn_done>
		break;
    80b4:	e755      	b.n	7f62 <rx_demux+0x1c2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    80b6:	491f      	ldr	r1, [pc, #124]	; (8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>)
    80b8:	4602      	mov	r2, r0
    80ba:	6860      	ldr	r0, [r4, #4]
    80bc:	f7fc fb42 	bl	4744 <memq_dequeue>
		if (rx) {
    80c0:	9905      	ldr	r1, [sp, #20]
    80c2:	2900      	cmp	r1, #0
    80c4:	f43f ae73 	beq.w	7dae <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    80c8:	4b1b      	ldr	r3, [pc, #108]	; (8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    80ca:	4a1c      	ldr	r2, [pc, #112]	; (813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    80cc:	78db      	ldrb	r3, [r3, #3]
    80ce:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    80d0:	4638      	mov	r0, r7
    80d2:	f7fc fb27 	bl	4724 <memq_enqueue>
	k_sem_give(sem_recv);
    80d6:	6830      	ldr	r0, [r6, #0]
    80d8:	f00b faa4 	bl	13624 <z_impl_k_sem_give>
			if (nack) {
    80dc:	e667      	b.n	7dae <rx_demux+0xe>
	LL_ASSERT(release == done);
    80de:	4a12      	ldr	r2, [pc, #72]	; (8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>)
    80e0:	4917      	ldr	r1, [pc, #92]	; (8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>)
    80e2:	4813      	ldr	r0, [pc, #76]	; (8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>)
    80e4:	f240 6391 	movw	r3, #1681	; 0x691
    80e8:	f00b fe04 	bl	13cf4 <printk>
    80ec:	4040      	eors	r0, r0
    80ee:	f380 8811 	msr	BASEPRI, r0
    80f2:	f04f 0003 	mov.w	r0, #3
    80f6:	df02      	svc	2
    80f8:	e74a      	b.n	7f90 <rx_demux+0x1f0>
	LL_ASSERT(ull_hdr->ref);
    80fa:	4a0b      	ldr	r2, [pc, #44]	; (8128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x128>)
    80fc:	4911      	ldr	r1, [pc, #68]	; (8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>)
    80fe:	480c      	ldr	r0, [pc, #48]	; (8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>)
    8100:	f240 63b4 	movw	r3, #1716	; 0x6b4
    8104:	f00b fdf6 	bl	13cf4 <printk>
    8108:	4040      	eors	r0, r0
    810a:	f380 8811 	msr	BASEPRI, r0
    810e:	f04f 0003 	mov.w	r0, #3
    8112:	df02      	svc	2
    8114:	f89a 3000 	ldrb.w	r3, [sl]
    8118:	3b01      	subs	r3, #1
    811a:	b2db      	uxtb	r3, r3
    811c:	f88a 3000 	strb.w	r3, [sl]
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
    8120:	2b00      	cmp	r3, #0
    8122:	f47f ae44 	bne.w	7dae <rx_demux+0xe>
    8126:	e774      	b.n	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    8128:	00015488 	.word	0x00015488
    812c:	000154d0 	.word	0x000154d0
    8130:	0001525c 	.word	0x0001525c
    8134:	20000edc 	.word	0x20000edc
    8138:	200001c8 	.word	0x200001c8
    813c:	20000ed8 	.word	0x20000ed8
    8140:	000154e8 	.word	0x000154e8
    8144:	000154d8 	.word	0x000154d8
    8148:	200000a8 	.word	0x200000a8

0000814c <ll_init>:
{
    814c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
    8150:	4ba1      	ldr	r3, [pc, #644]	; (83d8 <ll_init+0x28c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8152:	4da2      	ldr	r5, [pc, #648]	; (83dc <ll_init+0x290>)
	sem_recv = sem_rx;
    8154:	6018      	str	r0, [r3, #0]
{
    8156:	b086      	sub	sp, #24
	cntr_init();
    8158:	f008 ff4a 	bl	10ff0 <cntr_init>
	mayfly_init();
    815c:	f7fc fb02 	bl	4764 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8160:	489f      	ldr	r0, [pc, #636]	; (83e0 <ll_init+0x294>)
    8162:	9005      	str	r0, [sp, #20]
    8164:	489f      	ldr	r0, [pc, #636]	; (83e4 <ll_init+0x298>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    8166:	4ca0      	ldr	r4, [pc, #640]	; (83e8 <ll_init+0x29c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8168:	4aa0      	ldr	r2, [pc, #640]	; (83ec <ll_init+0x2a0>)
    816a:	9204      	str	r2, [sp, #16]
    816c:	e9cd 0502 	strd	r0, r5, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    8170:	2103      	movs	r1, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8172:	220b      	movs	r2, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    8174:	2502      	movs	r5, #2
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    8176:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8178:	9201      	str	r2, [sp, #4]
    817a:	9400      	str	r4, [sp, #0]
    817c:	4a9c      	ldr	r2, [pc, #624]	; (83f0 <ll_init+0x2a4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    817e:	7021      	strb	r1, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    8180:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    8182:	2106      	movs	r1, #6
    8184:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    8186:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    8188:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    818a:	f7fd fc85 	bl	5a98 <ticker_init>
	LL_ASSERT(!err);
    818e:	2800      	cmp	r0, #0
    8190:	f040 80f2 	bne.w	8378 <ll_init+0x22c>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8194:	2201      	movs	r2, #1
    8196:	2100      	movs	r1, #0
    8198:	4896      	ldr	r0, [pc, #600]	; (83f4 <ll_init+0x2a8>)
    819a:	f00c fcf9 	bl	14b90 <z_impl_k_sem_init>
	err = lll_init();
    819e:	f006 ff11 	bl	efc4 <lll_init>
	if (err) {
    81a2:	4604      	mov	r4, r0
    81a4:	b118      	cbz	r0, 81ae <ll_init+0x62>
}
    81a6:	4620      	mov	r0, r4
    81a8:	b006      	add	sp, #24
    81aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    81ae:	4b92      	ldr	r3, [pc, #584]	; (83f8 <ll_init+0x2ac>)
		link = mem_acquire(&mem_link_done.free);
    81b0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8400 <ll_init+0x2b4>
    81b4:	4d91      	ldr	r5, [pc, #580]	; (83fc <ll_init+0x2b0>)
		rx = mem_acquire(&mem_done.free);
    81b6:	4f90      	ldr	r7, [pc, #576]	; (83f8 <ll_init+0x2ac>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    81b8:	1d18      	adds	r0, r3, #4
    81ba:	2203      	movs	r2, #3
    81bc:	2138      	movs	r1, #56	; 0x38
    81be:	f7fc fa1f 	bl	4600 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    81c2:	4643      	mov	r3, r8
    81c4:	2203      	movs	r2, #3
    81c6:	1d18      	adds	r0, r3, #4
    81c8:	2108      	movs	r1, #8
    81ca:	f7fc fa19 	bl	4600 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    81ce:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    81d0:	786a      	ldrb	r2, [r5, #1]
    81d2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    81d4:	3401      	adds	r4, #1
    81d6:	b2e4      	uxtb	r4, r4
		last = 0U;
    81d8:	42a2      	cmp	r2, r4
    81da:	bf08      	it	eq
    81dc:	2400      	moveq	r4, #0
	if (last == first) {
    81de:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    81e0:	4640      	mov	r0, r8
    81e2:	d013      	beq.n	820c <ll_init+0xc0>
    81e4:	f7fc fa3a 	bl	465c <mem_acquire>
    81e8:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    81ea:	4638      	mov	r0, r7
		if (!link) {
    81ec:	b176      	cbz	r6, 820c <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
    81ee:	f7fc fa35 	bl	465c <mem_acquire>
		if (!rx) {
    81f2:	b138      	cbz	r0, 8204 <ll_init+0xb8>
		rx->link = link;
    81f4:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    81f6:	78ea      	ldrb	r2, [r5, #3]
    81f8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    81fa:	fb02 5303 	mla	r3, r2, r3, r5
    81fe:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    8200:	70ec      	strb	r4, [r5, #3]
}
    8202:	e7e5      	b.n	81d0 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
    8204:	497e      	ldr	r1, [pc, #504]	; (8400 <ll_init+0x2b4>)
    8206:	4630      	mov	r0, r6
    8208:	f7fc fa42 	bl	4690 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    820c:	4b7d      	ldr	r3, [pc, #500]	; (8404 <ll_init+0x2b8>)
    820e:	220e      	movs	r2, #14
    8210:	1d18      	adds	r0, r3, #4
    8212:	214c      	movs	r1, #76	; 0x4c
    8214:	f7fc f9f4 	bl	4600 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    8218:	4b7b      	ldr	r3, [pc, #492]	; (8408 <ll_init+0x2bc>)
    821a:	220f      	movs	r2, #15
    821c:	1d18      	adds	r0, r3, #4
    821e:	2108      	movs	r1, #8
    8220:	f7fc f9ee 	bl	4600 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    8224:	4878      	ldr	r0, [pc, #480]	; (8408 <ll_init+0x2bc>)
    8226:	f7fc fa19 	bl	465c <mem_acquire>
	LL_ASSERT(link);
    822a:	4604      	mov	r4, r0
    822c:	2800      	cmp	r0, #0
    822e:	f000 80bf 	beq.w	83b0 <ll_init+0x264>
	MEMQ_INIT(ull_rx, link);
    8232:	4a76      	ldr	r2, [pc, #472]	; (840c <ll_init+0x2c0>)
    8234:	4620      	mov	r0, r4
    8236:	1f11      	subs	r1, r2, #4
    8238:	f7fc fa66 	bl	4708 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    823c:	4872      	ldr	r0, [pc, #456]	; (8408 <ll_init+0x2bc>)
    823e:	f7fc fa0d 	bl	465c <mem_acquire>
	LL_ASSERT(link);
    8242:	4604      	mov	r4, r0
    8244:	2800      	cmp	r0, #0
    8246:	f000 80a5 	beq.w	8394 <ll_init+0x248>
	MEMQ_INIT(ll_rx, link);
    824a:	4a71      	ldr	r2, [pc, #452]	; (8410 <ll_init+0x2c4>)
	mem_link_rx.quota_pdu = RX_CNT;
    824c:	4d71      	ldr	r5, [pc, #452]	; (8414 <ll_init+0x2c8>)
    824e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 842c <ll_init+0x2e0>
		rx = mem_acquire(&mem_pdu_rx.free);
    8252:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8404 <ll_init+0x2b8>
	MEMQ_INIT(ll_rx, link);
    8256:	4620      	mov	r0, r4
    8258:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    825a:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
    825c:	f7fc fa54 	bl	4708 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    8260:	230c      	movs	r3, #12
    8262:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
    8266:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
    826a:	2700      	movs	r7, #0
	if (last == count) {
    826c:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8270:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
    8274:	3401      	adds	r4, #1
    8276:	b2e4      	uxtb	r4, r4
		last = 0U;
    8278:	42a2      	cmp	r2, r4
    827a:	bf08      	it	eq
    827c:	2400      	moveq	r4, #0
	if (last == first) {
    827e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    8280:	4630      	mov	r0, r6
    8282:	d049      	beq.n	8318 <ll_init+0x1cc>
    8284:	f7fc f9ea 	bl	465c <mem_acquire>
    8288:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    828a:	4640      	mov	r0, r8
		if (!link) {
    828c:	f1ba 0f00 	cmp.w	sl, #0
    8290:	d042      	beq.n	8318 <ll_init+0x1cc>
		rx = mem_acquire(&mem_pdu_rx.free);
    8292:	f7fc f9e3 	bl	465c <mem_acquire>
		if (!rx) {
    8296:	2800      	cmp	r0, #0
    8298:	d03a      	beq.n	8310 <ll_init+0x1c4>
		link->mem = NULL;
    829a:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
    829e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    82a2:	f899 1003 	ldrb.w	r1, [r9, #3]
    82a6:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
    82aa:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    82ac:	fb01 9202 	mla	r2, r1, r2, r9
    82b0:	3b01      	subs	r3, #1
    82b2:	b2db      	uxtb	r3, r3
    82b4:	6050      	str	r0, [r2, #4]
    82b6:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    82b8:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
    82bc:	2b00      	cmp	r3, #0
    82be:	d1d5      	bne.n	826c <ll_init+0x120>
	err = lll_adv_init();
    82c0:	f007 fcaa 	bl	fc18 <lll_adv_init>
	if (err) {
    82c4:	4604      	mov	r4, r0
    82c6:	2800      	cmp	r0, #0
    82c8:	f47f af6d 	bne.w	81a6 <ll_init+0x5a>
	err = ull_adv_init();
    82cc:	f001 fb42 	bl	9954 <ull_adv_init>
	if (err) {
    82d0:	4604      	mov	r4, r0
    82d2:	2800      	cmp	r0, #0
    82d4:	f47f af67 	bne.w	81a6 <ll_init+0x5a>
	err = lll_scan_init();
    82d8:	f007 ffde 	bl	10298 <lll_scan_init>
	if (err) {
    82dc:	4604      	mov	r4, r0
    82de:	2800      	cmp	r0, #0
    82e0:	f47f af61 	bne.w	81a6 <ll_init+0x5a>
	err = ull_scan_init();
    82e4:	f001 fc86 	bl	9bf4 <ull_scan_init>
	if (err) {
    82e8:	4604      	mov	r4, r0
    82ea:	2800      	cmp	r0, #0
    82ec:	f47f af5b 	bne.w	81a6 <ll_init+0x5a>
	err = lll_conn_init();
    82f0:	f008 f8c6 	bl	10480 <lll_conn_init>
	if (err) {
    82f4:	4604      	mov	r4, r0
    82f6:	2800      	cmp	r0, #0
    82f8:	f47f af55 	bne.w	81a6 <ll_init+0x5a>
	err = ull_conn_init();
    82fc:	f002 fc3e 	bl	ab7c <ull_conn_init>
	if (err) {
    8300:	4604      	mov	r4, r0
    8302:	2800      	cmp	r0, #0
    8304:	f47f af4f 	bne.w	81a6 <ll_init+0x5a>
		ull_filter_reset(true);
    8308:	2001      	movs	r0, #1
    830a:	f006 fa77 	bl	e7fc <ull_filter_reset>
	return  0;
    830e:	e74a      	b.n	81a6 <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
    8310:	493d      	ldr	r1, [pc, #244]	; (8408 <ll_init+0x2bc>)
    8312:	4650      	mov	r0, sl
    8314:	f7fc f9bc 	bl	4690 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    8318:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    831a:	1e5f      	subs	r7, r3, #1
    831c:	b2ff      	uxtb	r7, r7
    831e:	2b00      	cmp	r3, #0
    8320:	d0ce      	beq.n	82c0 <ll_init+0x174>
    8322:	4e3d      	ldr	r6, [pc, #244]	; (8418 <ll_init+0x2cc>)
		link = mem_acquire(&mem_link_rx.free);
    8324:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8408 <ll_init+0x2bc>
    8328:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    832a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8404 <ll_init+0x2b8>
	if (last == count) {
    832e:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8330:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    8332:	3401      	adds	r4, #1
    8334:	b2e4      	uxtb	r4, r4
		last = 0U;
    8336:	42a2      	cmp	r2, r4
    8338:	bf08      	it	eq
    833a:	2400      	moveq	r4, #0
	if (last == first) {
    833c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    833e:	4648      	mov	r0, r9
    8340:	d0be      	beq.n	82c0 <ll_init+0x174>
    8342:	f7fc f98b 	bl	465c <mem_acquire>
    8346:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    8348:	4640      	mov	r0, r8
		if (!link) {
    834a:	f1ba 0f00 	cmp.w	sl, #0
    834e:	d0b7      	beq.n	82c0 <ll_init+0x174>
		rx = mem_acquire(&mem_pdu_rx.free);
    8350:	f7fc f984 	bl	465c <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8354:	3f01      	subs	r7, #1
    8356:	b2ff      	uxtb	r7, r7
		if (!rx) {
    8358:	2800      	cmp	r0, #0
    835a:	d037      	beq.n	83cc <ll_init+0x280>
		rx->link = link;
    835c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8360:	78f1      	ldrb	r1, [r6, #3]
    8362:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
    8364:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8366:	fb01 6202 	mla	r2, r1, r2, r6
    836a:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    836c:	2fff      	cmp	r7, #255	; 0xff
    836e:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    8370:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    8372:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8374:	d1db      	bne.n	832e <ll_init+0x1e2>
    8376:	e7a3      	b.n	82c0 <ll_init+0x174>
	LL_ASSERT(!err);
    8378:	4a28      	ldr	r2, [pc, #160]	; (841c <ll_init+0x2d0>)
    837a:	4929      	ldr	r1, [pc, #164]	; (8420 <ll_init+0x2d4>)
    837c:	4829      	ldr	r0, [pc, #164]	; (8424 <ll_init+0x2d8>)
    837e:	f240 1317 	movw	r3, #279	; 0x117
    8382:	f00b fcb7 	bl	13cf4 <printk>
    8386:	4040      	eors	r0, r0
    8388:	f380 8811 	msr	BASEPRI, r0
    838c:	f04f 0003 	mov.w	r0, #3
    8390:	df02      	svc	2
    8392:	e6ff      	b.n	8194 <ll_init+0x48>
	LL_ASSERT(link);
    8394:	4a21      	ldr	r2, [pc, #132]	; (841c <ll_init+0x2d0>)
    8396:	4924      	ldr	r1, [pc, #144]	; (8428 <ll_init+0x2dc>)
    8398:	4822      	ldr	r0, [pc, #136]	; (8424 <ll_init+0x2d8>)
    839a:	f240 43bd 	movw	r3, #1213	; 0x4bd
    839e:	f00b fca9 	bl	13cf4 <printk>
    83a2:	4040      	eors	r0, r0
    83a4:	f380 8811 	msr	BASEPRI, r0
    83a8:	f04f 0003 	mov.w	r0, #3
    83ac:	df02      	svc	2
    83ae:	e74c      	b.n	824a <ll_init+0xfe>
	LL_ASSERT(link);
    83b0:	4a1a      	ldr	r2, [pc, #104]	; (841c <ll_init+0x2d0>)
    83b2:	491d      	ldr	r1, [pc, #116]	; (8428 <ll_init+0x2dc>)
    83b4:	481b      	ldr	r0, [pc, #108]	; (8424 <ll_init+0x2d8>)
    83b6:	f240 43b6 	movw	r3, #1206	; 0x4b6
    83ba:	f00b fc9b 	bl	13cf4 <printk>
    83be:	4040      	eors	r0, r0
    83c0:	f380 8811 	msr	BASEPRI, r0
    83c4:	f04f 0003 	mov.w	r0, #3
    83c8:	df02      	svc	2
    83ca:	e732      	b.n	8232 <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
    83cc:	490e      	ldr	r1, [pc, #56]	; (8408 <ll_init+0x2bc>)
    83ce:	4650      	mov	r0, sl
    83d0:	f7fc f95e 	bl	4690 <mem_release>
			break;
    83d4:	e774      	b.n	82c0 <ll_init+0x174>
    83d6:	bf00      	nop
    83d8:	20000ee4 	.word	0x20000ee4
    83dc:	00011b05 	.word	0x00011b05
    83e0:	00011c49 	.word	0x00011c49
    83e4:	20001020 	.word	0x20001020
    83e8:	2000125c 	.word	0x2000125c
    83ec:	00011b69 	.word	0x00011b69
    83f0:	20000f00 	.word	0x20000f00
    83f4:	20000ee8 	.word	0x20000ee8
    83f8:	20000960 	.word	0x20000960
    83fc:	20000050 	.word	0x20000050
    8400:	20000a0c 	.word	0x20000a0c
    8404:	20000aa8 	.word	0x20000aa8
    8408:	20000a2c 	.word	0x20000a2c
    840c:	20000ee0 	.word	0x20000ee0
    8410:	20000ed8 	.word	0x20000ed8
    8414:	20000a28 	.word	0x20000a28
    8418:	20000078 	.word	0x20000078
    841c:	00015488 	.word	0x00015488
    8420:	000154c4 	.word	0x000154c4
    8424:	0001525c 	.word	0x0001525c
    8428:	00015778 	.word	0x00015778
    842c:	20000064 	.word	0x20000064

00008430 <ll_reset>:
{
    8430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8434:	b087      	sub	sp, #28
	err = ull_adv_reset();
    8436:	f001 fa8f 	bl	9958 <ull_adv_reset>
	LL_ASSERT(!err);
    843a:	2800      	cmp	r0, #0
    843c:	f040 80ef 	bne.w	861e <ll_reset+0x1ee>
	err = ull_scan_reset();
    8440:	f001 fcb0 	bl	9da4 <ull_scan_reset>
	LL_ASSERT(!err);
    8444:	2800      	cmp	r0, #0
    8446:	f040 80fc 	bne.w	8642 <ll_reset+0x212>
		err = ll_connect_disable(&rx);
    844a:	4668      	mov	r0, sp
    844c:	f005 fa66 	bl	d91c <ll_connect_disable>
		if (!err) {
    8450:	2800      	cmp	r0, #0
    8452:	f000 8109 	beq.w	8668 <ll_reset+0x238>
	err = ull_conn_reset();
    8456:	f002 fb93 	bl	ab80 <ull_conn_reset>
	LL_ASSERT(!err);
    845a:	2800      	cmp	r0, #0
    845c:	f040 8116 	bne.w	868c <ll_reset+0x25c>
	MFIFO_INIT(tx_ack);
    8460:	4bb0      	ldr	r3, [pc, #704]	; (8724 <ll_reset+0x2f4>)
	MFIFO_INIT(done);
    8462:	4eb1      	ldr	r6, [pc, #708]	; (8728 <ll_reset+0x2f8>)
	MFIFO_INIT(pdu_rx_free);
    8464:	4fb1      	ldr	r7, [pc, #708]	; (872c <ll_reset+0x2fc>)
	MFIFO_INIT(ll_pdu_rx_free);
    8466:	4db2      	ldr	r5, [pc, #712]	; (8730 <ll_reset+0x300>)
	MFIFO_INIT(tx_ack);
    8468:	2400      	movs	r4, #0
    846a:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    846c:	4620      	mov	r0, r4
    846e:	f006 f9c5 	bl	e7fc <ull_filter_reset>
	MFIFO_INIT(prep);
    8472:	4bb0      	ldr	r3, [pc, #704]	; (8734 <ll_reset+0x304>)
	MFIFO_INIT(done);
    8474:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
    8476:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    8478:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    847a:	806c      	strh	r4, [r5, #2]
    847c:	2201      	movs	r2, #1
    847e:	4621      	mov	r1, r4
    8480:	4668      	mov	r0, sp
    8482:	f00c fb85 	bl	14b90 <z_impl_k_sem_init>
		mfy.param = &sem;
    8486:	4bac      	ldr	r3, [pc, #688]	; (8738 <ll_reset+0x308>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    8488:	4622      	mov	r2, r4
    848a:	4621      	mov	r1, r4
    848c:	2003      	movs	r0, #3
		mfy.param = &sem;
    848e:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    8492:	f7fc f9bb 	bl	480c <mayfly_enqueue>
		LL_ASSERT(!retval);
    8496:	2800      	cmp	r0, #0
    8498:	f040 8106 	bne.w	86a8 <ll_reset+0x278>
	return z_impl_k_sem_take(sem, timeout);
    849c:	f04f 32ff 	mov.w	r2, #4294967295
    84a0:	f04f 33ff 	mov.w	r3, #4294967295
    84a4:	4668      	mov	r0, sp
    84a6:	f00b f8e3 	bl	13670 <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    84aa:	4ba4      	ldr	r3, [pc, #656]	; (873c <ll_reset+0x30c>)
		link = mem_acquire(&mem_link_done.free);
    84ac:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8740 <ll_reset+0x310>
		rx = mem_acquire(&mem_done.free);
    84b0:	f8df 8288 	ldr.w	r8, [pc, #648]	; 873c <ll_reset+0x30c>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    84b4:	1d18      	adds	r0, r3, #4
    84b6:	2203      	movs	r2, #3
    84b8:	2138      	movs	r1, #56	; 0x38
    84ba:	f7fc f8a1 	bl	4600 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    84be:	464b      	mov	r3, r9
    84c0:	2203      	movs	r2, #3
    84c2:	1d18      	adds	r0, r3, #4
    84c4:	2108      	movs	r1, #8
    84c6:	f7fc f89b 	bl	4600 <mem_init>
static inline void done_alloc(void)
    84ca:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    84cc:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    84ce:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    84d0:	3401      	adds	r4, #1
    84d2:	b2e4      	uxtb	r4, r4
		last = 0U;
    84d4:	42a2      	cmp	r2, r4
    84d6:	bf08      	it	eq
    84d8:	2400      	moveq	r4, #0
	if (last == first) {
    84da:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    84dc:	4648      	mov	r0, r9
    84de:	d016      	beq.n	850e <ll_reset+0xde>
    84e0:	f7fc f8bc 	bl	465c <mem_acquire>
    84e4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
    84e6:	4640      	mov	r0, r8
		if (!link) {
    84e8:	f1ba 0f00 	cmp.w	sl, #0
    84ec:	d00f      	beq.n	850e <ll_reset+0xde>
		rx = mem_acquire(&mem_done.free);
    84ee:	f7fc f8b5 	bl	465c <mem_acquire>
		if (!rx) {
    84f2:	b140      	cbz	r0, 8506 <ll_reset+0xd6>
		rx->link = link;
    84f4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    84f8:	78f2      	ldrb	r2, [r6, #3]
    84fa:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    84fc:	fb02 6303 	mla	r3, r2, r3, r6
    8500:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    8502:	70f4      	strb	r4, [r6, #3]
}
    8504:	e7e2      	b.n	84cc <ll_reset+0x9c>
			mem_release(link, &mem_link_done.free);
    8506:	498e      	ldr	r1, [pc, #568]	; (8740 <ll_reset+0x310>)
    8508:	4650      	mov	r0, sl
    850a:	f7fc f8c1 	bl	4690 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    850e:	4b8d      	ldr	r3, [pc, #564]	; (8744 <ll_reset+0x314>)
    8510:	220e      	movs	r2, #14
    8512:	1d18      	adds	r0, r3, #4
    8514:	214c      	movs	r1, #76	; 0x4c
    8516:	f7fc f873 	bl	4600 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    851a:	4b8b      	ldr	r3, [pc, #556]	; (8748 <ll_reset+0x318>)
    851c:	220f      	movs	r2, #15
    851e:	1d18      	adds	r0, r3, #4
    8520:	2108      	movs	r1, #8
    8522:	f7fc f86d 	bl	4600 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    8526:	4888      	ldr	r0, [pc, #544]	; (8748 <ll_reset+0x318>)
    8528:	f7fc f898 	bl	465c <mem_acquire>
	LL_ASSERT(link);
    852c:	4604      	mov	r4, r0
    852e:	2800      	cmp	r0, #0
    8530:	f000 80d6 	beq.w	86e0 <ll_reset+0x2b0>
	MEMQ_INIT(ull_rx, link);
    8534:	4a85      	ldr	r2, [pc, #532]	; (874c <ll_reset+0x31c>)
    8536:	4620      	mov	r0, r4
    8538:	1f11      	subs	r1, r2, #4
    853a:	f7fc f8e5 	bl	4708 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    853e:	4882      	ldr	r0, [pc, #520]	; (8748 <ll_reset+0x318>)
    8540:	f7fc f88c 	bl	465c <mem_acquire>
	LL_ASSERT(link);
    8544:	4604      	mov	r4, r0
    8546:	2800      	cmp	r0, #0
    8548:	f000 80bc 	beq.w	86c4 <ll_reset+0x294>
	MEMQ_INIT(ll_rx, link);
    854c:	4a80      	ldr	r2, [pc, #512]	; (8750 <ll_reset+0x320>)
	mem_link_rx.quota_pdu = RX_CNT;
    854e:	4e81      	ldr	r6, [pc, #516]	; (8754 <ll_reset+0x324>)
		rx = mem_acquire(&mem_pdu_rx.free);
    8550:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8744 <ll_reset+0x314>
	MEMQ_INIT(ll_rx, link);
    8554:	4620      	mov	r0, r4
    8556:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    8558:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
    855a:	f7fc f8d5 	bl	4708 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    855e:	230c      	movs	r3, #12
    8560:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
    8564:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
    8566:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    856a:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    856c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    856e:	3401      	adds	r4, #1
    8570:	b2e4      	uxtb	r4, r4
		last = 0U;
    8572:	42a2      	cmp	r2, r4
    8574:	bf08      	it	eq
    8576:	2400      	moveq	r4, #0
	if (last == first) {
    8578:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    857a:	4640      	mov	r0, r8
    857c:	d020      	beq.n	85c0 <ll_reset+0x190>
    857e:	f7fc f86d 	bl	465c <mem_acquire>
    8582:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    8584:	4650      	mov	r0, sl
		if (!link) {
    8586:	f1bb 0f00 	cmp.w	fp, #0
    858a:	d019      	beq.n	85c0 <ll_reset+0x190>
		rx = mem_acquire(&mem_pdu_rx.free);
    858c:	f7fc f866 	bl	465c <mem_acquire>
		if (!rx) {
    8590:	b190      	cbz	r0, 85b8 <ll_reset+0x188>
		link->mem = NULL;
    8592:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
    8596:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    859a:	78e9      	ldrb	r1, [r5, #3]
    859c:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
    859e:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    85a0:	fb01 5202 	mla	r2, r1, r2, r5
    85a4:	3b01      	subs	r3, #1
    85a6:	b2db      	uxtb	r3, r3
    85a8:	6050      	str	r0, [r2, #4]
    85aa:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    85ac:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
    85ae:	2b00      	cmp	r3, #0
    85b0:	d1db      	bne.n	856a <ll_reset+0x13a>
}
    85b2:	b007      	add	sp, #28
    85b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    85b8:	4963      	ldr	r1, [pc, #396]	; (8748 <ll_reset+0x318>)
    85ba:	4658      	mov	r0, fp
    85bc:	f7fc f868 	bl	4690 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    85c0:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    85c2:	1e5d      	subs	r5, r3, #1
    85c4:	b2ed      	uxtb	r5, r5
    85c6:	2b00      	cmp	r3, #0
    85c8:	d0f3      	beq.n	85b2 <ll_reset+0x182>
    85ca:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
    85cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8748 <ll_reset+0x318>
		rx = mem_acquire(&mem_pdu_rx.free);
    85d0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8744 <ll_reset+0x314>
	if (last == count) {
    85d4:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    85d6:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    85d8:	3401      	adds	r4, #1
    85da:	b2e4      	uxtb	r4, r4
		last = 0U;
    85dc:	42a2      	cmp	r2, r4
    85de:	bf08      	it	eq
    85e0:	2400      	moveq	r4, #0
	if (last == first) {
    85e2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    85e4:	4648      	mov	r0, r9
    85e6:	d0e4      	beq.n	85b2 <ll_reset+0x182>
    85e8:	f7fc f838 	bl	465c <mem_acquire>
    85ec:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    85ee:	4640      	mov	r0, r8
		if (!link) {
    85f0:	f1ba 0f00 	cmp.w	sl, #0
    85f4:	d0dd      	beq.n	85b2 <ll_reset+0x182>
		rx = mem_acquire(&mem_pdu_rx.free);
    85f6:	f7fc f831 	bl	465c <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    85fa:	3d01      	subs	r5, #1
    85fc:	b2ed      	uxtb	r5, r5
		if (!rx) {
    85fe:	2800      	cmp	r0, #0
    8600:	d07c      	beq.n	86fc <ll_reset+0x2cc>
		rx->link = link;
    8602:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8606:	78f9      	ldrb	r1, [r7, #3]
    8608:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    860a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    860c:	fb01 7202 	mla	r2, r1, r2, r7
    8610:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8612:	2dff      	cmp	r5, #255	; 0xff
    8614:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    8616:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    8618:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    861a:	d1db      	bne.n	85d4 <ll_reset+0x1a4>
    861c:	e7c9      	b.n	85b2 <ll_reset+0x182>
	LL_ASSERT(!err);
    861e:	4a4e      	ldr	r2, [pc, #312]	; (8758 <ll_reset+0x328>)
    8620:	494e      	ldr	r1, [pc, #312]	; (875c <ll_reset+0x32c>)
    8622:	484f      	ldr	r0, [pc, #316]	; (8760 <ll_reset+0x330>)
    8624:	f240 1365 	movw	r3, #357	; 0x165
    8628:	f00b fb64 	bl	13cf4 <printk>
    862c:	4040      	eors	r0, r0
    862e:	f380 8811 	msr	BASEPRI, r0
    8632:	f04f 0003 	mov.w	r0, #3
    8636:	df02      	svc	2
	err = ull_scan_reset();
    8638:	f001 fbb4 	bl	9da4 <ull_scan_reset>
	LL_ASSERT(!err);
    863c:	2800      	cmp	r0, #0
    863e:	f43f af04 	beq.w	844a <ll_reset+0x1a>
    8642:	4a45      	ldr	r2, [pc, #276]	; (8758 <ll_reset+0x328>)
    8644:	4945      	ldr	r1, [pc, #276]	; (875c <ll_reset+0x32c>)
    8646:	4846      	ldr	r0, [pc, #280]	; (8760 <ll_reset+0x330>)
    8648:	f240 136b 	movw	r3, #363	; 0x16b
    864c:	f00b fb52 	bl	13cf4 <printk>
    8650:	4040      	eors	r0, r0
    8652:	f380 8811 	msr	BASEPRI, r0
    8656:	f04f 0003 	mov.w	r0, #3
    865a:	df02      	svc	2
		err = ll_connect_disable(&rx);
    865c:	4668      	mov	r0, sp
    865e:	f005 f95d 	bl	d91c <ll_connect_disable>
		if (!err) {
    8662:	2800      	cmp	r0, #0
    8664:	f47f aef7 	bne.w	8456 <ll_reset+0x26>
			scan = ull_scan_is_enabled_get(0);
    8668:	f001 fbbe 	bl	9de8 <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
    866c:	4604      	mov	r4, r0
    866e:	2800      	cmp	r0, #0
    8670:	d049      	beq.n	8706 <ll_reset+0x2d6>
			scan->is_enabled = 0U;
    8672:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
    8676:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
    8678:	f36f 0300 	bfc	r3, #0, #1
    867c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
    8680:	6262      	str	r2, [r4, #36]	; 0x24
	err = ull_conn_reset();
    8682:	f002 fa7d 	bl	ab80 <ull_conn_reset>
	LL_ASSERT(!err);
    8686:	2800      	cmp	r0, #0
    8688:	f43f aeea 	beq.w	8460 <ll_reset+0x30>
    868c:	4a32      	ldr	r2, [pc, #200]	; (8758 <ll_reset+0x328>)
    868e:	4933      	ldr	r1, [pc, #204]	; (875c <ll_reset+0x32c>)
    8690:	4833      	ldr	r0, [pc, #204]	; (8760 <ll_reset+0x330>)
    8692:	f240 1385 	movw	r3, #389	; 0x185
    8696:	f00b fb2d 	bl	13cf4 <printk>
    869a:	4040      	eors	r0, r0
    869c:	f380 8811 	msr	BASEPRI, r0
    86a0:	f04f 0003 	mov.w	r0, #3
    86a4:	df02      	svc	2
    86a6:	e6db      	b.n	8460 <ll_reset+0x30>
		LL_ASSERT(!retval);
    86a8:	4a2b      	ldr	r2, [pc, #172]	; (8758 <ll_reset+0x328>)
    86aa:	492e      	ldr	r1, [pc, #184]	; (8764 <ll_reset+0x334>)
    86ac:	482c      	ldr	r0, [pc, #176]	; (8760 <ll_reset+0x330>)
    86ae:	f240 13b7 	movw	r3, #439	; 0x1b7
    86b2:	f00b fb1f 	bl	13cf4 <printk>
    86b6:	4040      	eors	r0, r0
    86b8:	f380 8811 	msr	BASEPRI, r0
    86bc:	f04f 0003 	mov.w	r0, #3
    86c0:	df02      	svc	2
    86c2:	e6eb      	b.n	849c <ll_reset+0x6c>
	LL_ASSERT(link);
    86c4:	4a24      	ldr	r2, [pc, #144]	; (8758 <ll_reset+0x328>)
    86c6:	4928      	ldr	r1, [pc, #160]	; (8768 <ll_reset+0x338>)
    86c8:	4825      	ldr	r0, [pc, #148]	; (8760 <ll_reset+0x330>)
    86ca:	f240 43bd 	movw	r3, #1213	; 0x4bd
    86ce:	f00b fb11 	bl	13cf4 <printk>
    86d2:	4040      	eors	r0, r0
    86d4:	f380 8811 	msr	BASEPRI, r0
    86d8:	f04f 0003 	mov.w	r0, #3
    86dc:	df02      	svc	2
    86de:	e735      	b.n	854c <ll_reset+0x11c>
	LL_ASSERT(link);
    86e0:	4a1d      	ldr	r2, [pc, #116]	; (8758 <ll_reset+0x328>)
    86e2:	4921      	ldr	r1, [pc, #132]	; (8768 <ll_reset+0x338>)
    86e4:	481e      	ldr	r0, [pc, #120]	; (8760 <ll_reset+0x330>)
    86e6:	f240 43b6 	movw	r3, #1206	; 0x4b6
    86ea:	f00b fb03 	bl	13cf4 <printk>
    86ee:	4040      	eors	r0, r0
    86f0:	f380 8811 	msr	BASEPRI, r0
    86f4:	f04f 0003 	mov.w	r0, #3
    86f8:	df02      	svc	2
    86fa:	e71b      	b.n	8534 <ll_reset+0x104>
			mem_release(link, &mem_link_rx.free);
    86fc:	4912      	ldr	r1, [pc, #72]	; (8748 <ll_reset+0x318>)
    86fe:	4650      	mov	r0, sl
    8700:	f7fb ffc6 	bl	4690 <mem_release>
			break;
    8704:	e755      	b.n	85b2 <ll_reset+0x182>
			LL_ASSERT(scan);
    8706:	4a14      	ldr	r2, [pc, #80]	; (8758 <ll_reset+0x328>)
    8708:	4918      	ldr	r1, [pc, #96]	; (876c <ll_reset+0x33c>)
    870a:	4815      	ldr	r0, [pc, #84]	; (8760 <ll_reset+0x330>)
    870c:	f240 1379 	movw	r3, #377	; 0x179
    8710:	f00b faf0 	bl	13cf4 <printk>
    8714:	4040      	eors	r0, r0
    8716:	f380 8811 	msr	BASEPRI, r0
    871a:	f04f 0003 	mov.w	r0, #3
    871e:	df02      	svc	2
    8720:	e7a7      	b.n	8672 <ll_reset+0x242>
    8722:	bf00      	nop
    8724:	200001c8 	.word	0x200001c8
    8728:	20000050 	.word	0x20000050
    872c:	20000078 	.word	0x20000078
    8730:	20000064 	.word	0x20000064
    8734:	200000a4 	.word	0x200000a4
    8738:	2000020c 	.word	0x2000020c
    873c:	20000960 	.word	0x20000960
    8740:	20000a0c 	.word	0x20000a0c
    8744:	20000aa8 	.word	0x20000aa8
    8748:	20000a2c 	.word	0x20000a2c
    874c:	20000ee0 	.word	0x20000ee0
    8750:	20000ed8 	.word	0x20000ed8
    8754:	20000a28 	.word	0x20000a28
    8758:	00015488 	.word	0x00015488
    875c:	000154c4 	.word	0x000154c4
    8760:	0001525c 	.word	0x0001525c
    8764:	000154f8 	.word	0x000154f8
    8768:	00015778 	.word	0x00015778
    876c:	00015704 	.word	0x00015704

00008770 <ll_rx_get>:
{
    8770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8774:	b085      	sub	sp, #20
    8776:	e9cd 0100 	strd	r0, r1, [sp]
    877a:	4c5f      	ldr	r4, [pc, #380]	; (88f8 <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
    877c:	4d5f      	ldr	r5, [pc, #380]	; (88fc <ll_rx_get+0x18c>)
    877e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8904 <ll_rx_get+0x194>
	*node_rx = NULL;
    8782:	9a00      	ldr	r2, [sp, #0]
    8784:	2300      	movs	r3, #0
    8786:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    8788:	e9d9 0100 	ldrd	r0, r1, [r9]
    878c:	aa03      	add	r2, sp, #12
    878e:	f7fb ffd1 	bl	4734 <memq_peek>
	if (link) {
    8792:	4607      	mov	r7, r0
    8794:	2800      	cmp	r0, #0
    8796:	f000 80a4 	beq.w	88e2 <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    879a:	9b03      	ldr	r3, [sp, #12]
    879c:	4958      	ldr	r1, [pc, #352]	; (8900 <ll_rx_get+0x190>)
    879e:	781a      	ldrb	r2, [r3, #0]
    87a0:	9801      	ldr	r0, [sp, #4]
    87a2:	f7ff fa97 	bl	7cd4 <tx_cmplt_get>
		if (!cmplt) {
    87a6:	4603      	mov	r3, r0
    87a8:	2800      	cmp	r0, #0
    87aa:	f040 8091 	bne.w	88d0 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
    87ae:	78a2      	ldrb	r2, [r4, #2]
    87b0:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    87b4:	78e2      	ldrb	r2, [r4, #3]
    87b6:	f10d 0109 	add.w	r1, sp, #9
    87ba:	f10d 000a 	add.w	r0, sp, #10
    87be:	461e      	mov	r6, r3
    87c0:	f7ff fa88 	bl	7cd4 <tx_cmplt_get>
    87c4:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
    87c8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    87cc:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    87ce:	d1f1      	bne.n	87b4 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
    87d0:	9b03      	ldr	r3, [sp, #12]
    87d2:	7919      	ldrb	r1, [r3, #4]
    87d4:	2903      	cmp	r1, #3
    87d6:	d178      	bne.n	88ca <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
    87d8:	494a      	ldr	r1, [pc, #296]	; (8904 <ll_rx_get+0x194>)
    87da:	f8d9 0004 	ldr.w	r0, [r9, #4]
    87de:	f7fb ffb1 	bl	4744 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    87e2:	4949      	ldr	r1, [pc, #292]	; (8908 <ll_rx_get+0x198>)
    87e4:	4638      	mov	r0, r7
    87e6:	f7fb ff53 	bl	4690 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    87ea:	782b      	ldrb	r3, [r5, #0]
    87ec:	2b0b      	cmp	r3, #11
    87ee:	d85d      	bhi.n	88ac <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
    87f0:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    87f2:	4946      	ldr	r1, [pc, #280]	; (890c <ll_rx_get+0x19c>)
    87f4:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    87f6:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    87f8:	f7fb ff4a 	bl	4690 <mem_release>
	while (mem_link_rx.quota_pdu &&
    87fc:	782b      	ldrb	r3, [r5, #0]
    87fe:	2b00      	cmp	r3, #0
    8800:	d0bf      	beq.n	8782 <ll_rx_get+0x12>
    8802:	4f43      	ldr	r7, [pc, #268]	; (8910 <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
    8804:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8908 <ll_rx_get+0x198>
    8808:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    880a:	f8df a100 	ldr.w	sl, [pc, #256]	; 890c <ll_rx_get+0x19c>
	if (last == count) {
    880e:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8810:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    8812:	3601      	adds	r6, #1
    8814:	b2f6      	uxtb	r6, r6
		last = 0U;
    8816:	42b2      	cmp	r2, r6
    8818:	bf08      	it	eq
    881a:	2600      	moveq	r6, #0
	if (last == first) {
    881c:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
    881e:	4640      	mov	r0, r8
    8820:	d01f      	beq.n	8862 <ll_rx_get+0xf2>
    8822:	f7fb ff1b 	bl	465c <mem_acquire>
    8826:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    8828:	4650      	mov	r0, sl
		if (!link) {
    882a:	f1bb 0f00 	cmp.w	fp, #0
    882e:	d018      	beq.n	8862 <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
    8830:	f7fb ff14 	bl	465c <mem_acquire>
		if (!rx) {
    8834:	b188      	cbz	r0, 885a <ll_rx_get+0xea>
		link->mem = NULL;
    8836:	2300      	movs	r3, #0
    8838:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    883c:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8840:	78f9      	ldrb	r1, [r7, #3]
    8842:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    8844:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8846:	fb01 7202 	mla	r2, r1, r2, r7
    884a:	3b01      	subs	r3, #1
    884c:	b2db      	uxtb	r3, r3
    884e:	6050      	str	r0, [r2, #4]
    8850:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    8852:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
    8854:	2b00      	cmp	r3, #0
    8856:	d1da      	bne.n	880e <ll_rx_get+0x9e>
    8858:	e793      	b.n	8782 <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
    885a:	492b      	ldr	r1, [pc, #172]	; (8908 <ll_rx_get+0x198>)
    885c:	4658      	mov	r0, fp
    885e:	f7fb ff17 	bl	4690 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8862:	782b      	ldrb	r3, [r5, #0]
    8864:	2b00      	cmp	r3, #0
    8866:	d08c      	beq.n	8782 <ll_rx_get+0x12>
    8868:	4f2a      	ldr	r7, [pc, #168]	; (8914 <ll_rx_get+0x1a4>)
	last = last + 1;
    886a:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
    886c:	787a      	ldrb	r2, [r7, #1]
    886e:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    8870:	3601      	adds	r6, #1
    8872:	b2f6      	uxtb	r6, r6
		last = 0U;
    8874:	42b2      	cmp	r2, r6
    8876:	bf08      	it	eq
    8878:	2600      	moveq	r6, #0
	if (last == first) {
    887a:	429e      	cmp	r6, r3
    887c:	d081      	beq.n	8782 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
    887e:	4822      	ldr	r0, [pc, #136]	; (8908 <ll_rx_get+0x198>)
    8880:	f7fb feec 	bl	465c <mem_acquire>
		if (!link) {
    8884:	4680      	mov	r8, r0
    8886:	2800      	cmp	r0, #0
    8888:	f43f af7b 	beq.w	8782 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
    888c:	481f      	ldr	r0, [pc, #124]	; (890c <ll_rx_get+0x19c>)
    888e:	f7fb fee5 	bl	465c <mem_acquire>
		if (!rx) {
    8892:	b308      	cbz	r0, 88d8 <ll_rx_get+0x168>
		rx->link = link;
    8894:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8898:	78f9      	ldrb	r1, [r7, #3]
    889a:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    889c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    889e:	fb01 7202 	mla	r2, r1, r2, r7
    88a2:	3b01      	subs	r3, #1
    88a4:	6050      	str	r0, [r2, #4]
    88a6:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    88a8:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    88aa:	e76a      	b.n	8782 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    88ac:	4a1a      	ldr	r2, [pc, #104]	; (8918 <ll_rx_get+0x1a8>)
    88ae:	491b      	ldr	r1, [pc, #108]	; (891c <ll_rx_get+0x1ac>)
    88b0:	481b      	ldr	r0, [pc, #108]	; (8920 <ll_rx_get+0x1b0>)
    88b2:	f44f 7359 	mov.w	r3, #868	; 0x364
    88b6:	f00b fa1d 	bl	13cf4 <printk>
    88ba:	4040      	eors	r0, r0
    88bc:	f380 8811 	msr	BASEPRI, r0
    88c0:	f04f 0003 	mov.w	r0, #3
    88c4:	df02      	svc	2
    88c6:	782b      	ldrb	r3, [r5, #0]
    88c8:	e792      	b.n	87f0 <ll_rx_get+0x80>
			*node_rx = rx;
    88ca:	9900      	ldr	r1, [sp, #0]
    88cc:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    88ce:	4613      	mov	r3, r2
}
    88d0:	4618      	mov	r0, r3
    88d2:	b005      	add	sp, #20
    88d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    88d8:	490b      	ldr	r1, [pc, #44]	; (8908 <ll_rx_get+0x198>)
    88da:	4640      	mov	r0, r8
    88dc:	f7fb fed8 	bl	4690 <mem_release>
			break;
    88e0:	e74f      	b.n	8782 <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    88e2:	78e2      	ldrb	r2, [r4, #3]
    88e4:	4906      	ldr	r1, [pc, #24]	; (8900 <ll_rx_get+0x190>)
    88e6:	9801      	ldr	r0, [sp, #4]
    88e8:	f7ff f9f4 	bl	7cd4 <tx_cmplt_get>
    88ec:	4603      	mov	r3, r0
}
    88ee:	4618      	mov	r0, r3
    88f0:	b005      	add	sp, #20
    88f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88f6:	bf00      	nop
    88f8:	200001c8 	.word	0x200001c8
    88fc:	20000a28 	.word	0x20000a28
    8900:	200001ca 	.word	0x200001ca
    8904:	20000ed4 	.word	0x20000ed4
    8908:	20000a2c 	.word	0x20000a2c
    890c:	20000aa8 	.word	0x20000aa8
    8910:	20000064 	.word	0x20000064
    8914:	20000078 	.word	0x20000078
    8918:	00015488 	.word	0x00015488
    891c:	00015500 	.word	0x00015500
    8920:	0001525c 	.word	0x0001525c

00008924 <ll_rx_dequeue>:
{
    8924:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    8926:	495d      	ldr	r1, [pc, #372]	; (8a9c <ll_rx_dequeue+0x178>)
{
    8928:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    892a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    892c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    892e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    8930:	aa01      	add	r2, sp, #4
    8932:	f7fb ff07 	bl	4744 <memq_dequeue>
	LL_ASSERT(link);
    8936:	4604      	mov	r4, r0
    8938:	2800      	cmp	r0, #0
    893a:	d053      	beq.n	89e4 <ll_rx_dequeue+0xc0>
	mem_release(link, &mem_link_rx.free);
    893c:	4958      	ldr	r1, [pc, #352]	; (8aa0 <ll_rx_dequeue+0x17c>)
    893e:	4620      	mov	r0, r4
    8940:	f7fb fea6 	bl	4690 <mem_release>
	switch (rx->type) {
    8944:	9a01      	ldr	r2, [sp, #4]
    8946:	7913      	ldrb	r3, [r2, #4]
    8948:	2b0e      	cmp	r3, #14
    894a:	d80d      	bhi.n	8968 <ll_rx_dequeue+0x44>
    894c:	e8df f003 	tbb	[pc, r3]
    8950:	0c080c08 	.word	0x0c080c08
    8954:	0c0c0c08 	.word	0x0c0c0c08
    8958:	0808081b 	.word	0x0808081b
    895c:	0808      	.short	0x0808
    895e:	08          	.byte	0x08
    895f:	00          	.byte	0x00
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    8960:	2b00      	cmp	r3, #0
    8962:	d04d      	beq.n	8a00 <ll_rx_dequeue+0xdc>
}
    8964:	b002      	add	sp, #8
    8966:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    8968:	4a4e      	ldr	r2, [pc, #312]	; (8aa4 <ll_rx_dequeue+0x180>)
    896a:	494f      	ldr	r1, [pc, #316]	; (8aa8 <ll_rx_dequeue+0x184>)
    896c:	484f      	ldr	r0, [pc, #316]	; (8aac <ll_rx_dequeue+0x188>)
    896e:	f240 23a5 	movw	r3, #677	; 0x2a5
    8972:	f00b f9bf 	bl	13cf4 <printk>
    8976:	4040      	eors	r0, r0
    8978:	f380 8811 	msr	BASEPRI, r0
    897c:	f04f 0003 	mov.w	r0, #3
    8980:	df02      	svc	2
}
    8982:	b002      	add	sp, #8
    8984:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    8986:	f892 3020 	ldrb.w	r3, [r2, #32]
    898a:	2b3c      	cmp	r3, #60	; 0x3c
    898c:	d047      	beq.n	8a1e <ll_rx_dequeue+0xfa>
    898e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
    8992:	b1f3      	cbz	r3, 89d2 <ll_rx_dequeue+0xae>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    8994:	6893      	ldr	r3, [r2, #8]
    8996:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    8998:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    899c:	b128      	cbz	r0, 89aa <ll_rx_dequeue+0x86>
					adv->node_rx_cc_free = NULL;
    899e:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    89a0:	4943      	ldr	r1, [pc, #268]	; (8ab0 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
    89a2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
					mem_release(rx_free, &mem_pdu_rx.free);
    89a6:	f7fb fe73 	bl	4690 <mem_release>
			adv->is_enabled = 0U;
    89aa:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    89ae:	f36f 0300 	bfc	r3, #0, #1
    89b2:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			      ull_scan_is_enabled(0) << 1) |
    89b6:	2000      	movs	r0, #0
    89b8:	f001 fa32 	bl	9e20 <ull_scan_is_enabled>
    89bc:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
    89be:	2000      	movs	r0, #0
    89c0:	f001 f898 	bl	9af4 <ull_adv_is_enabled>
			if (!bm) {
    89c4:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
    89c8:	d1cc      	bne.n	8964 <ll_rx_dequeue+0x40>
				ull_filter_adv_scan_state_cb(0);
    89ca:	f005 fa75 	bl	deb8 <ull_filter_adv_scan_state_cb>
}
    89ce:	b002      	add	sp, #8
    89d0:	bd70      	pop	{r4, r5, r6, pc}
			struct ll_scan_set *scan = (void *)HDR_LLL2EVT(lll);
    89d2:	6892      	ldr	r2, [r2, #8]
    89d4:	6812      	ldr	r2, [r2, #0]
			scan->is_enabled = 0U;
    89d6:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
    89da:	f363 0100 	bfi	r1, r3, #0, #1
    89de:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    89e2:	e7e8      	b.n	89b6 <ll_rx_dequeue+0x92>
	LL_ASSERT(link);
    89e4:	4a2f      	ldr	r2, [pc, #188]	; (8aa4 <ll_rx_dequeue+0x180>)
    89e6:	4933      	ldr	r1, [pc, #204]	; (8ab4 <ll_rx_dequeue+0x190>)
    89e8:	4830      	ldr	r0, [pc, #192]	; (8aac <ll_rx_dequeue+0x188>)
    89ea:	f240 2315 	movw	r3, #533	; 0x215
    89ee:	f00b f981 	bl	13cf4 <printk>
    89f2:	4040      	eors	r0, r0
    89f4:	f380 8811 	msr	BASEPRI, r0
    89f8:	f04f 0003 	mov.w	r0, #3
    89fc:	df02      	svc	2
    89fe:	e79d      	b.n	893c <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    8a00:	4a28      	ldr	r2, [pc, #160]	; (8aa4 <ll_rx_dequeue+0x180>)
    8a02:	492d      	ldr	r1, [pc, #180]	; (8ab8 <ll_rx_dequeue+0x194>)
    8a04:	4829      	ldr	r0, [pc, #164]	; (8aac <ll_rx_dequeue+0x188>)
    8a06:	f240 23a1 	movw	r3, #673	; 0x2a1
    8a0a:	f00b f973 	bl	13cf4 <printk>
    8a0e:	4040      	eors	r0, r0
    8a10:	f380 8811 	msr	BASEPRI, r0
    8a14:	f04f 0003 	mov.w	r0, #3
    8a18:	df02      	svc	2
}
    8a1a:	b002      	add	sp, #8
    8a1c:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
    8a1e:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
    8a20:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    8a22:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
    8a24:	b1ed      	cbz	r5, 8a62 <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
    8a26:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
    8a28:	2200      	movs	r2, #0
    8a2a:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
    8a2c:	b163      	cbz	r3, 8a48 <ll_rx_dequeue+0x124>
    8a2e:	4a1d      	ldr	r2, [pc, #116]	; (8aa4 <ll_rx_dequeue+0x180>)
    8a30:	4922      	ldr	r1, [pc, #136]	; (8abc <ll_rx_dequeue+0x198>)
    8a32:	481e      	ldr	r0, [pc, #120]	; (8aac <ll_rx_dequeue+0x188>)
    8a34:	f240 2331 	movw	r3, #561	; 0x231
    8a38:	f00b f95c 	bl	13cf4 <printk>
    8a3c:	4040      	eors	r0, r0
    8a3e:	f380 8811 	msr	BASEPRI, r0
    8a42:	f04f 0003 	mov.w	r0, #3
    8a46:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    8a48:	f105 0150 	add.w	r1, r5, #80	; 0x50
    8a4c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    8a50:	f7fb fe5e 	bl	4710 <memq_deinit>
				LL_ASSERT(link);
    8a54:	4606      	mov	r6, r0
    8a56:	b190      	cbz	r0, 8a7e <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
    8a58:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    8a5a:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
    8a5c:	f001 fdba 	bl	a5d4 <ll_conn_release>
    8a60:	e7a3      	b.n	89aa <ll_rx_dequeue+0x86>
				LL_ASSERT(conn_lll);
    8a62:	4a10      	ldr	r2, [pc, #64]	; (8aa4 <ll_rx_dequeue+0x180>)
    8a64:	4916      	ldr	r1, [pc, #88]	; (8ac0 <ll_rx_dequeue+0x19c>)
    8a66:	4811      	ldr	r0, [pc, #68]	; (8aac <ll_rx_dequeue+0x188>)
    8a68:	f240 232e 	movw	r3, #558	; 0x22e
    8a6c:	f00b f942 	bl	13cf4 <printk>
    8a70:	4040      	eors	r0, r0
    8a72:	f380 8811 	msr	BASEPRI, r0
    8a76:	f04f 0003 	mov.w	r0, #3
    8a7a:	df02      	svc	2
    8a7c:	e7d3      	b.n	8a26 <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
    8a7e:	4a09      	ldr	r2, [pc, #36]	; (8aa4 <ll_rx_dequeue+0x180>)
    8a80:	490c      	ldr	r1, [pc, #48]	; (8ab4 <ll_rx_dequeue+0x190>)
    8a82:	480a      	ldr	r0, [pc, #40]	; (8aac <ll_rx_dequeue+0x188>)
    8a84:	f44f 730d 	mov.w	r3, #564	; 0x234
    8a88:	f00b f934 	bl	13cf4 <printk>
    8a8c:	4040      	eors	r0, r0
    8a8e:	f380 8811 	msr	BASEPRI, r0
    8a92:	f04f 0003 	mov.w	r0, #3
    8a96:	df02      	svc	2
    8a98:	e7de      	b.n	8a58 <ll_rx_dequeue+0x134>
    8a9a:	bf00      	nop
    8a9c:	20000ed4 	.word	0x20000ed4
    8aa0:	20000a2c 	.word	0x20000a2c
    8aa4:	00015488 	.word	0x00015488
    8aa8:	000152dc 	.word	0x000152dc
    8aac:	0001525c 	.word	0x0001525c
    8ab0:	20000aa8 	.word	0x20000aa8
    8ab4:	00015778 	.word	0x00015778
    8ab8:	00015558 	.word	0x00015558
    8abc:	00015540 	.word	0x00015540
    8ac0:	00015534 	.word	0x00015534

00008ac4 <ll_rx_mem_release>:
{
    8ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
    8ac8:	6804      	ldr	r4, [r0, #0]
	while (rx) {
    8aca:	4dad      	ldr	r5, [pc, #692]	; (8d80 <ll_rx_mem_release+0x2bc>)
{
    8acc:	b083      	sub	sp, #12
    8ace:	4683      	mov	fp, r0
	while (rx) {
    8ad0:	2c00      	cmp	r4, #0
    8ad2:	d044      	beq.n	8b5e <ll_rx_mem_release+0x9a>
			LL_ASSERT(0);
    8ad4:	4fab      	ldr	r7, [pc, #684]	; (8d84 <ll_rx_mem_release+0x2c0>)
    8ad6:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8db4 <ll_rx_mem_release+0x2f0>
    8ada:	4eab      	ldr	r6, [pc, #684]	; (8d88 <ll_rx_mem_release+0x2c4>)
		rx = rx->next;
    8adc:	46a0      	mov	r8, r4
    8ade:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    8ae0:	f898 3004 	ldrb.w	r3, [r8, #4]
    8ae4:	2b0e      	cmp	r3, #14
    8ae6:	d86d      	bhi.n	8bc4 <ll_rx_mem_release+0x100>
    8ae8:	e8df f003 	tbb	[pc, r3]
    8aec:	6c206c20 	.word	0x6c206c20
    8af0:	6c6c6c20 	.word	0x6c6c6c20
    8af4:	20207d08 	.word	0x20207d08
    8af8:	2020      	.short	0x2020
    8afa:	20          	.byte	0x20
    8afb:	00          	.byte	0x00
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    8afc:	f898 3020 	ldrb.w	r3, [r8, #32]
    8b00:	2b3c      	cmp	r3, #60	; 0x3c
    8b02:	f000 8118 	beq.w	8d36 <ll_rx_mem_release+0x272>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    8b06:	2b02      	cmp	r3, #2
    8b08:	f000 80d8 	beq.w	8cbc <ll_rx_mem_release+0x1f8>
				LL_ASSERT(!cc->status);
    8b0c:	b1e3      	cbz	r3, 8b48 <ll_rx_mem_release+0x84>
    8b0e:	499f      	ldr	r1, [pc, #636]	; (8d8c <ll_rx_mem_release+0x2c8>)
    8b10:	f240 23fd 	movw	r3, #765	; 0x2fd
    8b14:	463a      	mov	r2, r7
    8b16:	4630      	mov	r0, r6
    8b18:	f00b f8ec 	bl	13cf4 <printk>
    8b1c:	4040      	eors	r0, r0
    8b1e:	f380 8811 	msr	BASEPRI, r0
    8b22:	f04f 0003 	mov.w	r0, #3
    8b26:	df02      	svc	2
    8b28:	f898 3004 	ldrb.w	r3, [r8, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    8b2c:	b963      	cbnz	r3, 8b48 <ll_rx_mem_release+0x84>
    8b2e:	4998      	ldr	r1, [pc, #608]	; (8d90 <ll_rx_mem_release+0x2cc>)
    8b30:	f240 333e 	movw	r3, #830	; 0x33e
    8b34:	463a      	mov	r2, r7
    8b36:	4630      	mov	r0, r6
    8b38:	f00b f8dc 	bl	13cf4 <printk>
    8b3c:	4040      	eors	r0, r0
    8b3e:	f380 8811 	msr	BASEPRI, r0
    8b42:	f04f 0003 	mov.w	r0, #3
    8b46:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    8b48:	782b      	ldrb	r3, [r5, #0]
    8b4a:	2b0b      	cmp	r3, #11
    8b4c:	d872      	bhi.n	8c34 <ll_rx_mem_release+0x170>
	mem_link_rx.quota_pdu += delta;
    8b4e:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    8b50:	4990      	ldr	r1, [pc, #576]	; (8d94 <ll_rx_mem_release+0x2d0>)
	mem_link_rx.quota_pdu += delta;
    8b52:	702b      	strb	r3, [r5, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    8b54:	4640      	mov	r0, r8
    8b56:	f7fb fd9b 	bl	4690 <mem_release>
	while (rx) {
    8b5a:	2c00      	cmp	r4, #0
    8b5c:	d1be      	bne.n	8adc <ll_rx_mem_release+0x18>
	*node_rx = rx;
    8b5e:	2700      	movs	r7, #0
    8b60:	f8cb 7000 	str.w	r7, [fp]
	while (mem_link_rx.quota_pdu &&
    8b64:	782b      	ldrb	r3, [r5, #0]
    8b66:	b353      	cbz	r3, 8bbe <ll_rx_mem_release+0xfa>
    8b68:	4e8b      	ldr	r6, [pc, #556]	; (8d98 <ll_rx_mem_release+0x2d4>)
		link = mem_acquire(&mem_link_rx.free);
    8b6a:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8da4 <ll_rx_mem_release+0x2e0>
    8b6e:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    8b70:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8d94 <ll_rx_mem_release+0x2d0>
	if (last == count) {
    8b74:	7872      	ldrb	r2, [r6, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8b76:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    8b78:	3401      	adds	r4, #1
    8b7a:	b2e4      	uxtb	r4, r4
		last = 0U;
    8b7c:	42a2      	cmp	r2, r4
    8b7e:	bf08      	it	eq
    8b80:	2400      	moveq	r4, #0
	if (last == first) {
    8b82:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    8b84:	4640      	mov	r0, r8
    8b86:	d068      	beq.n	8c5a <ll_rx_mem_release+0x196>
    8b88:	f7fb fd68 	bl	465c <mem_acquire>
    8b8c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    8b8e:	4648      	mov	r0, r9
		if (!link) {
    8b90:	f1ba 0f00 	cmp.w	sl, #0
    8b94:	d061      	beq.n	8c5a <ll_rx_mem_release+0x196>
		rx = mem_acquire(&mem_pdu_rx.free);
    8b96:	f7fb fd61 	bl	465c <mem_acquire>
		if (!rx) {
    8b9a:	2800      	cmp	r0, #0
    8b9c:	d059      	beq.n	8c52 <ll_rx_mem_release+0x18e>
		link->mem = NULL;
    8b9e:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
    8ba2:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8ba6:	78f1      	ldrb	r1, [r6, #3]
    8ba8:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
    8baa:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8bac:	fb01 6202 	mla	r2, r1, r2, r6
    8bb0:	3b01      	subs	r3, #1
    8bb2:	b2db      	uxtb	r3, r3
    8bb4:	6050      	str	r0, [r2, #4]
    8bb6:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    8bb8:	70f4      	strb	r4, [r6, #3]
	while (mem_link_rx.quota_pdu &&
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d1da      	bne.n	8b74 <ll_rx_mem_release+0xb0>
}
    8bbe:	b003      	add	sp, #12
    8bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
    8bc4:	f44f 7356 	mov.w	r3, #856	; 0x358
    8bc8:	463a      	mov	r2, r7
    8bca:	4649      	mov	r1, r9
    8bcc:	4630      	mov	r0, r6
    8bce:	f00b f891 	bl	13cf4 <printk>
    8bd2:	4040      	eors	r0, r0
    8bd4:	f380 8811 	msr	BASEPRI, r0
    8bd8:	f04f 0003 	mov.w	r0, #3
    8bdc:	df02      	svc	2
	while (rx) {
    8bde:	2c00      	cmp	r4, #0
    8be0:	f47f af7c 	bne.w	8adc <ll_rx_mem_release+0x18>
    8be4:	e7bb      	b.n	8b5e <ll_rx_mem_release+0x9a>
			conn = ll_conn_get(rx_free->handle);
    8be6:	f8b8 0006 	ldrh.w	r0, [r8, #6]
    8bea:	f001 fd01 	bl	a5f0 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    8bee:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
    8bf0:	4680      	mov	r8, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    8bf2:	b163      	cbz	r3, 8c0e <ll_rx_mem_release+0x14a>
    8bf4:	4969      	ldr	r1, [pc, #420]	; (8d9c <ll_rx_mem_release+0x2d8>)
    8bf6:	f240 334b 	movw	r3, #843	; 0x34b
    8bfa:	463a      	mov	r2, r7
    8bfc:	4630      	mov	r0, r6
    8bfe:	f00b f879 	bl	13cf4 <printk>
    8c02:	4040      	eors	r0, r0
    8c04:	f380 8811 	msr	BASEPRI, r0
    8c08:	f04f 0003 	mov.w	r0, #3
    8c0c:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    8c0e:	f108 016c 	add.w	r1, r8, #108	; 0x6c
    8c12:	f108 0068 	add.w	r0, r8, #104	; 0x68
    8c16:	f7fb fd7b 	bl	4710 <memq_deinit>
			LL_ASSERT(link);
    8c1a:	4682      	mov	sl, r0
    8c1c:	2800      	cmp	r0, #0
    8c1e:	f000 8092 	beq.w	8d46 <ll_rx_mem_release+0x282>
			conn->lll.link_tx_free = link;
    8c22:	f8c8 a078 	str.w	sl, [r8, #120]	; 0x78
			ll_conn_release(conn);
    8c26:	4640      	mov	r0, r8
    8c28:	f001 fcd4 	bl	a5d4 <ll_conn_release>
	while (rx) {
    8c2c:	2c00      	cmp	r4, #0
    8c2e:	f47f af55 	bne.w	8adc <ll_rx_mem_release+0x18>
    8c32:	e794      	b.n	8b5e <ll_rx_mem_release+0x9a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    8c34:	495a      	ldr	r1, [pc, #360]	; (8da0 <ll_rx_mem_release+0x2dc>)
    8c36:	f44f 7359 	mov.w	r3, #868	; 0x364
    8c3a:	463a      	mov	r2, r7
    8c3c:	4630      	mov	r0, r6
    8c3e:	f00b f859 	bl	13cf4 <printk>
    8c42:	4040      	eors	r0, r0
    8c44:	f380 8811 	msr	BASEPRI, r0
    8c48:	f04f 0003 	mov.w	r0, #3
    8c4c:	df02      	svc	2
    8c4e:	782b      	ldrb	r3, [r5, #0]
    8c50:	e77d      	b.n	8b4e <ll_rx_mem_release+0x8a>
			mem_release(link, &mem_link_rx.free);
    8c52:	4954      	ldr	r1, [pc, #336]	; (8da4 <ll_rx_mem_release+0x2e0>)
    8c54:	4650      	mov	r0, sl
    8c56:	f7fb fd1b 	bl	4690 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    8c5a:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8c5c:	1e5f      	subs	r7, r3, #1
    8c5e:	b2ff      	uxtb	r7, r7
    8c60:	2b00      	cmp	r3, #0
    8c62:	d0ac      	beq.n	8bbe <ll_rx_mem_release+0xfa>
    8c64:	4e50      	ldr	r6, [pc, #320]	; (8da8 <ll_rx_mem_release+0x2e4>)
		link = mem_acquire(&mem_link_rx.free);
    8c66:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8da4 <ll_rx_mem_release+0x2e0>
    8c6a:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    8c6c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8d94 <ll_rx_mem_release+0x2d0>
	if (last == count) {
    8c70:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8c72:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    8c74:	3401      	adds	r4, #1
    8c76:	b2e4      	uxtb	r4, r4
		last = 0U;
    8c78:	42a2      	cmp	r2, r4
    8c7a:	bf08      	it	eq
    8c7c:	2400      	moveq	r4, #0
	if (last == first) {
    8c7e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    8c80:	4640      	mov	r0, r8
    8c82:	d09c      	beq.n	8bbe <ll_rx_mem_release+0xfa>
    8c84:	f7fb fcea 	bl	465c <mem_acquire>
    8c88:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    8c8a:	4648      	mov	r0, r9
		if (!link) {
    8c8c:	f1ba 0f00 	cmp.w	sl, #0
    8c90:	d095      	beq.n	8bbe <ll_rx_mem_release+0xfa>
		rx = mem_acquire(&mem_pdu_rx.free);
    8c92:	f7fb fce3 	bl	465c <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8c96:	3f01      	subs	r7, #1
    8c98:	b2ff      	uxtb	r7, r7
		if (!rx) {
    8c9a:	2800      	cmp	r0, #0
    8c9c:	f000 809a 	beq.w	8dd4 <ll_rx_mem_release+0x310>
		rx->link = link;
    8ca0:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8ca4:	78f1      	ldrb	r1, [r6, #3]
    8ca6:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
    8ca8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8caa:	fb01 6202 	mla	r2, r1, r2, r6
    8cae:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8cb0:	2fff      	cmp	r7, #255	; 0xff
    8cb2:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    8cb4:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    8cb6:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8cb8:	d1da      	bne.n	8c70 <ll_rx_mem_release+0x1ac>
    8cba:	e780      	b.n	8bbe <ll_rx_mem_release+0xfa>
				struct ll_scan_set *scan =
    8cbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8cc0:	f8d3 a000 	ldr.w	sl, [r3]
				conn_lll = scan->lll.conn;
    8cc4:	f8da 8024 	ldr.w	r8, [sl, #36]	; 0x24
				LL_ASSERT(conn_lll);
    8cc8:	f1b8 0f00 	cmp.w	r8, #0
    8ccc:	d074      	beq.n	8db8 <ll_rx_mem_release+0x2f4>
				LL_ASSERT(!conn_lll->link_tx_free);
    8cce:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
				scan->lll.conn = NULL;
    8cd2:	2200      	movs	r2, #0
    8cd4:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				LL_ASSERT(!conn_lll->link_tx_free);
    8cd8:	b163      	cbz	r3, 8cf4 <ll_rx_mem_release+0x230>
    8cda:	4934      	ldr	r1, [pc, #208]	; (8dac <ll_rx_mem_release+0x2e8>)
    8cdc:	f240 23e6 	movw	r3, #742	; 0x2e6
    8ce0:	463a      	mov	r2, r7
    8ce2:	4630      	mov	r0, r6
    8ce4:	f00b f806 	bl	13cf4 <printk>
    8ce8:	4040      	eors	r0, r0
    8cea:	f380 8811 	msr	BASEPRI, r0
    8cee:	f04f 0003 	mov.w	r0, #3
    8cf2:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    8cf4:	f108 0150 	add.w	r1, r8, #80	; 0x50
    8cf8:	f108 004c 	add.w	r0, r8, #76	; 0x4c
    8cfc:	f7fb fd08 	bl	4710 <memq_deinit>
				LL_ASSERT(link);
    8d00:	9001      	str	r0, [sp, #4]
    8d02:	b370      	cbz	r0, 8d62 <ll_rx_mem_release+0x29e>
				conn_lll->link_tx_free = link;
    8d04:	9b01      	ldr	r3, [sp, #4]
				ll_conn_release(conn);
    8d06:	f8d8 0000 	ldr.w	r0, [r8]
				conn_lll->link_tx_free = link;
    8d0a:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
				ll_conn_release(conn);
    8d0e:	f001 fc61 	bl	a5d4 <ll_conn_release>
				scan->is_enabled = 0U;
    8d12:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
    8d16:	f36f 0300 	bfc	r3, #0, #1
    8d1a:	f88a 3048 	strb.w	r3, [sl, #72]	; 0x48
				if (!ull_adv_is_enabled_get(0))
    8d1e:	2000      	movs	r0, #0
    8d20:	f000 feda 	bl	9ad8 <ull_adv_is_enabled_get>
    8d24:	2800      	cmp	r0, #0
    8d26:	f47f af18 	bne.w	8b5a <ll_rx_mem_release+0x96>
					ull_filter_adv_scan_state_cb(0);
    8d2a:	f005 f8c5 	bl	deb8 <ull_filter_adv_scan_state_cb>
	while (rx) {
    8d2e:	2c00      	cmp	r4, #0
    8d30:	f47f aed4 	bne.w	8adc <ll_rx_mem_release+0x18>
    8d34:	e713      	b.n	8b5e <ll_rx_mem_release+0x9a>
				mem_release(rx_free, &mem_pdu_rx.free);
    8d36:	4917      	ldr	r1, [pc, #92]	; (8d94 <ll_rx_mem_release+0x2d0>)
    8d38:	4640      	mov	r0, r8
    8d3a:	f7fb fca9 	bl	4690 <mem_release>
	while (rx) {
    8d3e:	2c00      	cmp	r4, #0
    8d40:	f47f aecc 	bne.w	8adc <ll_rx_mem_release+0x18>
    8d44:	e70b      	b.n	8b5e <ll_rx_mem_release+0x9a>
			LL_ASSERT(link);
    8d46:	491a      	ldr	r1, [pc, #104]	; (8db0 <ll_rx_mem_release+0x2ec>)
    8d48:	f240 334e 	movw	r3, #846	; 0x34e
    8d4c:	463a      	mov	r2, r7
    8d4e:	4630      	mov	r0, r6
    8d50:	f00a ffd0 	bl	13cf4 <printk>
    8d54:	4040      	eors	r0, r0
    8d56:	f380 8811 	msr	BASEPRI, r0
    8d5a:	f04f 0003 	mov.w	r0, #3
    8d5e:	df02      	svc	2
    8d60:	e75f      	b.n	8c22 <ll_rx_mem_release+0x15e>
				LL_ASSERT(link);
    8d62:	4913      	ldr	r1, [pc, #76]	; (8db0 <ll_rx_mem_release+0x2ec>)
    8d64:	f240 23e9 	movw	r3, #745	; 0x2e9
    8d68:	463a      	mov	r2, r7
    8d6a:	4630      	mov	r0, r6
    8d6c:	f00a ffc2 	bl	13cf4 <printk>
    8d70:	4040      	eors	r0, r0
    8d72:	f380 8811 	msr	BASEPRI, r0
    8d76:	f04f 0003 	mov.w	r0, #3
    8d7a:	df02      	svc	2
    8d7c:	e7c2      	b.n	8d04 <ll_rx_mem_release+0x240>
    8d7e:	bf00      	nop
    8d80:	20000a28 	.word	0x20000a28
    8d84:	00015488 	.word	0x00015488
    8d88:	0001525c 	.word	0x0001525c
    8d8c:	00015578 	.word	0x00015578
    8d90:	00015584 	.word	0x00015584
    8d94:	20000aa8 	.word	0x20000aa8
    8d98:	20000064 	.word	0x20000064
    8d9c:	000155a8 	.word	0x000155a8
    8da0:	00015500 	.word	0x00015500
    8da4:	20000a2c 	.word	0x20000a2c
    8da8:	20000078 	.word	0x20000078
    8dac:	00015540 	.word	0x00015540
    8db0:	00015778 	.word	0x00015778
    8db4:	000152dc 	.word	0x000152dc
				LL_ASSERT(conn_lll);
    8db8:	490a      	ldr	r1, [pc, #40]	; (8de4 <ll_rx_mem_release+0x320>)
    8dba:	f240 23e3 	movw	r3, #739	; 0x2e3
    8dbe:	463a      	mov	r2, r7
    8dc0:	4630      	mov	r0, r6
    8dc2:	f00a ff97 	bl	13cf4 <printk>
    8dc6:	4040      	eors	r0, r0
    8dc8:	f380 8811 	msr	BASEPRI, r0
    8dcc:	f04f 0003 	mov.w	r0, #3
    8dd0:	df02      	svc	2
    8dd2:	e77c      	b.n	8cce <ll_rx_mem_release+0x20a>
			mem_release(link, &mem_link_rx.free);
    8dd4:	4904      	ldr	r1, [pc, #16]	; (8de8 <ll_rx_mem_release+0x324>)
    8dd6:	4650      	mov	r0, sl
}
    8dd8:	b003      	add	sp, #12
    8dda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
    8dde:	f7fb bc57 	b.w	4690 <mem_release>
    8de2:	bf00      	nop
    8de4:	00015534 	.word	0x00015534
    8de8:	20000a2c 	.word	0x20000a2c

00008dec <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    8dec:	4801      	ldr	r0, [pc, #4]	; (8df4 <ll_rx_link_alloc+0x8>)
    8dee:	f7fb bc35 	b.w	465c <mem_acquire>
    8df2:	bf00      	nop
    8df4:	20000a2c 	.word	0x20000a2c

00008df8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    8df8:	4901      	ldr	r1, [pc, #4]	; (8e00 <ll_rx_link_release+0x8>)
    8dfa:	f7fb bc49 	b.w	4690 <mem_release>
    8dfe:	bf00      	nop
    8e00:	20000a2c 	.word	0x20000a2c

00008e04 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    8e04:	4801      	ldr	r0, [pc, #4]	; (8e0c <ll_rx_alloc+0x8>)
    8e06:	f7fb bc29 	b.w	465c <mem_acquire>
    8e0a:	bf00      	nop
    8e0c:	20000aa8 	.word	0x20000aa8

00008e10 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    8e10:	4901      	ldr	r1, [pc, #4]	; (8e18 <ll_rx_release+0x8>)
    8e12:	f7fb bc3d 	b.w	4690 <mem_release>
    8e16:	bf00      	nop
    8e18:	20000aa8 	.word	0x20000aa8

00008e1c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8e1c:	4b02      	ldr	r3, [pc, #8]	; (8e28 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8e1e:	4a03      	ldr	r2, [pc, #12]	; (8e2c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8e20:	78db      	ldrb	r3, [r3, #3]
    8e22:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8e24:	f7fb bc7e 	b.w	4724 <memq_enqueue>
    8e28:	200001c8 	.word	0x200001c8
    8e2c:	20000ed8 	.word	0x20000ed8

00008e30 <ll_rx_sched>:
	k_sem_give(sem_recv);
    8e30:	4b01      	ldr	r3, [pc, #4]	; (8e38 <ll_rx_sched+0x8>)
    8e32:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    8e34:	f00a bbf6 	b.w	13624 <z_impl_k_sem_give>
    8e38:	20000ee4 	.word	0x20000ee4

00008e3c <ll_pdu_rx_alloc_peek>:
{
    8e3c:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    8e3e:	4b0d      	ldr	r3, [pc, #52]	; (8e74 <ll_pdu_rx_alloc_peek+0x38>)
    8e40:	789a      	ldrb	r2, [r3, #2]
    8e42:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    8e44:	42a2      	cmp	r2, r4
    8e46:	d809      	bhi.n	8e5c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    8e48:	1aa1      	subs	r1, r4, r2
    8e4a:	b2c9      	uxtb	r1, r1
    8e4c:	4288      	cmp	r0, r1
    8e4e:	d802      	bhi.n	8e56 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    8e50:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    8e52:	7819      	ldrb	r1, [r3, #0]
    8e54:	d109      	bne.n	8e6a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    8e56:	2000      	movs	r0, #0
}
    8e58:	bc10      	pop	{r4}
    8e5a:	4770      	bx	lr
		return count - first + last;
    8e5c:	7859      	ldrb	r1, [r3, #1]
    8e5e:	1a89      	subs	r1, r1, r2
    8e60:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    8e62:	b2c9      	uxtb	r1, r1
    8e64:	4288      	cmp	r0, r1
    8e66:	d8f6      	bhi.n	8e56 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    8e68:	7819      	ldrb	r1, [r3, #0]
}
    8e6a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    8e6c:	fb02 3301 	mla	r3, r2, r1, r3
    8e70:	6858      	ldr	r0, [r3, #4]
    8e72:	4770      	bx	lr
    8e74:	20000064 	.word	0x20000064

00008e78 <ll_pdu_rx_alloc>:
{
    8e78:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    8e7a:	4b0a      	ldr	r3, [pc, #40]	; (8ea4 <ll_pdu_rx_alloc+0x2c>)
	u8_t _first = *first; /* Copy read-index */
    8e7c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    8e7e:	78da      	ldrb	r2, [r3, #3]
    8e80:	7818      	ldrb	r0, [r3, #0]
    8e82:	785c      	ldrb	r4, [r3, #1]
    8e84:	428a      	cmp	r2, r1
    8e86:	d00a      	beq.n	8e9e <ll_pdu_rx_alloc+0x26>
	_first += 1U;
    8e88:	1c4a      	adds	r2, r1, #1
    8e8a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    8e8c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    8e90:	4294      	cmp	r4, r2
    8e92:	bf08      	it	eq
    8e94:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    8e96:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    8e98:	709a      	strb	r2, [r3, #2]
}
    8e9a:	bc10      	pop	{r4}
    8e9c:	4770      	bx	lr
		return NULL;
    8e9e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    8ea0:	e7fb      	b.n	8e9a <ll_pdu_rx_alloc+0x22>
    8ea2:	bf00      	nop
    8ea4:	20000064 	.word	0x20000064

00008ea8 <ll_tx_ack_put>:
{
    8ea8:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    8eaa:	4a13      	ldr	r2, [pc, #76]	; (8ef8 <ll_tx_ack_put+0x50>)
    8eac:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    8eae:	7855      	ldrb	r5, [r2, #1]
    8eb0:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    8eb2:	1c73      	adds	r3, r6, #1
    8eb4:	b2db      	uxtb	r3, r3
		last = 0U;
    8eb6:	429d      	cmp	r5, r3
    8eb8:	bf08      	it	eq
    8eba:	2300      	moveq	r3, #0
	if (last == first) {
    8ebc:	429c      	cmp	r4, r3
    8ebe:	d00a      	beq.n	8ed6 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    8ec0:	4615      	mov	r5, r2
    8ec2:	f815 4b04 	ldrb.w	r4, [r5], #4
    8ec6:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    8eca:	192e      	adds	r6, r5, r4
    8ecc:	d003      	beq.n	8ed6 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
    8ece:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
    8ed0:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
    8ed2:	6071      	str	r1, [r6, #4]
}
    8ed4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
    8ed6:	4a09      	ldr	r2, [pc, #36]	; (8efc <ll_tx_ack_put+0x54>)
    8ed8:	4909      	ldr	r1, [pc, #36]	; (8f00 <ll_tx_ack_put+0x58>)
    8eda:	480a      	ldr	r0, [pc, #40]	; (8f04 <ll_tx_ack_put+0x5c>)
    8edc:	f240 33ae 	movw	r3, #942	; 0x3ae
    8ee0:	f00a ff08 	bl	13cf4 <printk>
    8ee4:	4040      	eors	r0, r0
    8ee6:	f380 8811 	msr	BASEPRI, r0
    8eea:	f04f 0003 	mov.w	r0, #3
    8eee:	df02      	svc	2
	tx->handle = handle;
    8ef0:	2300      	movs	r3, #0
    8ef2:	801b      	strh	r3, [r3, #0]
    8ef4:	deff      	udf	#255	; 0xff
    8ef6:	bf00      	nop
    8ef8:	200001c8 	.word	0x200001c8
    8efc:	00015488 	.word	0x00015488
    8f00:	0001576c 	.word	0x0001576c
    8f04:	0001525c 	.word	0x0001525c

00008f08 <ull_ticker_status_give>:
	*((u32_t volatile *)param) = status;
    8f08:	6008      	str	r0, [r1, #0]
    8f0a:	4801      	ldr	r0, [pc, #4]	; (8f10 <ull_ticker_status_give+0x8>)
    8f0c:	f00a bb8a 	b.w	13624 <z_impl_k_sem_give>
    8f10:	20000ee8 	.word	0x20000ee8

00008f14 <ull_ticker_status_take>:
{
    8f14:	b510      	push	{r4, lr}
    8f16:	f04f 32ff 	mov.w	r2, #4294967295
    8f1a:	460c      	mov	r4, r1
    8f1c:	f04f 33ff 	mov.w	r3, #4294967295
	return z_impl_k_sem_take(sem, timeout);
    8f20:	4802      	ldr	r0, [pc, #8]	; (8f2c <ull_ticker_status_take+0x18>)
    8f22:	f00a fba5 	bl	13670 <z_impl_k_sem_take>
	return *ret_cb;
    8f26:	6820      	ldr	r0, [r4, #0]
}
    8f28:	bd10      	pop	{r4, pc}
    8f2a:	bf00      	nop
    8f2c:	20000ee8 	.word	0x20000ee8

00008f30 <ull_disable_mark>:
	if (!*m) {
    8f30:	4a04      	ldr	r2, [pc, #16]	; (8f44 <ull_disable_mark+0x14>)
    8f32:	6813      	ldr	r3, [r2, #0]
    8f34:	b10b      	cbz	r3, 8f3a <ull_disable_mark+0xa>
}
    8f36:	4618      	mov	r0, r3
    8f38:	4770      	bx	lr
		*m = param;
    8f3a:	4603      	mov	r3, r0
    8f3c:	6010      	str	r0, [r2, #0]
}
    8f3e:	4618      	mov	r0, r3
    8f40:	4770      	bx	lr
    8f42:	bf00      	nop
    8f44:	20000958 	.word	0x20000958

00008f48 <ull_disable_unmark>:
	if (*m && *m == param) {
    8f48:	4a04      	ldr	r2, [pc, #16]	; (8f5c <ull_disable_unmark+0x14>)
    8f4a:	6813      	ldr	r3, [r2, #0]
    8f4c:	b123      	cbz	r3, 8f58 <ull_disable_unmark+0x10>
    8f4e:	4298      	cmp	r0, r3
		*m = NULL;
    8f50:	bf06      	itte	eq
    8f52:	2100      	moveq	r1, #0
    8f54:	6011      	streq	r1, [r2, #0]
	return NULL;
    8f56:	2300      	movne	r3, #0
}
    8f58:	4618      	mov	r0, r3
    8f5a:	4770      	bx	lr
    8f5c:	20000958 	.word	0x20000958

00008f60 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    8f60:	4b01      	ldr	r3, [pc, #4]	; (8f68 <ull_disable_mark_get+0x8>)
}
    8f62:	6818      	ldr	r0, [r3, #0]
    8f64:	4770      	bx	lr
    8f66:	bf00      	nop
    8f68:	20000958 	.word	0x20000958

00008f6c <ull_update_mark>:
	if (!*m) {
    8f6c:	4a04      	ldr	r2, [pc, #16]	; (8f80 <ull_update_mark+0x14>)
    8f6e:	6813      	ldr	r3, [r2, #0]
    8f70:	b10b      	cbz	r3, 8f76 <ull_update_mark+0xa>
}
    8f72:	4618      	mov	r0, r3
    8f74:	4770      	bx	lr
		*m = param;
    8f76:	4603      	mov	r3, r0
    8f78:	6010      	str	r0, [r2, #0]
}
    8f7a:	4618      	mov	r0, r3
    8f7c:	4770      	bx	lr
    8f7e:	bf00      	nop
    8f80:	2000095c 	.word	0x2000095c

00008f84 <ull_update_unmark>:
	if (*m && *m == param) {
    8f84:	4a04      	ldr	r2, [pc, #16]	; (8f98 <ull_update_unmark+0x14>)
    8f86:	6813      	ldr	r3, [r2, #0]
    8f88:	b123      	cbz	r3, 8f94 <ull_update_unmark+0x10>
    8f8a:	4298      	cmp	r0, r3
		*m = NULL;
    8f8c:	bf06      	itte	eq
    8f8e:	2100      	moveq	r1, #0
    8f90:	6011      	streq	r1, [r2, #0]
	return NULL;
    8f92:	2300      	movne	r3, #0
}
    8f94:	4618      	mov	r0, r3
    8f96:	4770      	bx	lr
    8f98:	2000095c 	.word	0x2000095c

00008f9c <ull_update_mark_get>:
	return mark_get(mark_update);
    8f9c:	4b01      	ldr	r3, [pc, #4]	; (8fa4 <ull_update_mark_get+0x8>)
}
    8f9e:	6818      	ldr	r0, [r3, #0]
    8fa0:	4770      	bx	lr
    8fa2:	bf00      	nop
    8fa4:	2000095c 	.word	0x2000095c

00008fa8 <ull_disable>:
{
    8fa8:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    8faa:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
    8fac:	f115 0f10 	cmn.w	r5, #16
{
    8fb0:	b087      	sub	sp, #28
	if (!hdr) {
    8fb2:	d00b      	beq.n	8fcc <ull_disable+0x24>
	compiler_barrier();
    8fb4:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    8fb6:	2201      	movs	r2, #1
    8fb8:	4668      	mov	r0, sp
    8fba:	2100      	movs	r1, #0
    8fbc:	f00b fde8 	bl	14b90 <z_impl_k_sem_init>
	if (!hdr->ref) {
    8fc0:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
    8fc2:	4a13      	ldr	r2, [pc, #76]	; (9010 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    8fc4:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    8fc8:	616a      	str	r2, [r5, #20]
	if (!hdr->ref) {
    8fca:	b913      	cbnz	r3, 8fd2 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
    8fcc:	2000      	movs	r0, #0
}
    8fce:	b007      	add	sp, #28
    8fd0:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
    8fd2:	4b10      	ldr	r3, [pc, #64]	; (9014 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    8fd4:	2200      	movs	r2, #0
    8fd6:	4611      	mov	r1, r2
    8fd8:	2003      	movs	r0, #3
	mfy.param = lll;
    8fda:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    8fdc:	f7fb fc16 	bl	480c <mayfly_enqueue>
	LL_ASSERT(!ret);
    8fe0:	b940      	cbnz	r0, 8ff4 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    8fe2:	f04f 32ff 	mov.w	r2, #4294967295
    8fe6:	f04f 33ff 	mov.w	r3, #4294967295
    8fea:	4668      	mov	r0, sp
    8fec:	f00a fb40 	bl	13670 <z_impl_k_sem_take>
}
    8ff0:	b007      	add	sp, #28
    8ff2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    8ff4:	4a08      	ldr	r2, [pc, #32]	; (9018 <ull_disable+0x70>)
    8ff6:	4909      	ldr	r1, [pc, #36]	; (901c <ull_disable+0x74>)
    8ff8:	4809      	ldr	r0, [pc, #36]	; (9020 <ull_disable+0x78>)
    8ffa:	f240 4319 	movw	r3, #1049	; 0x419
    8ffe:	f00a fe79 	bl	13cf4 <printk>
    9002:	4040      	eors	r0, r0
    9004:	f380 8811 	msr	BASEPRI, r0
    9008:	f04f 0003 	mov.w	r0, #3
    900c:	df02      	svc	2
    900e:	e7e8      	b.n	8fe2 <ull_disable+0x3a>
    9010:	00007cd1 	.word	0x00007cd1
    9014:	2000021c 	.word	0x2000021c
    9018:	00015488 	.word	0x00015488
    901c:	000154d0 	.word	0x000154d0
    9020:	0001525c 	.word	0x0001525c

00009024 <ull_pdu_rx_alloc_peek>:
{
    9024:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    9026:	4b0d      	ldr	r3, [pc, #52]	; (905c <ull_pdu_rx_alloc_peek+0x38>)
    9028:	789a      	ldrb	r2, [r3, #2]
    902a:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    902c:	42a2      	cmp	r2, r4
    902e:	d809      	bhi.n	9044 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    9030:	1aa1      	subs	r1, r4, r2
    9032:	b2c9      	uxtb	r1, r1
    9034:	4288      	cmp	r0, r1
    9036:	d802      	bhi.n	903e <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    9038:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    903a:	7819      	ldrb	r1, [r3, #0]
    903c:	d109      	bne.n	9052 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    903e:	2000      	movs	r0, #0
}
    9040:	bc10      	pop	{r4}
    9042:	4770      	bx	lr
		return count - first + last;
    9044:	7859      	ldrb	r1, [r3, #1]
    9046:	1a89      	subs	r1, r1, r2
    9048:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    904a:	b2c9      	uxtb	r1, r1
    904c:	4288      	cmp	r0, r1
    904e:	d8f6      	bhi.n	903e <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    9050:	7819      	ldrb	r1, [r3, #0]
}
    9052:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    9054:	fb02 3301 	mla	r3, r2, r1, r3
    9058:	6858      	ldr	r0, [r3, #4]
    905a:	4770      	bx	lr
    905c:	20000078 	.word	0x20000078

00009060 <ull_pdu_rx_alloc>:
{
    9060:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
    9062:	4b0a      	ldr	r3, [pc, #40]	; (908c <ull_pdu_rx_alloc+0x2c>)
	u8_t _first = *first; /* Copy read-index */
    9064:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    9066:	78da      	ldrb	r2, [r3, #3]
    9068:	7818      	ldrb	r0, [r3, #0]
    906a:	785c      	ldrb	r4, [r3, #1]
    906c:	428a      	cmp	r2, r1
    906e:	d00a      	beq.n	9086 <ull_pdu_rx_alloc+0x26>
	_first += 1U;
    9070:	1c4a      	adds	r2, r1, #1
    9072:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    9074:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    9078:	4294      	cmp	r4, r2
    907a:	bf08      	it	eq
    907c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    907e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    9080:	709a      	strb	r2, [r3, #2]
}
    9082:	bc10      	pop	{r4}
    9084:	4770      	bx	lr
		return NULL;
    9086:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    9088:	e7fb      	b.n	9082 <ull_pdu_rx_alloc+0x22>
    908a:	bf00      	nop
    908c:	20000078 	.word	0x20000078

00009090 <ull_rx_put>:
{
    9090:	b538      	push	{r3, r4, r5, lr}
    9092:	460c      	mov	r4, r1
    9094:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    9096:	f003 fdff 	bl	cc98 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    909a:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    909c:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    909e:	4a03      	ldr	r2, [pc, #12]	; (90ac <ull_rx_put+0x1c>)
    90a0:	4628      	mov	r0, r5
}
    90a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    90a6:	f7fb bb3d 	b.w	4724 <memq_enqueue>
    90aa:	bf00      	nop
    90ac:	20000ee0 	.word	0x20000ee0

000090b0 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    90b0:	2201      	movs	r2, #1
    90b2:	4b02      	ldr	r3, [pc, #8]	; (90bc <ull_rx_sched+0xc>)
    90b4:	4611      	mov	r1, r2
    90b6:	2000      	movs	r0, #0
    90b8:	f7fb bba8 	b.w	480c <mayfly_enqueue>
    90bc:	2000022c 	.word	0x2000022c

000090c0 <ull_prepare_enqueue>:
{
    90c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    90c4:	4e19      	ldr	r6, [pc, #100]	; (912c <ull_prepare_enqueue+0x6c>)
{
    90c6:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    90ca:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    90cc:	7877      	ldrb	r7, [r6, #1]
    90ce:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
    90d2:	1c65      	adds	r5, r4, #1
    90d4:	b2ed      	uxtb	r5, r5
		last = 0U;
    90d6:	42af      	cmp	r7, r5
    90d8:	bf08      	it	eq
    90da:	2500      	moveq	r5, #0
	if (last == first) {
    90dc:	45ac      	cmp	ip, r5
    90de:	d021      	beq.n	9124 <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    90e0:	4699      	mov	r9, r3
    90e2:	4633      	mov	r3, r6
    90e4:	460f      	mov	r7, r1
    90e6:	4611      	mov	r1, r2
    90e8:	f813 2b04 	ldrb.w	r2, [r3], #4
    90ec:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
    90f0:	b1c4      	cbz	r4, 9124 <ull_prepare_enqueue+0x64>
    90f2:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    90f4:	2210      	movs	r2, #16
    90f6:	4620      	mov	r0, r4
    90f8:	f00b f90f 	bl	1431a <memcpy>
	e->is_resume = is_resume;
    90fc:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
    9100:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
    9104:	f00a 0a01 	and.w	sl, sl, #1
    9108:	f022 0303 	bic.w	r3, r2, #3
    910c:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
    9110:	9a08      	ldr	r2, [sp, #32]
    9112:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
    9114:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
    9118:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
    911a:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
    911e:	2000      	movs	r0, #0
}
    9120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    9124:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    912c:	200000a4 	.word	0x200000a4

00009130 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    9130:	4b05      	ldr	r3, [pc, #20]	; (9148 <ull_prepare_dequeue_get+0x18>)
    9132:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    9134:	78d9      	ldrb	r1, [r3, #3]
    9136:	7818      	ldrb	r0, [r3, #0]
    9138:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    913a:	bf1a      	itte	ne
    913c:	3304      	addne	r3, #4
    913e:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    9142:	2000      	moveq	r0, #0
}
    9144:	4770      	bx	lr
    9146:	bf00      	nop
    9148:	200000a4 	.word	0x200000a4

0000914c <ull_prepare_dequeue_iter>:
{
    914c:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    914e:	4b0c      	ldr	r3, [pc, #48]	; (9180 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    9150:	7802      	ldrb	r2, [r0, #0]
    9152:	785c      	ldrb	r4, [r3, #1]
    9154:	78dd      	ldrb	r5, [r3, #3]
    9156:	7819      	ldrb	r1, [r3, #0]
    9158:	4294      	cmp	r4, r2
    915a:	bf9c      	itt	ls
    915c:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    915e:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    9160:	4295      	cmp	r5, r2
    9162:	d00a      	beq.n	917a <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
    9164:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
    9166:	4d07      	ldr	r5, [pc, #28]	; (9184 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
    9168:	b2db      	uxtb	r3, r3
		i = 0U;
    916a:	429c      	cmp	r4, r3
    916c:	bf08      	it	eq
    916e:	2300      	moveq	r3, #0
	*idx = i;
    9170:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    9172:	fb02 5001 	mla	r0, r2, r1, r5
}
    9176:	bc30      	pop	{r4, r5}
    9178:	4770      	bx	lr
		return NULL;
    917a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    917c:	e7fb      	b.n	9176 <ull_prepare_dequeue_iter+0x2a>
    917e:	bf00      	nop
    9180:	200000a4 	.word	0x200000a4
    9184:	200000a8 	.word	0x200000a8

00009188 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    9188:	4b06      	ldr	r3, [pc, #24]	; (91a4 <ull_event_done_extra_get+0x1c>)
    918a:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    918c:	78d8      	ldrb	r0, [r3, #3]
    918e:	781a      	ldrb	r2, [r3, #0]
    9190:	4288      	cmp	r0, r1
    9192:	d005      	beq.n	91a0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    9194:	fb01 3302 	mla	r3, r1, r2, r3
    9198:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    919a:	b110      	cbz	r0, 91a2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    919c:	3024      	adds	r0, #36	; 0x24
    919e:	4770      	bx	lr
		return NULL;
    91a0:	2000      	movs	r0, #0
}
    91a2:	4770      	bx	lr
    91a4:	20000050 	.word	0x20000050

000091a8 <ull_event_done>:
{
    91a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
    91aa:	4a14      	ldr	r2, [pc, #80]	; (91fc <ull_event_done+0x54>)
	u8_t _first = *first; /* Copy read-index */
    91ac:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    91ae:	78d4      	ldrb	r4, [r2, #3]
    91b0:	7811      	ldrb	r1, [r2, #0]
    91b2:	7855      	ldrb	r5, [r2, #1]
    91b4:	429c      	cmp	r4, r3
    91b6:	d01f      	beq.n	91f8 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
    91b8:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    91bc:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    91be:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    91c0:	b2db      	uxtb	r3, r3
		_first = 0U;
    91c2:	429d      	cmp	r5, r3
    91c4:	bf08      	it	eq
    91c6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    91c8:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    91ca:	b19c      	cbz	r4, 91f4 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    91cc:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
    91ce:	2600      	movs	r6, #0
	link = evdone->hdr.link;
    91d0:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
    91d2:	6220      	str	r0, [r4, #32]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    91d4:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
    91d6:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    91d8:	f003 fd5e 	bl	cc98 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    91dc:	4a08      	ldr	r2, [pc, #32]	; (9200 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    91de:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    91e0:	4621      	mov	r1, r4
    91e2:	4638      	mov	r0, r7
    91e4:	f7fb fa9e 	bl	4724 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    91e8:	4b06      	ldr	r3, [pc, #24]	; (9204 <ull_event_done+0x5c>)
    91ea:	4630      	mov	r0, r6
    91ec:	462a      	mov	r2, r5
    91ee:	4629      	mov	r1, r5
    91f0:	f7fb fb0c 	bl	480c <mayfly_enqueue>
}
    91f4:	4620      	mov	r0, r4
    91f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
    91f8:	2400      	movs	r4, #0
    91fa:	e7fb      	b.n	91f4 <ull_event_done+0x4c>
    91fc:	20000050 	.word	0x20000050
    9200:	20000ee0 	.word	0x20000ee0
    9204:	2000022c 	.word	0x2000022c

00009208 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CONN */

#if defined(CONFIG_BT_CONN)
u8_t lll_chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		    u8_t chan_count)
{
    9208:	b470      	push	{r4, r5, r6}
    920a:	4605      	mov	r5, r0
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    920c:	7800      	ldrb	r0, [r0, #0]
    920e:	4c1b      	ldr	r4, [pc, #108]	; (927c <lll_chan_sel_1+0x74>)
    9210:	fb02 1101 	mla	r1, r2, r1, r1
    9214:	180a      	adds	r2, r1, r0
    9216:	fb84 0102 	smull	r0, r1, r4, r2
    921a:	4411      	add	r1, r2
    921c:	1149      	asrs	r1, r1, #5
    921e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
    9222:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    9226:	1a51      	subs	r1, r2, r1
    9228:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    922a:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
    922c:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    922e:	5c9c      	ldrb	r4, [r3, r2]
{
    9230:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    9234:	f001 0107 	and.w	r1, r1, #7
    9238:	410c      	asrs	r4, r1
    923a:	f014 0401 	ands.w	r4, r4, #1
    923e:	d11b      	bne.n	9278 <lll_chan_sel_1+0x70>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    9240:	fbb0 f2f5 	udiv	r2, r0, r5
    9244:	fb05 0212 	mls	r2, r5, r2, r0
    9248:	b2d2      	uxtb	r2, r2
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
    924a:	1e5d      	subs	r5, r3, #1
    924c:	1d1e      	adds	r6, r3, #4
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
    924e:	f104 0108 	add.w	r1, r4, #8
    9252:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
    9256:	4620      	mov	r0, r4
    9258:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
    925a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
    925e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
    9262:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
    9266:	d002      	beq.n	926e <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
    9268:	b132      	cbz	r2, 9278 <lll_chan_sel_1+0x70>
				chan_index--;
    926a:	3a01      	subs	r2, #1
    926c:	b2d2      	uxtb	r2, r2
			chan_next++;
    926e:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
    9270:	4284      	cmp	r4, r0
    9272:	d1f2      	bne.n	925a <lll_chan_sel_1+0x52>
	while (byte_count--) {
    9274:	42b5      	cmp	r5, r6
    9276:	d1ea      	bne.n	924e <lll_chan_sel_1+0x46>
}
    9278:	bc70      	pop	{r4, r5, r6}
    927a:	4770      	bx	lr
    927c:	dd67c8a7 	.word	0xdd67c8a7

00009280 <lll_chan_sel_2>:
{
    9280:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static u8_t chan_rev_8(u8_t b)
{
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    9282:	4f2f      	ldr	r7, [pc, #188]	; (9340 <lll_chan_sel_2+0xc0>)
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    9284:	4e2f      	ldr	r6, [pc, #188]	; (9344 <lll_chan_sel_2+0xc4>)
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    9286:	ea80 0501 	eor.w	r5, r0, r1
    928a:	2403      	movs	r4, #3
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    928c:	0a28      	lsrs	r0, r5, #8
    928e:	b2ed      	uxtb	r5, r5
    9290:	eb00 2080 	add.w	r0, r0, r0, lsl #10
    9294:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    9298:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    929c:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
    92a0:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    92a4:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((u32_t)b * 0x0802LU & 0x22110LU) |
    92a8:	ea4c 0c0e 	orr.w	ip, ip, lr
    92ac:	4328      	orrs	r0, r5
	     ((u32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    92ae:	eb00 2500 	add.w	r5, r0, r0, lsl #8
    92b2:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
    92b6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    92ba:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
    92be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    92c2:	f3c0 4007 	ubfx	r0, r0, #16, #8
    92c6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((u32_t)a * 17U + b) & 0xFFFF;
    92ca:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    92ce:	3c01      	subs	r4, #1
    92d0:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
    92d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((u32_t)a * 17U + b) & 0xFFFF;
    92d6:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
    92d8:	d1d8      	bne.n	928c <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
    92da:	481b      	ldr	r0, [pc, #108]	; (9348 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    92dc:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
    92de:	fba0 5001 	umull	r5, r0, r0, r1
    92e2:	1a0d      	subs	r5, r1, r0
    92e4:	eb00 0055 	add.w	r0, r0, r5, lsr #1
    92e8:	0940      	lsrs	r0, r0, #5
    92ea:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
    92ee:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    92f2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    92f4:	f3c0 05c4 	ubfx	r5, r0, #3, #5
    92f8:	f000 0607 	and.w	r6, r0, #7
    92fc:	5d55      	ldrb	r5, [r2, r5]
    92fe:	4135      	asrs	r5, r6
    9300:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
    9302:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    9304:	d41a      	bmi.n	933c <lll_chan_sel_2+0xbc>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    9306:	fb01 f303 	mul.w	r3, r1, r3
    930a:	1e56      	subs	r6, r2, #1
    930c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
    9310:	3204      	adds	r2, #4
		bite = *chan_map;
    9312:	f104 0508 	add.w	r5, r4, #8
    9316:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
    931a:	4620      	mov	r0, r4
    931c:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
    931e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
    9322:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
    9326:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
    932a:	d002      	beq.n	9332 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
    932c:	b133      	cbz	r3, 933c <lll_chan_sel_2+0xbc>
				chan_index--;
    932e:	3b01      	subs	r3, #1
    9330:	b2db      	uxtb	r3, r3
			chan_next++;
    9332:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
    9334:	42a0      	cmp	r0, r4
    9336:	d1f2      	bne.n	931e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
    9338:	42b2      	cmp	r2, r6
    933a:	d1ea      	bne.n	9312 <lll_chan_sel_2+0x92>
}
    933c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    933e:	bf00      	nop
    9340:	00022110 	.word	0x00022110
    9344:	00088440 	.word	0x00088440
    9348:	bacf914d 	.word	0xbacf914d

0000934c <disabled_cb>:
{
    934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    934e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    9350:	f8d5 70d0 	ldr.w	r7, [r5, #208]	; 0xd0
{
    9354:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    9356:	b1f7      	cbz	r7, 9396 <disabled_cb+0x4a>
	LL_ASSERT(adv->node_rx_cc_free);
    9358:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
	adv->link_cc_free = NULL;
    935c:	2300      	movs	r3, #0
    935e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	LL_ASSERT(adv->node_rx_cc_free);
    9362:	b374      	cbz	r4, 93c2 <disabled_cb+0x76>
	adv->node_rx_cc_free = NULL;
    9364:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
    9366:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    936a:	2208      	movs	r2, #8
	adv->node_rx_cc_free = NULL;
    936c:	f8c5 10d4 	str.w	r1, [r5, #212]	; 0xd4
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    9370:	f104 0020 	add.w	r0, r4, #32
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    9374:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
    9376:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    9378:	221e      	movs	r2, #30
    937a:	f00a fff9 	bl	14370 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    937e:	233c      	movs	r3, #60	; 0x3c
	ftr->param = param;
    9380:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    9382:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    9384:	f884 3020 	strb.w	r3, [r4, #32]
	ll_rx_put(link, rx);
    9388:	4621      	mov	r1, r4
    938a:	f7ff fd47 	bl	8e1c <ll_rx_put>
}
    938e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    9392:	f7ff bd4d 	b.w	8e30 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    9396:	4a13      	ldr	r2, [pc, #76]	; (93e4 <disabled_cb+0x98>)
    9398:	4913      	ldr	r1, [pc, #76]	; (93e8 <disabled_cb+0x9c>)
    939a:	4814      	ldr	r0, [pc, #80]	; (93ec <disabled_cb+0xa0>)
    939c:	f240 43b2 	movw	r3, #1202	; 0x4b2
    93a0:	f00a fca8 	bl	13cf4 <printk>
    93a4:	4040      	eors	r0, r0
    93a6:	f380 8811 	msr	BASEPRI, r0
    93aa:	f04f 0003 	mov.w	r0, #3
    93ae:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    93b0:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
    93b4:	f8d5 70d0 	ldr.w	r7, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
    93b8:	2300      	movs	r3, #0
    93ba:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	LL_ASSERT(adv->node_rx_cc_free);
    93be:	2c00      	cmp	r4, #0
    93c0:	d1d0      	bne.n	9364 <disabled_cb+0x18>
    93c2:	4a08      	ldr	r2, [pc, #32]	; (93e4 <disabled_cb+0x98>)
    93c4:	490a      	ldr	r1, [pc, #40]	; (93f0 <disabled_cb+0xa4>)
    93c6:	4809      	ldr	r0, [pc, #36]	; (93ec <disabled_cb+0xa0>)
    93c8:	f240 43b6 	movw	r3, #1206	; 0x4b6
    93cc:	f00a fc92 	bl	13cf4 <printk>
    93d0:	4040      	eors	r0, r0
    93d2:	f380 8811 	msr	BASEPRI, r0
    93d6:	f04f 0003 	mov.w	r0, #3
    93da:	df02      	svc	2
    93dc:	f8d5 40d4 	ldr.w	r4, [r5, #212]	; 0xd4
    93e0:	e7c0      	b.n	9364 <disabled_cb+0x18>
    93e2:	bf00      	nop
    93e4:	000155c0 	.word	0x000155c0
    93e8:	00015600 	.word	0x00015600
    93ec:	0001525c 	.word	0x0001525c
    93f0:	00015614 	.word	0x00015614

000093f4 <ticker_cb>:
{
    93f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93f8:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    93fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    93fe:	4295      	cmp	r5, r2
{
    9400:	b08a      	sub	sp, #40	; 0x28
    9402:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    9404:	d018      	beq.n	9438 <ticker_cb+0x44>
	return ++hdr->ref;
    9406:	7c1b      	ldrb	r3, [r3, #16]
    9408:	3301      	adds	r3, #1
    940a:	b2db      	uxtb	r3, r3
    940c:	4680      	mov	r8, r0
    940e:	460f      	mov	r7, r1
    9410:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
    9412:	2b00      	cmp	r3, #0
    9414:	d062      	beq.n	94dc <ticker_cb+0xe8>
		p.ticks_at_expire = ticks_at_expire;
    9416:	4e38      	ldr	r6, [pc, #224]	; (94f8 <ticker_cb+0x104>)
		mfy.param = &p;
    9418:	4b38      	ldr	r3, [pc, #224]	; (94fc <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
    941a:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    941e:	2200      	movs	r2, #0
	lll = &adv->lll;
    9420:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    9424:	4611      	mov	r1, r2
    9426:	2001      	movs	r0, #1
		mfy.param = &p;
    9428:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
    942a:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
    942c:	8135      	strh	r5, [r6, #8]
		p.param = lll;
    942e:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    9432:	f7fb f9eb 	bl	480c <mayfly_enqueue>
		LL_ASSERT(!ret);
    9436:	b938      	cbnz	r0, 9448 <ticker_cb+0x54>
	if (!lll->is_hdcd)
    9438:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    943c:	f015 0501 	ands.w	r5, r5, #1
    9440:	d014      	beq.n	946c <ticker_cb+0x78>
}
    9442:	b00a      	add	sp, #40	; 0x28
    9444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    9448:	4a2d      	ldr	r2, [pc, #180]	; (9500 <ticker_cb+0x10c>)
    944a:	492e      	ldr	r1, [pc, #184]	; (9504 <ticker_cb+0x110>)
    944c:	482e      	ldr	r0, [pc, #184]	; (9508 <ticker_cb+0x114>)
    944e:	f240 433a 	movw	r3, #1082	; 0x43a
    9452:	f00a fc4f 	bl	13cf4 <printk>
    9456:	4040      	eors	r0, r0
    9458:	f380 8811 	msr	BASEPRI, r0
    945c:	f04f 0003 	mov.w	r0, #3
    9460:	df02      	svc	2
	if (!lll->is_hdcd)
    9462:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    9466:	f015 0501 	ands.w	r5, r5, #1
    946a:	d1ea      	bne.n	9442 <ticker_cb+0x4e>
		lll_rng_isr_get(&random_delay, sizeof(random_delay));
    946c:	2104      	movs	r1, #4
    946e:	a809      	add	r0, sp, #36	; 0x24
    9470:	f005 fdfa 	bl	f068 <lll_rng_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    9474:	9809      	ldr	r0, [sp, #36]	; 0x24
    9476:	4925      	ldr	r1, [pc, #148]	; (950c <ticker_cb+0x118>)
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9478:	4a25      	ldr	r2, [pc, #148]	; (9510 <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    947a:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    947c:	fba1 3100 	umull	r3, r1, r1, r0
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9480:	1aa2      	subs	r2, r4, r2
    9482:	4c24      	ldr	r4, [pc, #144]	; (9514 <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    9484:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    9486:	1a43      	subs	r3, r0, r1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9488:	0892      	lsrs	r2, r2, #2
		random_delay %= ULL_ADV_RANDOM_DELAY;
    948a:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    948e:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
    9492:	f240 1147 	movw	r1, #327	; 0x147
    9496:	0a1b      	lsrs	r3, r3, #8
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9498:	0852      	lsrs	r2, r2, #1
		random_delay %= ULL_ADV_RANDOM_DELAY;
    949a:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
    949e:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    94a0:	491d      	ldr	r1, [pc, #116]	; (9518 <ticker_cb+0x124>)
    94a2:	9105      	str	r1, [sp, #20]
		random_delay += 1;
    94a4:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    94a6:	e9cd 5502 	strd	r5, r5, [sp, #8]
    94aa:	e9cd 5500 	strd	r5, r5, [sp]
    94ae:	4628      	mov	r0, r5
    94b0:	b2d2      	uxtb	r2, r2
    94b2:	2101      	movs	r1, #1
		random_delay += 1;
    94b4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    94b6:	f7fc fbc5 	bl	5c44 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    94ba:	f030 0302 	bics.w	r3, r0, #2
    94be:	d0c0      	beq.n	9442 <ticker_cb+0x4e>
    94c0:	4a0f      	ldr	r2, [pc, #60]	; (9500 <ticker_cb+0x10c>)
    94c2:	4916      	ldr	r1, [pc, #88]	; (951c <ticker_cb+0x128>)
    94c4:	4810      	ldr	r0, [pc, #64]	; (9508 <ticker_cb+0x114>)
    94c6:	f44f 638a 	mov.w	r3, #1104	; 0x450
    94ca:	f00a fc13 	bl	13cf4 <printk>
    94ce:	4040      	eors	r0, r0
    94d0:	f380 8811 	msr	BASEPRI, r0
    94d4:	f04f 0003 	mov.w	r0, #3
    94d8:	df02      	svc	2
}
    94da:	e7b2      	b.n	9442 <ticker_cb+0x4e>
		LL_ASSERT(ref);
    94dc:	4a08      	ldr	r2, [pc, #32]	; (9500 <ticker_cb+0x10c>)
    94de:	4910      	ldr	r1, [pc, #64]	; (9520 <ticker_cb+0x12c>)
    94e0:	4809      	ldr	r0, [pc, #36]	; (9508 <ticker_cb+0x114>)
    94e2:	f240 432e 	movw	r3, #1070	; 0x42e
    94e6:	f00a fc05 	bl	13cf4 <printk>
    94ea:	4040      	eors	r0, r0
    94ec:	f380 8811 	msr	BASEPRI, r0
    94f0:	f04f 0003 	mov.w	r0, #3
    94f4:	df02      	svc	2
    94f6:	e78e      	b.n	9416 <ticker_cb+0x22>
    94f8:	2000137c 	.word	0x2000137c
    94fc:	2000024c 	.word	0x2000024c
    9500:	000155c0 	.word	0x000155c0
    9504:	000154d0 	.word	0x000154d0
    9508:	0001525c 	.word	0x0001525c
    950c:	90d4f121 	.word	0x90d4f121
    9510:	2000128c 	.word	0x2000128c
    9514:	08fb823f 	.word	0x08fb823f
    9518:	000095c5 	.word	0x000095c5
    951c:	00015630 	.word	0x00015630
    9520:	0001562c 	.word	0x0001562c

00009524 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    9524:	2800      	cmp	r0, #0
    9526:	d130      	bne.n	958a <ticker_op_stop_cb+0x66>
{
    9528:	b538      	push	{r3, r4, r5, lr}
	mfy.param = &adv->lll;
    952a:	4d1f      	ldr	r5, [pc, #124]	; (95a8 <ticker_op_stop_cb+0x84>)
	if (hdr->ref) {
    952c:	7c0a      	ldrb	r2, [r1, #16]
	mfy.param = &adv->lll;
    952e:	f101 031c 	add.w	r3, r1, #28
    9532:	460c      	mov	r4, r1
    9534:	60ab      	str	r3, [r5, #8]
	if (hdr->ref) {
    9536:	b1e2      	cbz	r2, 9572 <ticker_op_stop_cb+0x4e>
		LL_ASSERT(!hdr->disabled_cb);
    9538:	694a      	ldr	r2, [r1, #20]
    953a:	b16a      	cbz	r2, 9558 <ticker_op_stop_cb+0x34>
    953c:	4a1b      	ldr	r2, [pc, #108]	; (95ac <ticker_op_stop_cb+0x88>)
    953e:	491c      	ldr	r1, [pc, #112]	; (95b0 <ticker_op_stop_cb+0x8c>)
    9540:	481c      	ldr	r0, [pc, #112]	; (95b4 <ticker_op_stop_cb+0x90>)
    9542:	f44f 6393 	mov.w	r3, #1176	; 0x498
    9546:	f00a fbd5 	bl	13cf4 <printk>
    954a:	4040      	eors	r0, r0
    954c:	f380 8811 	msr	BASEPRI, r0
    9550:	f04f 0003 	mov.w	r0, #3
    9554:	df02      	svc	2
    9556:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    9558:	4917      	ldr	r1, [pc, #92]	; (95b8 <ticker_op_stop_cb+0x94>)
		mfy.fp = lll_disable;
    955a:	4818      	ldr	r0, [pc, #96]	; (95bc <ticker_op_stop_cb+0x98>)
		hdr->disabled_param = mfy.param;
    955c:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    955e:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    9560:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    9562:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    9564:	4b10      	ldr	r3, [pc, #64]	; (95a8 <ticker_op_stop_cb+0x84>)
    9566:	4611      	mov	r1, r2
    9568:	2002      	movs	r0, #2
    956a:	f7fb f94f 	bl	480c <mayfly_enqueue>
		LL_ASSERT(!ret);
    956e:	b968      	cbnz	r0, 958c <ticker_op_stop_cb+0x68>
}
    9570:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    9572:	4b11      	ldr	r3, [pc, #68]	; (95b8 <ticker_op_stop_cb+0x94>)
    9574:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    9576:	2101      	movs	r1, #1
    9578:	462b      	mov	r3, r5
    957a:	2002      	movs	r0, #2
    957c:	f7fb f946 	bl	480c <mayfly_enqueue>
		LL_ASSERT(!ret);
    9580:	2800      	cmp	r0, #0
    9582:	d0f5      	beq.n	9570 <ticker_op_stop_cb+0x4c>
    9584:	f240 43a4 	movw	r3, #1188	; 0x4a4
    9588:	e002      	b.n	9590 <ticker_op_stop_cb+0x6c>
    958a:	4770      	bx	lr
		LL_ASSERT(!ret);
    958c:	f240 439f 	movw	r3, #1183	; 0x49f
		LL_ASSERT(!ret);
    9590:	4a06      	ldr	r2, [pc, #24]	; (95ac <ticker_op_stop_cb+0x88>)
    9592:	490b      	ldr	r1, [pc, #44]	; (95c0 <ticker_op_stop_cb+0x9c>)
    9594:	4807      	ldr	r0, [pc, #28]	; (95b4 <ticker_op_stop_cb+0x90>)
    9596:	f00a fbad 	bl	13cf4 <printk>
    959a:	4040      	eors	r0, r0
    959c:	f380 8811 	msr	BASEPRI, r0
    95a0:	f04f 0003 	mov.w	r0, #3
    95a4:	df02      	svc	2
}
    95a6:	bd38      	pop	{r3, r4, r5, pc}
    95a8:	2000025c 	.word	0x2000025c
    95ac:	000155c0 	.word	0x000155c0
    95b0:	0001564c 	.word	0x0001564c
    95b4:	0001525c 	.word	0x0001525c
    95b8:	0000934d 	.word	0x0000934d
    95bc:	0000f0d5 	.word	0x0000f0d5
    95c0:	000154d0 	.word	0x000154d0

000095c4 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    95c4:	b900      	cbnz	r0, 95c8 <ticker_op_update_cb+0x4>
    95c6:	4770      	bx	lr
{
    95c8:	b510      	push	{r4, lr}
    95ca:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    95cc:	f7ff fcc8 	bl	8f60 <ull_disable_mark_get>
    95d0:	4284      	cmp	r4, r0
    95d2:	d00c      	beq.n	95ee <ticker_op_update_cb+0x2a>
    95d4:	4a06      	ldr	r2, [pc, #24]	; (95f0 <ticker_op_update_cb+0x2c>)
    95d6:	4907      	ldr	r1, [pc, #28]	; (95f4 <ticker_op_update_cb+0x30>)
    95d8:	4807      	ldr	r0, [pc, #28]	; (95f8 <ticker_op_update_cb+0x34>)
    95da:	f240 4359 	movw	r3, #1113	; 0x459
    95de:	f00a fb89 	bl	13cf4 <printk>
    95e2:	4040      	eors	r0, r0
    95e4:	f380 8811 	msr	BASEPRI, r0
    95e8:	f04f 0003 	mov.w	r0, #3
    95ec:	df02      	svc	2
}
    95ee:	bd10      	pop	{r4, pc}
    95f0:	000155c0 	.word	0x000155c0
    95f4:	00015660 	.word	0x00015660
    95f8:	0001525c 	.word	0x0001525c

000095fc <ticker_stop_cb>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    95fc:	4a1a      	ldr	r2, [pc, #104]	; (9668 <ticker_stop_cb+0x6c>)
    95fe:	481b      	ldr	r0, [pc, #108]	; (966c <ticker_stop_cb+0x70>)
{
    9600:	b530      	push	{r4, r5, lr}
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9602:	1a9a      	subs	r2, r3, r2
    9604:	0892      	lsrs	r2, r2, #2
{
    9606:	461d      	mov	r5, r3
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9608:	fba0 3202 	umull	r3, r2, r0, r2
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
    960c:	f3c2 034f 	ubfx	r3, r2, #1, #16
{
    9610:	b083      	sub	sp, #12
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9612:	0854      	lsrs	r4, r2, #1
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
    9614:	b9cb      	cbnz	r3, 964a <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
    9616:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    9618:	4b15      	ldr	r3, [pc, #84]	; (9670 <ticker_stop_cb+0x74>)
    961a:	9500      	str	r5, [sp, #0]
    961c:	b2d2      	uxtb	r2, r2
    961e:	2101      	movs	r1, #1
    9620:	2000      	movs	r0, #0
    9622:	f7fc fb5f 	bl	5ce4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9626:	f030 0302 	bics.w	r3, r0, #2
    962a:	d00c      	beq.n	9646 <ticker_stop_cb+0x4a>
    962c:	4a11      	ldr	r2, [pc, #68]	; (9674 <ticker_stop_cb+0x78>)
    962e:	4912      	ldr	r1, [pc, #72]	; (9678 <ticker_stop_cb+0x7c>)
    9630:	4812      	ldr	r0, [pc, #72]	; (967c <ticker_stop_cb+0x80>)
    9632:	f240 437a 	movw	r3, #1146	; 0x47a
    9636:	f00a fb5d 	bl	13cf4 <printk>
    963a:	4040      	eors	r0, r0
    963c:	f380 8811 	msr	BASEPRI, r0
    9640:	f04f 0003 	mov.w	r0, #3
    9644:	df02      	svc	2
}
    9646:	b003      	add	sp, #12
    9648:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_MAX);
    964a:	4a0a      	ldr	r2, [pc, #40]	; (9674 <ticker_stop_cb+0x78>)
    964c:	490c      	ldr	r1, [pc, #48]	; (9680 <ticker_stop_cb+0x84>)
    964e:	480b      	ldr	r0, [pc, #44]	; (967c <ticker_stop_cb+0x80>)
    9650:	f240 4375 	movw	r3, #1141	; 0x475
    9654:	f00a fb4e 	bl	13cf4 <printk>
    9658:	4040      	eors	r0, r0
    965a:	f380 8811 	msr	BASEPRI, r0
    965e:	f04f 0003 	mov.w	r0, #3
    9662:	df02      	svc	2
    9664:	e7d7      	b.n	9616 <ticker_stop_cb+0x1a>
    9666:	bf00      	nop
    9668:	2000128c 	.word	0x2000128c
    966c:	08fb823f 	.word	0x08fb823f
    9670:	00009525 	.word	0x00009525
    9674:	000155c0 	.word	0x000155c0
    9678:	00015630 	.word	0x00015630
    967c:	0001525c 	.word	0x0001525c
    9680:	00015690 	.word	0x00015690

00009684 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    9684:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    9686:	4c1d      	ldr	r4, [pc, #116]	; (96fc <conn_release.constprop.0+0x78>)
    9688:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
    968a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    968c:	b163      	cbz	r3, 96a8 <conn_release.constprop.0+0x24>
    968e:	4a1c      	ldr	r2, [pc, #112]	; (9700 <conn_release.constprop.0+0x7c>)
    9690:	491c      	ldr	r1, [pc, #112]	; (9704 <conn_release.constprop.0+0x80>)
    9692:	481d      	ldr	r0, [pc, #116]	; (9708 <conn_release.constprop.0+0x84>)
    9694:	f240 43cd 	movw	r3, #1229	; 0x4cd
    9698:	f00a fb2c 	bl	13cf4 <printk>
    969c:	4040      	eors	r0, r0
    969e:	f380 8811 	msr	BASEPRI, r0
    96a2:	f04f 0003 	mov.w	r0, #3
    96a6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    96a8:	f105 0150 	add.w	r1, r5, #80	; 0x50
    96ac:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    96b0:	f7fb f82e 	bl	4710 <memq_deinit>
	LL_ASSERT(link);
    96b4:	4606      	mov	r6, r0
    96b6:	b190      	cbz	r0, 96de <conn_release.constprop.0+0x5a>
	ll_conn_release(lll->hdr.parent);
    96b8:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    96ba:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
    96bc:	f000 ff8a 	bl	a5d4 <ll_conn_release>
	adv->lll.conn = NULL;
    96c0:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    96c2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	adv->lll.conn = NULL;
    96c6:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
    96c8:	f7ff fba2 	bl	8e10 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    96cc:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->node_rx_cc_free = NULL;
    96d0:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	ll_rx_link_release(adv->link_cc_free);
    96d4:	f7ff fb90 	bl	8df8 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    96d8:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
}
    96dc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    96de:	4a08      	ldr	r2, [pc, #32]	; (9700 <conn_release.constprop.0+0x7c>)
    96e0:	490a      	ldr	r1, [pc, #40]	; (970c <conn_release.constprop.0+0x88>)
    96e2:	4809      	ldr	r0, [pc, #36]	; (9708 <conn_release.constprop.0+0x84>)
    96e4:	f240 43cf 	movw	r3, #1231	; 0x4cf
    96e8:	f00a fb04 	bl	13cf4 <printk>
    96ec:	4040      	eors	r0, r0
    96ee:	f380 8811 	msr	BASEPRI, r0
    96f2:	f04f 0003 	mov.w	r0, #3
    96f6:	df02      	svc	2
    96f8:	e7de      	b.n	96b8 <conn_release.constprop.0+0x34>
    96fa:	bf00      	nop
    96fc:	2000128c 	.word	0x2000128c
    9700:	000155c0 	.word	0x000155c0
    9704:	0001569c 	.word	0x0001569c
    9708:	0001525c 	.word	0x0001525c
    970c:	00015778 	.word	0x00015778

00009710 <ll_adv_params_set>:
{
    9710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9714:	4d4b      	ldr	r5, [pc, #300]	; (9844 <ll_adv_params_set+0x134>)
	if (!adv || adv->is_enabled) {
    9716:	4c4c      	ldr	r4, [pc, #304]	; (9848 <ll_adv_params_set+0x138>)
{
    9718:	4686      	mov	lr, r0
	if (!adv || adv->is_enabled) {
    971a:	f894 70cc 	ldrb.w	r7, [r4, #204]	; 0xcc
{
    971e:	468c      	mov	ip, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9720:	e895 0003 	ldmia.w	r5, {r0, r1}
{
    9724:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    9726:	f017 0701 	ands.w	r7, r7, #1
{
    972a:	4699      	mov	r9, r3
    972c:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
    9730:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    9734:	9000      	str	r0, [sp, #0]
    9736:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    973a:	d170      	bne.n	981e <ll_adv_params_set+0x10e>
    973c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    9740:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    9742:	4615      	mov	r5, r2
    9744:	f04f 0827 	mov.w	r8, #39	; 0x27
    9748:	222d      	movs	r2, #45	; 0x2d
    974a:	fb18 2800 	smlabb	r8, r8, r0, r2
	pdu->type = pdu_adv_type[adv_type];
    974e:	aa02      	add	r2, sp, #8
    9750:	4462      	add	r2, ip
    9752:	f814 0008 	ldrb.w	r0, [r4, r8]
    9756:	f812 2c08 	ldrb.w	r2, [r2, #-8]
	adv->lll.chan_map = chan_map;
    975a:	f006 0607 	and.w	r6, r6, #7
		adv->interval = 0;
    975e:	f1bc 0f01 	cmp.w	ip, #1
	adv->lll.chan_map = chan_map;
    9762:	f003 0303 	and.w	r3, r3, #3
    9766:	ea4f 0646 	mov.w	r6, r6, lsl #1
	pdu->type = pdu_adv_type[adv_type];
    976a:	f020 001f 	bic.w	r0, r0, #31
		adv->interval = 0;
    976e:	bf08      	it	eq
    9770:	f04f 0e00 	moveq.w	lr, #0
	adv->lll.chan_map = chan_map;
    9774:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    9778:	f012 0f0e 	tst.w	r2, #14
	adv->own_addr_type = own_addr_type;
    977c:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
    9780:	f8a4 e0d8 	strh.w	lr, [r4, #216]	; 0xd8
	pdu->type = pdu_adv_type[adv_type];
    9784:	f002 020f 	and.w	r2, r2, #15
	adv->lll.chan_map = chan_map;
    9788:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
    978c:	ea42 0200 	orr.w	r2, r2, r0
    9790:	f021 0102 	bic.w	r1, r1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    9794:	bf0c      	ite	eq
    9796:	2001      	moveq	r0, #1
    9798:	2000      	movne	r0, #0
	adv->own_addr_type = own_addr_type;
    979a:	f365 0301 	bfi	r3, r5, #0, #2
    979e:	f360 1245 	bfi	r2, r0, #5, #1
	adv->lll.chan_map = chan_map;
    97a2:	430e      	orrs	r6, r1
    97a4:	8526      	strh	r6, [r4, #40]	; 0x28
    97a6:	f804 2008 	strb.w	r2, [r4, r8]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    97aa:	b2da      	uxtb	r2, r3
	adv->own_addr_type = own_addr_type;
    97ac:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    97b0:	079b      	lsls	r3, r3, #30
    97b2:	eb04 0608 	add.w	r6, r4, r8
    97b6:	d426      	bmi.n	9806 <ll_adv_params_set+0xf6>
	pdu->tx_addr = own_addr_type & 0x1;
    97b8:	f814 2008 	ldrb.w	r2, [r4, r8]
    97bc:	f365 1286 	bfi	r2, r5, #6, #1
	pdu->rx_addr = 0;
    97c0:	f36f 12c7 	bfc	r2, #7, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    97c4:	f002 030f 	and.w	r3, r2, #15
    97c8:	2b01      	cmp	r3, #1
	pdu->rx_addr = 0;
    97ca:	f804 2008 	strb.w	r2, [r4, r8]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    97ce:	b2d2      	uxtb	r2, r2
    97d0:	d02a      	beq.n	9828 <ll_adv_params_set+0x118>
	} else if (pdu->len == 0) {
    97d2:	7873      	ldrb	r3, [r6, #1]
    97d4:	b90b      	cbnz	r3, 97da <ll_adv_params_set+0xca>
		pdu->len = BDADDR_SIZE;
    97d6:	2306      	movs	r3, #6
    97d8:	7073      	strb	r3, [r6, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    97da:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    97de:	01ad      	lsls	r5, r5, #6
    97e0:	2327      	movs	r3, #39	; 0x27
    97e2:	227d      	movs	r2, #125	; 0x7d
    97e4:	fb13 2301 	smlabb	r3, r3, r1, r2
    97e8:	f005 0540 	and.w	r5, r5, #64	; 0x40
    97ec:	f045 0504 	orr.w	r5, r5, #4
    97f0:	54e5      	strb	r5, [r4, r3]
    97f2:	441c      	add	r4, r3
	if (pdu->len == 0) {
    97f4:	7863      	ldrb	r3, [r4, #1]
    97f6:	b913      	cbnz	r3, 97fe <ll_adv_params_set+0xee>
		pdu->len = BDADDR_SIZE;
    97f8:	2206      	movs	r2, #6
	return 0;
    97fa:	461f      	mov	r7, r3
		pdu->len = BDADDR_SIZE;
    97fc:	7062      	strb	r2, [r4, #1]
}
    97fe:	4638      	mov	r0, r7
    9800:	b003      	add	sp, #12
    9802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		adv->id_addr_type = direct_addr_type;
    9806:	4613      	mov	r3, r2
    9808:	f369 0382 	bfi	r3, r9, #2, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    980c:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
    980e:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    9812:	2206      	movs	r2, #6
    9814:	f104 00db 	add.w	r0, r4, #219	; 0xdb
    9818:	f00a fd7f 	bl	1431a <memcpy>
    981c:	e7cc      	b.n	97b8 <ll_adv_params_set+0xa8>
		return BT_HCI_ERR_CMD_DISALLOWED;
    981e:	270c      	movs	r7, #12
}
    9820:	4638      	mov	r0, r7
    9822:	b003      	add	sp, #12
    9824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = direct_addr_type;
    9828:	4613      	mov	r3, r2
    982a:	f369 13c7 	bfi	r3, r9, #7, #1
    982e:	f804 3008 	strb.w	r3, [r4, r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9832:	990a      	ldr	r1, [sp, #40]	; 0x28
    9834:	2206      	movs	r2, #6
    9836:	f106 0008 	add.w	r0, r6, #8
    983a:	f00a fd6e 	bl	1431a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    983e:	230c      	movs	r3, #12
    9840:	7073      	strb	r3, [r6, #1]
    9842:	e7ca      	b.n	97da <ll_adv_params_set+0xca>
    9844:	000151a8 	.word	0x000151a8
    9848:	2000128c 	.word	0x2000128c

0000984c <ll_adv_data_set>:
{
    984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    9850:	4d21      	ldr	r5, [pc, #132]	; (98d8 <ll_adv_data_set+0x8c>)
    9852:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
    9856:	2627      	movs	r6, #39	; 0x27
    9858:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    985c:	fb16 c207 	smlabb	r2, r6, r7, ip
    9860:	4688      	mov	r8, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    9862:	5cab      	ldrb	r3, [r5, r2]
    9864:	f003 0e0f 	and.w	lr, r3, #15
    9868:	f1be 0f01 	cmp.w	lr, #1
    986c:	eb05 0102 	add.w	r1, r5, r2
    9870:	d023      	beq.n	98ba <ll_adv_data_set+0x6e>
	if (pdu->first == pdu->last) {
    9872:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    9876:	42ba      	cmp	r2, r7
    9878:	4604      	mov	r4, r0
    987a:	d021      	beq.n	98c0 <ll_adv_data_set+0x74>
    987c:	460e      	mov	r6, r1
		pdu->chan_sel = prev->chan_sel;
    987e:	f3c3 1040 	ubfx	r0, r3, #5, #1
	pdu->type = prev->type;
    9882:	f3c3 0203 	ubfx	r2, r3, #0, #4
    9886:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
    988a:	f3c3 1080 	ubfx	r0, r3, #6, #1
	pdu->type = prev->type;
    988e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
    9892:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9896:	4630      	mov	r0, r6
    9898:	4313      	orrs	r3, r2
    989a:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    989e:	3102      	adds	r1, #2
    98a0:	2206      	movs	r2, #6
    98a2:	f00a fd3a 	bl	1431a <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    98a6:	4622      	mov	r2, r4
    98a8:	4641      	mov	r1, r8
    98aa:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
    98ae:	3406      	adds	r4, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    98b0:	f00a fd33 	bl	1431a <memcpy>
	pdu->len = BDADDR_SIZE + len;
    98b4:	7074      	strb	r4, [r6, #1]
	pdu->last = idx;
    98b6:	f885 702c 	strb.w	r7, [r5, #44]	; 0x2c
}
    98ba:	2000      	movs	r0, #0
    98bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
    98c0:	3701      	adds	r7, #1
    98c2:	b2ff      	uxtb	r7, r7
		if (last == DOUBLE_BUFFER_SIZE) {
    98c4:	2f02      	cmp	r7, #2
    98c6:	d003      	beq.n	98d0 <ll_adv_data_set+0x84>
    98c8:	fb16 c607 	smlabb	r6, r6, r7, ip
    98cc:	442e      	add	r6, r5
    98ce:	e7d6      	b.n	987e <ll_adv_data_set+0x32>
    98d0:	f105 062d 	add.w	r6, r5, #45	; 0x2d
			last = 0U;
    98d4:	2700      	movs	r7, #0
    98d6:	e7d2      	b.n	987e <ll_adv_data_set+0x32>
    98d8:	2000128c 	.word	0x2000128c

000098dc <ll_adv_scan_rsp_set>:
{
    98dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    98e0:	4d1b      	ldr	r5, [pc, #108]	; (9950 <ll_adv_scan_rsp_set+0x74>)
    98e2:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
	if (pdu->first == pdu->last) {
    98e6:	f895 c07b 	ldrb.w	ip, [r5, #123]	; 0x7b
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    98ea:	2427      	movs	r4, #39	; 0x27
    98ec:	227d      	movs	r2, #125	; 0x7d
    98ee:	fb14 2306 	smlabb	r3, r4, r6, r2
	if (pdu->first == pdu->last) {
    98f2:	45b4      	cmp	ip, r6
    98f4:	4688      	mov	r8, r1
    98f6:	4607      	mov	r7, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    98f8:	eb05 0103 	add.w	r1, r5, r3
	if (pdu->first == pdu->last) {
    98fc:	d01b      	beq.n	9936 <ll_adv_scan_rsp_set+0x5a>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    98fe:	460c      	mov	r4, r1
	pdu->tx_addr = prev->tx_addr;
    9900:	5ceb      	ldrb	r3, [r5, r3]
    9902:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9906:	019b      	lsls	r3, r3, #6
    9908:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
    990c:	f107 0c06 	add.w	ip, r7, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9910:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
    9912:	f884 c001 	strb.w	ip, [r4, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    9916:	3102      	adds	r1, #2
    9918:	2206      	movs	r2, #6
    991a:	1ca0      	adds	r0, r4, #2
    991c:	f00a fcfd 	bl	1431a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    9920:	463a      	mov	r2, r7
    9922:	4641      	mov	r1, r8
    9924:	f104 0008 	add.w	r0, r4, #8
    9928:	f00a fcf7 	bl	1431a <memcpy>
	pdu->last = idx;
    992c:	f885 607c 	strb.w	r6, [r5, #124]	; 0x7c
}
    9930:	2000      	movs	r0, #0
    9932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
    9936:	3601      	adds	r6, #1
    9938:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
    993a:	2e02      	cmp	r6, #2
    993c:	d003      	beq.n	9946 <ll_adv_scan_rsp_set+0x6a>
    993e:	fb14 2406 	smlabb	r4, r4, r6, r2
    9942:	442c      	add	r4, r5
    9944:	e7dc      	b.n	9900 <ll_adv_scan_rsp_set+0x24>
    9946:	f105 047d 	add.w	r4, r5, #125	; 0x7d
			last = 0U;
    994a:	2600      	movs	r6, #0
    994c:	e7d8      	b.n	9900 <ll_adv_scan_rsp_set+0x24>
    994e:	bf00      	nop
    9950:	2000128c 	.word	0x2000128c

00009954 <ull_adv_init>:
}
    9954:	2000      	movs	r0, #0
    9956:	4770      	bx	lr

00009958 <ull_adv_reset>:
{
    9958:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    995a:	4c4a      	ldr	r4, [pc, #296]	; (9a84 <ull_adv_reset+0x12c>)
{
    995c:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    995e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    9962:	2202      	movs	r2, #2
    9964:	9203      	str	r2, [sp, #12]
	if (!adv || !adv->is_enabled) {
    9966:	07da      	lsls	r2, r3, #31
    9968:	d554      	bpl.n	9a14 <ull_adv_reset+0xbc>
	mark = ull_disable_mark(adv);
    996a:	4620      	mov	r0, r4
    996c:	f7ff fae0 	bl	8f30 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    9970:	4284      	cmp	r4, r0
    9972:	d00c      	beq.n	998e <ull_adv_reset+0x36>
    9974:	4a44      	ldr	r2, [pc, #272]	; (9a88 <ull_adv_reset+0x130>)
    9976:	4945      	ldr	r1, [pc, #276]	; (9a8c <ull_adv_reset+0x134>)
    9978:	4845      	ldr	r0, [pc, #276]	; (9a90 <ull_adv_reset+0x138>)
    997a:	f240 43e9 	movw	r3, #1257	; 0x4e9
    997e:	f00a f9b9 	bl	13cf4 <printk>
    9982:	4040      	eors	r0, r0
    9984:	f380 8811 	msr	BASEPRI, r0
    9988:	f04f 0003 	mov.w	r0, #3
    998c:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    998e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9992:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    9994:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    9996:	d50d      	bpl.n	99b4 <ull_adv_reset+0x5c>
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    9998:	2103      	movs	r1, #3
    999a:	4b3e      	ldr	r3, [pc, #248]	; (9a94 <ull_adv_reset+0x13c>)
    999c:	9500      	str	r5, [sp, #0]
    999e:	2201      	movs	r2, #1
    99a0:	2000      	movs	r0, #0
    99a2:	f7fc f99f 	bl	5ce4 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    99a6:	4629      	mov	r1, r5
    99a8:	f7ff fab4 	bl	8f14 <ull_ticker_status_take>
		if (ret) {
    99ac:	2800      	cmp	r0, #0
    99ae:	d161      	bne.n	9a74 <ull_adv_reset+0x11c>
		ret_cb = TICKER_STATUS_BUSY;
    99b0:	2302      	movs	r3, #2
    99b2:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    99b4:	2103      	movs	r1, #3
    99b6:	4b37      	ldr	r3, [pc, #220]	; (9a94 <ull_adv_reset+0x13c>)
    99b8:	9500      	str	r5, [sp, #0]
    99ba:	2202      	movs	r2, #2
    99bc:	2000      	movs	r0, #0
    99be:	f7fc f991 	bl	5ce4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    99c2:	4629      	mov	r1, r5
    99c4:	f7ff faa6 	bl	8f14 <ull_ticker_status_take>
	if (ret) {
    99c8:	2800      	cmp	r0, #0
    99ca:	d139      	bne.n	9a40 <ull_adv_reset+0xe8>
	ret = ull_disable(&adv->lll);
    99cc:	4832      	ldr	r0, [pc, #200]	; (9a98 <ull_adv_reset+0x140>)
    99ce:	f7ff faeb 	bl	8fa8 <ull_disable>
	LL_ASSERT(!ret);
    99d2:	bb10      	cbnz	r0, 9a1a <ull_adv_reset+0xc2>
	mark = ull_disable_unmark(adv);
    99d4:	482b      	ldr	r0, [pc, #172]	; (9a84 <ull_adv_reset+0x12c>)
    99d6:	f7ff fab7 	bl	8f48 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    99da:	4284      	cmp	r4, r0
    99dc:	d00c      	beq.n	99f8 <ull_adv_reset+0xa0>
    99de:	4a2a      	ldr	r2, [pc, #168]	; (9a88 <ull_adv_reset+0x130>)
    99e0:	492a      	ldr	r1, [pc, #168]	; (9a8c <ull_adv_reset+0x134>)
    99e2:	482b      	ldr	r0, [pc, #172]	; (9a90 <ull_adv_reset+0x138>)
    99e4:	f240 530b 	movw	r3, #1291	; 0x50b
    99e8:	f00a f984 	bl	13cf4 <printk>
    99ec:	4040      	eors	r0, r0
    99ee:	f380 8811 	msr	BASEPRI, r0
    99f2:	f04f 0003 	mov.w	r0, #3
    99f6:	df02      	svc	2
	if (adv->lll.conn) {
    99f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    99fa:	b10b      	cbz	r3, 9a00 <ull_adv_reset+0xa8>
		conn_release(adv);
    99fc:	f7ff fe42 	bl	9684 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    9a00:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    9a04:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
    9a06:	f36f 0300 	bfc	r3, #0, #1
    9a0a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    9a0e:	f000 f9eb 	bl	9de8 <ull_scan_is_enabled_get>
    9a12:	b350      	cbz	r0, 9a6a <ull_adv_reset+0x112>
}
    9a14:	2000      	movs	r0, #0
    9a16:	b005      	add	sp, #20
    9a18:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    9a1a:	4a1b      	ldr	r2, [pc, #108]	; (9a88 <ull_adv_reset+0x130>)
    9a1c:	491f      	ldr	r1, [pc, #124]	; (9a9c <ull_adv_reset+0x144>)
    9a1e:	481c      	ldr	r0, [pc, #112]	; (9a90 <ull_adv_reset+0x138>)
    9a20:	f44f 63a1 	mov.w	r3, #1288	; 0x508
    9a24:	f00a f966 	bl	13cf4 <printk>
    9a28:	4040      	eors	r0, r0
    9a2a:	f380 8811 	msr	BASEPRI, r0
    9a2e:	f04f 0003 	mov.w	r0, #3
    9a32:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    9a34:	4813      	ldr	r0, [pc, #76]	; (9a84 <ull_adv_reset+0x12c>)
    9a36:	f7ff fa87 	bl	8f48 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    9a3a:	4284      	cmp	r4, r0
    9a3c:	d1cf      	bne.n	99de <ull_adv_reset+0x86>
    9a3e:	e7db      	b.n	99f8 <ull_adv_reset+0xa0>
		mark = ull_disable_mark(adv);
    9a40:	4810      	ldr	r0, [pc, #64]	; (9a84 <ull_adv_reset+0x12c>)
    9a42:	f7ff fa75 	bl	8f30 <ull_disable_mark>
		LL_ASSERT(mark == adv);
    9a46:	4284      	cmp	r4, r0
    9a48:	d0e4      	beq.n	9a14 <ull_adv_reset+0xbc>
    9a4a:	f240 5302 	movw	r3, #1282	; 0x502
    9a4e:	4a0e      	ldr	r2, [pc, #56]	; (9a88 <ull_adv_reset+0x130>)
    9a50:	490e      	ldr	r1, [pc, #56]	; (9a8c <ull_adv_reset+0x134>)
    9a52:	480f      	ldr	r0, [pc, #60]	; (9a90 <ull_adv_reset+0x138>)
    9a54:	f00a f94e 	bl	13cf4 <printk>
    9a58:	4040      	eors	r0, r0
    9a5a:	f380 8811 	msr	BASEPRI, r0
    9a5e:	f04f 0003 	mov.w	r0, #3
    9a62:	df02      	svc	2
}
    9a64:	2000      	movs	r0, #0
    9a66:	b005      	add	sp, #20
    9a68:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
    9a6a:	f004 fa25 	bl	deb8 <ull_filter_adv_scan_state_cb>
}
    9a6e:	2000      	movs	r0, #0
    9a70:	b005      	add	sp, #20
    9a72:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_mark(adv);
    9a74:	4803      	ldr	r0, [pc, #12]	; (9a84 <ull_adv_reset+0x12c>)
    9a76:	f7ff fa5b 	bl	8f30 <ull_disable_mark>
			LL_ASSERT(mark == adv);
    9a7a:	4284      	cmp	r4, r0
    9a7c:	d0ca      	beq.n	9a14 <ull_adv_reset+0xbc>
    9a7e:	f240 43f3 	movw	r3, #1267	; 0x4f3
    9a82:	e7e4      	b.n	9a4e <ull_adv_reset+0xf6>
    9a84:	2000128c 	.word	0x2000128c
    9a88:	000155c0 	.word	0x000155c0
    9a8c:	000156b0 	.word	0x000156b0
    9a90:	0001525c 	.word	0x0001525c
    9a94:	00008f09 	.word	0x00008f09
    9a98:	200012a8 	.word	0x200012a8
    9a9c:	000154d0 	.word	0x000154d0

00009aa0 <ull_adv_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9aa0:	4a04      	ldr	r2, [pc, #16]	; (9ab4 <ull_adv_handle_get+0x14>)
    9aa2:	4b05      	ldr	r3, [pc, #20]	; (9ab8 <ull_adv_handle_get+0x18>)
    9aa4:	1a80      	subs	r0, r0, r2
    9aa6:	0880      	lsrs	r0, r0, #2
    9aa8:	fba3 3000 	umull	r3, r0, r3, r0
}
    9aac:	f3c0 004f 	ubfx	r0, r0, #1, #16
    9ab0:	4770      	bx	lr
    9ab2:	bf00      	nop
    9ab4:	2000128c 	.word	0x2000128c
    9ab8:	08fb823f 	.word	0x08fb823f

00009abc <ull_adv_lll_handle_get>:
	return ((u8_t *)adv - (u8_t *)ll_adv) / sizeof(*adv);
    9abc:	4a04      	ldr	r2, [pc, #16]	; (9ad0 <ull_adv_lll_handle_get+0x14>)
    9abe:	6800      	ldr	r0, [r0, #0]
    9ac0:	4b04      	ldr	r3, [pc, #16]	; (9ad4 <ull_adv_lll_handle_get+0x18>)
    9ac2:	1a80      	subs	r0, r0, r2
    9ac4:	0880      	lsrs	r0, r0, #2
    9ac6:	fba3 3000 	umull	r3, r0, r3, r0
}
    9aca:	f3c0 004f 	ubfx	r0, r0, #1, #16
    9ace:	4770      	bx	lr
    9ad0:	2000128c 	.word	0x2000128c
    9ad4:	08fb823f 	.word	0x08fb823f

00009ad8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
    9ad8:	b938      	cbnz	r0, 9aea <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    9ada:	4805      	ldr	r0, [pc, #20]	; (9af0 <ull_adv_is_enabled_get+0x18>)
    9adc:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
	return &ll_adv[handle];
    9ae0:	f013 0f01 	tst.w	r3, #1
    9ae4:	bf08      	it	eq
    9ae6:	2000      	moveq	r0, #0
    9ae8:	4770      	bx	lr
		return NULL;
    9aea:	2000      	movs	r0, #0
}
    9aec:	4770      	bx	lr
    9aee:	bf00      	nop
    9af0:	2000128c 	.word	0x2000128c

00009af4 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_MAX) {
    9af4:	b928      	cbnz	r0, 9b02 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    9af6:	4b04      	ldr	r3, [pc, #16]	; (9b08 <ull_adv_is_enabled+0x14>)
    9af8:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
    9afc:	f000 0001 	and.w	r0, r0, #1
    9b00:	4770      	bx	lr
		return 0;
    9b02:	2000      	movs	r0, #0
}
    9b04:	4770      	bx	lr
    9b06:	bf00      	nop
    9b08:	2000128c 	.word	0x2000128c

00009b0c <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_MAX) {
    9b0c:	b950      	cbnz	r0, 9b24 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    9b0e:	4b06      	ldr	r3, [pc, #24]	; (9b28 <ull_adv_filter_pol_get+0x1c>)
    9b10:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
    9b14:	f010 0001 	ands.w	r0, r0, #1
    9b18:	d005      	beq.n	9b26 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    9b1a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    9b1e:	f000 0003 	and.w	r0, r0, #3
    9b22:	4770      	bx	lr
		return 0;
    9b24:	2000      	movs	r0, #0
}
    9b26:	4770      	bx	lr
    9b28:	2000128c 	.word	0x2000128c

00009b2c <ticker_cb>:
	return 0;
}

static void ticker_cb(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		      void *param)
{
    9b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b30:	461c      	mov	r4, r3
    9b32:	7c1b      	ldrb	r3, [r3, #16]
    9b34:	3301      	adds	r3, #1
    9b36:	b2db      	uxtb	r3, r3
    9b38:	4680      	mov	r8, r0
    9b3a:	460f      	mov	r7, r1
    9b3c:	4616      	mov	r6, r2
    9b3e:	7423      	strb	r3, [r4, #16]

	DEBUG_RADIO_PREPARE_O(1);

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    9b40:	b353      	cbz	r3, 9b98 <ticker_cb+0x6c>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    9b42:	4d24      	ldr	r5, [pc, #144]	; (9bd4 <ticker_cb+0xa8>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = &scan->lll;
	mfy.param = &p;
    9b44:	4b24      	ldr	r3, [pc, #144]	; (9bd8 <ticker_cb+0xac>)
	p.ticks_at_expire = ticks_at_expire;
    9b46:	f8c5 8000 	str.w	r8, [r5]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    9b4a:	2200      	movs	r2, #0
	p.param = &scan->lll;
    9b4c:	f104 0c1c 	add.w	ip, r4, #28
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    9b50:	4611      	mov	r1, r2
    9b52:	2001      	movs	r0, #1
	mfy.param = &p;
    9b54:	609d      	str	r5, [r3, #8]
	p.remainder = remainder;
    9b56:	606f      	str	r7, [r5, #4]
	p.lazy = lazy;
    9b58:	812e      	strh	r6, [r5, #8]
	p.param = &scan->lll;
    9b5a:	f8c5 c00c 	str.w	ip, [r5, #12]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    9b5e:	f7fa fe55 	bl	480c <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    9b62:	b958      	cbnz	r0, 9b7c <ticker_cb+0x50>

#if defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
	/* calc next group in us for the anchor where first connection event
	 * to be placed
	 */
	if (scan->lll.conn) {
    9b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9b66:	b13b      	cbz	r3, 9b78 <ticker_cb+0x4c>
		static struct mayfly s_mfy_sched_after_mstr_offset_get = {
			0, 0, &s_link, NULL,
			ull_sched_mfy_after_mstr_offset_get};
		u32_t retval;

		s_mfy_sched_after_mstr_offset_get.param = (void *)scan;
    9b68:	4b1c      	ldr	r3, [pc, #112]	; (9bdc <ticker_cb+0xb0>)

		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    9b6a:	2201      	movs	r2, #1
    9b6c:	4610      	mov	r0, r2
    9b6e:	2102      	movs	r1, #2
		s_mfy_sched_after_mstr_offset_get.param = (void *)scan;
    9b70:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    9b72:	f7fa fe4b 	bl	480c <mayfly_enqueue>
				TICKER_USER_ID_ULL_LOW, 1,
				&s_mfy_sched_after_mstr_offset_get);
		LL_ASSERT(!retval);
    9b76:	b9e8      	cbnz	r0, 9bb4 <ticker_cb+0x88>
	}
#endif /* CONFIG_BT_CENTRAL && CONFIG_BT_CTLR_SCHED_ADVANCED */

	DEBUG_RADIO_PREPARE_O(1);
}
    9b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!ret);
    9b7c:	4a18      	ldr	r2, [pc, #96]	; (9be0 <ticker_cb+0xb4>)
    9b7e:	4919      	ldr	r1, [pc, #100]	; (9be4 <ticker_cb+0xb8>)
    9b80:	4819      	ldr	r0, [pc, #100]	; (9be8 <ticker_cb+0xbc>)
    9b82:	f44f 73ca 	mov.w	r3, #404	; 0x194
    9b86:	f00a f8b5 	bl	13cf4 <printk>
    9b8a:	4040      	eors	r0, r0
    9b8c:	f380 8811 	msr	BASEPRI, r0
    9b90:	f04f 0003 	mov.w	r0, #3
    9b94:	df02      	svc	2
    9b96:	e7e5      	b.n	9b64 <ticker_cb+0x38>
	LL_ASSERT(ref);
    9b98:	4a11      	ldr	r2, [pc, #68]	; (9be0 <ticker_cb+0xb4>)
    9b9a:	4914      	ldr	r1, [pc, #80]	; (9bec <ticker_cb+0xc0>)
    9b9c:	4812      	ldr	r0, [pc, #72]	; (9be8 <ticker_cb+0xbc>)
    9b9e:	f44f 73c4 	mov.w	r3, #392	; 0x188
    9ba2:	f00a f8a7 	bl	13cf4 <printk>
    9ba6:	4040      	eors	r0, r0
    9ba8:	f380 8811 	msr	BASEPRI, r0
    9bac:	f04f 0003 	mov.w	r0, #3
    9bb0:	df02      	svc	2
    9bb2:	e7c6      	b.n	9b42 <ticker_cb+0x16>
		LL_ASSERT(!retval);
    9bb4:	4a0a      	ldr	r2, [pc, #40]	; (9be0 <ticker_cb+0xb4>)
    9bb6:	490e      	ldr	r1, [pc, #56]	; (9bf0 <ticker_cb+0xc4>)
    9bb8:	480b      	ldr	r0, [pc, #44]	; (9be8 <ticker_cb+0xbc>)
    9bba:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    9bbe:	f00a f899 	bl	13cf4 <printk>
    9bc2:	4040      	eors	r0, r0
    9bc4:	f380 8811 	msr	BASEPRI, r0
    9bc8:	f04f 0003 	mov.w	r0, #3
    9bcc:	df02      	svc	2
}
    9bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bd2:	bf00      	nop
    9bd4:	200013e0 	.word	0x200013e0
    9bd8:	2000026c 	.word	0x2000026c
    9bdc:	2000027c 	.word	0x2000027c
    9be0:	000156bc 	.word	0x000156bc
    9be4:	000154d0 	.word	0x000154d0
    9be8:	0001525c 	.word	0x0001525c
    9bec:	0001562c 	.word	0x0001562c
    9bf0:	000154f8 	.word	0x000154f8

00009bf4 <ull_scan_init>:
}
    9bf4:	2000      	movs	r0, #0
    9bf6:	4770      	bx	lr

00009bf8 <ull_scan_disable>:
{
    9bf8:	b530      	push	{r4, r5, lr}
    9bfa:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    9bfc:	2302      	movs	r3, #2
{
    9bfe:	4605      	mov	r5, r0
	mark = ull_disable_mark(scan);
    9c00:	4608      	mov	r0, r1
{
    9c02:	460c      	mov	r4, r1
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    9c04:	9303      	str	r3, [sp, #12]
	mark = ull_disable_mark(scan);
    9c06:	f7ff f993 	bl	8f30 <ull_disable_mark>
	LL_ASSERT(mark == scan);
    9c0a:	4284      	cmp	r4, r0
    9c0c:	d00c      	beq.n	9c28 <ull_scan_disable+0x30>
    9c0e:	4a2e      	ldr	r2, [pc, #184]	; (9cc8 <ull_scan_disable+0xd0>)
    9c10:	492e      	ldr	r1, [pc, #184]	; (9ccc <ull_scan_disable+0xd4>)
    9c12:	482f      	ldr	r0, [pc, #188]	; (9cd0 <ull_scan_disable+0xd8>)
    9c14:	f240 1313 	movw	r3, #275	; 0x113
    9c18:	f00a f86c 	bl	13cf4 <printk>
    9c1c:	4040      	eors	r0, r0
    9c1e:	f380 8811 	msr	BASEPRI, r0
    9c22:	f04f 0003 	mov.w	r0, #3
    9c26:	df02      	svc	2
			  TICKER_ID_SCAN_BASE + handle,
    9c28:	1d2a      	adds	r2, r5, #4
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    9c2a:	ad03      	add	r5, sp, #12
    9c2c:	2103      	movs	r1, #3
    9c2e:	4b29      	ldr	r3, [pc, #164]	; (9cd4 <ull_scan_disable+0xdc>)
    9c30:	9500      	str	r5, [sp, #0]
    9c32:	b2d2      	uxtb	r2, r2
    9c34:	2000      	movs	r0, #0
    9c36:	f7fc f855 	bl	5ce4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    9c3a:	4629      	mov	r1, r5
    9c3c:	f7ff f96a 	bl	8f14 <ull_ticker_status_take>
	if (ret) {
    9c40:	bb50      	cbnz	r0, 9c98 <ull_scan_disable+0xa0>
	ret = ull_disable(&scan->lll);
    9c42:	f104 001c 	add.w	r0, r4, #28
    9c46:	f7ff f9af 	bl	8fa8 <ull_disable>
	LL_ASSERT(!ret);
    9c4a:	b9b8      	cbnz	r0, 9c7c <ull_scan_disable+0x84>
	mark = ull_disable_unmark(scan);
    9c4c:	4620      	mov	r0, r4
    9c4e:	f7ff f97b 	bl	8f48 <ull_disable_unmark>
	LL_ASSERT(mark == scan);
    9c52:	4284      	cmp	r4, r0
    9c54:	d00f      	beq.n	9c76 <ull_scan_disable+0x7e>
    9c56:	4a1c      	ldr	r2, [pc, #112]	; (9cc8 <ull_scan_disable+0xd0>)
    9c58:	491c      	ldr	r1, [pc, #112]	; (9ccc <ull_scan_disable+0xd4>)
    9c5a:	481d      	ldr	r0, [pc, #116]	; (9cd0 <ull_scan_disable+0xd8>)
    9c5c:	f240 1325 	movw	r3, #293	; 0x125
    9c60:	f00a f848 	bl	13cf4 <printk>
    9c64:	4040      	eors	r0, r0
    9c66:	f380 8811 	msr	BASEPRI, r0
    9c6a:	f04f 0003 	mov.w	r0, #3
    9c6e:	df02      	svc	2
	return 0;
    9c70:	2000      	movs	r0, #0
}
    9c72:	b005      	add	sp, #20
    9c74:	bd30      	pop	{r4, r5, pc}
	return 0;
    9c76:	2000      	movs	r0, #0
}
    9c78:	b005      	add	sp, #20
    9c7a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    9c7c:	4a12      	ldr	r2, [pc, #72]	; (9cc8 <ull_scan_disable+0xd0>)
    9c7e:	4916      	ldr	r1, [pc, #88]	; (9cd8 <ull_scan_disable+0xe0>)
    9c80:	4813      	ldr	r0, [pc, #76]	; (9cd0 <ull_scan_disable+0xd8>)
    9c82:	f44f 7391 	mov.w	r3, #290	; 0x122
    9c86:	f00a f835 	bl	13cf4 <printk>
    9c8a:	4040      	eors	r0, r0
    9c8c:	f380 8811 	msr	BASEPRI, r0
    9c90:	f04f 0003 	mov.w	r0, #3
    9c94:	df02      	svc	2
    9c96:	e7d9      	b.n	9c4c <ull_scan_disable+0x54>
		mark = ull_disable_unmark(scan);
    9c98:	4620      	mov	r0, r4
    9c9a:	f7ff f955 	bl	8f48 <ull_disable_unmark>
		LL_ASSERT(mark == scan);
    9c9e:	4284      	cmp	r4, r0
    9ca0:	d00f      	beq.n	9cc2 <ull_scan_disable+0xca>
    9ca2:	4a09      	ldr	r2, [pc, #36]	; (9cc8 <ull_scan_disable+0xd0>)
    9ca4:	4909      	ldr	r1, [pc, #36]	; (9ccc <ull_scan_disable+0xd4>)
    9ca6:	480a      	ldr	r0, [pc, #40]	; (9cd0 <ull_scan_disable+0xd8>)
    9ca8:	f44f 738e 	mov.w	r3, #284	; 0x11c
    9cac:	f00a f822 	bl	13cf4 <printk>
    9cb0:	4040      	eors	r0, r0
    9cb2:	f380 8811 	msr	BASEPRI, r0
    9cb6:	f04f 0003 	mov.w	r0, #3
    9cba:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    9cbc:	200c      	movs	r0, #12
}
    9cbe:	b005      	add	sp, #20
    9cc0:	bd30      	pop	{r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    9cc2:	200c      	movs	r0, #12
}
    9cc4:	b005      	add	sp, #20
    9cc6:	bd30      	pop	{r4, r5, pc}
    9cc8:	000156bc 	.word	0x000156bc
    9ccc:	000156fc 	.word	0x000156fc
    9cd0:	0001525c 	.word	0x0001525c
    9cd4:	00008f09 	.word	0x00008f09
    9cd8:	000154d0 	.word	0x000154d0

00009cdc <disable.constprop.0>:

static u8_t disable(u16_t handle)
    9cdc:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
    9cde:	4c0e      	ldr	r4, [pc, #56]	; (9d18 <disable.constprop.0+0x3c>)
    9ce0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    9ce4:	07db      	lsls	r3, r3, #31
    9ce6:	d501      	bpl.n	9cec <disable.constprop.0+0x10>
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
    9ce8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9cea:	b110      	cbz	r0, 9cf2 <disable.constprop.0+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9cec:	250c      	movs	r5, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
    9cee:	4628      	mov	r0, r5
    9cf0:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
    9cf2:	4621      	mov	r1, r4
    9cf4:	f7ff ff80 	bl	9bf8 <ull_scan_disable>
	if (ret) {
    9cf8:	4605      	mov	r5, r0
    9cfa:	2800      	cmp	r0, #0
    9cfc:	d1f7      	bne.n	9cee <disable.constprop.0+0x12>
	scan->is_enabled = 0U;
    9cfe:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    9d02:	f360 0300 	bfi	r3, r0, #0, #1
    9d06:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
    9d0a:	f7ff fee5 	bl	9ad8 <ull_adv_is_enabled_get>
    9d0e:	2800      	cmp	r0, #0
    9d10:	d1ed      	bne.n	9cee <disable.constprop.0+0x12>
		ull_filter_adv_scan_state_cb(0);
    9d12:	f004 f8d1 	bl	deb8 <ull_filter_adv_scan_state_cb>
    9d16:	e7ea      	b.n	9cee <disable.constprop.0+0x12>
    9d18:	20001394 	.word	0x20001394

00009d1c <ll_scan_enable>:
	if (!enable) {
    9d1c:	b358      	cbz	r0, 9d76 <ll_scan_enable+0x5a>
{
    9d1e:	b510      	push	{r4, lr}
	if (!scan || scan->is_enabled) {
    9d20:	4c1f      	ldr	r4, [pc, #124]	; (9da0 <ll_scan_enable+0x84>)
    9d22:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    9d26:	f013 0101 	ands.w	r1, r3, #1
    9d2a:	d136      	bne.n	9d9a <ll_scan_enable+0x7e>
	if (scan->own_addr_type & 0x1) {
    9d2c:	079a      	lsls	r2, r3, #30
    9d2e:	d506      	bpl.n	9d3e <ll_scan_enable+0x22>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
    9d30:	2001      	movs	r0, #1
    9d32:	f7fc f823 	bl	5d7c <ll_addr_get>
    9d36:	2106      	movs	r1, #6
    9d38:	f7fa fcda 	bl	46f0 <mem_nz>
    9d3c:	b1e8      	cbz	r0, 9d7a <ll_scan_enable+0x5e>
	ull_filter_scan_update(lll->filter_policy);
    9d3e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    9d42:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    9d46:	f004 f8fb 	bl	df40 <ull_filter_scan_update>
	lll->rpa_gen = 0;
    9d4a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    9d4e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
    9d52:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
    9d56:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
    9d58:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    9d5c:	09d3      	lsrs	r3, r2, #7
	lll->rl_idx = FILTER_IDX_NONE;
    9d5e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
    9d62:	d003      	beq.n	9d6c <ll_scan_enable+0x50>
    9d64:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    9d68:	075b      	lsls	r3, r3, #29
    9d6a:	d408      	bmi.n	9d7e <ll_scan_enable+0x62>
}
    9d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return ull_scan_enable(scan);
    9d70:	480b      	ldr	r0, [pc, #44]	; (9da0 <ll_scan_enable+0x84>)
    9d72:	f7f6 be91 	b.w	a98 <ull_scan_enable>
		return disable(0);
    9d76:	f7ff bfb1 	b.w	9cdc <disable.constprop.0>
			return BT_HCI_ERR_INVALID_PARAM;
    9d7a:	2012      	movs	r0, #18
}
    9d7c:	bd10      	pop	{r4, pc}
		ull_filter_rpa_update(false);
    9d7e:	2000      	movs	r0, #0
    9d80:	f004 f98e 	bl	e0a0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    9d84:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	return ull_scan_enable(scan);
    9d88:	4805      	ldr	r0, [pc, #20]	; (9da0 <ll_scan_enable+0x84>)
		lll->rpa_gen = 1;
    9d8a:	f043 0301 	orr.w	r3, r3, #1
    9d8e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    9d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return ull_scan_enable(scan);
    9d96:	f7f6 be7f 	b.w	a98 <ull_scan_enable>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9d9a:	200c      	movs	r0, #12
}
    9d9c:	bd10      	pop	{r4, pc}
    9d9e:	bf00      	nop
    9da0:	20001394 	.word	0x20001394

00009da4 <ull_scan_reset>:
{
    9da4:	b508      	push	{r3, lr}
		(void)disable(handle);
    9da6:	f7ff ff99 	bl	9cdc <disable.constprop.0>
}
    9daa:	2000      	movs	r0, #0
    9dac:	bd08      	pop	{r3, pc}
    9dae:	bf00      	nop

00009db0 <ull_scan_handle_get>:
	return ((u8_t *)scan - (u8_t *)ll_scan) / sizeof(*scan);
    9db0:	4a04      	ldr	r2, [pc, #16]	; (9dc4 <ull_scan_handle_get+0x14>)
    9db2:	4b05      	ldr	r3, [pc, #20]	; (9dc8 <ull_scan_handle_get+0x18>)
    9db4:	1a80      	subs	r0, r0, r2
    9db6:	0880      	lsrs	r0, r0, #2
    9db8:	fba3 3000 	umull	r3, r0, r3, r0
}
    9dbc:	f3c0 004f 	ubfx	r0, r0, #1, #16
    9dc0:	4770      	bx	lr
    9dc2:	bf00      	nop
    9dc4:	20001394 	.word	0x20001394
    9dc8:	1af286bd 	.word	0x1af286bd

00009dcc <ull_scan_lll_handle_get>:
	return ((u8_t *)scan - (u8_t *)ll_scan) / sizeof(*scan);
    9dcc:	4a04      	ldr	r2, [pc, #16]	; (9de0 <ull_scan_lll_handle_get+0x14>)
    9dce:	6800      	ldr	r0, [r0, #0]
    9dd0:	4b04      	ldr	r3, [pc, #16]	; (9de4 <ull_scan_lll_handle_get+0x18>)
    9dd2:	1a80      	subs	r0, r0, r2
    9dd4:	0880      	lsrs	r0, r0, #2
    9dd6:	fba3 3000 	umull	r3, r0, r3, r0
}
    9dda:	f3c0 004f 	ubfx	r0, r0, #1, #16
    9dde:	4770      	bx	lr
    9de0:	20001394 	.word	0x20001394
    9de4:	1af286bd 	.word	0x1af286bd

00009de8 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_MAX) {
    9de8:	b938      	cbnz	r0, 9dfa <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
    9dea:	4805      	ldr	r0, [pc, #20]	; (9e00 <ull_scan_is_enabled_get+0x18>)
    9dec:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
    9df0:	f013 0f01 	tst.w	r3, #1
    9df4:	bf08      	it	eq
    9df6:	2000      	moveq	r0, #0
    9df8:	4770      	bx	lr
		return NULL;
    9dfa:	2000      	movs	r0, #0
}
    9dfc:	4770      	bx	lr
    9dfe:	bf00      	nop
    9e00:	20001394 	.word	0x20001394

00009e04 <ull_scan_is_disabled_get>:
	if (handle >= BT_CTLR_SCAN_MAX) {
    9e04:	b938      	cbnz	r0, 9e16 <ull_scan_is_disabled_get+0x12>
	if (!scan || scan->is_enabled) {
    9e06:	4805      	ldr	r0, [pc, #20]	; (9e1c <ull_scan_is_disabled_get+0x18>)
    9e08:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
    9e0c:	f013 0f01 	tst.w	r3, #1
    9e10:	bf18      	it	ne
    9e12:	2000      	movne	r0, #0
    9e14:	4770      	bx	lr
		return NULL;
    9e16:	2000      	movs	r0, #0
}
    9e18:	4770      	bx	lr
    9e1a:	bf00      	nop
    9e1c:	20001394 	.word	0x20001394

00009e20 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_MAX) {
    9e20:	b988      	cbnz	r0, 9e46 <ull_scan_is_enabled+0x26>
	if (!scan || !scan->is_enabled) {
    9e22:	4a0a      	ldr	r2, [pc, #40]	; (9e4c <ull_scan_is_enabled+0x2c>)
    9e24:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
    9e28:	f013 0001 	ands.w	r0, r3, #1
    9e2c:	d00c      	beq.n	9e48 <ull_scan_is_enabled+0x28>
	return (((u32_t)scan->is_enabled << scan->lll.type) |
    9e2e:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
    9e32:	6a52      	ldr	r2, [r2, #36]	; 0x24
	return (((u32_t)scan->is_enabled << scan->lll.type) |
    9e34:	f003 0301 	and.w	r3, r3, #1
    9e38:	09c0      	lsrs	r0, r0, #7
    9e3a:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
    9e3e:	b11a      	cbz	r2, 9e48 <ull_scan_is_enabled+0x28>
    9e40:	f040 0004 	orr.w	r0, r0, #4
    9e44:	4770      	bx	lr
		return 0;
    9e46:	2000      	movs	r0, #0
}
    9e48:	4770      	bx	lr
    9e4a:	bf00      	nop
    9e4c:	20001394 	.word	0x20001394

00009e50 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_MAX) {
    9e50:	b950      	cbnz	r0, 9e68 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
    9e52:	4b06      	ldr	r3, [pc, #24]	; (9e6c <ull_scan_filter_pol_get+0x1c>)
    9e54:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
    9e58:	f010 0001 	ands.w	r0, r0, #1
    9e5c:	d005      	beq.n	9e6a <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
    9e5e:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
    9e62:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    9e66:	4770      	bx	lr
		return 0;
    9e68:	2000      	movs	r0, #0
}
    9e6a:	4770      	bx	lr
    9e6c:	20001394 	.word	0x20001394

00009e70 <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    9e70:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
{
    9e74:	4603      	mov	r3, r0
    9e76:	b410      	push	{r4}
    9e78:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    9e7a:	b172      	cbz	r2, 9e9a <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
    9e7c:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    9e80:	428a      	cmp	r2, r1
    9e82:	d02b      	beq.n	9edc <tx_ull_dequeue+0x6c>
    9e84:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
		if (conn->tx_head == conn->tx_data) {
    9e88:	4291      	cmp	r1, r2
    9e8a:	d01a      	beq.n	9ec2 <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
    9e8c:	680a      	ldr	r2, [r1, #0]
    9e8e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
    9e92:	2300      	movs	r3, #0
}
    9e94:	bc10      	pop	{r4}
		tx->next = NULL;
    9e96:	6003      	str	r3, [r0, #0]
}
    9e98:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    9e9a:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    9e9e:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    9ea2:	428a      	cmp	r2, r1
    9ea4:	d025      	beq.n	9ef2 <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    9ea6:	7911      	ldrb	r1, [r2, #4]
    9ea8:	f001 0103 	and.w	r1, r1, #3
    9eac:	2903      	cmp	r1, #3
    9eae:	d00e      	beq.n	9ece <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
    9eb0:	6812      	ldr	r2, [r2, #0]
    9eb2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
    9eb6:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    9eb8:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
    9ebc:	bc10      	pop	{r4}
		tx->next = tx;
    9ebe:	6000      	str	r0, [r0, #0]
}
    9ec0:	4770      	bx	lr
    9ec2:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
    9ec4:	6809      	ldr	r1, [r1, #0]
    9ec6:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    9eca:	4611      	mov	r1, r2
    9ecc:	e7de      	b.n	9e8c <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
    9ece:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    9ed0:	2903      	cmp	r1, #3
    9ed2:	d001      	beq.n	9ed8 <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    9ed4:	290a      	cmp	r1, #10
    9ed6:	d1eb      	bne.n	9eb0 <tx_ull_dequeue+0x40>
    9ed8:	4611      	mov	r1, r2
    9eda:	e7d7      	b.n	9e8c <tx_ull_dequeue+0x1c>
    9edc:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
    9ee0:	6809      	ldr	r1, [r1, #0]
    9ee2:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    9ee6:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
    9ee8:	bf18      	it	ne
    9eea:	f8c3 11b4 	strne.w	r1, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    9eee:	d1e5      	bne.n	9ebc <tx_ull_dequeue+0x4c>
    9ef0:	e7e1      	b.n	9eb6 <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
    9ef2:	2a00      	cmp	r2, #0
    9ef4:	d1e6      	bne.n	9ec4 <tx_ull_dequeue+0x54>
    9ef6:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
    9efa:	4611      	mov	r1, r2
    9efc:	e7f0      	b.n	9ee0 <tx_ull_dequeue+0x70>
    9efe:	bf00      	nop

00009f00 <ticker_update_latency_cancel_op_cb>:
{
    9f00:	b510      	push	{r4, lr}
    9f02:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    9f04:	b930      	cbnz	r0, 9f14 <ticker_update_latency_cancel_op_cb+0x14>
	conn->slave.latency_cancel = 0U;
    9f06:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    9f0a:	f36f 0341 	bfc	r3, #1, #1
    9f0e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
    9f12:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    9f14:	4a09      	ldr	r2, [pc, #36]	; (9f3c <ticker_update_latency_cancel_op_cb+0x3c>)
    9f16:	490a      	ldr	r1, [pc, #40]	; (9f40 <ticker_update_latency_cancel_op_cb+0x40>)
    9f18:	480a      	ldr	r0, [pc, #40]	; (9f44 <ticker_update_latency_cancel_op_cb+0x44>)
    9f1a:	f44f 63cb 	mov.w	r3, #1624	; 0x658
    9f1e:	f009 fee9 	bl	13cf4 <printk>
    9f22:	4040      	eors	r0, r0
    9f24:	f380 8811 	msr	BASEPRI, r0
    9f28:	f04f 0003 	mov.w	r0, #3
    9f2c:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
    9f2e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    9f32:	f36f 0341 	bfc	r3, #1, #1
    9f36:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
    9f3a:	bd10      	pop	{r4, pc}
    9f3c:	0001570c 	.word	0x0001570c
    9f40:	0001574c 	.word	0x0001574c
    9f44:	0001525c 	.word	0x0001525c

00009f48 <ctrl_tx_pause_enqueue>:
{
    9f48:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
    9f4a:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
    9f4e:	4604      	mov	r4, r0
    9f50:	460d      	mov	r5, r1
	if (
    9f52:	b11b      	cbz	r3, 9f5c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    9f54:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
    9f58:	0788      	lsls	r0, r1, #30
    9f5a:	d50d      	bpl.n	9f78 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
    9f5c:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    9f60:	b301      	cbz	r1, 9fa4 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
    9f62:	bb4a      	cbnz	r2, 9fb8 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
    9f64:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    9f68:	681a      	ldr	r2, [r3, #0]
    9f6a:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    9f6c:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    9f6e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    9f72:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    9f74:	b19b      	cbz	r3, 9f9e <ctrl_tx_pause_enqueue+0x56>
}
    9f76:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    9f78:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    9f7c:	07c9      	lsls	r1, r1, #31
    9f7e:	d4ed      	bmi.n	9f5c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    9f80:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    9f84:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
    9f86:	bf04      	itt	eq
    9f88:	6819      	ldreq	r1, [r3, #0]
    9f8a:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    9f8e:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    9f92:	b1f9      	cbz	r1, 9fd4 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
    9f94:	2a00      	cmp	r2, #0
    9f96:	d0e5      	beq.n	9f64 <ctrl_tx_pause_enqueue+0x1c>
    9f98:	f240 736a 	movw	r3, #1898	; 0x76a
    9f9c:	e00e      	b.n	9fbc <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
    9f9e:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
    9fa2:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    9fa4:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    9fa6:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
    9faa:	2a00      	cmp	r2, #0
    9fac:	d1e2      	bne.n	9f74 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
    9fae:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d1df      	bne.n	9f76 <ctrl_tx_pause_enqueue+0x2e>
    9fb6:	e7f2      	b.n	9f9e <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
    9fb8:	f240 737c 	movw	r3, #1916	; 0x77c
    9fbc:	4a0b      	ldr	r2, [pc, #44]	; (9fec <ctrl_tx_pause_enqueue+0xa4>)
    9fbe:	490c      	ldr	r1, [pc, #48]	; (9ff0 <ctrl_tx_pause_enqueue+0xa8>)
    9fc0:	480c      	ldr	r0, [pc, #48]	; (9ff4 <ctrl_tx_pause_enqueue+0xac>)
    9fc2:	f009 fe97 	bl	13cf4 <printk>
    9fc6:	4040      	eors	r0, r0
    9fc8:	f380 8811 	msr	BASEPRI, r0
    9fcc:	f04f 0003 	mov.w	r0, #3
    9fd0:	df02      	svc	2
    9fd2:	e7c7      	b.n	9f64 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
    9fd4:	6819      	ldr	r1, [r3, #0]
    9fd6:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    9fd8:	601d      	str	r5, [r3, #0]
			if (!pause) {
    9fda:	2a00      	cmp	r2, #0
    9fdc:	d1c9      	bne.n	9f72 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
    9fde:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    9fe2:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d1c6      	bne.n	9f76 <ctrl_tx_pause_enqueue+0x2e>
    9fe8:	e7d9      	b.n	9f9e <ctrl_tx_pause_enqueue+0x56>
    9fea:	bf00      	nop
    9fec:	0001570c 	.word	0x0001570c
    9ff0:	00015760 	.word	0x00015760
    9ff4:	0001525c 	.word	0x0001525c

00009ff8 <init_reset>:
{
    9ff8:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    9ffa:	4813      	ldr	r0, [pc, #76]	; (a048 <init_reset+0x50>)
    9ffc:	4b13      	ldr	r3, [pc, #76]	; (a04c <init_reset+0x54>)
    9ffe:	2201      	movs	r2, #1
    a000:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a004:	f7fa fafc 	bl	4600 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
    a008:	4b11      	ldr	r3, [pc, #68]	; (a050 <init_reset+0x58>)
    a00a:	2207      	movs	r2, #7
    a00c:	1d18      	adds	r0, r3, #4
    a00e:	2124      	movs	r1, #36	; 0x24
    a010:	f7fa faf6 	bl	4600 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    a014:	4b0f      	ldr	r3, [pc, #60]	; (a054 <init_reset+0x5c>)
    a016:	2204      	movs	r2, #4
    a018:	1898      	adds	r0, r3, r2
    a01a:	2120      	movs	r1, #32
    a01c:	f7fa faf0 	bl	4600 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    a020:	4b0d      	ldr	r3, [pc, #52]	; (a058 <init_reset+0x60>)
    a022:	220b      	movs	r2, #11
    a024:	1d18      	adds	r0, r3, #4
    a026:	2108      	movs	r1, #8
    a028:	f7fa faea 	bl	4600 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    a02c:	4b0b      	ldr	r3, [pc, #44]	; (a05c <init_reset+0x64>)
	default_phy_tx |= BIT(1);
    a02e:	490c      	ldr	r1, [pc, #48]	; (a060 <init_reset+0x68>)
	default_phy_rx |= BIT(1);
    a030:	4a0c      	ldr	r2, [pc, #48]	; (a064 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    a032:	480d      	ldr	r0, [pc, #52]	; (a068 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    a034:	251b      	movs	r5, #27
    a036:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(1);
    a038:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    a03a:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(1);
    a03e:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(1);
    a040:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    a042:	8004      	strh	r4, [r0, #0]
}
    a044:	2000      	movs	r0, #0
    a046:	bd38      	pop	{r3, r4, r5, pc}
    a048:	200013fc 	.word	0x200013fc
    a04c:	200013f8 	.word	0x200013f8
    a050:	200015d0 	.word	0x200015d0
    a054:	200016d0 	.word	0x200016d0
    a058:	20001754 	.word	0x20001754
    a05c:	2000205e 	.word	0x2000205e
    a060:	20002067 	.word	0x20002067
    a064:	20002066 	.word	0x20002066
    a068:	20002060 	.word	0x20002060

0000a06c <tx_lll_flush>:
{
    a06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
    a070:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    a074:	4935      	ldr	r1, [pc, #212]	; (a14c <tx_lll_flush+0xe0>)
{
    a076:	b083      	sub	sp, #12
    a078:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    a07a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    a07e:	4640      	mov	r0, r8
    a080:	f7fa fb22 	bl	46c8 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    a084:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
    a088:	4629      	mov	r1, r5
    a08a:	f006 fda7 	bl	10bdc <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    a08e:	6d28      	ldr	r0, [r5, #80]	; 0x50
    a090:	4631      	mov	r1, r6
    a092:	aa01      	add	r2, sp, #4
    a094:	f7fa fb56 	bl	4744 <memq_dequeue>
	while (link) {
    a098:	b340      	cbz	r0, a0ec <tx_lll_flush+0x80>
    a09a:	4c2d      	ldr	r4, [pc, #180]	; (a150 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
    a09c:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a0a0:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    a0a4:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
    a0a6:	f894 c001 	ldrb.w	ip, [r4, #1]
    a0aa:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
    a0ac:	1c4b      	adds	r3, r1, #1
    a0ae:	b2db      	uxtb	r3, r3
		last = 0U;
    a0b0:	459c      	cmp	ip, r3
    a0b2:	bf08      	it	eq
    a0b4:	2300      	moveq	r3, #0
	if (last == first) {
    a0b6:	429a      	cmp	r2, r3
    a0b8:	d038      	beq.n	a12c <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a0ba:	7822      	ldrb	r2, [r4, #0]
    a0bc:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
    a0c0:	eb19 0e02 	adds.w	lr, r9, r2
    a0c4:	d032      	beq.n	a12c <tx_lll_flush+0xc0>
		lll_tx->node = tx;
    a0c6:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
    a0ca:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    a0ce:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
    a0d2:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    a0d6:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    a0d8:	6001      	str	r1, [r0, #0]
		tx->next = link;
    a0da:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    a0de:	4631      	mov	r1, r6
    a0e0:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
    a0e2:	70e3      	strb	r3, [r4, #3]
    a0e4:	f7fa fb2e 	bl	4744 <memq_dequeue>
	while (link) {
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d1db      	bne.n	a0a4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    a0ec:	f8d8 012c 	ldr.w	r0, [r8, #300]	; 0x12c
	rx = (void *)&conn->llcp_terminate.node_rx;
    a0f0:	f508 7496 	add.w	r4, r8, #300	; 0x12c
	LL_ASSERT(rx->hdr.link);
    a0f4:	b150      	cbz	r0, a10c <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
    a0f6:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    a0f8:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    a0fa:	f8c8 312c 	str.w	r3, [r8, #300]	; 0x12c
	ull_rx_put(link, rx);
    a0fe:	f7fe ffc7 	bl	9090 <ull_rx_put>
	ull_rx_sched();
    a102:	f7fe ffd5 	bl	90b0 <ull_rx_sched>
}
    a106:	b003      	add	sp, #12
    a108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    a10c:	4a11      	ldr	r2, [pc, #68]	; (a154 <tx_lll_flush+0xe8>)
    a10e:	4912      	ldr	r1, [pc, #72]	; (a158 <tx_lll_flush+0xec>)
    a110:	4812      	ldr	r0, [pc, #72]	; (a15c <tx_lll_flush+0xf0>)
    a112:	f240 730f 	movw	r3, #1807	; 0x70f
    a116:	f009 fded 	bl	13cf4 <printk>
    a11a:	4040      	eors	r0, r0
    a11c:	f380 8811 	msr	BASEPRI, r0
    a120:	f04f 0003 	mov.w	r0, #3
    a124:	df02      	svc	2
    a126:	f8d8 012c 	ldr.w	r0, [r8, #300]	; 0x12c
    a12a:	e7e4      	b.n	a0f6 <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
    a12c:	4a09      	ldr	r2, [pc, #36]	; (a154 <tx_lll_flush+0xe8>)
    a12e:	490c      	ldr	r1, [pc, #48]	; (a160 <tx_lll_flush+0xf4>)
    a130:	480a      	ldr	r0, [pc, #40]	; (a15c <tx_lll_flush+0xf0>)
    a132:	f240 63fb 	movw	r3, #1787	; 0x6fb
    a136:	f009 fddd 	bl	13cf4 <printk>
    a13a:	4040      	eors	r0, r0
    a13c:	f380 8811 	msr	BASEPRI, r0
    a140:	f04f 0003 	mov.w	r0, #3
    a144:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
    a146:	2300      	movs	r3, #0
    a148:	801b      	strh	r3, [r3, #0]
    a14a:	deff      	udf	#255	; 0xff
    a14c:	200013fc 	.word	0x200013fc
    a150:	20000294 	.word	0x20000294
    a154:	0001570c 	.word	0x0001570c
    a158:	00015770 	.word	0x00015770
    a15c:	0001525c 	.word	0x0001525c
    a160:	00015768 	.word	0x00015768

0000a164 <ticker_op_stop_cb>:
{
    a164:	b510      	push	{r4, lr}
    a166:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a168:	b9b0      	cbnz	r0, a198 <ticker_op_stop_cb+0x34>
	mfy.param = param;
    a16a:	4b12      	ldr	r3, [pc, #72]	; (a1b4 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    a16c:	2200      	movs	r2, #0
    a16e:	4611      	mov	r1, r2
    a170:	2002      	movs	r0, #2
	mfy.param = param;
    a172:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    a174:	f7fa fb4a 	bl	480c <mayfly_enqueue>
	LL_ASSERT(!retval);
    a178:	b900      	cbnz	r0, a17c <ticker_op_stop_cb+0x18>
}
    a17a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
    a17c:	4a0e      	ldr	r2, [pc, #56]	; (a1b8 <ticker_op_stop_cb+0x54>)
    a17e:	490f      	ldr	r1, [pc, #60]	; (a1bc <ticker_op_stop_cb+0x58>)
    a180:	480f      	ldr	r0, [pc, #60]	; (a1c0 <ticker_op_stop_cb+0x5c>)
    a182:	f44f 63d1 	mov.w	r3, #1672	; 0x688
    a186:	f009 fdb5 	bl	13cf4 <printk>
    a18a:	4040      	eors	r0, r0
    a18c:	f380 8811 	msr	BASEPRI, r0
    a190:	f04f 0003 	mov.w	r0, #3
    a194:	df02      	svc	2
}
    a196:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a198:	4a07      	ldr	r2, [pc, #28]	; (a1b8 <ticker_op_stop_cb+0x54>)
    a19a:	490a      	ldr	r1, [pc, #40]	; (a1c4 <ticker_op_stop_cb+0x60>)
    a19c:	4808      	ldr	r0, [pc, #32]	; (a1c0 <ticker_op_stop_cb+0x5c>)
    a19e:	f240 6381 	movw	r3, #1665	; 0x681
    a1a2:	f009 fda7 	bl	13cf4 <printk>
    a1a6:	4040      	eors	r0, r0
    a1a8:	f380 8811 	msr	BASEPRI, r0
    a1ac:	f04f 0003 	mov.w	r0, #3
    a1b0:	df02      	svc	2
    a1b2:	e7da      	b.n	a16a <ticker_op_stop_cb+0x6>
    a1b4:	2000033c 	.word	0x2000033c
    a1b8:	0001570c 	.word	0x0001570c
    a1bc:	000154f8 	.word	0x000154f8
    a1c0:	0001525c 	.word	0x0001525c
    a1c4:	00015780 	.word	0x00015780

0000a1c8 <ticker_start_conn_op_cb>:
{
    a1c8:	b510      	push	{r4, lr}
    a1ca:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a1cc:	b990      	cbnz	r0, a1f4 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
    a1ce:	4620      	mov	r0, r4
    a1d0:	f7fe fed8 	bl	8f84 <ull_update_unmark>
	LL_ASSERT(p == param);
    a1d4:	4284      	cmp	r4, r0
    a1d6:	d00c      	beq.n	a1f2 <ticker_start_conn_op_cb+0x2a>
    a1d8:	4a0d      	ldr	r2, [pc, #52]	; (a210 <ticker_start_conn_op_cb+0x48>)
    a1da:	490e      	ldr	r1, [pc, #56]	; (a214 <ticker_start_conn_op_cb+0x4c>)
    a1dc:	480e      	ldr	r0, [pc, #56]	; (a218 <ticker_start_conn_op_cb+0x50>)
    a1de:	f44f 63cf 	mov.w	r3, #1656	; 0x678
    a1e2:	f009 fd87 	bl	13cf4 <printk>
    a1e6:	4040      	eors	r0, r0
    a1e8:	f380 8811 	msr	BASEPRI, r0
    a1ec:	f04f 0003 	mov.w	r0, #3
    a1f0:	df02      	svc	2
}
    a1f2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a1f4:	4a06      	ldr	r2, [pc, #24]	; (a210 <ticker_start_conn_op_cb+0x48>)
    a1f6:	4909      	ldr	r1, [pc, #36]	; (a21c <ticker_start_conn_op_cb+0x54>)
    a1f8:	4807      	ldr	r0, [pc, #28]	; (a218 <ticker_start_conn_op_cb+0x50>)
    a1fa:	f240 6374 	movw	r3, #1652	; 0x674
    a1fe:	f009 fd79 	bl	13cf4 <printk>
    a202:	4040      	eors	r0, r0
    a204:	f380 8811 	msr	BASEPRI, r0
    a208:	f04f 0003 	mov.w	r0, #3
    a20c:	df02      	svc	2
    a20e:	e7de      	b.n	a1ce <ticker_start_conn_op_cb+0x6>
    a210:	0001570c 	.word	0x0001570c
    a214:	0001578c 	.word	0x0001578c
    a218:	0001525c 	.word	0x0001525c
    a21c:	00015780 	.word	0x00015780

0000a220 <ticker_stop_conn_op_cb>:
{
    a220:	b510      	push	{r4, lr}
    a222:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a224:	b990      	cbnz	r0, a24c <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
    a226:	4620      	mov	r0, r4
    a228:	f7fe fea0 	bl	8f6c <ull_update_mark>
	LL_ASSERT(p == param);
    a22c:	4284      	cmp	r4, r0
    a22e:	d00c      	beq.n	a24a <ticker_stop_conn_op_cb+0x2a>
    a230:	4a0d      	ldr	r2, [pc, #52]	; (a268 <ticker_stop_conn_op_cb+0x48>)
    a232:	490e      	ldr	r1, [pc, #56]	; (a26c <ticker_stop_conn_op_cb+0x4c>)
    a234:	480e      	ldr	r0, [pc, #56]	; (a270 <ticker_stop_conn_op_cb+0x50>)
    a236:	f240 636f 	movw	r3, #1647	; 0x66f
    a23a:	f009 fd5b 	bl	13cf4 <printk>
    a23e:	4040      	eors	r0, r0
    a240:	f380 8811 	msr	BASEPRI, r0
    a244:	f04f 0003 	mov.w	r0, #3
    a248:	df02      	svc	2
}
    a24a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    a24c:	4a06      	ldr	r2, [pc, #24]	; (a268 <ticker_stop_conn_op_cb+0x48>)
    a24e:	4909      	ldr	r1, [pc, #36]	; (a274 <ticker_stop_conn_op_cb+0x54>)
    a250:	4807      	ldr	r0, [pc, #28]	; (a270 <ticker_stop_conn_op_cb+0x50>)
    a252:	f240 636b 	movw	r3, #1643	; 0x66b
    a256:	f009 fd4d 	bl	13cf4 <printk>
    a25a:	4040      	eors	r0, r0
    a25c:	f380 8811 	msr	BASEPRI, r0
    a260:	f04f 0003 	mov.w	r0, #3
    a264:	df02      	svc	2
    a266:	e7de      	b.n	a226 <ticker_stop_conn_op_cb+0x6>
    a268:	0001570c 	.word	0x0001570c
    a26c:	0001578c 	.word	0x0001578c
    a270:	0001525c 	.word	0x0001525c
    a274:	00015780 	.word	0x00015780

0000a278 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    a278:	b900      	cbnz	r0, a27c <ticker_update_conn_op_cb+0x4>
    a27a:	4770      	bx	lr
{
    a27c:	b510      	push	{r4, lr}
    a27e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    a280:	f7fe fe8c 	bl	8f9c <ull_update_mark_get>
    a284:	4284      	cmp	r4, r0
    a286:	d010      	beq.n	a2aa <ticker_update_conn_op_cb+0x32>
    a288:	f7fe fe6a 	bl	8f60 <ull_disable_mark_get>
    a28c:	4284      	cmp	r4, r0
    a28e:	d00c      	beq.n	a2aa <ticker_update_conn_op_cb+0x32>
    a290:	4a06      	ldr	r2, [pc, #24]	; (a2ac <ticker_update_conn_op_cb+0x34>)
    a292:	4907      	ldr	r1, [pc, #28]	; (a2b0 <ticker_update_conn_op_cb+0x38>)
    a294:	4807      	ldr	r0, [pc, #28]	; (a2b4 <ticker_update_conn_op_cb+0x3c>)
    a296:	f240 6364 	movw	r3, #1636	; 0x664
    a29a:	f009 fd2b 	bl	13cf4 <printk>
    a29e:	4040      	eors	r0, r0
    a2a0:	f380 8811 	msr	BASEPRI, r0
    a2a4:	f04f 0003 	mov.w	r0, #3
    a2a8:	df02      	svc	2
}
    a2aa:	bd10      	pop	{r4, pc}
    a2ac:	0001570c 	.word	0x0001570c
    a2b0:	00015798 	.word	0x00015798
    a2b4:	0001525c 	.word	0x0001525c

0000a2b8 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2bc:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    a2be:	4826      	ldr	r0, [pc, #152]	; (a358 <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    a2c0:	460e      	mov	r6, r1
    a2c2:	4690      	mov	r8, r2
    a2c4:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    a2c6:	f7fa f9c9 	bl	465c <mem_acquire>
	if (!tx) {
    a2ca:	2800      	cmp	r0, #0
    a2cc:	d041      	beq.n	a352 <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    a2ce:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a2d0:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    a2d2:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    a2d4:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    a2d8:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a2dc:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    a2de:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    a2e0:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a2e2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    a2e4:	71c1      	strb	r1, [r0, #7]
	if (
    a2e6:	b11a      	cbz	r2, a2f0 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
    a2e8:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
    a2ec:	0799      	lsls	r1, r3, #30
    a2ee:	d510      	bpl.n	a312 <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
    a2f0:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
    a2f4:	b33b      	cbz	r3, a346 <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
    a2f6:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
    a2fa:	681a      	ldr	r2, [r3, #0]
    a2fc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    a2fe:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    a300:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
    a304:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
    a306:	b1da      	cbz	r2, a340 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    a308:	2303      	movs	r3, #3
    a30a:	7033      	strb	r3, [r6, #0]

	return 0;
    a30c:	2000      	movs	r0, #0
}
    a30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
    a312:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
    a316:	07db      	lsls	r3, r3, #31
    a318:	d4ea      	bmi.n	a2f0 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
    a31a:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
    a31e:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    a320:	bf04      	itt	eq
    a322:	6813      	ldreq	r3, [r2, #0]
    a324:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    a328:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
    a32c:	2b00      	cmp	r3, #0
    a32e:	d1e2      	bne.n	a2f6 <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
    a330:	6813      	ldr	r3, [r2, #0]
    a332:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    a334:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    a336:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    a338:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
    a33c:	2a00      	cmp	r2, #0
    a33e:	d1e3      	bne.n	a308 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
    a340:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    a344:	e7e0      	b.n	a308 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
    a346:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    a348:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    a34c:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
    a350:	e7d9      	b.n	a306 <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
    a352:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a356:	e7da      	b.n	a30e <reject_ext_ind_send.isra.0+0x56>
    a358:	200016d0 	.word	0x200016d0

0000a35c <start_enc_rsp_send>:
{
    a35c:	b570      	push	{r4, r5, r6, lr}
    a35e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    a360:	b179      	cbz	r1, a382 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
    a362:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a366:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
    a368:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    a36c:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
    a36e:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a372:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    a376:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    a378:	704e      	strb	r6, [r1, #1]
	return 0;
    a37a:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a37c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    a37e:	70cd      	strb	r5, [r1, #3]
}
    a380:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    a382:	4826      	ldr	r0, [pc, #152]	; (a41c <start_enc_rsp_send+0xc0>)
    a384:	f7fa f96a 	bl	465c <mem_acquire>
		if (!tx) {
    a388:	2800      	cmp	r0, #0
    a38a:	d043      	beq.n	a414 <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
    a38c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a390:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
    a392:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    a396:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    a398:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    a39c:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    a39e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a3a2:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    a3a6:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a3a8:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    a3aa:	71c1      	strb	r1, [r0, #7]
	if (
    a3ac:	b1e3      	cbz	r3, a3e8 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
    a3ae:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    a3b2:	0791      	lsls	r1, r2, #30
    a3b4:	d418      	bmi.n	a3e8 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
    a3b6:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    a3ba:	07d2      	lsls	r2, r2, #31
    a3bc:	d414      	bmi.n	a3e8 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
    a3be:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    a3c2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    a3c4:	bf04      	itt	eq
    a3c6:	681a      	ldreq	r2, [r3, #0]
    a3c8:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    a3cc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    a3d0:	b1ca      	cbz	r2, a406 <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
    a3d2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    a3d6:	681a      	ldr	r2, [r3, #0]
    a3d8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    a3da:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    a3dc:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    a3e0:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    a3e2:	b163      	cbz	r3, a3fe <start_enc_rsp_send+0xa2>
	return 0;
    a3e4:	2000      	movs	r0, #0
}
    a3e6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
    a3e8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    a3ec:	2a00      	cmp	r2, #0
    a3ee:	d1f0      	bne.n	a3d2 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
    a3f0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    a3f2:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    a3f6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d1f2      	bne.n	a3e4 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
    a3fe:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
    a402:	4618      	mov	r0, r3
}
    a404:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
    a406:	681a      	ldr	r2, [r3, #0]
    a408:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    a40a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    a40c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    a40e:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    a412:	e7e6      	b.n	a3e2 <start_enc_rsp_send+0x86>
			return -ENOBUFS;
    a414:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a418:	bd70      	pop	{r4, r5, r6, pc}
    a41a:	bf00      	nop
    a41c:	200016d0 	.word	0x200016d0

0000a420 <ctrl_tx_sec_enqueue>:
{
    a420:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
    a422:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    a426:	079a      	lsls	r2, r3, #30
{
    a428:	4604      	mov	r4, r0
    a42a:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
    a42c:	d50b      	bpl.n	a446 <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
    a42e:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
    a432:	2b00      	cmp	r3, #0
    a434:	d042      	beq.n	a4bc <ctrl_tx_sec_enqueue+0x9c>
			tx->next = conn->tx_ctrl_last->next;
    a436:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
    a43a:	681a      	ldr	r2, [r3, #0]
    a43c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    a43e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    a440:	682b      	ldr	r3, [r5, #0]
    a442:	b34b      	cbz	r3, a498 <ctrl_tx_sec_enqueue+0x78>
}
    a444:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
    a446:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
    a44a:	b1ea      	cbz	r2, a488 <ctrl_tx_sec_enqueue+0x68>
			if ((conn->llcp_req != conn->llcp_ack) &&
    a44c:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
    a450:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    a454:	4299      	cmp	r1, r3
    a456:	d003      	beq.n	a460 <ctrl_tx_sec_enqueue+0x40>
    a458:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
    a45c:	2b03      	cmp	r3, #3
    a45e:	d035      	beq.n	a4cc <ctrl_tx_sec_enqueue+0xac>
	    !conn->llcp_phy.pause_tx &&
    a460:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    a464:	f013 0301 	ands.w	r3, r3, #1
    a468:	d119      	bne.n	a49e <ctrl_tx_sec_enqueue+0x7e>
		if (conn->tx_head == conn->tx_data) {
    a46a:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    a46e:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
    a470:	bf04      	itt	eq
    a472:	6811      	ldreq	r1, [r2, #0]
    a474:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    a478:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    a47c:	2900      	cmp	r1, #0
    a47e:	d048      	beq.n	a512 <ctrl_tx_sec_enqueue+0xf2>
			LL_ASSERT(!pause);
    a480:	b18b      	cbz	r3, a4a6 <ctrl_tx_sec_enqueue+0x86>
    a482:	f240 736a 	movw	r3, #1898	; 0x76a
    a486:	e034      	b.n	a4f2 <ctrl_tx_sec_enqueue+0xd2>
		if (!conn->tx_ctrl) {
    a488:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
    a48c:	b95b      	cbnz	r3, a4a6 <ctrl_tx_sec_enqueue+0x86>
			tx->next = conn->tx_head;
    a48e:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
    a490:	e9c0 116c 	strd	r1, r1, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    a494:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
			conn->tx_data_last = tx;
    a498:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
    a49c:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
    a49e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    a4a2:	2b00      	cmp	r3, #0
    a4a4:	d040      	beq.n	a528 <ctrl_tx_sec_enqueue+0x108>
	tx->next = conn->tx_ctrl_last->next;
    a4a6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    a4aa:	681a      	ldr	r2, [r3, #0]
    a4ac:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    a4ae:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    a4b0:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    a4b4:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	d1c4      	bne.n	a444 <ctrl_tx_sec_enqueue+0x24>
    a4ba:	e7ed      	b.n	a498 <ctrl_tx_sec_enqueue+0x78>
			tx->next = conn->tx_head;
    a4bc:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
    a4c0:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    a4c2:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	d1bc      	bne.n	a444 <ctrl_tx_sec_enqueue+0x24>
    a4ca:	e7e5      	b.n	a498 <ctrl_tx_sec_enqueue+0x78>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    a4cc:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    a4ce:	f003 0303 	and.w	r3, r3, #3
    a4d2:	2b03      	cmp	r3, #3
    a4d4:	d1c4      	bne.n	a460 <ctrl_tx_sec_enqueue+0x40>
			    ((pdu_data_tx->llctrl.opcode ==
    a4d6:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    a4d8:	2b03      	cmp	r3, #3
    a4da:	d001      	beq.n	a4e0 <ctrl_tx_sec_enqueue+0xc0>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    a4dc:	2b0a      	cmp	r3, #10
    a4de:	d1bf      	bne.n	a460 <ctrl_tx_sec_enqueue+0x40>
	    !conn->llcp_phy.pause_tx &&
    a4e0:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    a4e4:	07db      	lsls	r3, r3, #31
    a4e6:	d525      	bpl.n	a534 <ctrl_tx_sec_enqueue+0x114>
		if (!conn->tx_ctrl) {
    a4e8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    a4ec:	b16b      	cbz	r3, a50a <ctrl_tx_sec_enqueue+0xea>
			LL_ASSERT(!pause);
    a4ee:	f240 737c 	movw	r3, #1916	; 0x77c
    a4f2:	4a11      	ldr	r2, [pc, #68]	; (a538 <ctrl_tx_sec_enqueue+0x118>)
    a4f4:	4911      	ldr	r1, [pc, #68]	; (a53c <ctrl_tx_sec_enqueue+0x11c>)
    a4f6:	4812      	ldr	r0, [pc, #72]	; (a540 <ctrl_tx_sec_enqueue+0x120>)
    a4f8:	f009 fbfc 	bl	13cf4 <printk>
    a4fc:	4040      	eors	r0, r0
    a4fe:	f380 8811 	msr	BASEPRI, r0
    a502:	f04f 0003 	mov.w	r0, #3
    a506:	df02      	svc	2
    a508:	e7cd      	b.n	a4a6 <ctrl_tx_sec_enqueue+0x86>
			tx->next = conn->tx_head;
    a50a:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
    a50c:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
    a510:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
    a512:	6811      	ldr	r1, [r2, #0]
    a514:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    a516:	6015      	str	r5, [r2, #0]
			if (!pause) {
    a518:	2b00      	cmp	r3, #0
    a51a:	d191      	bne.n	a440 <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl_last = tx;
    a51c:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    a520:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
    a522:	2b00      	cmp	r3, #0
    a524:	d18e      	bne.n	a444 <ctrl_tx_sec_enqueue+0x24>
    a526:	e7b7      	b.n	a498 <ctrl_tx_sec_enqueue+0x78>
			tx->next = conn->tx_head;
    a528:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
    a52a:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    a52e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
    a532:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
    a534:	2301      	movs	r3, #1
    a536:	e798      	b.n	a46a <ctrl_tx_sec_enqueue+0x4a>
    a538:	0001570c 	.word	0x0001570c
    a53c:	00015760 	.word	0x00015760
    a540:	0001525c 	.word	0x0001525c

0000a544 <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a546:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    a548:	481d      	ldr	r0, [pc, #116]	; (a5c0 <feature_rsp_send.isra.0+0x7c>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    a54a:	460d      	mov	r5, r1
    a54c:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    a54e:	f7fa f885 	bl	465c <mem_acquire>
	if (!tx) {
    a552:	b390      	cbz	r0, a5ba <feature_rsp_send.isra.0+0x76>
	       (features[1] << 8) | (features[2] << 16);
    a554:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    a556:	793a      	ldrb	r2, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
    a558:	491a      	ldr	r1, [pc, #104]	; (a5c4 <feature_rsp_send.isra.0+0x80>)
    a55a:	4604      	mov	r4, r0
    a55c:	7978      	ldrb	r0, [r7, #5]
    a55e:	041b      	lsls	r3, r3, #16
    a560:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    a564:	4313      	orrs	r3, r2
	conn->llcp_feature.features &= feat_get(&req->features[0]);
    a566:	f8d6 011c 	ldr.w	r0, [r6, #284]	; 0x11c
	conn->common.fex_valid = 1U;
    a56a:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
    a56e:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    a570:	7921      	ldrb	r1, [r4, #4]
	conn->llcp_feature.features &= feat_get(&req->features[0]);
    a572:	4003      	ands	r3, r0
	conn->common.fex_valid = 1U;
    a574:	f042 0201 	orr.w	r2, r2, #1
    a578:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
	conn->llcp_feature.features &= feat_get(&req->features[0]);
    a57c:	f3c3 0310 	ubfx	r3, r3, #0, #17
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    a580:	2009      	movs	r0, #9
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    a582:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    a584:	f041 0103 	orr.w	r1, r1, #3
	conn->llcp_feature.features &= feat_get(&req->features[0]);
    a588:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    a58c:	7121      	strb	r1, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    a58e:	7160      	strb	r0, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    a590:	71e0      	strb	r0, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    a592:	2100      	movs	r1, #0
    a594:	18a0      	adds	r0, r4, r2
    a596:	f009 feeb 	bl	14370 <memset>
	sys_put_le24(conn->llcp_feature.features,
    a59a:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
	dst[0] = val;
    a59e:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
    a5a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    a5a4:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, tx);
    a5a6:	4630      	mov	r0, r6
    a5a8:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
    a5aa:	7262      	strb	r2, [r4, #9]
    a5ac:	4621      	mov	r1, r4
    a5ae:	f7ff ff37 	bl	a420 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    a5b2:	2303      	movs	r3, #3
    a5b4:	702b      	strb	r3, [r5, #0]
	return 0;
    a5b6:	2000      	movs	r0, #0
}
    a5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    a5ba:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5c0:	200016d0 	.word	0x200016d0
    a5c4:	fffe30d0 	.word	0xfffe30d0

0000a5c8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    a5c8:	4801      	ldr	r0, [pc, #4]	; (a5d0 <ll_conn_acquire+0x8>)
    a5ca:	f7fa b847 	b.w	465c <mem_acquire>
    a5ce:	bf00      	nop
    a5d0:	200013f8 	.word	0x200013f8

0000a5d4 <ll_conn_release>:
	mem_release(conn, &conn_free);
    a5d4:	4901      	ldr	r1, [pc, #4]	; (a5dc <ll_conn_release+0x8>)
    a5d6:	f7fa b85b 	b.w	4690 <mem_release>
    a5da:	bf00      	nop
    a5dc:	200013f8 	.word	0x200013f8

0000a5e0 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    a5e0:	4902      	ldr	r1, [pc, #8]	; (a5ec <ll_conn_handle_get+0xc>)
    a5e2:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    a5e6:	f7fa b86f 	b.w	46c8 <mem_index_get>
    a5ea:	bf00      	nop
    a5ec:	200013fc 	.word	0x200013fc

0000a5f0 <ll_conn_get>:
{
    a5f0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a5f2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a5f6:	4801      	ldr	r0, [pc, #4]	; (a5fc <ll_conn_get+0xc>)
    a5f8:	f7fa b862 	b.w	46c0 <mem_get>
    a5fc:	200013fc 	.word	0x200013fc

0000a600 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a600:	b958      	cbnz	r0, a61a <ll_connected_get+0x1a>
{
    a602:	b508      	push	{r3, lr}
    a604:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a606:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a60a:	4805      	ldr	r0, [pc, #20]	; (a620 <ll_connected_get+0x20>)
    a60c:	f7fa f858 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    a610:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    a612:	b903      	cbnz	r3, a616 <ll_connected_get+0x16>
}
    a614:	bd08      	pop	{r3, pc}
		return NULL;
    a616:	2000      	movs	r0, #0
}
    a618:	bd08      	pop	{r3, pc}
		return NULL;
    a61a:	2000      	movs	r0, #0
}
    a61c:	4770      	bx	lr
    a61e:	bf00      	nop
    a620:	200013fc 	.word	0x200013fc

0000a624 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    a624:	4801      	ldr	r0, [pc, #4]	; (a62c <ll_tx_mem_acquire+0x8>)
    a626:	f7fa b819 	b.w	465c <mem_acquire>
    a62a:	bf00      	nop
    a62c:	200015d0 	.word	0x200015d0

0000a630 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    a630:	4901      	ldr	r1, [pc, #4]	; (a638 <ll_tx_mem_release+0x8>)
    a632:	f7fa b82d 	b.w	4690 <mem_release>
    a636:	bf00      	nop
    a638:	200015d0 	.word	0x200015d0

0000a63c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a63c:	2800      	cmp	r0, #0
    a63e:	d15b      	bne.n	a6f8 <ll_tx_mem_enqueue+0xbc>
{
    a640:	b5f0      	push	{r4, r5, r6, r7, lr}
    a642:	4602      	mov	r2, r0
    a644:	b089      	sub	sp, #36	; 0x24
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a646:	482e      	ldr	r0, [pc, #184]	; (a700 <ll_tx_mem_enqueue+0xc4>)
    a648:	460c      	mov	r4, r1
    a64a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a64e:	f7fa f837 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    a652:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
    a654:	b9e6      	cbnz	r6, a690 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    a656:	4a2b      	ldr	r2, [pc, #172]	; (a704 <ll_tx_mem_enqueue+0xc8>)
    a658:	78d7      	ldrb	r7, [r2, #3]
	if (last == count) {
    a65a:	7855      	ldrb	r5, [r2, #1]
    a65c:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
    a65e:	1c7b      	adds	r3, r7, #1
    a660:	b2db      	uxtb	r3, r3
		last = 0U;
    a662:	429d      	cmp	r5, r3
    a664:	bf08      	it	eq
    a666:	2300      	moveq	r3, #0
	if (last == first) {
    a668:	4299      	cmp	r1, r3
    a66a:	d015      	beq.n	a698 <ll_tx_mem_enqueue+0x5c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a66c:	4615      	mov	r5, r2
    a66e:	f815 1b04 	ldrb.w	r1, [r5], #4
    a672:	fb11 f107 	smulbb	r1, r1, r7
	if (!lll_tx) {
    a676:	186f      	adds	r7, r5, r1
    a678:	d00e      	beq.n	a698 <ll_tx_mem_enqueue+0x5c>
	if (conn->lll.role && conn->lll.latency_event &&
    a67a:	f990 c03d 	ldrsb.w	ip, [r0, #61]	; 0x3d
	lll_tx->handle = handle;
    a67e:	526e      	strh	r6, [r5, r1]
	if (conn->lll.role && conn->lll.latency_event &&
    a680:	f1bc 0f00 	cmp.w	ip, #0
	lll_tx->node = tx;
    a684:	607c      	str	r4, [r7, #4]
	*last = idx; /* Commit: Update write index */
    a686:	70d3      	strb	r3, [r2, #3]
	if (conn->lll.role && conn->lll.latency_event &&
    a688:	db0a      	blt.n	a6a0 <ll_tx_mem_enqueue+0x64>
	return 0;
    a68a:	2000      	movs	r0, #0
}
    a68c:	b009      	add	sp, #36	; 0x24
    a68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
    a690:	f06f 0015 	mvn.w	r0, #21
}
    a694:	b009      	add	sp, #36	; 0x24
    a696:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    a698:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a69c:	b009      	add	sp, #36	; 0x24
    a69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->lll.role && conn->lll.latency_event &&
    a6a0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    a6a2:	2b00      	cmp	r3, #0
    a6a4:	d0f1      	beq.n	a68a <ll_tx_mem_enqueue+0x4e>
	    !conn->slave.latency_cancel) {
    a6a6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->lll.role && conn->lll.latency_event &&
    a6aa:	f013 0402 	ands.w	r4, r3, #2
    a6ae:	d1ec      	bne.n	a68a <ll_tx_mem_enqueue+0x4e>
		conn->slave.latency_cancel = 1U;
    a6b0:	f043 0302 	orr.w	r3, r3, #2
    a6b4:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
    a6b8:	4a13      	ldr	r2, [pc, #76]	; (a708 <ll_tx_mem_enqueue+0xcc>)
    a6ba:	9006      	str	r0, [sp, #24]
    a6bc:	2301      	movs	r3, #1
    a6be:	9205      	str	r2, [sp, #20]
    a6c0:	9303      	str	r3, [sp, #12]
    a6c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a6c6:	4623      	mov	r3, r4
    a6c8:	9404      	str	r4, [sp, #16]
    a6ca:	9400      	str	r4, [sp, #0]
    a6cc:	2205      	movs	r2, #5
    a6ce:	2103      	movs	r1, #3
    a6d0:	4620      	mov	r0, r4
    a6d2:	f7fb fab7 	bl	5c44 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a6d6:	f030 0302 	bics.w	r3, r0, #2
    a6da:	d0d6      	beq.n	a68a <ll_tx_mem_enqueue+0x4e>
    a6dc:	4a0b      	ldr	r2, [pc, #44]	; (a70c <ll_tx_mem_enqueue+0xd0>)
    a6de:	490c      	ldr	r1, [pc, #48]	; (a710 <ll_tx_mem_enqueue+0xd4>)
    a6e0:	480c      	ldr	r0, [pc, #48]	; (a714 <ll_tx_mem_enqueue+0xd8>)
    a6e2:	23fd      	movs	r3, #253	; 0xfd
    a6e4:	f009 fb06 	bl	13cf4 <printk>
    a6e8:	4040      	eors	r0, r0
    a6ea:	f380 8811 	msr	BASEPRI, r0
    a6ee:	f04f 0003 	mov.w	r0, #3
    a6f2:	df02      	svc	2
	return 0;
    a6f4:	4620      	mov	r0, r4
    a6f6:	e7c9      	b.n	a68c <ll_tx_mem_enqueue+0x50>
		return -EINVAL;
    a6f8:	f06f 0015 	mvn.w	r0, #21
}
    a6fc:	4770      	bx	lr
    a6fe:	bf00      	nop
    a700:	200013fc 	.word	0x200013fc
    a704:	200002f8 	.word	0x200002f8
    a708:	00009f01 	.word	0x00009f01
    a70c:	0001570c 	.word	0x0001570c
    a710:	000157ec 	.word	0x000157ec
    a714:	0001525c 	.word	0x0001525c

0000a718 <ll_conn_update>:
{
    a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a71c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    a720:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    a724:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    a728:	bb40      	cbnz	r0, a77c <ll_conn_update+0x64>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a72a:	460c      	mov	r4, r1
    a72c:	4616      	mov	r6, r2
    a72e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a732:	4602      	mov	r2, r0
    a734:	4839      	ldr	r0, [pc, #228]	; (a81c <ll_conn_update+0x104>)
    a736:	461d      	mov	r5, r3
    a738:	f7f9 ffc2 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    a73c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    a73e:	b9eb      	cbnz	r3, a77c <ll_conn_update+0x64>
	if (!cmd) {
    a740:	b1fc      	cbz	r4, a782 <ll_conn_update+0x6a>
		cmd--;
    a742:	3c01      	subs	r4, #1
		if (cmd) {
    a744:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    a748:	d04b      	beq.n	a7e2 <ll_conn_update+0xca>
			if ((conn->llcp_conn_param.req ==
    a74a:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    a74e:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
    a752:	4291      	cmp	r1, r2
    a754:	d012      	beq.n	a77c <ll_conn_update+0x64>
			    (conn->llcp_conn_param.state !=
    a756:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
    a75a:	f002 0107 	and.w	r1, r2, #7
    a75e:	2903      	cmp	r1, #3
    a760:	d10c      	bne.n	a77c <ll_conn_update+0x64>
			conn->llcp_conn_param.state = cmd;
    a762:	f004 0407 	and.w	r4, r4, #7
    a766:	f044 0408 	orr.w	r4, r4, #8
    a76a:	f022 020f 	bic.w	r2, r2, #15
    a76e:	4314      	orrs	r4, r2
    a770:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
    a774:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
    a778:	4618      	mov	r0, r3
    a77a:	e000      	b.n	a77e <ll_conn_update+0x66>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a77c:	200c      	movs	r0, #12
}
    a77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!conn->llcp_conn_param.disabled &&
    a782:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
    a786:	06d9      	lsls	r1, r3, #27
    a788:	d523      	bpl.n	a7d2 <ll_conn_update+0xba>
		} else if (conn->lll.role) {
    a78a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    a78e:	2b00      	cmp	r3, #0
    a790:	db42      	blt.n	a818 <ll_conn_update+0x100>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    a792:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
    a796:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
    a79a:	4293      	cmp	r3, r2
    a79c:	d1ee      	bne.n	a77c <ll_conn_update+0x64>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    a79e:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
    a7a2:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
    a7a6:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
    a7a8:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    a7aa:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
    a7ae:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    a7b2:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
    a7b6:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
    a7b8:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
    a7bc:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
    a7c0:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    a7c4:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
    a7c8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
    a7cc:	4618      	mov	r0, r3
}
    a7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
    a7d2:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
    a7d6:	07da      	lsls	r2, r3, #31
    a7d8:	d503      	bpl.n	a7e2 <ll_conn_update+0xca>
		     (conn->llcp_feature.features &
    a7da:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
    a7de:	079b      	lsls	r3, r3, #30
    a7e0:	d5d3      	bpl.n	a78a <ll_conn_update+0x72>
			if (conn->llcp_conn_param.req !=
    a7e2:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
    a7e6:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
    a7ea:	4293      	cmp	r3, r2
    a7ec:	d1c6      	bne.n	a77c <ll_conn_update+0x64>
			conn->llcp_conn_param.state = cmd;
    a7ee:	f8b0 2172 	ldrh.w	r2, [r0, #370]	; 0x172
			conn->llcp_conn_param.interval_min = interval_min;
    a7f2:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
    a7f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
    a7fa:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
    a7fc:	f042 0208 	orr.w	r2, r2, #8
			conn->llcp_conn_param.req++;
    a800:	f880 3170 	strb.w	r3, [r0, #368]	; 0x170
			conn->llcp_conn_param.interval_max = interval_max;
    a804:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.latency = latency;
    a808:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
    a80c:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
    a810:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
	return 0;
    a814:	2000      	movs	r0, #0
    a816:	e7b2      	b.n	a77e <ll_conn_update+0x66>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    a818:	201a      	movs	r0, #26
    a81a:	e7b0      	b.n	a77e <ll_conn_update+0x66>
    a81c:	200013fc 	.word	0x200013fc

0000a820 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a820:	b9d0      	cbnz	r0, a858 <ll_chm_get+0x38>
{
    a822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a824:	4602      	mov	r2, r0
    a826:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a828:	480c      	ldr	r0, [pc, #48]	; (a85c <ll_chm_get+0x3c>)
    a82a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a82e:	f7f9 ff47 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    a832:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a834:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    a836:	b96e      	cbnz	r6, a854 <ll_chm_get+0x34>
    a838:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
    a83c:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
    a840:	2205      	movs	r2, #5
    a842:	4639      	mov	r1, r7
    a844:	4628      	mov	r0, r5
    a846:	f009 fd68 	bl	1431a <memcpy>
	} while (conn->chm_updated);
    a84a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    a84e:	2800      	cmp	r0, #0
    a850:	d1f4      	bne.n	a83c <ll_chm_get+0x1c>
}
    a852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a854:	200c      	movs	r0, #12
}
    a856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a858:	200c      	movs	r0, #12
}
    a85a:	4770      	bx	lr
    a85c:	200013fc 	.word	0x200013fc

0000a860 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a860:	b9a0      	cbnz	r0, a88c <ll_terminate_ind_send+0x2c>
{
    a862:	b510      	push	{r4, lr}
    a864:	4602      	mov	r2, r0
    a866:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a868:	4809      	ldr	r0, [pc, #36]	; (a890 <ll_terminate_ind_send+0x30>)
    a86a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a86e:	f7f9 ff27 	bl	46c0 <mem_get>
    a872:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    a874:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    a876:	b938      	cbnz	r0, a888 <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
    a878:	f893 2128 	ldrb.w	r2, [r3, #296]	; 0x128
	conn->llcp_terminate.reason_own = reason;
    a87c:	f883 412a 	strb.w	r4, [r3, #298]	; 0x12a
	conn->llcp_terminate.req++;
    a880:	3201      	adds	r2, #1
    a882:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
}
    a886:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a888:	200c      	movs	r0, #12
}
    a88a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a88c:	200c      	movs	r0, #12
}
    a88e:	4770      	bx	lr
    a890:	200013fc 	.word	0x200013fc

0000a894 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a894:	b9a8      	cbnz	r0, a8c2 <ll_feature_req_send+0x2e>
{
    a896:	b508      	push	{r3, lr}
    a898:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a89a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a89e:	480a      	ldr	r0, [pc, #40]	; (a8c8 <ll_feature_req_send+0x34>)
    a8a0:	f7f9 ff0e 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    a8a4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    a8a6:	b953      	cbnz	r3, a8be <ll_feature_req_send+0x2a>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    a8a8:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    a8ac:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
    a8b0:	428a      	cmp	r2, r1
    a8b2:	d104      	bne.n	a8be <ll_feature_req_send+0x2a>
	conn->llcp_feature.req++;
    a8b4:	3201      	adds	r2, #1
    a8b6:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	return 0;
    a8ba:	4618      	mov	r0, r3
}
    a8bc:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a8be:	200c      	movs	r0, #12
}
    a8c0:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a8c2:	200c      	movs	r0, #12
}
    a8c4:	4770      	bx	lr
    a8c6:	bf00      	nop
    a8c8:	200013fc 	.word	0x200013fc

0000a8cc <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a8cc:	b9a8      	cbnz	r0, a8fa <ll_version_ind_send+0x2e>
{
    a8ce:	b508      	push	{r3, lr}
    a8d0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a8d2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a8d6:	480a      	ldr	r0, [pc, #40]	; (a900 <ll_version_ind_send+0x34>)
    a8d8:	f7f9 fef2 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    a8dc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    a8de:	b953      	cbnz	r3, a8f6 <ll_version_ind_send+0x2a>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    a8e0:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    a8e4:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
    a8e8:	428a      	cmp	r2, r1
    a8ea:	d104      	bne.n	a8f6 <ll_version_ind_send+0x2a>
	conn->llcp_version.req++;
    a8ec:	3201      	adds	r2, #1
    a8ee:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	return 0;
    a8f2:	4618      	mov	r0, r3
}
    a8f4:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a8f6:	200c      	movs	r0, #12
}
    a8f8:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    a8fa:	200c      	movs	r0, #12
}
    a8fc:	4770      	bx	lr
    a8fe:	bf00      	nop
    a900:	200013fc 	.word	0x200013fc

0000a904 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a904:	2800      	cmp	r0, #0
    a906:	d143      	bne.n	a990 <ll_length_req_send+0x8c>
{
    a908:	b538      	push	{r3, r4, r5, lr}
    a90a:	460d      	mov	r5, r1
    a90c:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a90e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a912:	4602      	mov	r2, r0
    a914:	481f      	ldr	r0, [pc, #124]	; (a994 <ll_length_req_send+0x90>)
    a916:	f7f9 fed3 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    a91a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    a91c:	bb1b      	cbnz	r3, a966 <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
    a91e:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
    a922:	071a      	lsls	r2, r3, #28
    a924:	d421      	bmi.n	a96a <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
    a926:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
    a92a:	07d1      	lsls	r1, r2, #31
    a92c:	d503      	bpl.n	a936 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features & BIT(BT_LE_FEAT_BIT_DLE)))) {
    a92e:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
    a932:	0692      	lsls	r2, r2, #26
    a934:	d519      	bpl.n	a96a <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    a936:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
    a93a:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
    a93e:	428a      	cmp	r2, r1
    a940:	d017      	beq.n	a972 <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
    a942:	f003 0307 	and.w	r3, r3, #7
    a946:	2b03      	cmp	r3, #3
    a948:	d004      	beq.n	a954 <ll_length_req_send+0x50>
    a94a:	3303      	adds	r3, #3
    a94c:	f003 0307 	and.w	r3, r3, #7
    a950:	2b01      	cmp	r3, #1
    a952:	d80c      	bhi.n	a96e <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
    a954:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
    a958:	b94b      	cbnz	r3, a96e <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
    a95a:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
    a95e:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
    a962:	4618      	mov	r0, r3
}
    a964:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    a966:	2002      	movs	r0, #2
}
    a968:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    a96a:	201a      	movs	r0, #26
}
    a96c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    a96e:	200c      	movs	r0, #12
}
    a970:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    a972:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	conn->llcp_length.tx_octets = tx_octets;
    a976:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
    a97a:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    a97c:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
    a980:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
    a984:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    a988:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	return 0;
    a98c:	2000      	movs	r0, #0
}
    a98e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    a990:	2002      	movs	r0, #2
}
    a992:	4770      	bx	lr
    a994:	200013fc 	.word	0x200013fc

0000a998 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    a998:	4a03      	ldr	r2, [pc, #12]	; (a9a8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    a99a:	4b04      	ldr	r3, [pc, #16]	; (a9ac <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    a99c:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    a99e:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    a9a0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    a9a2:	800b      	strh	r3, [r1, #0]
}
    a9a4:	4770      	bx	lr
    a9a6:	bf00      	nop
    a9a8:	2000205e 	.word	0x2000205e
    a9ac:	20002060 	.word	0x20002060

0000a9b0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    a9b0:	4a02      	ldr	r2, [pc, #8]	; (a9bc <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    a9b2:	4b03      	ldr	r3, [pc, #12]	; (a9c0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    a9b4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    a9b6:	8019      	strh	r1, [r3, #0]
}
    a9b8:	2000      	movs	r0, #0
    a9ba:	4770      	bx	lr
    a9bc:	2000205e 	.word	0x2000205e
    a9c0:	20002060 	.word	0x20002060

0000a9c4 <ll_length_max_get>:
{
    a9c4:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    a9c6:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    a9c8:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    a9cc:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    a9ce:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    a9d0:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
    a9d2:	801c      	strh	r4, [r3, #0]
}
    a9d4:	bc30      	pop	{r4, r5}
    a9d6:	4770      	bx	lr

0000a9d8 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    a9d8:	b9c0      	cbnz	r0, aa0c <ll_phy_get+0x34>
{
    a9da:	b538      	push	{r3, r4, r5, lr}
    a9dc:	460d      	mov	r5, r1
    a9de:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    a9e0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    a9e4:	4602      	mov	r2, r0
    a9e6:	480a      	ldr	r0, [pc, #40]	; (aa10 <ll_phy_get+0x38>)
    a9e8:	f7f9 fe6a 	bl	46c0 <mem_get>
    a9ec:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    a9ee:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    a9f0:	b950      	cbnz	r0, aa08 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    a9f2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
    a9f6:	f3c2 0202 	ubfx	r2, r2, #0, #3
    a9fa:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    a9fc:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    aa00:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aa04:	7023      	strb	r3, [r4, #0]
}
    aa06:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    aa08:	2002      	movs	r0, #2
}
    aa0a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    aa0c:	2002      	movs	r0, #2
}
    aa0e:	4770      	bx	lr
    aa10:	200013fc 	.word	0x200013fc

0000aa14 <ll_phy_default_set>:
	default_phy_tx = tx;
    aa14:	4a02      	ldr	r2, [pc, #8]	; (aa20 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    aa16:	4b03      	ldr	r3, [pc, #12]	; (aa24 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    aa18:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    aa1a:	7019      	strb	r1, [r3, #0]
}
    aa1c:	2000      	movs	r0, #0
    aa1e:	4770      	bx	lr
    aa20:	20002067 	.word	0x20002067
    aa24:	20002066 	.word	0x20002066

0000aa28 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    aa28:	2800      	cmp	r0, #0
    aa2a:	d146      	bne.n	aaba <ll_phy_req_send+0x92>
{
    aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa2e:	460d      	mov	r5, r1
    aa30:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    aa32:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    aa36:	4602      	mov	r2, r0
    aa38:	4821      	ldr	r0, [pc, #132]	; (aac0 <ll_phy_req_send+0x98>)
    aa3a:	461f      	mov	r7, r3
    aa3c:	f7f9 fe40 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    aa40:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    aa42:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    aa44:	bbab      	cbnz	r3, aab2 <ll_phy_req_send+0x8a>
	if (conn->llcp_phy.disabled ||
    aa46:	f890 01ab 	ldrb.w	r0, [r0, #427]	; 0x1ab
    aa4a:	f010 0008 	ands.w	r0, r0, #8
    aa4e:	d132      	bne.n	aab6 <ll_phy_req_send+0x8e>
	    (conn->common.fex_valid &&
    aa50:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
    aa54:	07db      	lsls	r3, r3, #31
    aa56:	d504      	bpl.n	aa62 <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
    aa58:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    aa5c:	f413 6f10 	tst.w	r3, #2304	; 0x900
    aa60:	d029      	beq.n	aab6 <ll_phy_req_send+0x8e>
	if ((conn->llcp_req != conn->llcp_ack) ||
    aa62:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    aa66:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    aa6a:	429a      	cmp	r2, r3
    aa6c:	d11f      	bne.n	aaae <ll_phy_req_send+0x86>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    aa6e:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
    aa72:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    aa76:	429a      	cmp	r2, r3
    aa78:	d119      	bne.n	aaae <ll_phy_req_send+0x86>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    aa7a:	f005 0507 	and.w	r5, r5, #7
    aa7e:	f8b4 11aa 	ldrh.w	r1, [r4, #426]	; 0x1aa
    aa82:	00ab      	lsls	r3, r5, #2
    aa84:	f443 6580 	orr.w	r5, r3, #1024	; 0x400
    aa88:	f007 0307 	and.w	r3, r7, #7
    aa8c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
    aa90:	f006 0601 	and.w	r6, r6, #1
    aa94:	f421 61df 	bic.w	r1, r1, #1784	; 0x6f8
    aa98:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
    aa9c:	f021 0107 	bic.w	r1, r1, #7
	conn->llcp_phy.req++;
    aaa0:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    aaa2:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
    aaa4:	f884 21a8 	strb.w	r2, [r4, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    aaa8:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
}
    aaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    aaae:	200c      	movs	r0, #12
}
    aab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    aab2:	2002      	movs	r0, #2
}
    aab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    aab6:	201a      	movs	r0, #26
}
    aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    aaba:	2002      	movs	r0, #2
}
    aabc:	4770      	bx	lr
    aabe:	bf00      	nop
    aac0:	200013fc 	.word	0x200013fc

0000aac4 <ll_rssi_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    aac4:	b980      	cbnz	r0, aae8 <ll_rssi_get+0x24>
{
    aac6:	b510      	push	{r4, lr}
    aac8:	4602      	mov	r2, r0
    aaca:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    aacc:	4807      	ldr	r0, [pc, #28]	; (aaec <ll_rssi_get+0x28>)
    aace:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    aad2:	f7f9 fdf5 	bl	46c0 <mem_get>
    aad6:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    aad8:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    aada:	b918      	cbnz	r0, aae4 <ll_rssi_get+0x20>
	*rssi = conn->lll.rssi_latest;
    aadc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    aae0:	7023      	strb	r3, [r4, #0]
}
    aae2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    aae4:	200c      	movs	r0, #12
}
    aae6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    aae8:	200c      	movs	r0, #12
}
    aaea:	4770      	bx	lr
    aaec:	200013fc 	.word	0x200013fc

0000aaf0 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    aaf0:	b9d8      	cbnz	r0, ab2a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    aaf2:	4602      	mov	r2, r0
{
    aaf4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    aaf6:	480e      	ldr	r0, [pc, #56]	; (ab30 <ll_apto_get+0x40>)
    aaf8:	460c      	mov	r4, r1
    aafa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    aafe:	f7f9 fddf 	bl	46c0 <mem_get>
    ab02:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    ab04:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    ab06:	b970      	cbnz	r0, ab26 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    ab08:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
    ab0c:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
    ab0e:	4a09      	ldr	r2, [pc, #36]	; (ab34 <ll_apto_get+0x44>)
    ab10:	fb03 f301 	mul.w	r3, r3, r1
    ab14:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    ab18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ab1c:	fba2 2303 	umull	r2, r3, r2, r3
    ab20:	099b      	lsrs	r3, r3, #6
    ab22:	8023      	strh	r3, [r4, #0]
}
    ab24:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ab26:	2002      	movs	r0, #2
}
    ab28:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ab2a:	2002      	movs	r0, #2
}
    ab2c:	4770      	bx	lr
    ab2e:	bf00      	nop
    ab30:	200013fc 	.word	0x200013fc
    ab34:	10624dd3 	.word	0x10624dd3

0000ab38 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ab38:	b9d8      	cbnz	r0, ab72 <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ab3a:	4602      	mov	r2, r0
{
    ab3c:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ab3e:	480e      	ldr	r0, [pc, #56]	; (ab78 <ll_apto_set+0x40>)
    ab40:	460d      	mov	r5, r1
    ab42:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    ab46:	f7f9 fdbb 	bl	46c0 <mem_get>
    ab4a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    ab4c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    ab4e:	b970      	cbnz	r0, ab6e <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    ab50:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
    ab52:	f240 44e2 	movw	r4, #1250	; 0x4e2
    ab56:	fb04 f403 	mul.w	r4, r4, r3
    ab5a:	f242 7310 	movw	r3, #10000	; 0x2710
    ab5e:	fb03 4305 	mla	r3, r3, r5, r4
    ab62:	3b01      	subs	r3, #1
    ab64:	fbb3 f3f4 	udiv	r3, r3, r4
    ab68:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
    ab6c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ab6e:	2002      	movs	r0, #2
}
    ab70:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ab72:	2002      	movs	r0, #2
}
    ab74:	4770      	bx	lr
    ab76:	bf00      	nop
    ab78:	200013fc 	.word	0x200013fc

0000ab7c <ull_conn_init>:
	err = init_reset();
    ab7c:	f7ff ba3c 	b.w	9ff8 <init_reset>

0000ab80 <ull_conn_reset>:
{
    ab80:	b530      	push	{r4, r5, lr}
    ab82:	b085      	sub	sp, #20
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    ab84:	2302      	movs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ab86:	2200      	movs	r2, #0
    ab88:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    ab8c:	482e      	ldr	r0, [pc, #184]	; (ac48 <ull_conn_reset+0xc8>)
	volatile u32_t ret_cb = TICKER_STATUS_BUSY;
    ab8e:	9303      	str	r3, [sp, #12]
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ab90:	f7f9 fd96 	bl	46c0 <mem_get>
    ab94:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
    ab96:	f7fe f9cb 	bl	8f30 <ull_disable_mark>
	LL_ASSERT(mark == conn);
    ab9a:	4284      	cmp	r4, r0
    ab9c:	d00c      	beq.n	abb8 <ull_conn_reset+0x38>
    ab9e:	4a2b      	ldr	r2, [pc, #172]	; (ac4c <ull_conn_reset+0xcc>)
    aba0:	492b      	ldr	r1, [pc, #172]	; (ac50 <ull_conn_reset+0xd0>)
    aba2:	482c      	ldr	r0, [pc, #176]	; (ac54 <ull_conn_reset+0xd4>)
    aba4:	f240 6395 	movw	r3, #1685	; 0x695
    aba8:	f009 f8a4 	bl	13cf4 <printk>
    abac:	4040      	eors	r0, r0
    abae:	f380 8811 	msr	BASEPRI, r0
    abb2:	f04f 0003 	mov.w	r0, #3
    abb6:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    abb8:	ad03      	add	r5, sp, #12
    abba:	2103      	movs	r1, #3
    abbc:	4b26      	ldr	r3, [pc, #152]	; (ac58 <ull_conn_reset+0xd8>)
    abbe:	9500      	str	r5, [sp, #0]
    abc0:	2205      	movs	r2, #5
    abc2:	2000      	movs	r0, #0
    abc4:	f7fb f88e 	bl	5ce4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    abc8:	4629      	mov	r1, r5
    abca:	f7fe f9a3 	bl	8f14 <ull_ticker_status_take>
	if (!ret) {
    abce:	b338      	cbz	r0, ac20 <ull_conn_reset+0xa0>
	conn->lll.link_tx_free = NULL;
    abd0:	2300      	movs	r3, #0
    abd2:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
    abd4:	4620      	mov	r0, r4
    abd6:	f7fe f9b7 	bl	8f48 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
    abda:	4284      	cmp	r4, r0
    abdc:	d00c      	beq.n	abf8 <ull_conn_reset+0x78>
    abde:	4a1b      	ldr	r2, [pc, #108]	; (ac4c <ull_conn_reset+0xcc>)
    abe0:	491b      	ldr	r1, [pc, #108]	; (ac50 <ull_conn_reset+0xd0>)
    abe2:	481c      	ldr	r0, [pc, #112]	; (ac54 <ull_conn_reset+0xd4>)
    abe4:	f240 63a4 	movw	r3, #1700	; 0x6a4
    abe8:	f009 f884 	bl	13cf4 <printk>
    abec:	4040      	eors	r0, r0
    abee:	f380 8811 	msr	BASEPRI, r0
    abf2:	f04f 0003 	mov.w	r0, #3
    abf6:	df02      	svc	2
	data_chan_map[0] = 0xFF;
    abf8:	4b18      	ldr	r3, [pc, #96]	; (ac5c <ull_conn_reset+0xdc>)
	MFIFO_INIT(conn_ack);
    abfa:	4919      	ldr	r1, [pc, #100]	; (ac60 <ull_conn_reset+0xe0>)
	MFIFO_INIT(conn_tx);
    abfc:	4819      	ldr	r0, [pc, #100]	; (ac64 <ull_conn_reset+0xe4>)
	conn_upd_curr = NULL;
    abfe:	4a1a      	ldr	r2, [pc, #104]	; (ac68 <ull_conn_reset+0xe8>)
	data_chan_count = 37U;
    ac00:	4c1a      	ldr	r4, [pc, #104]	; (ac6c <ull_conn_reset+0xec>)
	data_chan_map[0] = 0xFF;
    ac02:	f04f 35ff 	mov.w	r5, #4294967295
    ac06:	601d      	str	r5, [r3, #0]
	data_chan_map[4] = 0x1F;
    ac08:	251f      	movs	r5, #31
    ac0a:	711d      	strb	r5, [r3, #4]
	MFIFO_INIT(conn_tx);
    ac0c:	2300      	movs	r3, #0
	data_chan_count = 37U;
    ac0e:	2525      	movs	r5, #37	; 0x25
	MFIFO_INIT(conn_tx);
    ac10:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
    ac12:	804b      	strh	r3, [r1, #2]
	data_chan_count = 37U;
    ac14:	7025      	strb	r5, [r4, #0]
	conn_upd_curr = NULL;
    ac16:	6013      	str	r3, [r2, #0]
	err = init_reset();
    ac18:	f7ff f9ee 	bl	9ff8 <init_reset>
}
    ac1c:	b005      	add	sp, #20
    ac1e:	bd30      	pop	{r4, r5, pc}
		ret = ull_disable(&conn->lll);
    ac20:	f104 001c 	add.w	r0, r4, #28
    ac24:	f7fe f9c0 	bl	8fa8 <ull_disable>
		LL_ASSERT(!ret);
    ac28:	2800      	cmp	r0, #0
    ac2a:	d0d1      	beq.n	abd0 <ull_conn_reset+0x50>
    ac2c:	4a07      	ldr	r2, [pc, #28]	; (ac4c <ull_conn_reset+0xcc>)
    ac2e:	4910      	ldr	r1, [pc, #64]	; (ac70 <ull_conn_reset+0xf0>)
    ac30:	4808      	ldr	r0, [pc, #32]	; (ac54 <ull_conn_reset+0xd4>)
    ac32:	f240 639e 	movw	r3, #1694	; 0x69e
    ac36:	f009 f85d 	bl	13cf4 <printk>
    ac3a:	4040      	eors	r0, r0
    ac3c:	f380 8811 	msr	BASEPRI, r0
    ac40:	f04f 0003 	mov.w	r0, #3
    ac44:	df02      	svc	2
    ac46:	e7c3      	b.n	abd0 <ull_conn_reset+0x50>
    ac48:	200013fc 	.word	0x200013fc
    ac4c:	0001570c 	.word	0x0001570c
    ac50:	0001581c 	.word	0x0001581c
    ac54:	0001525c 	.word	0x0001525c
    ac58:	00008f09 	.word	0x00008f09
    ac5c:	2000028c 	.word	0x2000028c
    ac60:	20000294 	.word	0x20000294
    ac64:	200002f8 	.word	0x200002f8
    ac68:	200015c4 	.word	0x200015c4
    ac6c:	20000411 	.word	0x20000411
    ac70:	000154d0 	.word	0x000154d0

0000ac74 <ull_conn_chan_map_cpy>:
{
    ac74:	b508      	push	{r3, lr}
	memcpy(chan_map, data_chan_map, sizeof(data_chan_map));
    ac76:	4903      	ldr	r1, [pc, #12]	; (ac84 <ull_conn_chan_map_cpy+0x10>)
    ac78:	2205      	movs	r2, #5
    ac7a:	f009 fb4e 	bl	1431a <memcpy>
	return data_chan_count;
    ac7e:	4b02      	ldr	r3, [pc, #8]	; (ac88 <ull_conn_chan_map_cpy+0x14>)
}
    ac80:	7818      	ldrb	r0, [r3, #0]
    ac82:	bd08      	pop	{r3, pc}
    ac84:	2000028c 	.word	0x2000028c
    ac88:	20000411 	.word	0x20000411

0000ac8c <ull_conn_chan_map_set>:
{
    ac8c:	b510      	push	{r4, lr}
	memcpy(data_chan_map, chan_map, sizeof(data_chan_map));
    ac8e:	4c06      	ldr	r4, [pc, #24]	; (aca8 <ull_conn_chan_map_set+0x1c>)
{
    ac90:	4601      	mov	r1, r0
	memcpy(data_chan_map, chan_map, sizeof(data_chan_map));
    ac92:	2205      	movs	r2, #5
    ac94:	4620      	mov	r0, r4
    ac96:	f009 fb40 	bl	1431a <memcpy>
	data_chan_count = util_ones_count_get(data_chan_map,
    ac9a:	4620      	mov	r0, r4
    ac9c:	2105      	movs	r1, #5
    ac9e:	f7f9 fea7 	bl	49f0 <util_ones_count_get>
    aca2:	4b02      	ldr	r3, [pc, #8]	; (acac <ull_conn_chan_map_set+0x20>)
    aca4:	7018      	strb	r0, [r3, #0]
}
    aca6:	bd10      	pop	{r4, pc}
    aca8:	2000028c 	.word	0x2000028c
    acac:	20000411 	.word	0x20000411

0000acb0 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    acb0:	4b01      	ldr	r3, [pc, #4]	; (acb8 <ull_conn_default_tx_octets_get+0x8>)
}
    acb2:	8818      	ldrh	r0, [r3, #0]
    acb4:	4770      	bx	lr
    acb6:	bf00      	nop
    acb8:	2000205e 	.word	0x2000205e

0000acbc <ull_conn_default_tx_time_get>:
	return default_tx_time;
    acbc:	4b01      	ldr	r3, [pc, #4]	; (acc4 <ull_conn_default_tx_time_get+0x8>)
}
    acbe:	8818      	ldrh	r0, [r3, #0]
    acc0:	4770      	bx	lr
    acc2:	bf00      	nop
    acc4:	20002060 	.word	0x20002060

0000acc8 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    acc8:	4b01      	ldr	r3, [pc, #4]	; (acd0 <ull_conn_default_phy_tx_get+0x8>)
}
    acca:	7818      	ldrb	r0, [r3, #0]
    accc:	4770      	bx	lr
    acce:	bf00      	nop
    acd0:	20002067 	.word	0x20002067

0000acd4 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    acd4:	4b01      	ldr	r3, [pc, #4]	; (acdc <ull_conn_default_phy_rx_get+0x8>)
}
    acd6:	7818      	ldrb	r0, [r3, #0]
    acd8:	4770      	bx	lr
    acda:	bf00      	nop
    acdc:	20002066 	.word	0x20002066

0000ace0 <ull_conn_setup>:
	lll = *((struct lll_conn **)((u8_t *)ftr->param +
    ace0:	688b      	ldr	r3, [r1, #8]
    ace2:	689b      	ldr	r3, [r3, #8]
{
    ace4:	b410      	push	{r4}
	switch (lll->role) {
    ace6:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
    acea:	09e4      	lsrs	r4, r4, #7
	ftr = &(rx->rx_ftr);
    acec:	f101 0208 	add.w	r2, r1, #8
	switch (lll->role) {
    acf0:	d002      	beq.n	acf8 <ull_conn_setup+0x18>
}
    acf2:	bc10      	pop	{r4}
		ull_slave_setup(link, rx, ftr, lll);
    acf4:	f7f7 bca8 	b.w	2648 <ull_slave_setup>
}
    acf8:	bc10      	pop	{r4}
		ull_master_setup(link, rx, ftr, lll);
    acfa:	f7f7 bef9 	b.w	2af0 <ull_master_setup>
    acfe:	bf00      	nop

0000ad00 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    ad00:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    ad02:	88da      	ldrh	r2, [r3, #6]
    ad04:	2a00      	cmp	r2, #0
    ad06:	d15b      	bne.n	adc0 <ull_conn_rx+0xc0>
{
    ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad0c:	460c      	mov	r4, r1
    ad0e:	b083      	sub	sp, #12
    ad10:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ad12:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    ad16:	48b3      	ldr	r0, [pc, #716]	; (afe4 <ull_conn_rx+0x2e4>)
    ad18:	f7f9 fcd2 	bl	46c0 <mem_get>
    ad1c:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    ad1e:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    ad20:	2800      	cmp	r0, #0
    ad22:	f040 8093 	bne.w	ae4c <ull_conn_rx+0x14c>
	pdu_rx = (void *)(*rx)->pdu;
    ad26:	6822      	ldr	r2, [r4, #0]
	switch (pdu_rx->ll_id) {
    ad28:	f892 3020 	ldrb.w	r3, [r2, #32]
    ad2c:	f003 0303 	and.w	r3, r3, #3
    ad30:	2b03      	cmp	r3, #3
	pdu_rx = (void *)(*rx)->pdu;
    ad32:	4616      	mov	r6, r2
	switch (pdu_rx->ll_id) {
    ad34:	d12a      	bne.n	ad8c <ull_conn_rx+0x8c>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    ad36:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	opcode = pdu_rx->llctrl.opcode;
    ad3a:	f892 8023 	ldrb.w	r8, [r2, #35]	; 0x23
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    ad3e:	07d8      	lsls	r0, r3, #31
    ad40:	f140 808b 	bpl.w	ae5a <ull_conn_rx+0x15a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    ad44:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
    ad48:	2900      	cmp	r1, #0
    ad4a:	f2c0 86b5 	blt.w	bab8 <ull_conn_rx+0xdb8>
	return (!conn->lll.role &&
    ad4e:	0759      	lsls	r1, r3, #29
    ad50:	f100 80ea 	bmi.w	af28 <ull_conn_rx+0x228>
		((!conn->llcp_enc.refresh &&
    ad54:	f1b8 0f02 	cmp.w	r8, #2
    ad58:	f000 841a 	beq.w	b590 <ull_conn_rx+0x890>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    ad5c:	f1b8 0f05 	cmp.w	r8, #5
    ad60:	f000 85a4 	beq.w	b8ac <ull_conn_rx+0xbac>
    ad64:	f1b8 0f06 	cmp.w	r8, #6
    ad68:	f000 8097 	beq.w	ae9a <ull_conn_rx+0x19a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    ad6c:	f1b8 0f0d 	cmp.w	r8, #13
    ad70:	f000 8439 	beq.w	b5e6 <ull_conn_rx+0x8e6>
    ad74:	f1b8 0f11 	cmp.w	r8, #17
    ad78:	f000 8324 	beq.w	b3c4 <ull_conn_rx+0x6c4>
		conn->llcp_terminate.reason_peer =
    ad7c:	233d      	movs	r3, #61	; 0x3d
    ad7e:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ad82:	6823      	ldr	r3, [r4, #0]
    ad84:	2203      	movs	r2, #3
    ad86:	711a      	strb	r2, [r3, #4]

		return 0;
    ad88:	2000      	movs	r0, #0
    ad8a:	e00b      	b.n	ada4 <ull_conn_rx+0xa4>
	switch (pdu_rx->ll_id) {
    ad8c:	b96b      	cbnz	r3, adaa <ull_conn_rx+0xaa>
		if (conn->llcp_enc.pause_rx) {
    ad8e:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
    ad92:	07db      	lsls	r3, r3, #31
    ad94:	d503      	bpl.n	ad9e <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_peer =
    ad96:	233d      	movs	r3, #61	; 0x3d
    ad98:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
    ad9c:	6822      	ldr	r2, [r4, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ad9e:	2303      	movs	r3, #3
    ada0:	7113      	strb	r3, [r2, #4]
	return 0;
    ada2:	2000      	movs	r0, #0
}
    ada4:	b003      	add	sp, #12
    ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    adaa:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
    adae:	07da      	lsls	r2, r3, #31
    adb0:	d5f7      	bpl.n	ada2 <ull_conn_rx+0xa2>
			conn->llcp_terminate.reason_peer =
    adb2:	233d      	movs	r3, #61	; 0x3d
    adb4:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    adb8:	6823      	ldr	r3, [r4, #0]
    adba:	2203      	movs	r2, #3
    adbc:	711a      	strb	r2, [r3, #4]
    adbe:	e7f1      	b.n	ada4 <ull_conn_rx+0xa4>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    adc0:	2203      	movs	r2, #3
    adc2:	711a      	strb	r2, [r3, #4]
		return 0;
    adc4:	2000      	movs	r0, #0
}
    adc6:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
    adc8:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
    adcc:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
    adce:	f043 0303 	orr.w	r3, r3, #3
    add2:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
    add6:	d114      	bne.n	ae02 <ull_conn_rx+0x102>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
    add8:	f8b5 31aa 	ldrh.w	r3, [r5, #426]	; 0x1aa
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
    addc:	f895 01ac 	ldrb.w	r0, [r5, #428]	; 0x1ac
					conn->llcp_phy.tx =
    ade0:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
    ade4:	f000 0307 	and.w	r3, r0, #7
    ade8:	009b      	lsls	r3, r3, #2
    adea:	f3c0 1002 	ubfx	r0, r0, #4, #3
    adee:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    adf2:	f021 0104 	bic.w	r1, r1, #4
					conn->llcp_phy.ack--;
    adf6:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
    adf8:	430b      	orrs	r3, r1
					conn->llcp_phy.ack--;
    adfa:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
					conn->llcp_phy.tx =
    adfe:	f8a5 31aa 	strh.w	r3, [r5, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
    ae02:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
    ae06:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
				conn->llcp_phy.rx &= p->tx_phys;
    ae0a:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
				conn->llcp_phy.tx &= p->rx_phys;
    ae0e:	f3c2 0082 	ubfx	r0, r2, #2, #3
    ae12:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
    ae14:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
    ae18:	009b      	lsls	r3, r3, #2
    ae1a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    ae1e:	f002 0203 	and.w	r2, r2, #3
    ae22:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    ae24:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
    ae28:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    ae2c:	d002      	beq.n	ae34 <ull_conn_rx+0x134>
    ae2e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    ae32:	d105      	bne.n	ae40 <ull_conn_rx+0x140>
					conn->llcp_phy.tx = 0;
    ae34:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
    ae38:	f003 0303 	and.w	r3, r3, #3
    ae3c:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
    ae40:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
    ae44:	f043 0301 	orr.w	r3, r3, #1
    ae48:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ae4c:	6823      	ldr	r3, [r4, #0]
    ae4e:	2203      	movs	r2, #3
	int nack = 0;
    ae50:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    ae52:	711a      	strb	r2, [r3, #4]
}
    ae54:	b003      	add	sp, #12
    ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
    ae5a:	3220      	adds	r2, #32
	switch (opcode) {
    ae5c:	f1b8 0f19 	cmp.w	r8, #25
    ae60:	d820      	bhi.n	aea4 <ull_conn_rx+0x1a4>
    ae62:	e8df f018 	tbh	[pc, r8, lsl #1]
    ae66:	00c3      	.short	0x00c3
    ae68:	0395040a 	.word	0x0395040a
    ae6c:	05170499 	.word	0x05170499
    ae70:	0549051e 	.word	0x0549051e
    ae74:	04050441 	.word	0x04050441
    ae78:	02180267 	.word	0x02180267
    ae7c:	03d4056d 	.word	0x03d4056d
    ae80:	03af03c0 	.word	0x03af03c0
    ae84:	02e50379 	.word	0x02e50379
    ae88:	028d02af 	.word	0x028d02af
    ae8c:	008a03a3 	.word	0x008a03a3
    ae90:	01e6008a 	.word	0x01e6008a
    ae94:	016a01a8 	.word	0x016a01a8
    ae98:	0132      	.short	0x0132
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    ae9a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    ae9e:	2b01      	cmp	r3, #1
    aea0:	f000 853a 	beq.w	b918 <ull_conn_rx+0xc18>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    aea4:	4850      	ldr	r0, [pc, #320]	; (afe8 <ull_conn_rx+0x2e8>)
    aea6:	f7f9 fbd9 	bl	465c <mem_acquire>
	if (!tx) {
    aeaa:	2800      	cmp	r0, #0
    aeac:	f000 86f7 	beq.w	bc9e <ull_conn_rx+0xf9e>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    aeb0:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    aeb2:	7901      	ldrb	r1, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    aeb4:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    aeb6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
    aeba:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    aebe:	f041 0203 	orr.w	r2, r1, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    aec2:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    aec4:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    aec6:	71c1      	strb	r1, [r0, #7]
	if (
    aec8:	b303      	cbz	r3, af0c <ull_conn_rx+0x20c>
	    !conn->llcp_enc.pause_tx &&
    aeca:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	    conn->tx_head &&
    aece:	0794      	lsls	r4, r2, #30
    aed0:	d41c      	bmi.n	af0c <ull_conn_rx+0x20c>
	    !conn->llcp_phy.pause_tx &&
    aed2:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
    aed6:	07d1      	lsls	r1, r2, #31
    aed8:	d418      	bmi.n	af0c <ull_conn_rx+0x20c>
		if (conn->tx_head == conn->tx_data) {
    aeda:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
    aede:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    aee0:	bf04      	itt	eq
    aee2:	681a      	ldreq	r2, [r3, #0]
    aee4:	f8c5 21bc 	streq.w	r2, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    aee8:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
    aeec:	b99a      	cbnz	r2, af16 <ull_conn_rx+0x216>
			tx->next = conn->tx_head->next;
    aeee:	681a      	ldr	r2, [r3, #0]
    aef0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    aef2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    aef4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    aef6:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
    aefa:	2b00      	cmp	r3, #0
    aefc:	f000 85f5 	beq.w	baea <ull_conn_rx+0xdea>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    af00:	2303      	movs	r3, #3
	return 0;
    af02:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    af04:	7133      	strb	r3, [r6, #4]
}
    af06:	b003      	add	sp, #12
    af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
    af0c:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
    af10:	2a00      	cmp	r2, #0
    af12:	f000 85ee 	beq.w	baf2 <ull_conn_rx+0xdf2>
	tx->next = conn->tx_ctrl_last->next;
    af16:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
    af1a:	681a      	ldr	r2, [r3, #0]
    af1c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    af1e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    af20:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
    af24:	6803      	ldr	r3, [r0, #0]
}
    af26:	e7e8      	b.n	aefa <ull_conn_rx+0x1fa>
		 (conn->llcp_enc.refresh &&
    af28:	f1b8 0f02 	cmp.w	r8, #2
    af2c:	f000 8330 	beq.w	b590 <ull_conn_rx+0x890>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    af30:	f1b8 0f0b 	cmp.w	r8, #11
    af34:	f000 85e4 	beq.w	bb00 <ull_conn_rx+0xe00>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    af38:	f1b8 0f04 	cmp.w	r8, #4
    af3c:	f47f af0e 	bne.w	ad5c <ull_conn_rx+0x5c>
		if (conn->lll.role ||
    af40:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    af44:	2b0d      	cmp	r3, #13
    af46:	d1ad      	bne.n	aea4 <ull_conn_rx+0x1a4>
		memcpy(&conn->llcp.encryption.skd[8],
    af48:	2208      	movs	r2, #8
    af4a:	f106 0124 	add.w	r1, r6, #36	; 0x24
    af4e:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    af52:	f009 f9e2 	bl	1431a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
    af56:	f106 012c 	add.w	r1, r6, #44	; 0x2c
    af5a:	2204      	movs	r2, #4
    af5c:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    af60:	f009 f9db 	bl	1431a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
    af64:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    af68:	6822      	ldr	r2, [r4, #0]
		conn->llcp_enc.pause_rx = 1U;
    af6a:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    af6e:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
    af70:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	int nack = 0;
    af74:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    af76:	7111      	strb	r1, [r2, #4]
		break;
    af78:	e714      	b.n	ada4 <ull_conn_rx+0xa4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    af7a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    af7e:	2b09      	cmp	r3, #9
    af80:	d190      	bne.n	aea4 <ull_conn_rx+0x1a4>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    af82:	f1b8 0f14 	cmp.w	r8, #20
    af86:	f000 8618 	beq.w	bbba <ull_conn_rx+0xeba>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    af8a:	f895 2198 	ldrb.w	r2, [r5, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
    af8e:	f895 1199 	ldrb.w	r1, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
    af92:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
    af96:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
    af9a:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
    af9e:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    afa2:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
    afa4:	4291      	cmp	r1, r2
    afa6:	f001 8133 	beq.w	c210 <ull_conn_rx+0x1510>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    afaa:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
	struct node_tx *tx = NULL;
    afae:	2100      	movs	r1, #0
	       tx) ||
    afb0:	f002 0207 	and.w	r2, r2, #7
    afb4:	2a02      	cmp	r2, #2
    afb6:	f000 8616 	beq.w	bbe6 <ull_conn_rx+0xee6>
    afba:	f896 8023 	ldrb.w	r8, [r6, #35]	; 0x23
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    afbe:	f1b8 0f15 	cmp.w	r8, #21
    afc2:	f43f aeee 	beq.w	ada2 <ull_conn_rx+0xa2>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    afc6:	4608      	mov	r0, r1
    afc8:	4907      	ldr	r1, [pc, #28]	; (afe8 <ull_conn_rx+0x2e8>)
    afca:	f7f9 fb61 	bl	4690 <mem_release>
			if (conn->llcp_length.state ==
    afce:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
    afd2:	f003 0307 	and.w	r3, r3, #7
    afd6:	2b04      	cmp	r3, #4
    afd8:	f47f aee3 	bne.w	ada2 <ull_conn_rx+0xa2>
				return -EBUSY;
    afdc:	f06f 000f 	mvn.w	r0, #15
    afe0:	e6e0      	b.n	ada4 <ull_conn_rx+0xa4>
    afe2:	bf00      	nop
    afe4:	200013fc 	.word	0x200013fc
    afe8:	200016d0 	.word	0x200016d0
		if (!conn->lll.role ||
    afec:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    aff0:	2b00      	cmp	r3, #0
    aff2:	f6bf af57 	bge.w	aea4 <ull_conn_rx+0x1a4>
    aff6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    affa:	2b0c      	cmp	r3, #12
    affc:	f47f af52 	bne.w	aea4 <ull_conn_rx+0x1a4>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
    b000:	f8b6 002d 	ldrh.w	r0, [r6, #45]	; 0x2d
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
    b004:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    b006:	1ac3      	subs	r3, r0, r3
    b008:	041b      	lsls	r3, r3, #16
    b00a:	f101 806e 	bmi.w	c0ea <ull_conn_rx+0x13ea>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    b00e:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    b012:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    b016:	1a9b      	subs	r3, r3, r2
    b018:	f003 0303 	and.w	r3, r3, #3
    b01c:	2b02      	cmp	r3, #2
    b01e:	f001 809a 	beq.w	c156 <ull_conn_rx+0x1456>
	if (!conn_upd_curr) {
    b022:	4be4      	ldr	r3, [pc, #912]	; (b3b4 <ull_conn_rx+0x6b4>)
    b024:	681a      	ldr	r2, [r3, #0]
    b026:	2a00      	cmp	r2, #0
    b028:	f001 80de 	beq.w	c1e8 <ull_conn_rx+0x14e8>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    b02c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    b030:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
    b034:	f8b6 1025 	ldrh.w	r1, [r6, #37]	; 0x25
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    b038:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
    b03c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b040:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
    b044:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
    b048:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
    b04c:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
    b050:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
    b054:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
    b058:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
    b05c:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    b060:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
    b064:	f8a5 210a 	strh.w	r2, [r5, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    b068:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
	conn->llcp_cu.ack--;
    b06c:	f895 2105 	ldrb.w	r2, [r5, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    b070:	f896 602c 	ldrb.w	r6, [r6, #44]	; 0x2c
	conn->llcp.conn_upd.instant = instant;
    b074:	f8a5 00ec 	strh.w	r0, [r5, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    b078:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
    b07c:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    b080:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
    b084:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    b086:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
    b08a:	f885 2105 	strb.w	r2, [r5, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    b08e:	f885 3106 	strb.w	r3, [r5, #262]	; 0x106
	conn->llcp_cu.timeout =
    b092:	f8a5 110c 	strh.w	r1, [r5, #268]	; 0x10c
	link->mem = conn->llcp_rx;
    b096:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
    b098:	6823      	ldr	r3, [r4, #0]
    b09a:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    b09c:	6823      	ldr	r3, [r4, #0]
    b09e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
    b0a2:	2300      	movs	r3, #0
    b0a4:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b0a6:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
    b0aa:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
    b0ae:	4293      	cmp	r3, r2
    b0b0:	d007      	beq.n	b0c2 <ull_conn_rx+0x3c2>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    b0b2:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    b0b6:	f003 0307 	and.w	r3, r3, #7
    b0ba:	2b04      	cmp	r3, #4
    b0bc:	d101      	bne.n	b0c2 <ull_conn_rx+0x3c2>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    b0be:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
		conn->procedure_expire = 0U;
    b0c2:	2000      	movs	r0, #0
    b0c4:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		break;
    b0c8:	e66c      	b.n	ada4 <ull_conn_rx+0xa4>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
    b0ca:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	f6ff aee8 	blt.w	aea4 <ull_conn_rx+0x1a4>
    b0d4:	f896 7021 	ldrb.w	r7, [r6, #33]	; 0x21
    b0d8:	2f03      	cmp	r7, #3
    b0da:	f47f aee3 	bne.w	aea4 <ull_conn_rx+0x1a4>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
    b0de:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
					 conn->lll.phy_rx))) {
    b0e2:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
    b0e6:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
    b0ea:	430b      	orrs	r3, r1
    b0ec:	f003 0307 	and.w	r3, r3, #7
    b0f0:	4213      	tst	r3, r2
    b0f2:	f43f ae56 	beq.w	ada2 <ull_conn_rx+0xa2>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    b0f6:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    b0fa:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    b0fe:	1a9b      	subs	r3, r3, r2
    b100:	f003 0303 	and.w	r3, r3, #3
    b104:	2b02      	cmp	r3, #2
    b106:	f43f ae4c 	beq.w	ada2 <ull_conn_rx+0xa2>
			    0x02) {
				break;
			}

			memcpy(&conn->llcp.chan_map.chm[0], data_chan_map,
    b10a:	49ab      	ldr	r1, [pc, #684]	; (b3b8 <ull_conn_rx+0x6b8>)
    b10c:	2205      	movs	r2, #5
    b10e:	f105 00ed 	add.w	r0, r5, #237	; 0xed
    b112:	f009 f902 	bl	1431a <memcpy>
			       sizeof(conn->llcp.chan_map.chm));
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
    b116:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
    b11a:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
			conn->llcp_ack -= 2U;
    b11e:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
    b120:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
    b122:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
    b126:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b12a:	6822      	ldr	r2, [r4, #0]
			conn->llcp.chan_map.initiate = 1U;
    b12c:	f043 0301 	orr.w	r3, r3, #1
    b130:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	int nack = 0;
    b134:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b136:	7117      	strb	r7, [r2, #4]

		break;
    b138:	e634      	b.n	ada4 <ull_conn_rx+0xa4>
		if (!conn->lll.role ||
    b13a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b13e:	2b00      	cmp	r3, #0
    b140:	f6bf aeb0 	bge.w	aea4 <ull_conn_rx+0x1a4>
    b144:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b148:	2b05      	cmp	r3, #5
    b14a:	f47f aeab 	bne.w	aea4 <ull_conn_rx+0x1a4>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    b14e:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    b152:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    b156:	ea41 0003 	orr.w	r0, r1, r3
    b15a:	f010 0007 	ands.w	r0, r0, #7
    b15e:	f040 8737 	bne.w	bfd0 <ull_conn_rx+0x12d0>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    b162:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
    b166:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
    b16a:	428b      	cmp	r3, r1
    b16c:	f43f aec8 	beq.w	af00 <ull_conn_rx+0x200>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    b170:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    b174:	f003 0303 	and.w	r3, r3, #3
    b178:	2b02      	cmp	r3, #2
    b17a:	f47f aec1 	bne.w	af00 <ull_conn_rx+0x200>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    b17e:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    b182:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
    b186:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
    b18a:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    b18e:	4611      	mov	r1, r2
    b190:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    b194:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
    b198:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
    b19c:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    b1a0:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
    b1a4:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
    b1a8:	f041 80eb 	bne.w	c382 <ull_conn_rx+0x1682>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b1ac:	6822      	ldr	r2, [r4, #0]
    b1ae:	2103      	movs	r1, #3
	int nack = 0;
    b1b0:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b1b2:	7111      	strb	r1, [r2, #4]
		if (err) {
    b1b4:	e5f6      	b.n	ada4 <ull_conn_rx+0xa4>
		if (conn->lll.role ||
    b1b6:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b1ba:	2b00      	cmp	r3, #0
    b1bc:	f6ff ae72 	blt.w	aea4 <ull_conn_rx+0x1a4>
    b1c0:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b1c4:	2b03      	cmp	r3, #3
    b1c6:	f47f ae6d 	bne.w	aea4 <ull_conn_rx+0x1a4>
		if (!conn->lll.role &&
    b1ca:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
    b1ce:	f895 31a8 	ldrb.w	r3, [r5, #424]	; 0x1a8
    b1d2:	429a      	cmp	r2, r3
    b1d4:	f43f ae94 	beq.w	af00 <ull_conn_rx+0x200>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    b1d8:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
    b1dc:	f001 0303 	and.w	r3, r1, #3
    b1e0:	2b02      	cmp	r3, #2
    b1e2:	f47f ae8d 	bne.w	af00 <ull_conn_rx+0x200>
			conn->llcp_phy.tx &= p->rx_phys;
    b1e6:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
			conn->llcp_phy.rx &= p->tx_phys;
    b1ea:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
			conn->llcp_phy.tx &= p->rx_phys;
    b1ee:	f3c1 0082 	ubfx	r0, r1, #2, #3
    b1f2:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    b1f4:	009b      	lsls	r3, r3, #2
    b1f6:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
    b1fa:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    b1fe:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    b202:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
    b206:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    b20a:	d002      	beq.n	b212 <ull_conn_rx+0x512>
    b20c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    b210:	d105      	bne.n	b21e <ull_conn_rx+0x51e>
				conn->llcp_phy.tx = 0;
    b212:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
    b216:	f003 0303 	and.w	r3, r3, #3
    b21a:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
    b21e:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
			conn->procedure_expire = 0U;
    b222:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
    b224:	f043 0301 	orr.w	r3, r3, #1
    b228:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
			conn->procedure_expire = 0U;
    b22c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b230:	e666      	b.n	af00 <ull_conn_rx+0x200>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
    b232:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b236:	2b03      	cmp	r3, #3
    b238:	f47f ae34 	bne.w	aea4 <ull_conn_rx+0x1a4>
		if (!conn->lll.role) {
    b23c:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b240:	2b00      	cmp	r3, #0
    b242:	f2c0 8568 	blt.w	bd16 <ull_conn_rx+0x1016>
			if ((conn->llcp_phy.ack !=
    b246:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
    b24a:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
    b24e:	428a      	cmp	r2, r1
    b250:	d007      	beq.n	b262 <ull_conn_rx+0x562>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    b252:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
    b256:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
    b25a:	3b01      	subs	r3, #1
    b25c:	2b02      	cmp	r3, #2
    b25e:	f240 873d 	bls.w	c0dc <ull_conn_rx+0x13dc>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    b262:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    b266:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
    b26a:	1a1b      	subs	r3, r3, r0
    b26c:	f003 0303 	and.w	r3, r3, #3
    b270:	2b02      	cmp	r3, #2
    b272:	f000 871b 	beq.w	c0ac <ull_conn_rx+0x13ac>
				     LLCP_ENCRYPTION)) ||
    b276:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
    b27a:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
    b27e:	4298      	cmp	r0, r3
    b280:	f43f ada2 	beq.w	adc8 <ull_conn_rx+0xc8>
				nack = reject_ext_ind_send(conn, *rx,
    b284:	1d31      	adds	r1, r6, #4
    b286:	4628      	mov	r0, r5
    b288:	232a      	movs	r3, #42	; 0x2a
    b28a:	2216      	movs	r2, #22
}
    b28c:	b003      	add	sp, #12
    b28e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
    b292:	f7ff b811 	b.w	a2b8 <reject_ext_ind_send.isra.0>
		if (!conn->lll.role ||
    b296:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b29a:	2b00      	cmp	r3, #0
    b29c:	f6bf ae02 	bge.w	aea4 <ull_conn_rx+0x1a4>
    b2a0:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
    b2a4:	2c01      	cmp	r4, #1
    b2a6:	f47f adfd 	bne.w	aea4 <ull_conn_rx+0x1a4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    b2aa:	4844      	ldr	r0, [pc, #272]	; (b3bc <ull_conn_rx+0x6bc>)
    b2ac:	f7f9 f9d6 	bl	465c <mem_acquire>
		if (!tx) {
    b2b0:	4603      	mov	r3, r0
    b2b2:	2800      	cmp	r0, #0
    b2b4:	f000 84f3 	beq.w	bc9e <ull_conn_rx+0xf9e>
	conn->llcp_enc.pause_rx = 1U;
    b2b8:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
    b2bc:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
    b2c0:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
    b2c4:	f36f 01c3 	bfc	r1, #3, #1
    b2c8:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
    b2cc:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b2d0:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
    b2d2:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b2d6:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
    b2d8:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b2dc:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    b2e0:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b2e2:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    b2e4:	71d8      	strb	r0, [r3, #7]
	if (
    b2e6:	2a00      	cmp	r2, #0
    b2e8:	f000 8455 	beq.w	bb96 <ull_conn_rx+0xe96>
	    !conn->llcp_enc.pause_tx &&
    b2ec:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
	    conn->tx_head &&
    b2f0:	0788      	lsls	r0, r1, #30
    b2f2:	f100 8450 	bmi.w	bb96 <ull_conn_rx+0xe96>
	    !conn->llcp_phy.pause_tx &&
    b2f6:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
    b2fa:	07c9      	lsls	r1, r1, #31
    b2fc:	f100 844b 	bmi.w	bb96 <ull_conn_rx+0xe96>
		if (conn->tx_head == conn->tx_data) {
    b300:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    b304:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
    b306:	bf04      	itt	eq
    b308:	6811      	ldreq	r1, [r2, #0]
    b30a:	f8c5 11bc 	streq.w	r1, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    b30e:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
    b312:	2900      	cmp	r1, #0
    b314:	f001 8027 	beq.w	c366 <ull_conn_rx+0x1666>
	tx->next = conn->tx_ctrl_last->next;
    b318:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
    b31c:	6811      	ldr	r1, [r2, #0]
    b31e:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    b320:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    b322:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
	if (!tx->next) {
    b326:	681a      	ldr	r2, [r3, #0]
    b328:	2a00      	cmp	r2, #0
    b32a:	f47f ade9 	bne.w	af00 <ull_conn_rx+0x200>
		conn->tx_data_last = tx;
    b32e:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
    b332:	e5e5      	b.n	af00 <ull_conn_rx+0x200>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
    b334:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b338:	2b09      	cmp	r3, #9
    b33a:	f47f adb3 	bne.w	aea4 <ull_conn_rx+0x1a4>
	       (features[1] << 8) | (features[2] << 16);
    b33e:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    b342:	f896 4025 	ldrb.w	r4, [r6, #37]	; 0x25
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
    b346:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
	       (features[1] << 8) | (features[2] << 16);
    b34a:	4a1d      	ldr	r2, [pc, #116]	; (b3c0 <ull_conn_rx+0x6c0>)
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
    b34c:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
    b350:	041b      	lsls	r3, r3, #16
    b352:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    b356:	4303      	orrs	r3, r0
    b358:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
    b35a:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
    b35e:	f895 0118 	ldrb.w	r0, [r5, #280]	; 0x118
    b362:	f885 0119 	strb.w	r0, [r5, #281]	; 0x119
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
    b366:	400b      	ands	r3, r1
    b368:	f3c3 0310 	ubfx	r3, r3, #0, #17
	conn->common.fex_valid = 1U;
    b36c:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
    b370:	2000      	movs	r0, #0
	conn->llcp_feature.features &= feat_get(&rsp->features[0]);
    b372:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	conn->common.fex_valid = 1U;
    b376:	f885 20dc 	strb.w	r2, [r5, #220]	; 0xdc
	conn->procedure_expire = 0U;
    b37a:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
}
    b37e:	e511      	b.n	ada4 <ull_conn_rx+0xa4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
    b380:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
    b384:	2c01      	cmp	r4, #1
    b386:	f47f ad8d 	bne.w	aea4 <ull_conn_rx+0x1a4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    b38a:	480c      	ldr	r0, [pc, #48]	; (b3bc <ull_conn_rx+0x6bc>)
    b38c:	f7f9 f966 	bl	465c <mem_acquire>
	if (!tx) {
    b390:	4601      	mov	r1, r0
    b392:	2800      	cmp	r0, #0
    b394:	f000 8483 	beq.w	bc9e <ull_conn_rx+0xf9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    b398:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    b39a:	7144      	strb	r4, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    b39c:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    b3a0:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
    b3a2:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    b3a4:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    b3a6:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    b3a8:	f7ff f83a 	bl	a420 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b3ac:	2303      	movs	r3, #3
    b3ae:	7133      	strb	r3, [r6, #4]
	return 0;
    b3b0:	2000      	movs	r0, #0
    b3b2:	e4f7      	b.n	ada4 <ull_conn_rx+0xa4>
    b3b4:	200015c4 	.word	0x200015c4
    b3b8:	2000028c 	.word	0x2000028c
    b3bc:	200016d0 	.word	0x200016d0
    b3c0:	fffe30d0 	.word	0xfffe30d0
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    b3c4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b3c8:	2b03      	cmp	r3, #3
    b3ca:	f47f ad6b 	bne.w	aea4 <ull_conn_rx+0x1a4>
	switch (rej_ext_ind->reject_opcode) {
    b3ce:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    b3d2:	3b03      	subs	r3, #3
    b3d4:	2b13      	cmp	r3, #19
    b3d6:	f63f ad93 	bhi.w	af00 <ull_conn_rx+0x200>
    b3da:	a201      	add	r2, pc, #4	; (adr r2, b3e0 <ull_conn_rx+0x6e0>)
    b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b3e0:	0000ba39 	.word	0x0000ba39
    b3e4:	0000af01 	.word	0x0000af01
    b3e8:	0000af01 	.word	0x0000af01
    b3ec:	0000af01 	.word	0x0000af01
    b3f0:	0000af01 	.word	0x0000af01
    b3f4:	0000af01 	.word	0x0000af01
    b3f8:	0000af01 	.word	0x0000af01
    b3fc:	0000af01 	.word	0x0000af01
    b400:	0000af01 	.word	0x0000af01
    b404:	0000af01 	.word	0x0000af01
    b408:	0000af01 	.word	0x0000af01
    b40c:	0000af01 	.word	0x0000af01
    b410:	0000b9d1 	.word	0x0000b9d1
    b414:	0000af01 	.word	0x0000af01
    b418:	0000af01 	.word	0x0000af01
    b41c:	0000af01 	.word	0x0000af01
    b420:	0000af01 	.word	0x0000af01
    b424:	0000ba79 	.word	0x0000ba79
    b428:	0000af01 	.word	0x0000af01
    b42c:	0000b965 	.word	0x0000b965
		if (conn->lll.role ||
    b430:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b434:	2b00      	cmp	r3, #0
    b436:	f6ff ad35 	blt.w	aea4 <ull_conn_rx+0x1a4>
    b43a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b43e:	2b18      	cmp	r3, #24
    b440:	f47f ad30 	bne.w	aea4 <ull_conn_rx+0x1a4>
		if (!conn->lll.role &&
    b444:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
    b448:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
    b44c:	429a      	cmp	r2, r3
    b44e:	f43f ad57 	beq.w	af00 <ull_conn_rx+0x200>
		    (conn->llcp_conn_param.state ==
    b452:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
    b456:	f003 0307 	and.w	r3, r3, #7
    b45a:	2b04      	cmp	r3, #4
    b45c:	f47f ad50 	bne.w	af00 <ull_conn_rx+0x200>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    b460:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
    b464:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < 6) ||
    b468:	2a05      	cmp	r2, #5
    b46a:	f240 8631 	bls.w	c0d0 <ull_conn_rx+0x13d0>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    b46e:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
    b472:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < 6) ||
    b476:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    b47a:	f200 8629 	bhi.w	c0d0 <ull_conn_rx+0x13d0>
			    (interval_max > 3200) ||
    b47e:	429a      	cmp	r2, r3
    b480:	f200 8626 	bhi.w	c0d0 <ull_conn_rx+0x13d0>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
    b484:	8d37      	ldrh	r7, [r6, #40]	; 0x28
    b486:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
    b488:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    b48c:	f080 8620 	bcs.w	c0d0 <ull_conn_rx+0x13d0>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
    b490:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
    b492:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
    b496:	f1a8 010a 	sub.w	r1, r8, #10
    b49a:	b289      	uxth	r1, r1
    b49c:	f640 4976 	movw	r9, #3190	; 0xc76
    b4a0:	4549      	cmp	r1, r9
    b4a2:	f200 8615 	bhi.w	c0d0 <ull_conn_rx+0x13d0>
			     ((latency + 1) * interval_max)) ||
    b4a6:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
    b4aa:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
    b4ae:	f080 860f 	bcs.w	c0d0 <ull_conn_rx+0x13d0>
			     ((latency + 1) * interval_max)) ||
    b4b2:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
    b4b6:	428b      	cmp	r3, r1
    b4b8:	f0c0 860a 	bcc.w	c0d0 <ull_conn_rx+0x13d0>
			conn->procedure_expire = 0U;
    b4bc:	2300      	movs	r3, #0
			conn->llcp_conn_param.preferred_periodicity =
    b4be:	f885 117c 	strb.w	r1, [r5, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
    b4c2:	f8a5 e174 	strh.w	lr, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
    b4c6:	f8a5 c176 	strh.w	ip, [r5, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
    b4ca:	f8a5 7178 	strh.w	r7, [r5, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
    b4ce:	f8a5 017a 	strh.w	r0, [r5, #378]	; 0x17a
			conn->procedure_expire = 0U;
    b4d2:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    b4d6:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
    b4da:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    b4de:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    b4e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    b4e6:	f8a5 317e 	strh.w	r3, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
    b4ea:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    b4ee:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    b4f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
    b4f6:	f8a5 3180 	strh.w	r3, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
    b4fa:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
    b4fe:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    b502:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
    b506:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
    b50a:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
    b50e:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    b512:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
    b516:	f8a5 3184 	strh.w	r3, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
    b51a:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
    b51e:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
    b522:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
    b526:	f8a5 3186 	strh.w	r3, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
    b52a:	f896 1038 	ldrb.w	r1, [r6, #56]	; 0x38
    b52e:	f896 3037 	ldrb.w	r3, [r6, #55]	; 0x37
    b532:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
    b536:	f8a5 3188 	strh.w	r3, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
    b53a:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    b53e:	f896 003a 	ldrb.w	r0, [r6, #58]	; 0x3a
    b542:	6826      	ldr	r6, [r4, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    b544:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
    b546:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    b54a:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
    b54e:	f8a5 318a 	strh.w	r3, [r5, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    b552:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b556:	e4d3      	b.n	af00 <ull_conn_rx+0x200>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    b558:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
    b55c:	2918      	cmp	r1, #24
    b55e:	f47f aca1 	bne.w	aea4 <ull_conn_rx+0x1a4>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
    b562:	4fe0      	ldr	r7, [pc, #896]	; (b8e4 <ull_conn_rx+0xbe4>)
    b564:	f8d7 9000 	ldr.w	r9, [r7]
    b568:	f1b9 0f00 	cmp.w	r9, #0
    b56c:	f000 82e5 	beq.w	bb3a <ull_conn_rx+0xe3a>
    b570:	454d      	cmp	r5, r9
    b572:	f000 82e2 	beq.w	bb3a <ull_conn_rx+0xe3a>
			nack = reject_ext_ind_send(conn, *rx,
    b576:	1d31      	adds	r1, r6, #4
    b578:	4628      	mov	r0, r5
    b57a:	2320      	movs	r3, #32
    b57c:	220f      	movs	r2, #15
    b57e:	e685      	b.n	b28c <ull_conn_rx+0x58c>
		((!conn->llcp_enc.refresh &&
    b580:	f1b8 0f07 	cmp.w	r8, #7
    b584:	f000 80b0 	beq.w	b6e8 <ull_conn_rx+0x9e8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    b588:	f1b8 0f02 	cmp.w	r8, #2
    b58c:	f040 82a2 	bne.w	bad4 <ull_conn_rx+0xdd4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    b590:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b594:	2b02      	cmp	r3, #2
    b596:	f47f ac85 	bne.w	aea4 <ull_conn_rx+0x1a4>
		terminate_ind_recv(conn, *rx, pdu_rx);
    b59a:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
    b59e:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b5a2:	2303      	movs	r3, #3
    b5a4:	7133      	strb	r3, [r6, #4]
	int nack = 0;
    b5a6:	2000      	movs	r0, #0
}
    b5a8:	f7ff bbfc 	b.w	ada4 <ull_conn_rx+0xa4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
    b5ac:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b5b0:	2b01      	cmp	r3, #1
    b5b2:	f47f ac77 	bne.w	aea4 <ull_conn_rx+0x1a4>
		conn->procedure_expire = 0U;
    b5b6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b5b8:	2303      	movs	r3, #3
		conn->procedure_expire = 0U;
    b5ba:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b5be:	7133      	strb	r3, [r6, #4]
		break;
    b5c0:	f7ff bbf0 	b.w	ada4 <ull_conn_rx+0xa4>
		if (conn->lll.role ||
    b5c4:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	f6ff ac6b 	blt.w	aea4 <ull_conn_rx+0x1a4>
    b5ce:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b5d2:	2b09      	cmp	r3, #9
    b5d4:	f47f ac66 	bne.w	aea4 <ull_conn_rx+0x1a4>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
    b5d8:	1d31      	adds	r1, r6, #4
    b5da:	4628      	mov	r0, r5
}
    b5dc:	b003      	add	sp, #12
    b5de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
    b5e2:	f7fe bfaf 	b.w	a544 <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
    b5e6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b5ea:	2b02      	cmp	r3, #2
    b5ec:	f47f ac5a 	bne.w	aea4 <ull_conn_rx+0x1a4>
		conn->llcp_enc.pause_rx = 0U;
    b5f0:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		conn->llcp_ack = conn->llcp_req;
    b5f4:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    b5f8:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
		conn->llcp_enc.pause_rx = 0U;
    b5fc:	f023 0303 	bic.w	r3, r3, #3
		conn->procedure_expire = 0U;
    b600:	2000      	movs	r0, #0
		conn->llcp_enc.pause_rx = 0U;
    b602:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
		conn->procedure_expire = 0U;
    b606:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		break;
    b60a:	f7ff bbcb 	b.w	ada4 <ull_conn_rx+0xa4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    b60e:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
    b612:	2c06      	cmp	r4, #6
    b614:	f47f ac46 	bne.w	aea4 <ull_conn_rx+0x1a4>
	if (!conn->llcp_version.tx) {
    b618:	f895 3122 	ldrb.w	r3, [r5, #290]	; 0x122
    b61c:	07df      	lsls	r7, r3, #31
    b61e:	f140 8425 	bpl.w	be6c <ull_conn_rx+0x116c>
	} else if (!conn->llcp_version.rx) {
    b622:	f013 0302 	ands.w	r3, r3, #2
    b626:	f47f ac6b 	bne.w	af00 <ull_conn_rx+0x200>
		conn->llcp_version.ack = conn->llcp_version.req;
    b62a:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
		conn->procedure_expire = 0U;
    b62e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
    b632:	f885 2121 	strb.w	r2, [r5, #289]	; 0x121
	conn->llcp_version.version_number = v->version_number;
    b636:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    b63a:	f885 3123 	strb.w	r3, [r5, #291]	; 0x123
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    b63e:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
    b642:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
	conn->llcp_version.rx = 1U;
    b646:	f895 3122 	ldrb.w	r3, [r5, #290]	; 0x122
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    b64a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    b64e:	f8a5 2124 	strh.w	r2, [r5, #292]	; 0x124
		sys_le16_to_cpu(v->sub_version_number);
    b652:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
    b656:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
	conn->llcp_version.rx = 1U;
    b65a:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
    b65e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
    b662:	f8a5 2126 	strh.w	r2, [r5, #294]	; 0x126
	conn->llcp_version.rx = 1U;
    b666:	f885 3122 	strb.w	r3, [r5, #290]	; 0x122
	return 0;
    b66a:	2000      	movs	r0, #0
    b66c:	f7ff bb9a 	b.w	ada4 <ull_conn_rx+0xa4>
		if (!conn->lll.role ||
    b670:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b674:	2b00      	cmp	r3, #0
    b676:	dbaa      	blt.n	b5ce <ull_conn_rx+0x8ce>
    b678:	e414      	b.n	aea4 <ull_conn_rx+0x1a4>
		if (!conn->lll.role ||
    b67a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b67e:	2b00      	cmp	r3, #0
    b680:	f6bf ac10 	bge.w	aea4 <ull_conn_rx+0x1a4>
    b684:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b688:	2b08      	cmp	r3, #8
    b68a:	f47f ac0b 	bne.w	aea4 <ull_conn_rx+0x1a4>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    b68e:	f8b6 4029 	ldrh.w	r4, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    b692:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    b694:	1ae3      	subs	r3, r4, r3
    b696:	0418      	lsls	r0, r3, #16
    b698:	f100 8527 	bmi.w	c0ea <ull_conn_rx+0x13ea>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    b69c:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    b6a0:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    b6a4:	1a9b      	subs	r3, r3, r2
    b6a6:	f003 0303 	and.w	r3, r3, #3
    b6aa:	2b02      	cmp	r3, #2
    b6ac:	f000 8553 	beq.w	c156 <ull_conn_rx+0x1456>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
    b6b0:	2205      	movs	r2, #5
    b6b2:	f106 0124 	add.w	r1, r6, #36	; 0x24
    b6b6:	f105 00ed 	add.w	r0, r5, #237	; 0xed
    b6ba:	f008 fe2e 	bl	1431a <memcpy>
	conn->llcp.chan_map.initiate = 0U;
    b6be:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
    b6c2:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
    b6c6:	f8a5 40f2 	strh.w	r4, [r5, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
    b6ca:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
    b6cc:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
    b6d0:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b6d2:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
    b6d4:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
    b6d8:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
    b6dc:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	int nack = 0;
    b6e0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b6e2:	7131      	strb	r1, [r6, #4]
		if (err) {
    b6e4:	f7ff bb5e 	b.w	ada4 <ull_conn_rx+0xa4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    b6e8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b6ec:	2b02      	cmp	r3, #2
    b6ee:	f47f abd9 	bne.w	aea4 <ull_conn_rx+0x1a4>
		} else if (conn->llcp_conn_param.ack !=
    b6f2:	f895 2171 	ldrb.w	r2, [r5, #369]	; 0x171
    b6f6:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
    b6fa:	429a      	cmp	r2, r3
    b6fc:	f000 82d3 	beq.w	bca6 <ull_conn_rx+0xfa6>
			conn->llcp_conn_param.disabled = 1U;
    b700:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
    b704:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
    b708:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
    b70c:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
    b70e:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
    b712:	f2c0 837a 	blt.w	be0a <ull_conn_rx+0x110a>
				LL_ASSERT(conn->llcp_cu.req ==
    b716:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
    b71a:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
    b71e:	429a      	cmp	r2, r3
    b720:	d00e      	beq.n	b740 <ull_conn_rx+0xa40>
    b722:	4a71      	ldr	r2, [pc, #452]	; (b8e8 <ull_conn_rx+0xbe8>)
    b724:	4971      	ldr	r1, [pc, #452]	; (b8ec <ull_conn_rx+0xbec>)
    b726:	4872      	ldr	r0, [pc, #456]	; (b8f0 <ull_conn_rx+0xbf0>)
    b728:	f241 63d4 	movw	r3, #5844	; 0x16d4
    b72c:	f008 fae2 	bl	13cf4 <printk>
    b730:	4040      	eors	r0, r0
    b732:	f380 8811 	msr	BASEPRI, r0
    b736:	f04f 0003 	mov.w	r0, #3
    b73a:	df02      	svc	2
    b73c:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
				conn->llcp_conn_param.state =
    b740:	f895 0172 	ldrb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.interval =
    b744:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
    b748:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
				conn->llcp_conn_param.state =
    b74c:	2205      	movs	r2, #5
    b74e:	f362 0002 	bfi	r0, r2, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b752:	f895 1106 	ldrb.w	r1, [r5, #262]	; 0x106
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    b756:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
    b75a:	3b01      	subs	r3, #1
    b75c:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
				conn->llcp_cu.win_size = 1U;
    b760:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b762:	0093      	lsls	r3, r2, #2
				conn->llcp_cu.win_size = 1U;
    b764:	f885 6114 	strb.w	r6, [r5, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b768:	f021 0207 	bic.w	r2, r1, #7
    b76c:	4333      	orrs	r3, r6
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b76e:	6821      	ldr	r1, [r4, #0]
				conn->llcp_cu.latency =
    b770:	f8b5 4178 	ldrh.w	r4, [r5, #376]	; 0x178
				conn->llcp_conn_param.state =
    b774:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b778:	4313      	orrs	r3, r2
    b77a:	f885 3106 	strb.w	r3, [r5, #262]	; 0x106
				conn->llcp_cu.timeout =
    b77e:	f8b5 217a 	ldrh.w	r2, [r5, #378]	; 0x17a
				conn->llcp_cu.latency =
    b782:	f8a5 410a 	strh.w	r4, [r5, #266]	; 0x10a
				conn->llcp_cu.win_offset_us = 0U;
    b786:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b788:	2303      	movs	r3, #3
				conn->llcp_cu.win_offset_us = 0U;
    b78a:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
				conn->llcp_cu.timeout =
    b78e:	f8a5 210c 	strh.w	r2, [r5, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b792:	710b      	strb	r3, [r1, #4]
				break;
    b794:	f7ff bb06 	b.w	ada4 <ull_conn_rx+0xa4>
		if (!conn->lll.role ||
    b798:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b79c:	2b00      	cmp	r3, #0
    b79e:	f6bf ab81 	bge.w	aea4 <ull_conn_rx+0x1a4>
    b7a2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b7a6:	2b17      	cmp	r3, #23
    b7a8:	f47f ab7c 	bne.w	aea4 <ull_conn_rx+0x1a4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    b7ac:	4851      	ldr	r0, [pc, #324]	; (b8f4 <ull_conn_rx+0xbf4>)
    b7ae:	f7f8 ff55 	bl	465c <mem_acquire>
	if (!tx) {
    b7b2:	4607      	mov	r7, r0
    b7b4:	2800      	cmp	r0, #0
    b7b6:	f000 8272 	beq.w	bc9e <ull_conn_rx+0xf9e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b7ba:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    b7bc:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b7be:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    b7c2:	f04f 0804 	mov.w	r8, #4
	lll_trng_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    b7c6:	f100 0408 	add.w	r4, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b7ca:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    b7cc:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    b7ce:	f880 8007 	strb.w	r8, [r0, #7]
	lll_trng_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    b7d2:	210c      	movs	r1, #12
    b7d4:	4620      	mov	r0, r4
    b7d6:	f003 fc33 	bl	f040 <lll_trng_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
    b7da:	4621      	mov	r1, r4
    b7dc:	2208      	movs	r2, #8
    b7de:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    b7e2:	f008 fd9a 	bl	1431a <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
    b7e6:	4642      	mov	r2, r8
    b7e8:	f107 0110 	add.w	r1, r7, #16
    b7ec:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    b7f0:	f008 fd93 	bl	1431a <memcpy>
	    conn->tx_head &&
    b7f4:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
	if (
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	f000 8265 	beq.w	bcc8 <ull_conn_rx+0xfc8>
	    !conn->llcp_enc.pause_tx &&
    b7fe:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	    conn->tx_head &&
    b802:	0791      	lsls	r1, r2, #30
    b804:	f100 8260 	bmi.w	bcc8 <ull_conn_rx+0xfc8>
	    !conn->llcp_phy.pause_tx &&
    b808:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
    b80c:	07d2      	lsls	r2, r2, #31
    b80e:	f100 825b 	bmi.w	bcc8 <ull_conn_rx+0xfc8>
		if (conn->tx_head == conn->tx_data) {
    b812:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
    b816:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    b818:	bf04      	itt	eq
    b81a:	681a      	ldreq	r2, [r3, #0]
    b81c:	f8c5 21bc 	streq.w	r2, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    b820:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
    b824:	2a00      	cmp	r2, #0
    b826:	f000 85a5 	beq.w	c374 <ull_conn_rx+0x1674>
	tx->next = conn->tx_ctrl_last->next;
    b82a:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
    b82e:	681a      	ldr	r2, [r3, #0]
    b830:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    b832:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    b834:	f8c5 71b8 	str.w	r7, [r5, #440]	; 0x1b8
	if (!tx->next) {
    b838:	683b      	ldr	r3, [r7, #0]
    b83a:	2b00      	cmp	r3, #0
    b83c:	f000 84d7 	beq.w	c1ee <ull_conn_rx+0x14ee>
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    b840:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
		conn->llcp_ack -= 2U;
    b844:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    b848:	2102      	movs	r1, #2
		conn->llcp_ack -= 2U;
    b84a:	3b02      	subs	r3, #2
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    b84c:	f361 0201 	bfi	r2, r1, #0, #2
		conn->llcp_type = LLCP_ENCRYPTION;
    b850:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
    b852:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    b856:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
		conn->llcp_type = LLCP_ENCRYPTION;
    b85a:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
		memcpy(&conn->llcp.encryption.skd[0],
    b85e:	2208      	movs	r2, #8
    b860:	f106 012e 	add.w	r1, r6, #46	; 0x2e
    b864:	f105 00ee 	add.w	r0, r5, #238	; 0xee
    b868:	f008 fd57 	bl	1431a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
    b86c:	2204      	movs	r2, #4
    b86e:	f106 0136 	add.w	r1, r6, #54	; 0x36
    b872:	f105 0098 	add.w	r0, r5, #152	; 0x98
    b876:	f008 fd50 	bl	1431a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
    b87a:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
    b87e:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
    b882:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
    b886:	f043 0301 	orr.w	r3, r3, #1
    b88a:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
		nack = enc_rsp_send(conn);
    b88e:	2000      	movs	r0, #0
		break;
    b890:	f7ff ba88 	b.w	ada4 <ull_conn_rx+0xa4>
		if (conn->lll.role ||
    b894:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b898:	2b00      	cmp	r3, #0
    b89a:	f6bf ab51 	bge.w	af40 <ull_conn_rx+0x240>
    b89e:	f7ff bb01 	b.w	aea4 <ull_conn_rx+0x1a4>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
    b8a2:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b8a6:	2b00      	cmp	r3, #0
    b8a8:	f6ff aafc 	blt.w	aea4 <ull_conn_rx+0x1a4>
    b8ac:	f895 10e8 	ldrb.w	r1, [r5, #232]	; 0xe8
    b8b0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    b8b4:	4299      	cmp	r1, r3
    b8b6:	f43f aaf5 	beq.w	aea4 <ull_conn_rx+0x1a4>
    b8ba:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
    b8be:	2b03      	cmp	r3, #3
    b8c0:	f47f aaf0 	bne.w	aea4 <ull_conn_rx+0x1a4>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    b8c4:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
    b8c8:	2901      	cmp	r1, #1
    b8ca:	f47f aaeb 	bne.w	aea4 <ull_conn_rx+0x1a4>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    b8ce:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
    b8d2:	f36f 0201 	bfc	r2, #0, #2
    b8d6:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	int nack = 0;
    b8da:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    b8dc:	7133      	strb	r3, [r6, #4]
		break;
    b8de:	f7ff ba61 	b.w	ada4 <ull_conn_rx+0xa4>
    b8e2:	bf00      	nop
    b8e4:	200015c4 	.word	0x200015c4
    b8e8:	0001570c 	.word	0x0001570c
    b8ec:	0001582c 	.word	0x0001582c
    b8f0:	0001525c 	.word	0x0001525c
    b8f4:	200016d0 	.word	0x200016d0
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    b8f8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b8fc:	2b01      	cmp	r3, #1
    b8fe:	f47f aad1 	bne.w	aea4 <ull_conn_rx+0x1a4>
		if (conn->lll.role) {
    b902:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b906:	2b00      	cmp	r3, #0
    b908:	da06      	bge.n	b918 <ull_conn_rx+0xc18>
			nack = start_enc_rsp_send(conn, NULL);
    b90a:	2100      	movs	r1, #0
    b90c:	4628      	mov	r0, r5
    b90e:	f7fe fd25 	bl	a35c <start_enc_rsp_send>
			if (nack) {
    b912:	2800      	cmp	r0, #0
    b914:	f47f aa46 	bne.w	ada4 <ull_conn_rx+0xa4>
			conn->llcp_enc.pause_rx = 0U;
    b918:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
    b91c:	f023 0303 	bic.w	r3, r3, #3
    b920:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
    b924:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
    b928:	075e      	lsls	r6, r3, #29
    b92a:	f57f abca 	bpl.w	b0c2 <ull_conn_rx+0x3c2>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    b92e:	6822      	ldr	r2, [r4, #0]
			conn->llcp_enc.refresh = 0U;
    b930:	f36f 0382 	bfc	r3, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    b934:	210b      	movs	r1, #11
			conn->llcp_enc.refresh = 0U;
    b936:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    b93a:	7111      	strb	r1, [r2, #4]
		conn->procedure_expire = 0U;
    b93c:	f7ff bbc1 	b.w	b0c2 <ull_conn_rx+0x3c2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    b940:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    b944:	2b01      	cmp	r3, #1
    b946:	f47f aaad 	bne.w	aea4 <ull_conn_rx+0x1a4>
	} else if (!conn->lll.role) {
    b94a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
    b94e:	2b00      	cmp	r3, #0
    b950:	f280 80db 	bge.w	bb0a <ull_conn_rx+0xe0a>
		conn->lll.enc_tx = 0;
    b954:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
    b958:	f36f 1304 	bfc	r3, #4, #1
    b95c:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
    b960:	f7ff bace 	b.w	af00 <ull_conn_rx+0x200>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    b964:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
    b968:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
    b96c:	4283      	cmp	r3, r0
    b96e:	f43f aac7 	beq.w	af00 <ull_conn_rx+0x200>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    b972:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
    b976:	2a23      	cmp	r2, #35	; 0x23
    b978:	d012      	beq.n	b9a0 <ull_conn_rx+0xca0>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    b97a:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    b97e:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
    b982:	f885 01a9 	strb.w	r0, [r5, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    b986:	f3c3 0002 	ubfx	r0, r3, #0, #3
    b98a:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    b98e:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
    b992:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    b994:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    b998:	f885 11ab 	strb.w	r1, [r5, #427]	; 0x1ab
		conn->procedure_expire = 0U;
    b99c:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
    b9a0:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
    b9a4:	0759      	lsls	r1, r3, #29
    b9a6:	f57f aaab 	bpl.w	af00 <ull_conn_rx+0x200>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    b9aa:	230e      	movs	r3, #14
	p->status = rej_ext_ind->error_code;
    b9ac:	f886 2020 	strb.w	r2, [r6, #32]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    b9b0:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
    b9b2:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    b9b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b9ba:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	p->rx = conn->lll.phy_rx;
    b9be:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    b9c2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b9c6:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	int nack = 0;
    b9ca:	2000      	movs	r0, #0
    b9cc:	f7ff b9ea 	b.w	ada4 <ull_conn_rx+0xa4>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    b9d0:	f895 2171 	ldrb.w	r2, [r5, #369]	; 0x171
    b9d4:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
    b9d8:	429a      	cmp	r2, r3
    b9da:	f43f aa91 	beq.w	af00 <ull_conn_rx+0x200>
	if (!lll->role && (rej_ext_ind->error_code ==
    b9de:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
    b9e2:	2a00      	cmp	r2, #0
    b9e4:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
    b9e8:	f2c0 84e8 	blt.w	c3bc <ull_conn_rx+0x16bc>
    b9ec:	2a1a      	cmp	r2, #26
    b9ee:	f000 8518 	beq.w	c422 <ull_conn_rx+0x1722>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    b9f2:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
    b9f6:	f002 0107 	and.w	r1, r2, #7
    b9fa:	2904      	cmp	r1, #4
    b9fc:	f000 84e7 	beq.w	c3ce <ull_conn_rx+0x16ce>
	if (!conn->llcp_conn_param.cmd) {
    ba00:	0713      	lsls	r3, r2, #28
    ba02:	f57f aa7d 	bpl.w	af00 <ull_conn_rx+0x200>
	cu->status = rej_ext_ind->error_code;
    ba06:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    ba0a:	f886 3020 	strb.w	r3, [r6, #32]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ba0e:	220a      	movs	r2, #10
    ba10:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
    ba12:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
    ba14:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
	cu->latency = lll->latency;
    ba18:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	cu->interval = lll->interval;
    ba1a:	8473      	strh	r3, [r6, #34]	; 0x22
	cu->timeout = conn->supervision_reload *
    ba1c:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
    ba20:	237d      	movs	r3, #125	; 0x7d
    ba22:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
    ba26:	84b1      	strh	r1, [r6, #36]	; 0x24
		      lll->interval * 125U / 1000;
    ba28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
    ba2c:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
    ba2e:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
    ba32:	84f3      	strh	r3, [r6, #38]	; 0x26
	if (err) {
    ba34:	f7ff b9b6 	b.w	ada4 <ull_conn_rx+0xa4>
		if ((conn->llcp_ack != conn->llcp_req) &&
    ba38:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    ba3c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    ba40:	4293      	cmp	r3, r2
    ba42:	f43f aa5d 	beq.w	af00 <ull_conn_rx+0x200>
    ba46:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
    ba4a:	2b03      	cmp	r3, #3
    ba4c:	f47f aa58 	bne.w	af00 <ull_conn_rx+0x200>
	conn->llcp_enc.pause_rx = 0U;
    ba50:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
    ba54:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
    ba58:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
    ba5c:	2000      	movs	r0, #0
	conn->llcp_enc.pause_rx = 0U;
    ba5e:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	conn->procedure_expire = 0U;
    ba62:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    ba66:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    ba6a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    ba6e:	230d      	movs	r3, #13
    ba70:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
	if (err) {
    ba74:	f7ff b996 	b.w	ada4 <ull_conn_rx+0xa4>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    ba78:	f895 3198 	ldrb.w	r3, [r5, #408]	; 0x198
    ba7c:	f895 2199 	ldrb.w	r2, [r5, #409]	; 0x199
    ba80:	429a      	cmp	r2, r3
    ba82:	f43f aa3d 	beq.w	af00 <ull_conn_rx+0x200>
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    ba86:	2209      	movs	r2, #9
	conn->procedure_expire = 0U;
    ba88:	2000      	movs	r0, #0
	conn->llcp_length.ack = conn->llcp_length.req;
    ba8a:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
	conn->procedure_expire = 0U;
    ba8e:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    ba92:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    ba96:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    ba9a:	f8b5 405c 	ldrh.w	r4, [r5, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    ba9e:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    baa2:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    baa6:	84b3      	strh	r3, [r6, #36]	; 0x24
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    baa8:	2315      	movs	r3, #21
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    baaa:	8534      	strh	r4, [r6, #40]	; 0x28
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    baac:	84f1      	strh	r1, [r6, #38]	; 0x26
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    baae:	8572      	strh	r2, [r6, #42]	; 0x2a
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bab0:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
	if (err) {
    bab4:	f7ff b976 	b.w	ada4 <ull_conn_rx+0xa4>
	       (conn->lll.role &&
    bab8:	075a      	lsls	r2, r3, #29
    baba:	f57f ad61 	bpl.w	b580 <ull_conn_rx+0x880>
		 (conn->llcp_enc.refresh &&
    babe:	f1b8 0f02 	cmp.w	r8, #2
    bac2:	f43f ad65 	beq.w	b590 <ull_conn_rx+0x890>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    bac6:	f1b8 0f0b 	cmp.w	r8, #11
    baca:	d070      	beq.n	bbae <ull_conn_rx+0xeae>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    bacc:	f1b8 0f03 	cmp.w	r8, #3
    bad0:	f43f ae67 	beq.w	b7a2 <ull_conn_rx+0xaa2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    bad4:	f1b8 0f06 	cmp.w	r8, #6
    bad8:	f47f a948 	bne.w	ad6c <ull_conn_rx+0x6c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    badc:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    bae0:	2b01      	cmp	r3, #1
    bae2:	f43f af12 	beq.w	b90a <ull_conn_rx+0xc0a>
    bae6:	f7ff b9dd 	b.w	aea4 <ull_conn_rx+0x1a4>
		conn->tx_data_last = tx;
    baea:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    baee:	f7ff ba07 	b.w	af00 <ull_conn_rx+0x200>
			tx->next = conn->tx_head;
    baf2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    baf4:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    baf8:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
    bafc:	f7ff b9fd 	b.w	aefa <ull_conn_rx+0x1fa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    bb00:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
    bb04:	2b01      	cmp	r3, #1
    bb06:	f47f a9cd 	bne.w	aea4 <ull_conn_rx+0x1a4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    bb0a:	48d2      	ldr	r0, [pc, #840]	; (be54 <ull_conn_rx+0x1154>)
    bb0c:	f7f8 fda6 	bl	465c <mem_acquire>
		if (!tx) {
    bb10:	4603      	mov	r3, r0
    bb12:	2800      	cmp	r0, #0
    bb14:	f000 80c3 	beq.w	bc9e <ull_conn_rx+0xf9e>
	conn->llcp_enc.pause_rx = 1U;
    bb18:	f895 0152 	ldrb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
    bb1c:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb20:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
    bb22:	f040 0001 	orr.w	r0, r0, #1
    bb26:	f885 0152 	strb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
    bb2a:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bb2e:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
    bb30:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    bb34:	7158      	strb	r0, [r3, #5]
    bb36:	f7ff bbcf 	b.w	b2d8 <ull_conn_rx+0x5d8>
		if (!conn->lll.role) {
    bb3a:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
    bb3e:	2a00      	cmp	r2, #0
    bb40:	f2c0 80cd 	blt.w	bcde <ull_conn_rx+0xfde>
					conn->llcp_conn_param.ack) &&
    bb44:	f895 2171 	ldrb.w	r2, [r5, #369]	; 0x171
    bb48:	9200      	str	r2, [sp, #0]
    bb4a:	4611      	mov	r1, r2
			if ((conn->llcp_conn_param.req !=
    bb4c:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
    bb50:	428a      	cmp	r2, r1
    bb52:	d009      	beq.n	bb68 <ull_conn_rx+0xe68>
			    ((conn->llcp_conn_param.state ==
    bb54:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
    bb58:	f012 0207 	ands.w	r2, r2, #7
    bb5c:	f000 82cd 	beq.w	c0fa <ull_conn_rx+0x13fa>
			      LLCP_CPR_STATE_REQ) ||
    bb60:	3a04      	subs	r2, #4
    bb62:	2a01      	cmp	r2, #1
    bb64:	f240 82c9 	bls.w	c0fa <ull_conn_rx+0x13fa>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    bb68:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    bb6c:	f895 10e9 	ldrb.w	r1, [r5, #233]	; 0xe9
    bb70:	1a52      	subs	r2, r2, r1
    bb72:	f002 0203 	and.w	r2, r2, #3
    bb76:	2a02      	cmp	r2, #2
    bb78:	f000 83e0 	beq.w	c33c <ull_conn_rx+0x163c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    bb7c:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
    bb80:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
    bb84:	4291      	cmp	r1, r2
    bb86:	f000 8346 	beq.w	c216 <ull_conn_rx+0x1516>
				nack = reject_ext_ind_send(conn, *rx,
    bb8a:	1d31      	adds	r1, r6, #4
    bb8c:	4628      	mov	r0, r5
    bb8e:	232a      	movs	r3, #42	; 0x2a
    bb90:	220f      	movs	r2, #15
    bb92:	f7ff bb7b 	b.w	b28c <ull_conn_rx+0x58c>
		if (!conn->tx_ctrl) {
    bb96:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
    bb9a:	2900      	cmp	r1, #0
    bb9c:	f47f abbc 	bne.w	b318 <ull_conn_rx+0x618>
			tx->next = conn->tx_head;
    bba0:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
    bba2:	e9c5 336c 	strd	r3, r3, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    bba6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    bbaa:	f7ff bbbc 	b.w	b326 <ull_conn_rx+0x626>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    bbae:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    bbb2:	2b01      	cmp	r3, #1
    bbb4:	f47f a976 	bne.w	aea4 <ull_conn_rx+0x1a4>
    bbb8:	e6cc      	b.n	b954 <ull_conn_rx+0xc54>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    bbba:	48a6      	ldr	r0, [pc, #664]	; (be54 <ull_conn_rx+0x1154>)
    bbbc:	f7f8 fd4e 	bl	465c <mem_acquire>
		if (!tx) {
    bbc0:	4601      	mov	r1, r0
    bbc2:	2800      	cmp	r0, #0
    bbc4:	d06b      	beq.n	bc9e <ull_conn_rx+0xf9e>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    bbc6:	f895 0198 	ldrb.w	r0, [r5, #408]	; 0x198
    bbca:	f895 2199 	ldrb.w	r2, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
    bbce:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
    bbd2:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
    bbd6:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
    bbda:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    bbde:	9000      	str	r0, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
    bbe0:	4290      	cmp	r0, r2
    bbe2:	f040 84ab 	bne.w	c53c <ull_conn_rx+0x183c>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    bbe6:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    bbe8:	2a1a      	cmp	r2, #26
    bbea:	f240 827c 	bls.w	c0e6 <ull_conn_rx+0x13e6>
			eff_tx_octets = MIN(max_rx_octets,
    bbee:	f8b5 00d6 	ldrh.w	r0, [r5, #214]	; 0xd6
    bbf2:	4282      	cmp	r2, r0
    bbf4:	bf28      	it	cs
    bbf6:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    bbf8:	f8b6 e028 	ldrh.w	lr, [r6, #40]	; 0x28
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
    bbfc:	f8b6 8026 	ldrh.w	r8, [r6, #38]	; 0x26
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
    bc00:	f8b6 c02a 	ldrh.w	ip, [r6, #42]	; 0x2a
			eff_rx_octets = MIN(max_tx_octets,
    bc04:	f1be 0f1b 	cmp.w	lr, #27
    bc08:	bf34      	ite	cc
    bc0a:	469e      	movcc	lr, r3
    bc0c:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    bc10:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
    bc14:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    bc16:	bf34      	ite	cc
    bc18:	4658      	movcc	r0, fp
    bc1a:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
    bc1e:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    bc22:	bf34      	ite	cc
    bc24:	46d4      	movcc	ip, sl
    bc26:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    bc2a:	459e      	cmp	lr, r3
    bc2c:	f000 826b 	beq.w	c106 <ull_conn_rx+0x1406>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    bc30:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
    bc32:	f8a5 e19c 	strh.w	lr, [r5, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    bc36:	3b01      	subs	r3, #1
    bc38:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
    bc3c:	f8a5 219e 	strh.w	r2, [r5, #414]	; 0x19e
				conn->llcp_length.state =
    bc40:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
    bc44:	f8a5 c1a0 	strh.w	ip, [r5, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
    bc48:	f8a5 01a2 	strh.w	r0, [r5, #418]	; 0x1a2
			if (tx) {
    bc4c:	2900      	cmp	r1, #0
    bc4e:	f000 82d2 	beq.w	c1f6 <ull_conn_rx+0x14f6>
				conn->llcp_length.state =
    bc52:	2605      	movs	r6, #5
    bc54:	f366 0302 	bfi	r3, r6, #0, #3
    bc58:	f885 319a 	strb.w	r3, [r5, #410]	; 0x19a
			link->mem = conn->llcp_rx;
    bc5c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bc60:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
    bc62:	6823      	ldr	r3, [r4, #0]
    bc64:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
    bc66:	6823      	ldr	r3, [r4, #0]
    bc68:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			*rx = NULL;
    bc6c:	2300      	movs	r3, #0
    bc6e:	6023      	str	r3, [r4, #0]
	if (tx) {
    bc70:	2900      	cmp	r1, #0
    bc72:	f43f a896 	beq.w	ada2 <ull_conn_rx+0xa2>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc76:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    bc78:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc7a:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bc7e:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    bc80:	2409      	movs	r4, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    bc82:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    bc84:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
    bc88:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    bc8a:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc8e:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    bc90:	714c      	strb	r4, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bc92:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    bc94:	f7fe fbc4 	bl	a420 <ctrl_tx_sec_enqueue>
	return 0;
    bc98:	2000      	movs	r0, #0
}
    bc9a:	f7ff b883 	b.w	ada4 <ull_conn_rx+0xa4>
		return -ENOBUFS;
    bc9e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    bca2:	f7ff b87f 	b.w	ada4 <ull_conn_rx+0xa4>
		} else if (conn->llcp_length.req != conn->llcp_length.ack) {
    bca6:	f895 2198 	ldrb.w	r2, [r5, #408]	; 0x198
    bcaa:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
    bcae:	4293      	cmp	r3, r2
    bcb0:	f000 826d 	beq.w	c18e <ull_conn_rx+0x148e>
			conn->llcp_length.disabled = 1U;
    bcb4:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
    bcb8:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
    bcbc:	f043 0308 	orr.w	r3, r3, #8
    bcc0:	f885 319a 	strb.w	r3, [r5, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
    bcc4:	f7ff b9fd 	b.w	b0c2 <ull_conn_rx+0x3c2>
		if (!conn->tx_ctrl) {
    bcc8:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
    bccc:	2a00      	cmp	r2, #0
    bcce:	f47f adac 	bne.w	b82a <ull_conn_rx+0xb2a>
			tx->next = conn->tx_head;
    bcd2:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    bcd4:	e9c5 776c 	strd	r7, r7, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    bcd8:	f8c5 71b8 	str.w	r7, [r5, #440]	; 0x1b8
    bcdc:	e5ac      	b.n	b838 <ull_conn_rx+0xb38>
			    conn->llcp_conn_param.ack) ||
    bcde:	f895 1171 	ldrb.w	r1, [r5, #369]	; 0x171
		} else if ((conn->llcp_conn_param.req ==
    bce2:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
    bce6:	428b      	cmp	r3, r1
    bce8:	f000 80e6 	beq.w	beb8 <ull_conn_rx+0x11b8>
			    conn->llcp_conn_param.ack) ||
    bcec:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    bcf0:	0798      	lsls	r0, r3, #30
    bcf2:	f000 80e1 	beq.w	beb8 <ull_conn_rx+0x11b8>
			LL_ASSERT(0);
    bcf6:	4a58      	ldr	r2, [pc, #352]	; (be58 <ull_conn_rx+0x1158>)
    bcf8:	4958      	ldr	r1, [pc, #352]	; (be5c <ull_conn_rx+0x115c>)
    bcfa:	4859      	ldr	r0, [pc, #356]	; (be60 <ull_conn_rx+0x1160>)
    bcfc:	f241 6354 	movw	r3, #5716	; 0x1654
    bd00:	f007 fff8 	bl	13cf4 <printk>
    bd04:	4040      	eors	r0, r0
    bd06:	f380 8811 	msr	BASEPRI, r0
    bd0a:	f04f 0003 	mov.w	r0, #3
    bd0e:	df02      	svc	2
	int nack = 0;
    bd10:	2000      	movs	r0, #0
    bd12:	f7ff b847 	b.w	ada4 <ull_conn_rx+0xa4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    bd16:	484f      	ldr	r0, [pc, #316]	; (be54 <ull_conn_rx+0x1154>)
    bd18:	f7f8 fca0 	bl	465c <mem_acquire>
	if (!tx) {
    bd1c:	4602      	mov	r2, r0
    bd1e:	2800      	cmp	r0, #0
    bd20:	d0bd      	beq.n	bc9e <ull_conn_rx+0xf9e>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    bd22:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
    bd26:	f895 11a9 	ldrb.w	r1, [r5, #425]	; 0x1a9
    bd2a:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    bd2e:	2402      	movs	r4, #2
    bd30:	f364 0301 	bfi	r3, r4, #0, #2
	if (conn->llcp_phy.ack ==
    bd34:	4288      	cmp	r0, r1
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    bd36:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
    bd3a:	d118      	bne.n	bd6e <ull_conn_rx+0x106e>
		conn->llcp_phy.tx =
    bd3c:	f8b5 31aa 	ldrh.w	r3, [r5, #426]	; 0x1aa
			conn->phy_pref_rx;
    bd40:	f895 41ac 	ldrb.w	r4, [r5, #428]	; 0x1ac
		conn->llcp_phy.tx =
    bd44:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
    bd48:	f004 0307 	and.w	r3, r4, #7
    bd4c:	009b      	lsls	r3, r3, #2
    bd4e:	f3c4 1402 	ubfx	r4, r4, #4, #3
    bd52:	f021 0104 	bic.w	r1, r1, #4
    bd56:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
    bd5a:	430b      	orrs	r3, r1
		conn->llcp_phy.ack--;
    bd5c:	3801      	subs	r0, #1
		conn->procedure_expire =
    bd5e:	f8b5 10ca 	ldrh.w	r1, [r5, #202]	; 0xca
		conn->llcp_phy.ack--;
    bd62:	f885 01a9 	strb.w	r0, [r5, #425]	; 0x1a9
		conn->llcp_phy.tx =
    bd66:	f8a5 31aa 	strh.w	r3, [r5, #426]	; 0x1aa
		conn->procedure_expire =
    bd6a:	f8a5 10cc 	strh.w	r1, [r5, #204]	; 0xcc
	conn->llcp_phy.rx &= p->tx_phys;
    bd6e:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
    bd72:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
	conn->llcp_phy.rx &= p->tx_phys;
    bd76:	f896 0024 	ldrb.w	r0, [r6, #36]	; 0x24
	conn->llcp_phy.tx &= p->rx_phys;
    bd7a:	f3c1 0482 	ubfx	r4, r1, #2, #3
    bd7e:	4023      	ands	r3, r4
	conn->llcp_phy.rx &= p->tx_phys;
    bd80:	ea00 1051 	and.w	r0, r0, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
    bd84:	009b      	lsls	r3, r3, #2
    bd86:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    bd8a:	f001 0103 	and.w	r1, r1, #3
    bd8e:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    bd90:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
    bd92:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    bd96:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    bd98:	f895 01ac 	ldrb.w	r0, [r5, #428]	; 0x1ac
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd9c:	7913      	ldrb	r3, [r2, #4]
	    conn->tx_head &&
    bd9e:	f8d5 41b0 	ldr.w	r4, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    bda2:	4601      	mov	r1, r0
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    bda4:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    bda8:	f3c1 1102 	ubfx	r1, r1, #4, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdac:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    bdb0:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    bdb2:	2017      	movs	r0, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    bdb4:	7251      	strb	r1, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdb6:	7113      	strb	r3, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    bdb8:	71d0      	strb	r0, [r2, #7]
	if (
    bdba:	2c00      	cmp	r4, #0
    bdbc:	f000 817d 	beq.w	c0ba <ull_conn_rx+0x13ba>
	    !conn->llcp_enc.pause_tx &&
    bdc0:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
    bdc4:	0798      	lsls	r0, r3, #30
    bdc6:	f100 8178 	bmi.w	c0ba <ull_conn_rx+0x13ba>
	    !conn->llcp_phy.pause_tx &&
    bdca:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
    bdce:	07d9      	lsls	r1, r3, #31
    bdd0:	f100 8173 	bmi.w	c0ba <ull_conn_rx+0x13ba>
		if (conn->tx_head == conn->tx_data) {
    bdd4:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
    bdd8:	429c      	cmp	r4, r3
			conn->tx_data = conn->tx_data->next;
    bdda:	bf04      	itt	eq
    bddc:	6823      	ldreq	r3, [r4, #0]
    bdde:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    bde2:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
    bde6:	2b00      	cmp	r3, #0
    bde8:	f000 83a2 	beq.w	c530 <ull_conn_rx+0x1830>
	tx->next = conn->tx_ctrl_last->next;
    bdec:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
    bdf0:	6819      	ldr	r1, [r3, #0]
    bdf2:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    bdf4:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    bdf6:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
	if (!tx->next) {
    bdfa:	6813      	ldr	r3, [r2, #0]
    bdfc:	2b00      	cmp	r3, #0
    bdfe:	f47f a87f 	bne.w	af00 <ull_conn_rx+0x200>
		conn->tx_data_last = tx;
    be02:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    be06:	f7ff b87b 	b.w	af00 <ull_conn_rx+0x200>
			LL_ASSERT(conn_upd_curr == conn);
    be0a:	4f16      	ldr	r7, [pc, #88]	; (be64 <ull_conn_rx+0x1164>)
    be0c:	683a      	ldr	r2, [r7, #0]
    be0e:	4295      	cmp	r5, r2
    be10:	d00e      	beq.n	be30 <ull_conn_rx+0x1130>
    be12:	4a11      	ldr	r2, [pc, #68]	; (be58 <ull_conn_rx+0x1158>)
    be14:	4914      	ldr	r1, [pc, #80]	; (be68 <ull_conn_rx+0x1168>)
    be16:	4812      	ldr	r0, [pc, #72]	; (be60 <ull_conn_rx+0x1160>)
    be18:	f241 63ec 	movw	r3, #5868	; 0x16ec
    be1c:	f007 ff6a 	bl	13cf4 <printk>
    be20:	4040      	eors	r0, r0
    be22:	f380 8811 	msr	BASEPRI, r0
    be26:	f04f 0003 	mov.w	r0, #3
    be2a:	df02      	svc	2
    be2c:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
    be30:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    be34:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
			if (!conn->llcp_conn_param.cmd) {
    be38:	f012 0208 	ands.w	r2, r2, #8
			conn_upd_curr = NULL;
    be3c:	f04f 0300 	mov.w	r3, #0
    be40:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
    be42:	f040 818c 	bne.w	c15e <ull_conn_rx+0x145e>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    be46:	6823      	ldr	r3, [r4, #0]
    be48:	2103      	movs	r1, #3
	int nack = 0;
    be4a:	4610      	mov	r0, r2
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    be4c:	7119      	strb	r1, [r3, #4]
				break;
    be4e:	f7fe bfa9 	b.w	ada4 <ull_conn_rx+0xa4>
    be52:	bf00      	nop
    be54:	200016d0 	.word	0x200016d0
    be58:	0001570c 	.word	0x0001570c
    be5c:	000152dc 	.word	0x000152dc
    be60:	0001525c 	.word	0x0001525c
    be64:	200015c4 	.word	0x200015c4
    be68:	00015854 	.word	0x00015854
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    be6c:	48e7      	ldr	r0, [pc, #924]	; (c20c <ull_conn_rx+0x150c>)
    be6e:	f7f8 fbf5 	bl	465c <mem_acquire>
		if (!tx) {
    be72:	4601      	mov	r1, r0
    be74:	2800      	cmp	r0, #0
    be76:	f43f af12 	beq.w	bc9e <ull_conn_rx+0xf9e>
		conn->llcp_version.tx = 1U;
    be7a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    be7e:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
    be80:	f042 0201 	orr.w	r2, r2, #1
    be84:	f885 2122 	strb.w	r2, [r5, #290]	; 0x122
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    be88:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    be8c:	220c      	movs	r2, #12
		pdu_tx->len =
    be8e:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    be90:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
    be92:	240b      	movs	r4, #11
		v->sub_version_number =
    be94:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    be98:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    be9c:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    be9e:	2205      	movs	r2, #5
    bea0:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
    bea2:	72cb      	strb	r3, [r1, #11]
    bea4:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
    bea6:	720c      	strb	r4, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    bea8:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
    beaa:	4628      	mov	r0, r5
    beac:	f7fe fab8 	bl	a420 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    beb0:	2303      	movs	r3, #3
    beb2:	7133      	strb	r3, [r6, #4]
    beb4:	f7ff bbbf 	b.w	b636 <ull_conn_rx+0x936>
			u16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    beb8:	f8b6 a024 	ldrh.w	sl, [r6, #36]	; 0x24
    bebc:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < 6) ||
    bec0:	2b05      	cmp	r3, #5
    bec2:	d97f      	bls.n	bfc4 <ull_conn_rx+0x12c4>
			u16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    bec4:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
    bec6:	f8ad 2000 	strh.w	r2, [sp]
    beca:	b292      	uxth	r2, r2
			if ((interval_min < 6) ||
    becc:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
    bed0:	d878      	bhi.n	bfc4 <ull_conn_rx+0x12c4>
			    (interval_max > 3200) ||
    bed2:	4293      	cmp	r3, r2
    bed4:	d876      	bhi.n	bfc4 <ull_conn_rx+0x12c4>
			u16_t latency = sys_le16_to_cpu(cpr->latency);
    bed6:	f8b6 8028 	ldrh.w	r8, [r6, #40]	; 0x28
    beda:	fa1f f088 	uxth.w	r0, r8
			    (interval_min > interval_max) ||
    bede:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    bee2:	d26f      	bcs.n	bfc4 <ull_conn_rx+0x12c4>
			u16_t timeout = sys_le16_to_cpu(cpr->timeout);
    bee4:	f8b6 e02a 	ldrh.w	lr, [r6, #42]	; 0x2a
    bee8:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
    beec:	f1a3 0c0a 	sub.w	ip, r3, #10
    bef0:	fa1f fc8c 	uxth.w	ip, ip
    bef4:	f640 4b76 	movw	fp, #3190	; 0xc76
    bef8:	45dc      	cmp	ip, fp
    befa:	d863      	bhi.n	bfc4 <ull_conn_rx+0x12c4>
			     ((latency + 1) * interval_max)) ||
    befc:	fb00 2c02 	mla	ip, r0, r2, r2
			    (timeout < 10) || (timeout > 3200) ||
    bf00:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
    bf04:	d25e      	bcs.n	bfc4 <ull_conn_rx+0x12c4>
			     ((latency + 1) * interval_max)) ||
    bf06:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    bf0a:	455a      	cmp	r2, fp
    bf0c:	d35a      	bcc.n	bfc4 <ull_conn_rx+0x12c4>
			conn->llcp_conn_param.interval_min = interval_min;
    bf0e:	f8a5 a174 	strh.w	sl, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
    bf12:	f8bd a000 	ldrh.w	sl, [sp]
			conn->llcp_conn_param.timeout =	timeout;
    bf16:	f8a5 e17a 	strh.w	lr, [r5, #378]	; 0x17a
			conn->llcp_conn_param.interval_max = interval_max;
    bf1a:	f8a5 a176 	strh.w	sl, [r5, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
    bf1e:	f8a5 8178 	strh.w	r8, [r5, #376]	; 0x178
			conn->llcp_conn_param.preferred_periodicity =
    bf22:	f885 b17c 	strb.w	fp, [r5, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    bf26:	f896 802e 	ldrb.w	r8, [r6, #46]	; 0x2e
    bf2a:	f896 c02d 	ldrb.w	ip, [r6, #45]	; 0x2d
			     lll->interval) ||
    bf2e:	f8b5 e02e 	ldrh.w	lr, [r5, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    bf32:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    bf36:	f8a5 c17e 	strh.w	ip, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
    bf3a:	f896 8030 	ldrb.w	r8, [r6, #48]	; 0x30
    bf3e:	f896 c02f 	ldrb.w	ip, [r6, #47]	; 0x2f
    bf42:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset0 =
    bf46:	f8a5 c180 	strh.w	ip, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
    bf4a:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
    bf4e:	f896 c031 	ldrb.w	ip, [r6, #49]	; 0x31
    bf52:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset1 =
    bf56:	f8a5 c182 	strh.w	ip, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
    bf5a:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
    bf5e:	f896 c033 	ldrb.w	ip, [r6, #51]	; 0x33
    bf62:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset2 =
    bf66:	f8a5 c184 	strh.w	ip, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
    bf6a:	f896 8036 	ldrb.w	r8, [r6, #54]	; 0x36
    bf6e:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
    bf72:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset3 =
    bf76:	f8a5 c186 	strh.w	ip, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
    bf7a:	f896 c037 	ldrb.w	ip, [r6, #55]	; 0x37
    bf7e:	f896 8038 	ldrb.w	r8, [r6, #56]	; 0x38
    bf82:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset4 =
    bf86:	f8a5 c188 	strh.w	ip, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
    bf8a:	f896 c039 	ldrb.w	ip, [r6, #57]	; 0x39
    bf8e:	f896 603a 	ldrb.w	r6, [r6, #58]	; 0x3a
			if ((conn->llcp_conn_param.interval_max !=
    bf92:	4572      	cmp	r2, lr
				sys_le16_to_cpu(cpr->offset5);
    bf94:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
			conn->llcp_conn_param.offset5 =
    bf98:	f8a5 618a 	strh.w	r6, [r5, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
    bf9c:	f000 8280 	beq.w	c4a0 <ull_conn_rx+0x17a0>
				conn->llcp_conn_param.state =
    bfa0:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    bfa4:	2203      	movs	r2, #3
    bfa6:	f362 0302 	bfi	r3, r2, #0, #3
    bfaa:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack--;
    bfae:	3901      	subs	r1, #1
    bfb0:	f885 1171 	strb.w	r1, [r5, #369]	; 0x171
			if (!conn_upd_curr) {
    bfb4:	f1b9 0f00 	cmp.w	r9, #0
    bfb8:	f47e aef3 	bne.w	ada2 <ull_conn_rx+0xa2>
				conn_upd_curr = conn;
    bfbc:	603d      	str	r5, [r7, #0]
	int nack = 0;
    bfbe:	4648      	mov	r0, r9
    bfc0:	f7fe bef0 	b.w	ada4 <ull_conn_rx+0xa4>
				nack = reject_ext_ind_send(conn, *rx,
    bfc4:	1d31      	adds	r1, r6, #4
    bfc6:	4628      	mov	r0, r5
    bfc8:	231e      	movs	r3, #30
    bfca:	220f      	movs	r2, #15
    bfcc:	f7ff b95e 	b.w	b28c <ull_conn_rx+0x58c>
	instant = sys_le16_to_cpu(ind->instant);
    bfd0:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    bfd2:	8eea      	ldrh	r2, [r5, #54]	; 0x36
    bfd4:	1a82      	subs	r2, r0, r2
    bfd6:	0412      	lsls	r2, r2, #16
    bfd8:	f100 8087 	bmi.w	c0ea <ull_conn_rx+0x13ea>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    bfdc:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    bfe0:	f895 c0e9 	ldrb.w	ip, [r5, #233]	; 0xe9
    bfe4:	eba2 020c 	sub.w	r2, r2, ip
    bfe8:	f002 0203 	and.w	r2, r2, #3
    bfec:	2a02      	cmp	r2, #2
    bfee:	f000 80b2 	beq.w	c156 <ull_conn_rx+0x1456>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    bff2:	f895 c1a8 	ldrb.w	ip, [r5, #424]	; 0x1a8
    bff6:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
    bffa:	4562      	cmp	r2, ip
    bffc:	d019      	beq.n	c032 <ull_conn_rx+0x1332>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    bffe:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    c002:	f002 0203 	and.w	r2, r2, #3
    c006:	2a02      	cmp	r2, #2
    c008:	d113      	bne.n	c032 <ull_conn_rx+0x1332>
		conn->llcp_phy.pause_tx = 0U;
    c00a:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c00e:	f895 60ec 	ldrb.w	r6, [r5, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c012:	f885 c1a9 	strb.w	ip, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
    c016:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c01a:	f3c2 0c80 	ubfx	ip, r2, #2, #1
    c01e:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
    c022:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
    c026:	f885 21ab 	strb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    c02a:	f885 60ec 	strb.w	r6, [r5, #236]	; 0xec
		conn->procedure_expire = 0U;
    c02e:	f8a5 c0cc 	strh.w	ip, [r5, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
    c032:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
    c036:	f8a5 00ee 	strh.w	r0, [r5, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
    c03a:	009b      	lsls	r3, r3, #2
    c03c:	f003 031c 	and.w	r3, r3, #28
    c040:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    c044:	f002 0202 	and.w	r2, r2, #2
    c048:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
    c04a:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
    c04e:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	link->mem = conn->llcp_rx;
    c052:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
    c054:	6823      	ldr	r3, [r4, #0]
    c056:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    c058:	6823      	ldr	r3, [r4, #0]
    c05a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
    c05e:	2300      	movs	r3, #0
    c060:	6023      	str	r3, [r4, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
    c062:	f7fc ff09 	bl	8e78 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
    c066:	4604      	mov	r4, r0
    c068:	2800      	cmp	r0, #0
    c06a:	f000 8199 	beq.w	c3a0 <ull_conn_rx+0x16a0>
	rx_dle->hdr.link->mem = conn->llcp_rx;
    c06e:	6823      	ldr	r3, [r4, #0]
    c070:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
    c074:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
    c076:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
    c07a:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
	conn->llcp_rx = rx_dle;
    c07e:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
	conn->llcp_ack -= 2U;
    c082:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
    c084:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
    c086:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
    c08a:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
    c08e:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
    c092:	f43e ae86 	beq.w	ada2 <ull_conn_rx+0xa2>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    c096:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
    c09a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c09e:	f363 1206 	bfi	r2, r3, #4, #3
    c0a2:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	int nack = 0;
    c0a6:	2000      	movs	r0, #0
    c0a8:	f7fe be7c 	b.w	ada4 <ull_conn_rx+0xa4>
				      0x03) == 0x02) &&
    c0ac:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
    c0b0:	2b03      	cmp	r3, #3
    c0b2:	f47f a8e7 	bne.w	b284 <ull_conn_rx+0x584>
    c0b6:	f7ff b8de 	b.w	b276 <ull_conn_rx+0x576>
		if (!conn->tx_ctrl) {
    c0ba:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
    c0be:	2b00      	cmp	r3, #0
    c0c0:	f47f ae94 	bne.w	bdec <ull_conn_rx+0x10ec>
			tx->next = conn->tx_head;
    c0c4:	6014      	str	r4, [r2, #0]
				conn->tx_ctrl = tx;
    c0c6:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    c0ca:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
    c0ce:	e694      	b.n	bdfa <ull_conn_rx+0x10fa>
				nack = reject_ext_ind_send(conn, *rx,
    c0d0:	1d31      	adds	r1, r6, #4
    c0d2:	4628      	mov	r0, r5
    c0d4:	231e      	movs	r3, #30
    c0d6:	2210      	movs	r2, #16
    c0d8:	f7ff b8d8 	b.w	b28c <ull_conn_rx+0x58c>
				nack = reject_ext_ind_send(conn, *rx,
    c0dc:	1d31      	adds	r1, r6, #4
    c0de:	4628      	mov	r0, r5
    c0e0:	2323      	movs	r3, #35	; 0x23
    c0e2:	f7ff b8d2 	b.w	b28a <ull_conn_rx+0x58a>
    c0e6:	464a      	mov	r2, r9
    c0e8:	e586      	b.n	bbf8 <ull_conn_rx+0xef8>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c0ea:	2303      	movs	r3, #3
    c0ec:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
    c0ee:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
    c0f0:	f885 312b 	strb.w	r3, [r5, #299]	; 0x12b
	int nack = 0;
    c0f4:	2000      	movs	r0, #0
    c0f6:	f7fe be55 	b.w	ada4 <ull_conn_rx+0xa4>
				nack = reject_ext_ind_send(conn, *rx,
    c0fa:	1d31      	adds	r1, r6, #4
    c0fc:	4628      	mov	r0, r5
    c0fe:	2323      	movs	r3, #35	; 0x23
    c100:	220f      	movs	r2, #15
    c102:	f7ff b8c3 	b.w	b28c <ull_conn_rx+0x58c>
			conn->llcp_length.ack = conn->llcp_length.req;
    c106:	9b00      	ldr	r3, [sp, #0]
    c108:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
			conn->procedure_expire = 0U;
    c10c:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    c10e:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
    c110:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    c114:	f000 811d 	beq.w	c352 <ull_conn_rx+0x1652>
			conn->lll.max_rx_time = eff_rx_time;
    c118:	f8a5 c062 	strh.w	ip, [r5, #98]	; 0x62
			if (tx) {
    c11c:	2900      	cmp	r1, #0
    c11e:	f000 8113 	beq.w	c348 <ull_conn_rx+0x1648>
				conn->llcp_length.state =
    c122:	f895 419a 	ldrb.w	r4, [r5, #410]	; 0x19a
					(conn->llcp_length.req - 1);
    c126:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
    c128:	f8a5 e19c 	strh.w	lr, [r5, #412]	; 0x19c
				conn->llcp_length.state =
    c12c:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
    c12e:	3b01      	subs	r3, #1
				conn->llcp_length.state =
    c130:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
    c134:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
    c138:	f8a5 219e 	strh.w	r2, [r5, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
    c13c:	f8a5 c1a0 	strh.w	ip, [r5, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
    c140:	f8a5 01a2 	strh.w	r0, [r5, #418]	; 0x1a2
				conn->llcp_length.state =
    c144:	f885 419a 	strb.w	r4, [r5, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    c148:	f8a6 e024 	strh.w	lr, [r6, #36]	; 0x24
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    c14c:	8532      	strh	r2, [r6, #40]	; 0x28
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    c14e:	f8a6 c026 	strh.w	ip, [r6, #38]	; 0x26
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    c152:	8570      	strh	r0, [r6, #42]	; 0x2a
    c154:	e58c      	b.n	bc70 <ull_conn_rx+0xf70>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c156:	2303      	movs	r3, #3
    c158:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    c15a:	232a      	movs	r3, #42	; 0x2a
    c15c:	e7c8      	b.n	c0f0 <ull_conn_rx+0x13f0>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c15e:	6822      	ldr	r2, [r4, #0]
    c160:	210a      	movs	r1, #10
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    c162:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c164:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    c166:	f886 3020 	strb.w	r3, [r6, #32]
			cu->interval = lll->interval;
    c16a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
    c16c:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
			cu->latency = lll->latency;
    c170:	8e29      	ldrh	r1, [r5, #48]	; 0x30
			cu->interval = lll->interval;
    c172:	8473      	strh	r3, [r6, #34]	; 0x22
			cu->timeout = conn->supervision_reload *
    c174:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
    c178:	237d      	movs	r3, #125	; 0x7d
    c17a:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
    c17e:	84b1      	strh	r1, [r6, #36]	; 0x24
				      lll->interval * 125U / 1000;
    c180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c184:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    c188:	84f3      	strh	r3, [r6, #38]	; 0x26
    c18a:	f7fe bf9a 	b.w	b0c2 <ull_conn_rx+0x3c2>
		} else if (conn->llcp_phy.req !=
    c18e:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
    c192:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
    c196:	428b      	cmp	r3, r1
    c198:	f000 813b 	beq.w	c412 <ull_conn_rx+0x1712>
			conn->llcp_phy.pause_tx = 0U;
    c19c:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
    c1a0:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
    c1a4:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
    c1a8:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
    c1ac:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
    c1ae:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
    c1b2:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
    c1b6:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
    c1b8:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
    c1bc:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
    c1c0:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
    c1c4:	f140 8120 	bpl.w	c408 <ull_conn_rx+0x1708>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c1c8:	6821      	ldr	r1, [r4, #0]
				p->status = 0U;
    c1ca:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c1cc:	200e      	movs	r0, #14
    c1ce:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
    c1d0:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
				p->status = 0U;
    c1d4:	f886 3020 	strb.w	r3, [r6, #32]
				p->rx = lll->phy_rx;
    c1d8:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    c1dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c1e0:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    c1e4:	f7fe bf6d 	b.w	b0c2 <ull_conn_rx+0x3c2>
		conn_upd_curr = conn;
    c1e8:	601d      	str	r5, [r3, #0]
    c1ea:	f7fe bf1f 	b.w	b02c <ull_conn_rx+0x32c>
		conn->tx_data_last = tx;
    c1ee:	f8c5 71c0 	str.w	r7, [r5, #448]	; 0x1c0
		if (nack) {
    c1f2:	f7ff bb25 	b.w	b840 <ull_conn_rx+0xb40>
				conn->llcp_length.state =
    c1f6:	2604      	movs	r6, #4
    c1f8:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
    c1fc:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
    c200:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
				conn->llcp_length.state =
    c204:	f885 319a 	strb.w	r3, [r5, #410]	; 0x19a
    c208:	e528      	b.n	bc5c <ull_conn_rx+0xf5c>
    c20a:	bf00      	nop
    c20c:	200016d0 	.word	0x200016d0
	struct node_tx *tx = NULL;
    c210:	2100      	movs	r1, #0
    c212:	f7fe bed4 	b.w	afbe <ull_conn_rx+0x2be>
				u16_t interval_min =
    c216:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
    c218:	f8ad 2006 	strh.w	r2, [sp, #6]
    c21c:	b292      	uxth	r2, r2
				if ((interval_min < 6) ||
    c21e:	2a05      	cmp	r2, #5
    c220:	f67f aed0 	bls.w	bfc4 <ull_conn_rx+0x12c4>
				u16_t interval_max =
    c224:	f8b6 8026 	ldrh.w	r8, [r6, #38]	; 0x26
    c228:	fa1f f188 	uxth.w	r1, r8
				if ((interval_min < 6) ||
    c22c:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
    c230:	f63f aec8 	bhi.w	bfc4 <ull_conn_rx+0x12c4>
				    (interval_max > 3200) ||
    c234:	428a      	cmp	r2, r1
    c236:	f63f aec5 	bhi.w	bfc4 <ull_conn_rx+0x12c4>
				u16_t latency =
    c23a:	f8b6 e028 	ldrh.w	lr, [r6, #40]	; 0x28
    c23e:	fa1f f08e 	uxth.w	r0, lr
				    (interval_min > interval_max) ||
    c242:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    c246:	f4bf aebd 	bcs.w	bfc4 <ull_conn_rx+0x12c4>
				u16_t timeout =
    c24a:	f8b6 b02a 	ldrh.w	fp, [r6, #42]	; 0x2a
    c24e:	fa1f f28b 	uxth.w	r2, fp
				    (latency > 499) ||
    c252:	f1a2 0c0a 	sub.w	ip, r2, #10
    c256:	fa1f fc8c 	uxth.w	ip, ip
    c25a:	f640 4a76 	movw	sl, #3190	; 0xc76
    c25e:	45d4      	cmp	ip, sl
    c260:	f63f aeb0 	bhi.w	bfc4 <ull_conn_rx+0x12c4>
				     ((latency + 1) * interval_max)) ||
    c264:	fb00 1c01 	mla	ip, r0, r1, r1
				    (timeout > 3200) ||
    c268:	ebbc 0f82 	cmp.w	ip, r2, lsl #2
    c26c:	f4bf aeaa 	bcs.w	bfc4 <ull_conn_rx+0x12c4>
				     ((latency + 1) * interval_max)) ||
    c270:	f896 a02c 	ldrb.w	sl, [r6, #44]	; 0x2c
    c274:	4551      	cmp	r1, sl
					cpr->preferred_periodicity;
    c276:	46d4      	mov	ip, sl
				     ((latency + 1) * interval_max)) ||
    c278:	f4ff aea4 	bcc.w	bfc4 <ull_conn_rx+0x12c4>
				conn->llcp_conn_param.interval_min =
    c27c:	f8bd a006 	ldrh.w	sl, [sp, #6]
				conn->llcp_conn_param.latency =	latency;
    c280:	f8a5 e178 	strh.w	lr, [r5, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
    c284:	f8a5 a174 	strh.w	sl, [r5, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
    c288:	f8a5 8176 	strh.w	r8, [r5, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
    c28c:	f8a5 b17a 	strh.w	fp, [r5, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
    c290:	f885 c17c 	strb.w	ip, [r5, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    c294:	f896 802e 	ldrb.w	r8, [r6, #46]	; 0x2e
    c298:	f896 c02d 	ldrb.w	ip, [r6, #45]	; 0x2d
				     lll->interval) ||
    c29c:	f8b5 e02e 	ldrh.w	lr, [r5, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    c2a0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    c2a4:	f8a5 c17e 	strh.w	ip, [r5, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
    c2a8:	f896 8030 	ldrb.w	r8, [r6, #48]	; 0x30
    c2ac:	f896 c02f 	ldrb.w	ip, [r6, #47]	; 0x2f
    c2b0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset0 =
    c2b4:	f8a5 c180 	strh.w	ip, [r5, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
    c2b8:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
    c2bc:	f896 c031 	ldrb.w	ip, [r6, #49]	; 0x31
    c2c0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset1 =
    c2c4:	f8a5 c182 	strh.w	ip, [r5, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
    c2c8:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
    c2cc:	f896 c033 	ldrb.w	ip, [r6, #51]	; 0x33
    c2d0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset2 =
    c2d4:	f8a5 c184 	strh.w	ip, [r5, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
    c2d8:	f896 8036 	ldrb.w	r8, [r6, #54]	; 0x36
    c2dc:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
    c2e0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset3 =
    c2e4:	f8a5 c186 	strh.w	ip, [r5, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
    c2e8:	f896 c037 	ldrb.w	ip, [r6, #55]	; 0x37
    c2ec:	f896 8038 	ldrb.w	r8, [r6, #56]	; 0x38
    c2f0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset4 =
    c2f4:	f8a5 c188 	strh.w	ip, [r5, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
    c2f8:	f896 c039 	ldrb.w	ip, [r6, #57]	; 0x39
    c2fc:	f896 603a 	ldrb.w	r6, [r6, #58]	; 0x3a
				if ((conn->llcp_conn_param.interval_max !=
    c300:	4571      	cmp	r1, lr
					sys_le16_to_cpu(cpr->offset5);
    c302:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
				conn->llcp_conn_param.offset5 =
    c306:	f8a5 618a 	strh.w	r6, [r5, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
    c30a:	f000 80f0 	beq.w	c4ee <ull_conn_rx+0x17ee>
					if (conn->llcp_enc.pause_tx) {
    c30e:	f013 0f02 	tst.w	r3, #2
						conn->llcp_conn_param.state =
    c312:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
    c316:	f000 80e4 	beq.w	c4e2 <ull_conn_rx+0x17e2>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c31a:	6822      	ldr	r2, [r4, #0]
						conn->llcp_conn_param.state =
    c31c:	2102      	movs	r1, #2
    c31e:	f361 0302 	bfi	r3, r1, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c322:	2103      	movs	r1, #3
						conn->llcp_conn_param.state =
    c324:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c328:	7111      	strb	r1, [r2, #4]
				conn->llcp_conn_param.ack--;
    c32a:	9b00      	ldr	r3, [sp, #0]
    c32c:	3b01      	subs	r3, #1
    c32e:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
				if (!conn_upd_curr) {
    c332:	f1b9 0f00 	cmp.w	r9, #0
    c336:	f47e ad34 	bne.w	ada2 <ull_conn_rx+0xa2>
    c33a:	e63f      	b.n	bfbc <ull_conn_rx+0x12bc>
				      0x03) == 0x02) &&
    c33c:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
    c340:	2a03      	cmp	r2, #3
    c342:	f47f ac22 	bne.w	bb8a <ull_conn_rx+0xe8a>
    c346:	e419      	b.n	bb7c <ull_conn_rx+0xe7c>
				conn->lll.max_tx_octets = eff_tx_octets;
    c348:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
    c34c:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
    c350:	e6fa      	b.n	c148 <ull_conn_rx+0x1448>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    c352:	4558      	cmp	r0, fp
    c354:	f47f aee0 	bne.w	c118 <ull_conn_rx+0x1418>
			    eff_rx_time == conn->lll.max_rx_time &&
    c358:	45d4      	cmp	ip, sl
    c35a:	f47f aedd 	bne.w	c118 <ull_conn_rx+0x1418>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c35e:	6823      	ldr	r3, [r4, #0]
    c360:	2403      	movs	r4, #3
    c362:	711c      	strb	r4, [r3, #4]
				goto send_length_resp;
    c364:	e484      	b.n	bc70 <ull_conn_rx+0xf70>
			tx->next = conn->tx_head->next;
    c366:	6811      	ldr	r1, [r2, #0]
    c368:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
    c36a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
    c36c:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    c370:	f7fe bfd9 	b.w	b326 <ull_conn_rx+0x626>
			tx->next = conn->tx_head->next;
    c374:	681a      	ldr	r2, [r3, #0]
    c376:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    c378:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    c37a:	e9c5 776d 	strd	r7, r7, [r5, #436]	; 0x1b4
    c37e:	f7ff ba5b 	b.w	b838 <ull_conn_rx+0xb38>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c382:	6823      	ldr	r3, [r4, #0]
    c384:	210e      	movs	r1, #14
    c386:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
    c388:	f886 0020 	strb.w	r0, [r6, #32]
		p->tx = conn->lll.phy_tx;
    c38c:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
		p->rx = conn->lll.phy_rx;
    c390:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
    c394:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c398:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
		if (err) {
    c39c:	f7fe bd02 	b.w	ada4 <ull_conn_rx+0xa4>
	LL_ASSERT(rx_dle);
    c3a0:	4a6a      	ldr	r2, [pc, #424]	; (c54c <ull_conn_rx+0x184c>)
    c3a2:	496b      	ldr	r1, [pc, #428]	; (c550 <ull_conn_rx+0x1850>)
    c3a4:	486b      	ldr	r0, [pc, #428]	; (c554 <ull_conn_rx+0x1854>)
    c3a6:	f241 3313 	movw	r3, #4883	; 0x1313
    c3aa:	f007 fca3 	bl	13cf4 <printk>
    c3ae:	4040      	eors	r0, r0
    c3b0:	f380 8811 	msr	BASEPRI, r0
    c3b4:	f04f 0003 	mov.w	r0, #3
    c3b8:	df02      	svc	2
    c3ba:	e658      	b.n	c06e <ull_conn_rx+0x136e>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    c3bc:	2a23      	cmp	r2, #35	; 0x23
    c3be:	f43f ab18 	beq.w	b9f2 <ull_conn_rx+0xcf2>
			conn->slave.ticks_to_offset =
    c3c2:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
    c3c6:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
    c3ca:	f7ff bb12 	b.w	b9f2 <ull_conn_rx+0xcf2>
		LL_ASSERT(conn_upd_curr == conn);
    c3ce:	4f62      	ldr	r7, [pc, #392]	; (c558 <ull_conn_rx+0x1858>)
    c3d0:	6839      	ldr	r1, [r7, #0]
    c3d2:	428d      	cmp	r5, r1
    c3d4:	d010      	beq.n	c3f8 <ull_conn_rx+0x16f8>
    c3d6:	4a5d      	ldr	r2, [pc, #372]	; (c54c <ull_conn_rx+0x184c>)
    c3d8:	4960      	ldr	r1, [pc, #384]	; (c55c <ull_conn_rx+0x185c>)
    c3da:	485e      	ldr	r0, [pc, #376]	; (c554 <ull_conn_rx+0x1854>)
    c3dc:	f241 039b 	movw	r3, #4251	; 0x109b
    c3e0:	f007 fc88 	bl	13cf4 <printk>
    c3e4:	4040      	eors	r0, r0
    c3e6:	f380 8811 	msr	BASEPRI, r0
    c3ea:	f04f 0003 	mov.w	r0, #3
    c3ee:	df02      	svc	2
    c3f0:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
    c3f4:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c3f8:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
		conn_upd_curr = NULL;
    c3fc:	2300      	movs	r3, #0
    c3fe:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
    c400:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
    c404:	f7ff bafc 	b.w	ba00 <ull_conn_rx+0xd00>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c408:	6823      	ldr	r3, [r4, #0]
    c40a:	2203      	movs	r2, #3
    c40c:	711a      	strb	r2, [r3, #4]
    c40e:	f7fe be58 	b.w	b0c2 <ull_conn_rx+0x3c2>
			switch (llctrl->unknown_rsp.type) {
    c412:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    c416:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c418:	bf04      	itt	eq
    c41a:	2303      	moveq	r3, #3
    c41c:	7133      	strbeq	r3, [r6, #4]
				break;
    c41e:	f7fe be50 	b.w	b0c2 <ull_conn_rx+0x3c2>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    c422:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
    c426:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
    c42a:	429a      	cmp	r2, r3
    c42c:	d00e      	beq.n	c44c <ull_conn_rx+0x174c>
    c42e:	4a47      	ldr	r2, [pc, #284]	; (c54c <ull_conn_rx+0x184c>)
    c430:	494b      	ldr	r1, [pc, #300]	; (c560 <ull_conn_rx+0x1860>)
    c432:	4848      	ldr	r0, [pc, #288]	; (c554 <ull_conn_rx+0x1854>)
    c434:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    c438:	f007 fc5c 	bl	13cf4 <printk>
    c43c:	4040      	eors	r0, r0
    c43e:	f380 8811 	msr	BASEPRI, r0
    c442:	f04f 0003 	mov.w	r0, #3
    c446:	df02      	svc	2
    c448:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c44c:	f895 1172 	ldrb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    c450:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
    c454:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c458:	2205      	movs	r2, #5
    c45a:	f362 0102 	bfi	r1, r2, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c45e:	f895 0106 	ldrb.w	r0, [r5, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    c462:	f885 1172 	strb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    c466:	f3c1 02c0 	ubfx	r2, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c46a:	0092      	lsls	r2, r2, #2
    c46c:	f020 0007 	bic.w	r0, r0, #7
		conn->llcp_cu.ack--;
    c470:	3b01      	subs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c472:	f042 0201 	orr.w	r2, r2, #1
    c476:	4302      	orrs	r2, r0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    c478:	f8b5 1178 	ldrh.w	r1, [r5, #376]	; 0x178
		conn->llcp_cu.ack--;
    c47c:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
		conn->llcp_cu.win_size = 1U;
    c480:	2401      	movs	r4, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    c482:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c486:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
    c48a:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
    c48c:	f885 4114 	strb.w	r4, [r5, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
    c490:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    c494:	f8a5 110a 	strh.w	r1, [r5, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    c498:	f8a5 310c 	strh.w	r3, [r5, #268]	; 0x10c
	if (err) {
    c49c:	f7fe bd30 	b.w	af00 <ull_conn_rx+0x200>
			     lll->interval) ||
    c4a0:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
    c4a2:	4286      	cmp	r6, r0
    c4a4:	f47f ad7c 	bne.w	bfa0 <ull_conn_rx+0x12a0>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    c4a8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    c4ac:	fb00 f202 	mul.w	r2, r0, r2
    c4b0:	f242 7010 	movw	r0, #10000	; 0x2710
    c4b4:	fb00 2303 	mla	r3, r0, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
    c4b8:	f8b5 00c6 	ldrh.w	r0, [r5, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    c4bc:	3b01      	subs	r3, #1
    c4be:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
    c4c2:	b29b      	uxth	r3, r3
    c4c4:	4298      	cmp	r0, r3
    c4c6:	f47f ad6b 	bne.w	bfa0 <ull_conn_rx+0x12a0>
				conn->llcp_conn_param.state =
    c4ca:	f8b5 3172 	ldrh.w	r3, [r5, #370]	; 0x172
    c4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c4d2:	f043 0301 	orr.w	r3, r3, #1
    c4d6:	f8a5 3172 	strh.w	r3, [r5, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c4da:	6823      	ldr	r3, [r4, #0]
    c4dc:	2203      	movs	r2, #3
    c4de:	711a      	strb	r2, [r3, #4]
    c4e0:	e565      	b.n	bfae <ull_conn_rx+0x12ae>
						conn->llcp_conn_param.state =
    c4e2:	2203      	movs	r2, #3
    c4e4:	f362 0302 	bfi	r3, r2, #0, #3
    c4e8:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
    c4ec:	e71d      	b.n	c32a <ull_conn_rx+0x162a>
				     lll->interval) ||
    c4ee:	8e29      	ldrh	r1, [r5, #48]	; 0x30
    c4f0:	4281      	cmp	r1, r0
    c4f2:	f47f af0c 	bne.w	c30e <ull_conn_rx+0x160e>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    c4f6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    c4fa:	fb01 f10e 	mul.w	r1, r1, lr
    c4fe:	f242 7010 	movw	r0, #10000	; 0x2710
    c502:	fb00 1202 	mla	r2, r0, r2, r1
				     lll->latency) ||
    c506:	f8b5 00c6 	ldrh.w	r0, [r5, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    c50a:	3a01      	subs	r2, #1
    c50c:	fbb2 f2f1 	udiv	r2, r2, r1
				     lll->latency) ||
    c510:	b292      	uxth	r2, r2
    c512:	4290      	cmp	r0, r2
    c514:	f47f aefb 	bne.w	c30e <ull_conn_rx+0x160e>
					conn->llcp_conn_param.state =
    c518:	f8b5 3172 	ldrh.w	r3, [r5, #370]	; 0x172
    c51c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c520:	f043 0301 	orr.w	r3, r3, #1
    c524:	f8a5 3172 	strh.w	r3, [r5, #370]	; 0x172
					(*rx)->hdr.type =
    c528:	6823      	ldr	r3, [r4, #0]
    c52a:	2203      	movs	r2, #3
    c52c:	711a      	strb	r2, [r3, #4]
    c52e:	e6fc      	b.n	c32a <ull_conn_rx+0x162a>
			tx->next = conn->tx_head->next;
    c530:	6823      	ldr	r3, [r4, #0]
    c532:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
    c534:	6022      	str	r2, [r4, #0]
				conn->tx_ctrl_last = tx;
    c536:	e9c5 226d 	strd	r2, r2, [r5, #436]	; 0x1b4
    c53a:	e45e      	b.n	bdfa <ull_conn_rx+0x10fa>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    c53c:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
    c540:	f012 0f06 	tst.w	r2, #6
    c544:	f43f ab4f 	beq.w	bbe6 <ull_conn_rx+0xee6>
    c548:	f7fe bd32 	b.w	afb0 <ull_conn_rx+0x2b0>
    c54c:	0001570c 	.word	0x0001570c
    c550:	0001586c 	.word	0x0001586c
    c554:	0001525c 	.word	0x0001525c
    c558:	200015c4 	.word	0x200015c4
    c55c:	00015854 	.word	0x00015854
    c560:	0001582c 	.word	0x0001582c

0000c564 <ull_conn_tx_demux>:
{
    c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c568:	4f3b      	ldr	r7, [pc, #236]	; (c658 <ull_conn_tx_demux+0xf4>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c56a:	4e3c      	ldr	r6, [pc, #240]	; (c65c <ull_conn_tx_demux+0xf8>)
    c56c:	78fa      	ldrb	r2, [r7, #3]
{
    c56e:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
    c570:	1d3d      	adds	r5, r7, #4
    c572:	e02d      	b.n	c5d0 <ull_conn_tx_demux+0x6c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c574:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c578:	4630      	mov	r0, r6
    c57a:	f7f8 f8a1 	bl	46c0 <mem_get>
	if (conn->lll.handle != handle) {
    c57e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c580:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    c582:	2a00      	cmp	r2, #0
    c584:	d130      	bne.n	c5e8 <ull_conn_tx_demux+0x84>
			struct node_tx *tx = lll_tx->node;
    c586:	f8d8 1004 	ldr.w	r1, [r8, #4]
	if ((p->ll_id == PDU_DATA_LLID_DATA_START) && !p->len) {
    c58a:	790a      	ldrb	r2, [r1, #4]
    c58c:	7948      	ldrb	r0, [r1, #5]
    c58e:	f002 0203 	and.w	r2, r2, #3
    c592:	2a02      	cmp	r2, #2
    c594:	d033      	beq.n	c5fe <ull_conn_tx_demux+0x9a>
	} else if (p->len && conn->start_empty) {
    c596:	2800      	cmp	r0, #0
    c598:	d132      	bne.n	c600 <ull_conn_tx_demux+0x9c>
			if (!conn->tx_data) {
    c59a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
			tx->next = NULL;
    c59e:	2000      	movs	r0, #0
    c5a0:	6008      	str	r0, [r1, #0]
			if (!conn->tx_data) {
    c5a2:	2a00      	cmp	r2, #0
    c5a4:	d043      	beq.n	c62e <ull_conn_tx_demux+0xca>
			if (conn->tx_data_last) {
    c5a6:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
    c5aa:	b102      	cbz	r2, c5ae <ull_conn_tx_demux+0x4a>
				conn->tx_data_last->next = tx;
    c5ac:	6011      	str	r1, [r2, #0]
			conn->tx_data_last = tx;
    c5ae:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
    c5b2:	78fa      	ldrb	r2, [r7, #3]
	u8_t _first = *first; /* Copy read-index */
    c5b4:	78bb      	ldrb	r3, [r7, #2]
    c5b6:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
    c5b8:	429a      	cmp	r2, r3
    c5ba:	d005      	beq.n	c5c8 <ull_conn_tx_demux+0x64>
	_first += 1U;
    c5bc:	3301      	adds	r3, #1
    c5be:	b2db      	uxtb	r3, r3
		_first = 0U;
    c5c0:	4299      	cmp	r1, r3
    c5c2:	bf08      	it	eq
    c5c4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    c5c6:	70bb      	strb	r3, [r7, #2]
	} while (--count);
    c5c8:	3c01      	subs	r4, #1
    c5ca:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    c5ce:	d037      	beq.n	c640 <ull_conn_tx_demux+0xdc>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    c5d0:	78bb      	ldrb	r3, [r7, #2]
    c5d2:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
    c5d4:	4293      	cmp	r3, r2
    c5d6:	d033      	beq.n	c640 <ull_conn_tx_demux+0xdc>
	return (void *)(fifo + first * size);
    c5d8:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
    c5dc:	eb15 0803 	adds.w	r8, r5, r3
    c5e0:	d02e      	beq.n	c640 <ull_conn_tx_demux+0xdc>
	if (handle >= CONFIG_BT_MAX_CONN) {
    c5e2:	5aea      	ldrh	r2, [r5, r3]
    c5e4:	2a00      	cmp	r2, #0
    c5e6:	d0c5      	beq.n	c574 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
    c5e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    c5ec:	790b      	ldrb	r3, [r1, #4]
    c5ee:	f36f 0301 	bfc	r3, #0, #2
    c5f2:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
    c5f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c5f8:	f7fc fc56 	bl	8ea8 <ll_tx_ack_put>
    c5fc:	e7d9      	b.n	c5b2 <ull_conn_tx_demux+0x4e>
	if ((p->ll_id == PDU_DATA_LLID_DATA_START) && !p->len) {
    c5fe:	b308      	cbz	r0, c644 <ull_conn_tx_demux+0xe0>
	} else if (p->len && conn->start_empty) {
    c600:	f993 01ac 	ldrsb.w	r0, [r3, #428]	; 0x1ac
    c604:	2800      	cmp	r0, #0
    c606:	dac8      	bge.n	c59a <ull_conn_tx_demux+0x36>
		conn->start_empty = 0U;
    c608:	f893 01ac 	ldrb.w	r0, [r3, #428]	; 0x1ac
		if (p->ll_id == PDU_DATA_LLID_DATA_CONTINUE) {
    c60c:	2a01      	cmp	r2, #1
		conn->start_empty = 0U;
    c60e:	f36f 10c7 	bfc	r0, #7, #1
    c612:	f883 01ac 	strb.w	r0, [r3, #428]	; 0x1ac
		if (p->ll_id == PDU_DATA_LLID_DATA_CONTINUE) {
    c616:	d1c0      	bne.n	c59a <ull_conn_tx_demux+0x36>
			p->ll_id = PDU_DATA_LLID_DATA_START;
    c618:	790a      	ldrb	r2, [r1, #4]
    c61a:	2002      	movs	r0, #2
    c61c:	f360 0201 	bfi	r2, r0, #0, #2
    c620:	710a      	strb	r2, [r1, #4]
			if (!conn->tx_data) {
    c622:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
			tx->next = NULL;
    c626:	2000      	movs	r0, #0
    c628:	6008      	str	r0, [r1, #0]
			if (!conn->tx_data) {
    c62a:	2a00      	cmp	r2, #0
    c62c:	d1bb      	bne.n	c5a6 <ull_conn_tx_demux+0x42>
				if (!conn->tx_head) {
    c62e:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
				conn->tx_data = tx;
    c632:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
				if (!conn->tx_head) {
    c636:	2a00      	cmp	r2, #0
    c638:	d1b5      	bne.n	c5a6 <ull_conn_tx_demux+0x42>
					conn->tx_head = tx;
    c63a:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
			if (conn->tx_data_last) {
    c63e:	e7b6      	b.n	c5ae <ull_conn_tx_demux+0x4a>
}
    c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->start_empty = 1U;
    c644:	f893 21ac 	ldrb.w	r2, [r3, #428]	; 0x1ac
    c648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c64c:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
		ll_tx_ack_put(conn->lll.handle, tx);
    c650:	f7fc fc2a 	bl	8ea8 <ll_tx_ack_put>
		return -EINVAL;
    c654:	e7ad      	b.n	c5b2 <ull_conn_tx_demux+0x4e>
    c656:	bf00      	nop
    c658:	200002f8 	.word	0x200002f8
    c65c:	200013fc 	.word	0x200013fc

0000c660 <conn_cleanup>:
{
    c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
    c664:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
    c668:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((u8_t *)rx->pdu) = reason;
    c66a:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c66e:	2309      	movs	r3, #9
{
    c670:	b083      	sub	sp, #12
    c672:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
    c674:	f8a0 2132 	strh.w	r2, [r0, #306]	; 0x132
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    c678:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
	struct lll_conn *lll = &conn->lll;
    c67c:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
    c680:	b144      	cbz	r4, c694 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c682:	2503      	movs	r5, #3
		rx = hdr->link->mem;
    c684:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
    c686:	4621      	mov	r1, r4
		rx = hdr->link->mem;
    c688:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
    c68a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    c68c:	f7fc fbc6 	bl	8e1c <ll_rx_put>
	while (rx) {
    c690:	2c00      	cmp	r4, #0
    c692:	d1f7      	bne.n	c684 <conn_cleanup+0x24>
	while (conn->tx_head) {
    c694:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
    c698:	b381      	cbz	r1, c6fc <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
    c69a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c754 <conn_cleanup+0xf4>
		LL_ASSERT(link);
    c69e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; c74c <conn_cleanup+0xec>
    c6a2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; c758 <conn_cleanup+0xf8>
    c6a6:	f106 076c 	add.w	r7, r6, #108	; 0x6c
    c6aa:	e007      	b.n	c6bc <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    c6ac:	4629      	mov	r1, r5
    c6ae:	4620      	mov	r0, r4
    c6b0:	463a      	mov	r2, r7
    c6b2:	f7f8 f837 	bl	4724 <memq_enqueue>
	while (conn->tx_head) {
    c6b6:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
    c6ba:	b1f9      	cbz	r1, c6fc <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    c6bc:	4630      	mov	r0, r6
    c6be:	f7fd fbd7 	bl	9e70 <tx_ull_dequeue>
    c6c2:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
    c6c4:	4640      	mov	r0, r8
    c6c6:	f7f7 ffc9 	bl	465c <mem_acquire>
		LL_ASSERT(link);
    c6ca:	4604      	mov	r4, r0
    c6cc:	2800      	cmp	r0, #0
    c6ce:	d1ed      	bne.n	c6ac <conn_cleanup+0x4c>
    c6d0:	481c      	ldr	r0, [pc, #112]	; (c744 <conn_cleanup+0xe4>)
    c6d2:	f240 63e3 	movw	r3, #1763	; 0x6e3
    c6d6:	4652      	mov	r2, sl
    c6d8:	4649      	mov	r1, r9
    c6da:	f007 fb0b 	bl	13cf4 <printk>
    c6de:	4040      	eors	r0, r0
    c6e0:	f380 8811 	msr	BASEPRI, r0
    c6e4:	f04f 0003 	mov.w	r0, #3
    c6e8:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    c6ea:	4629      	mov	r1, r5
    c6ec:	4620      	mov	r0, r4
    c6ee:	463a      	mov	r2, r7
    c6f0:	f7f8 f818 	bl	4724 <memq_enqueue>
	while (conn->tx_head) {
    c6f4:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
    c6f8:	2900      	cmp	r1, #0
    c6fa:	d1df      	bne.n	c6bc <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
    c6fc:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    c700:	4b11      	ldr	r3, [pc, #68]	; (c748 <conn_cleanup+0xe8>)
    c702:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
    c706:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    c708:	b2d2      	uxtb	r2, r2
    c70a:	2101      	movs	r1, #1
    c70c:	2000      	movs	r0, #0
    c70e:	f7f9 fae9 	bl	5ce4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c712:	f030 0302 	bics.w	r3, r0, #2
    c716:	d00c      	beq.n	c732 <conn_cleanup+0xd2>
    c718:	4a0c      	ldr	r2, [pc, #48]	; (c74c <conn_cleanup+0xec>)
    c71a:	490d      	ldr	r1, [pc, #52]	; (c750 <conn_cleanup+0xf0>)
    c71c:	4809      	ldr	r0, [pc, #36]	; (c744 <conn_cleanup+0xe4>)
    c71e:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
    c722:	f007 fae7 	bl	13cf4 <printk>
    c726:	4040      	eors	r0, r0
    c728:	f380 8811 	msr	BASEPRI, r0
    c72c:	f04f 0003 	mov.w	r0, #3
    c730:	df02      	svc	2
	lll->handle = 0xFFFF;
    c732:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    c736:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
    c738:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
    c73a:	b003      	add	sp, #12
    c73c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
    c740:	f7ff bf10 	b.w	c564 <ull_conn_tx_demux>
    c744:	0001525c 	.word	0x0001525c
    c748:	0000a165 	.word	0x0000a165
    c74c:	0001570c 	.word	0x0001570c
    c750:	000157ec 	.word	0x000157ec
    c754:	20001754 	.word	0x20001754
    c758:	00015778 	.word	0x00015778

0000c75c <ull_conn_done>:
{
    c75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
    c760:	6a06      	ldr	r6, [r0, #32]
	if (lll->handle == 0xFFFF) {
    c762:	8bb2      	ldrh	r2, [r6, #28]
    c764:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c768:	429a      	cmp	r2, r3
{
    c76a:	b08a      	sub	sp, #40	; 0x28
	if (lll->handle == 0xFFFF) {
    c76c:	d052      	beq.n	c814 <ull_conn_done+0xb8>
	switch (done->extra.mic_state) {
    c76e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
    c772:	68f4      	ldr	r4, [r6, #12]
	switch (done->extra.mic_state) {
    c774:	2b01      	cmp	r3, #1
    c776:	4605      	mov	r5, r0
    c778:	f000 8141 	beq.w	c9fe <ull_conn_done+0x2a2>
    c77c:	2b02      	cmp	r3, #2
    c77e:	d043      	beq.n	c808 <ull_conn_done+0xac>
    c780:	2b00      	cmp	r3, #0
    c782:	f000 811d 	beq.w	c9c0 <ull_conn_done+0x264>
	reason_peer = conn->llcp_terminate.reason_peer;
    c786:	f894 112b 	ldrb.w	r1, [r4, #299]	; 0x12b
	if (reason_peer && (
    c78a:	2900      	cmp	r1, #0
    c78c:	f040 80bb 	bne.w	c906 <ull_conn_done+0x1aa>
	latency_event = lll->latency_event;
    c790:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
	if (done->extra.trx_cnt) {
    c792:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
	ticks_drift_plus = 0U;
    c794:	9109      	str	r1, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
    c796:	f107 0801 	add.w	r8, r7, #1
	ticks_drift_minus = 0U;
    c79a:	9108      	str	r1, [sp, #32]
	elapsed_event = latency_event + 1;
    c79c:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
    c7a0:	b3db      	cbz	r3, c81a <ull_conn_done+0xbe>
		} else if (lll->role) {
    c7a2:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
    c7a6:	2b00      	cmp	r3, #0
    c7a8:	f2c0 8139 	blt.w	ca1e <ull_conn_done+0x2c2>
	if (done->extra.crc_valid) {
    c7ac:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
		conn->connect_expire = 0U;
    c7b0:	2200      	movs	r2, #0
    c7b2:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
    c7b6:	bbab      	cbnz	r3, c824 <ull_conn_done+0xc8>
		if (!conn->supervision_expire) {
    c7b8:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
    c7bc:	b925      	cbnz	r5, c7c8 <ull_conn_done+0x6c>
			conn->supervision_expire = conn->supervision_reload;
    c7be:	f8b4 50c6 	ldrh.w	r5, [r4, #198]	; 0xc6
    c7c2:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
    c7c6:	b385      	cbz	r5, c82a <ull_conn_done+0xce>
		if (conn->supervision_expire > elapsed_event) {
    c7c8:	4545      	cmp	r5, r8
    c7ca:	f240 8133 	bls.w	ca34 <ull_conn_done+0x2d8>
			conn->supervision_expire -= elapsed_event;
    c7ce:	eba5 0508 	sub.w	r5, r5, r8
    c7d2:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
    c7d4:	2b06      	cmp	r3, #6
			lll->latency_event = 0;
    c7d6:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
    c7da:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0;
    c7de:	84b5      	strh	r5, [r6, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
    c7e0:	f240 8113 	bls.w	ca0a <ull_conn_done+0x2ae>
			else if (lll->role) {
    c7e4:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
    c7e8:	42ab      	cmp	r3, r5
    c7ea:	da1e      	bge.n	c82a <ull_conn_done+0xce>
				if (latency_event) {
    c7ec:	2f00      	cmp	r7, #0
    c7ee:	f040 810c 	bne.w	ca0a <ull_conn_done+0x2ae>
					force = conn->slave.force & 0x01;
    c7f2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
					conn->slave.force >>= 1;
    c7f6:	086b      	lsrs	r3, r5, #1
					if (force) {
    c7f8:	f015 0501 	ands.w	r5, r5, #1
						conn->slave.force |= BIT(31);
    c7fc:	bf18      	it	ne
    c7fe:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
    c802:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    c806:	e010      	b.n	c82a <ull_conn_done+0xce>
		conn->llcp_terminate.reason_peer =
    c808:	213d      	movs	r1, #61	; 0x3d
    c80a:	f884 112b 	strb.w	r1, [r4, #299]	; 0x12b
		conn_cleanup(conn, reason_peer);
    c80e:	4620      	mov	r0, r4
    c810:	f7ff ff26 	bl	c660 <conn_cleanup>
}
    c814:	b00a      	add	sp, #40	; 0x28
    c816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
    c81a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    c81e:	2b00      	cmp	r3, #0
    c820:	f000 808f 	beq.w	c942 <ull_conn_done+0x1e6>
		conn->supervision_expire = 0U;
    c824:	2500      	movs	r5, #0
    c826:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
    c82a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    c82e:	b133      	cbz	r3, c83e <ull_conn_done+0xe2>
		if (conn->procedure_expire > elapsed_event) {
    c830:	4543      	cmp	r3, r8
    c832:	f240 8104 	bls.w	ca3e <ull_conn_done+0x2e2>
			conn->procedure_expire -= elapsed_event;
    c836:	eba3 0308 	sub.w	r3, r3, r8
    c83a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
    c83e:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    c842:	b133      	cbz	r3, c852 <ull_conn_done+0xf6>
		if (conn->apto_expire > elapsed_event) {
    c844:	4543      	cmp	r3, r8
    c846:	f240 80a9 	bls.w	c99c <ull_conn_done+0x240>
			conn->apto_expire -= elapsed_event;
    c84a:	eba3 0308 	sub.w	r3, r3, r8
    c84e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
    c852:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    c856:	b1ab      	cbz	r3, c884 <ull_conn_done+0x128>
		if (conn->appto_expire > elapsed_event) {
    c858:	4543      	cmp	r3, r8
    c85a:	f200 8085 	bhi.w	c968 <ull_conn_done+0x20c>
			if ((conn->procedure_expire == 0U) &&
    c85e:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
    c862:	2200      	movs	r2, #0
    c864:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
    c868:	b963      	cbnz	r3, c884 <ull_conn_done+0x128>
			    (conn->llcp_req == conn->llcp_ack)) {
    c86a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c86e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			if ((conn->procedure_expire == 0U) &&
    c872:	4293      	cmp	r3, r2
    c874:	d10a      	bne.n	c88c <ull_conn_done+0x130>
				conn->llcp_ack -= 2U;
    c876:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
    c878:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    c87a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
    c87e:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    c882:	e008      	b.n	c896 <ull_conn_done+0x13a>
    c884:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c888:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    c88c:	1a9b      	subs	r3, r3, r2
    c88e:	f003 0303 	and.w	r3, r3, #3
    c892:	2b02      	cmp	r3, #2
    c894:	d075      	beq.n	c982 <ull_conn_done+0x226>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
    c896:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    c89a:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
    c89e:	429a      	cmp	r2, r3
    c8a0:	f000 80b5 	beq.w	ca0e <ull_conn_done+0x2b2>
		lll->latency_event = 0;
    c8a4:	2200      	movs	r2, #0
    c8a6:	84b2      	strh	r2, [r6, #36]	; 0x24
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    c8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
    c8aa:	b90d      	cbnz	r5, c8b0 <ull_conn_done+0x154>
    c8ac:	42ba      	cmp	r2, r7
    c8ae:	d06e      	beq.n	c98e <ull_conn_done+0x232>
		lazy = lll->latency_event + 1;
    c8b0:	3201      	adds	r2, #1
    c8b2:	9c08      	ldr	r4, [sp, #32]
    c8b4:	b291      	uxth	r1, r2
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    c8b6:	b90b      	cbnz	r3, c8bc <ull_conn_done+0x160>
    c8b8:	2c00      	cmp	r4, #0
    c8ba:	d051      	beq.n	c960 <ull_conn_done+0x204>
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    c8bc:	7f32      	ldrb	r2, [r6, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    c8be:	4f74      	ldr	r7, [pc, #464]	; (ca90 <ull_conn_done+0x334>)
		struct ll_conn *conn = lll->hdr.parent;
    c8c0:	68f6      	ldr	r6, [r6, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    c8c2:	9606      	str	r6, [sp, #24]
    c8c4:	2000      	movs	r0, #0
		u8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    c8c6:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    c8c8:	9103      	str	r1, [sp, #12]
    c8ca:	e9cd 0001 	strd	r0, r0, [sp, #4]
    c8ce:	b2d2      	uxtb	r2, r2
    c8d0:	9504      	str	r5, [sp, #16]
    c8d2:	9400      	str	r4, [sp, #0]
    c8d4:	9705      	str	r7, [sp, #20]
    c8d6:	2101      	movs	r1, #1
    c8d8:	f7f9 f9b4 	bl	5c44 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c8dc:	f030 0302 	bics.w	r3, r0, #2
    c8e0:	d098      	beq.n	c814 <ull_conn_done+0xb8>
    c8e2:	f7fc fb3d 	bl	8f60 <ull_disable_mark_get>
    c8e6:	4286      	cmp	r6, r0
    c8e8:	d094      	beq.n	c814 <ull_conn_done+0xb8>
    c8ea:	4a6a      	ldr	r2, [pc, #424]	; (ca94 <ull_conn_done+0x338>)
    c8ec:	496a      	ldr	r1, [pc, #424]	; (ca98 <ull_conn_done+0x33c>)
    c8ee:	486b      	ldr	r0, [pc, #428]	; (ca9c <ull_conn_done+0x340>)
    c8f0:	f240 43e7 	movw	r3, #1255	; 0x4e7
    c8f4:	f007 f9fe 	bl	13cf4 <printk>
    c8f8:	4040      	eors	r0, r0
    c8fa:	f380 8811 	msr	BASEPRI, r0
    c8fe:	f04f 0003 	mov.w	r0, #3
    c902:	df02      	svc	2
    c904:	e786      	b.n	c814 <ull_conn_done+0xb8>
	if (reason_peer && (
    c906:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
    c90a:	2b00      	cmp	r3, #0
    c90c:	f6ff af7f 	blt.w	c80e <ull_conn_done+0xb2>
			    lll->role ||
    c910:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    c914:	f013 0202 	ands.w	r2, r3, #2
    c918:	f47f af79 	bne.w	c80e <ull_conn_done+0xb2>
			    conn->master.terminate_ack ||
    c91c:	293d      	cmp	r1, #61	; 0x3d
    c91e:	f43f af76 	beq.w	c80e <ull_conn_done+0xb2>
	latency_event = lll->latency_event;
    c922:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
	if (done->extra.trx_cnt) {
    c924:	8d29      	ldrh	r1, [r5, #40]	; 0x28
	ticks_drift_plus = 0U;
    c926:	9209      	str	r2, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
    c928:	f107 0801 	add.w	r8, r7, #1
	ticks_drift_minus = 0U;
    c92c:	9208      	str	r2, [sp, #32]
	elapsed_event = latency_event + 1;
    c92e:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
    c932:	2900      	cmp	r1, #0
    c934:	f43f af71 	beq.w	c81a <ull_conn_done+0xbe>
			conn->master.terminate_ack = 1;
    c938:	f043 0302 	orr.w	r3, r3, #2
    c93c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    c940:	e734      	b.n	c7ac <ull_conn_done+0x50>
	else if (conn->connect_expire) {
    c942:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    c946:	2b00      	cmp	r3, #0
    c948:	f43f af36 	beq.w	c7b8 <ull_conn_done+0x5c>
		if (conn->connect_expire > elapsed_event) {
    c94c:	4543      	cmp	r3, r8
    c94e:	f240 8084 	bls.w	ca5a <ull_conn_done+0x2fe>
			conn->connect_expire -= elapsed_event;
    c952:	eba3 0308 	sub.w	r3, r3, r8
    c956:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
    c95a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
    c95e:	e732      	b.n	c7c6 <ull_conn_done+0x6a>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    c960:	2900      	cmp	r1, #0
    c962:	d075      	beq.n	ca50 <ull_conn_done+0x2f4>
    c964:	4623      	mov	r3, r4
    c966:	e7a9      	b.n	c8bc <ull_conn_done+0x160>
			conn->appto_expire -= elapsed_event;
    c968:	eba3 0808 	sub.w	r8, r3, r8
    c96c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    c970:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->appto_expire -= elapsed_event;
    c974:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    c978:	1a9b      	subs	r3, r3, r2
    c97a:	f003 0303 	and.w	r3, r3, #3
    c97e:	2b02      	cmp	r3, #2
    c980:	d189      	bne.n	c896 <ull_conn_done+0x13a>
    c982:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    c986:	3b01      	subs	r3, #1
    c988:	2b01      	cmp	r3, #1
    c98a:	d884      	bhi.n	c896 <ull_conn_done+0x13a>
    c98c:	e78a      	b.n	c8a4 <ull_conn_done+0x148>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
    c98e:	9c08      	ldr	r4, [sp, #32]
    c990:	b913      	cbnz	r3, c998 <ull_conn_done+0x23c>
    c992:	2c00      	cmp	r4, #0
    c994:	f43f af3e 	beq.w	c814 <ull_conn_done+0xb8>
	lazy = 0U;
    c998:	4629      	mov	r1, r5
    c99a:	e78f      	b.n	c8bc <ull_conn_done+0x160>
			rx = ll_pdu_rx_alloc();
    c99c:	f7fc fa6c 	bl	8e78 <ll_pdu_rx_alloc>
			if (rx) {
    c9a0:	4601      	mov	r1, r0
    c9a2:	2800      	cmp	r0, #0
    c9a4:	d050      	beq.n	ca48 <ull_conn_done+0x2ec>
				conn->apto_expire = 0U;
    c9a6:	2300      	movs	r3, #0
				rx->handle = lll->handle;
    c9a8:	8bb2      	ldrh	r2, [r6, #28]
				conn->apto_expire = 0U;
    c9aa:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
    c9ae:	230c      	movs	r3, #12
				rx->handle = lll->handle;
    c9b0:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    c9b2:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
    c9b4:	6800      	ldr	r0, [r0, #0]
    c9b6:	f7fc fa31 	bl	8e1c <ll_rx_put>
				ll_rx_sched();
    c9ba:	f7fc fa39 	bl	8e30 <ll_rx_sched>
    c9be:	e748      	b.n	c852 <ull_conn_done+0xf6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    c9c0:	f896 306e 	ldrb.w	r3, [r6, #110]	; 0x6e
    c9c4:	0719      	lsls	r1, r3, #28
    c9c6:	d404      	bmi.n	c9d2 <ull_conn_done+0x276>
    c9c8:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    c9cc:	07da      	lsls	r2, r3, #31
    c9ce:	f57f aeda 	bpl.w	c786 <ull_conn_done+0x2a>
					    (lll->latency + 6)) ?
    c9d2:	8c33      	ldrh	r3, [r6, #32]
			appto_reload_new = (conn->apto_reload >
    c9d4:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
    c9d8:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
    c9da:	428a      	cmp	r2, r1
					   (conn->apto_reload -
    c9dc:	bfc4      	itt	gt
    c9de:	1ad3      	subgt	r3, r2, r3
    c9e0:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
    c9e2:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
    c9e6:	bfcc      	ite	gt
    c9e8:	b29b      	uxthgt	r3, r3
    c9ea:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
    c9ec:	4299      	cmp	r1, r3
    c9ee:	d010      	beq.n	ca12 <ull_conn_done+0x2b6>
				conn->appto_reload = appto_reload_new;
    c9f0:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
    c9f4:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
    c9f8:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
    c9fc:	e6c3      	b.n	c786 <ull_conn_done+0x2a>
		conn->appto_expire = conn->apto_expire = 0U;
    c9fe:	2300      	movs	r3, #0
    ca00:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
    ca04:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
    ca08:	e6bd      	b.n	c786 <ull_conn_done+0x2a>
					force = 1U;
    ca0a:	2501      	movs	r5, #1
    ca0c:	e70d      	b.n	c82a <ull_conn_done+0xce>
    ca0e:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
    ca10:	e74a      	b.n	c8a8 <ull_conn_done+0x14c>
			if (conn->apto_expire == 0U) {
    ca12:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
    ca16:	2900      	cmp	r1, #0
    ca18:	f47f aeb5 	bne.w	c786 <ull_conn_done+0x2a>
    ca1c:	e7ea      	b.n	c9f4 <ull_conn_done+0x298>
			ull_slave_done(done, &ticks_drift_plus,
    ca1e:	aa08      	add	r2, sp, #32
    ca20:	a909      	add	r1, sp, #36	; 0x24
    ca22:	4628      	mov	r0, r5
    ca24:	f7f6 f81c 	bl	2a60 <ull_slave_done>
			if (!conn->tx_head) {
    ca28:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ca2c:	b1d3      	cbz	r3, ca64 <ull_conn_done+0x308>
				lll->latency_event = 0;
    ca2e:	2300      	movs	r3, #0
    ca30:	84b3      	strh	r3, [r6, #36]	; 0x24
    ca32:	e6bb      	b.n	c7ac <ull_conn_done+0x50>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    ca34:	4620      	mov	r0, r4
    ca36:	2108      	movs	r1, #8
    ca38:	f7ff fe12 	bl	c660 <conn_cleanup>
			return;
    ca3c:	e6ea      	b.n	c814 <ull_conn_done+0xb8>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
    ca3e:	4620      	mov	r0, r4
    ca40:	2122      	movs	r1, #34	; 0x22
    ca42:	f7ff fe0d 	bl	c660 <conn_cleanup>
			return;
    ca46:	e6e5      	b.n	c814 <ull_conn_done+0xb8>
				conn->apto_expire = 1U;
    ca48:	2301      	movs	r3, #1
    ca4a:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
    ca4e:	e700      	b.n	c852 <ull_conn_done+0xf6>
	    (lazy != 0U) || (force != 0U)) {
    ca50:	2d00      	cmp	r5, #0
    ca52:	f43f aedf 	beq.w	c814 <ull_conn_done+0xb8>
    ca56:	460b      	mov	r3, r1
    ca58:	e730      	b.n	c8bc <ull_conn_done+0x160>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    ca5a:	4620      	mov	r0, r4
    ca5c:	213e      	movs	r1, #62	; 0x3e
    ca5e:	f7ff fdff 	bl	c660 <conn_cleanup>
			return;
    ca62:	e6d7      	b.n	c814 <ull_conn_done+0xb8>
				ull_conn_tx_demux(UINT8_MAX);
    ca64:	20ff      	movs	r0, #255	; 0xff
    ca66:	f7ff fd7d 	bl	c564 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
    ca6a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    ca6e:	2a00      	cmp	r2, #0
    ca70:	d1dd      	bne.n	ca2e <ull_conn_done+0x2d2>
    ca72:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
    ca76:	f7f7 fe5d 	bl	4734 <memq_peek>
    ca7a:	2800      	cmp	r0, #0
    ca7c:	d1d7      	bne.n	ca2e <ull_conn_done+0x2d2>
			} else if (lll->slave.latency_enabled) {
    ca7e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    ca82:	07db      	lsls	r3, r3, #31
    ca84:	f57f ae92 	bpl.w	c7ac <ull_conn_done+0x50>
				lll->latency_event = lll->latency;
    ca88:	8c33      	ldrh	r3, [r6, #32]
    ca8a:	84b3      	strh	r3, [r6, #36]	; 0x24
    ca8c:	e68e      	b.n	c7ac <ull_conn_done+0x50>
    ca8e:	bf00      	nop
    ca90:	0000a279 	.word	0x0000a279
    ca94:	0001570c 	.word	0x0001570c
    ca98:	000158a4 	.word	0x000158a4
    ca9c:	0001525c 	.word	0x0001525c

0000caa0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
    caa0:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
    caa4:	2b00      	cmp	r3, #0
    caa6:	f000 80e7 	beq.w	cc78 <ull_conn_tx_lll_enqueue+0x1d8>
    caaa:	3901      	subs	r1, #1
{
    caac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
    cab0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; cc80 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
    cab4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; cc84 <ull_conn_tx_lll_enqueue+0x1e4>
    cab8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; cc88 <ull_conn_tx_lll_enqueue+0x1e8>
    cabc:	4604      	mov	r4, r0
    cabe:	b2cd      	uxtb	r5, r1
    cac0:	e012      	b.n	cae8 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
    cac2:	4640      	mov	r0, r8
    cac4:	f7f7 fdca 	bl	465c <mem_acquire>
		LL_ASSERT(link);
    cac8:	4607      	mov	r7, r0
    caca:	2800      	cmp	r0, #0
    cacc:	d066      	beq.n	cb9c <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    cace:	4631      	mov	r1, r6
    cad0:	4638      	mov	r0, r7
    cad2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    cad6:	f7f7 fe25 	bl	4724 <memq_enqueue>
	while (conn->tx_head &&
    cada:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    cade:	3d01      	subs	r5, #1
    cae0:	b2ed      	uxtb	r5, r5
    cae2:	2b00      	cmp	r3, #0
    cae4:	f000 8089 	beq.w	cbfa <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
    cae8:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
    caec:	07d1      	lsls	r1, r2, #31
    caee:	d403      	bmi.n	caf8 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
    caf0:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
    caf4:	0792      	lsls	r2, r2, #30
    caf6:	d566      	bpl.n	cbc6 <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    caf8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    cafc:	4293      	cmp	r3, r2
    cafe:	d17c      	bne.n	cbfa <ull_conn_tx_lll_enqueue+0x15a>
    cb00:	2dff      	cmp	r5, #255	; 0xff
    cb02:	d07a      	beq.n	cbfa <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    cb04:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    cb08:	4620      	mov	r0, r4
    cb0a:	f7fd f9b1 	bl	9e70 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    cb0e:	7903      	ldrb	r3, [r0, #4]
    cb10:	f003 0303 	and.w	r3, r3, #3
    cb14:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
    cb16:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    cb18:	d1d3      	bne.n	cac2 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
    cb1a:	79c3      	ldrb	r3, [r0, #7]
    cb1c:	3b03      	subs	r3, #3
    cb1e:	2b14      	cmp	r3, #20
    cb20:	d8cf      	bhi.n	cac2 <ull_conn_tx_lll_enqueue+0x22>
    cb22:	a201      	add	r2, pc, #4	; (adr r2, cb28 <ull_conn_tx_lll_enqueue+0x88>)
    cb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb28:	0000cb85 	.word	0x0000cb85
    cb2c:	0000cb85 	.word	0x0000cb85
    cb30:	0000cac3 	.word	0x0000cac3
    cb34:	0000cac3 	.word	0x0000cac3
    cb38:	0000cac3 	.word	0x0000cac3
    cb3c:	0000cac3 	.word	0x0000cac3
    cb40:	0000cac3 	.word	0x0000cac3
    cb44:	0000cb85 	.word	0x0000cb85
    cb48:	0000cb7d 	.word	0x0000cb7d
    cb4c:	0000cac3 	.word	0x0000cac3
    cb50:	0000cac3 	.word	0x0000cac3
    cb54:	0000cac3 	.word	0x0000cac3
    cb58:	0000cac3 	.word	0x0000cac3
    cb5c:	0000cac3 	.word	0x0000cac3
    cb60:	0000cac3 	.word	0x0000cac3
    cb64:	0000cac3 	.word	0x0000cac3
    cb68:	0000cac3 	.word	0x0000cac3
    cb6c:	0000cac3 	.word	0x0000cac3
    cb70:	0000cac3 	.word	0x0000cac3
    cb74:	0000cbb9 	.word	0x0000cbb9
    cb78:	0000cbb9 	.word	0x0000cbb9
		if (!conn->lll.role) {
    cb7c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    cb80:	2b00      	cmp	r3, #0
    cb82:	da9e      	bge.n	cac2 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
    cb84:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    cb88:	f043 0302 	orr.w	r3, r3, #2
    cb8c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
    cb90:	4640      	mov	r0, r8
    cb92:	f7f7 fd63 	bl	465c <mem_acquire>
		LL_ASSERT(link);
    cb96:	4607      	mov	r7, r0
    cb98:	2800      	cmp	r0, #0
    cb9a:	d198      	bne.n	cace <ull_conn_tx_lll_enqueue+0x2e>
    cb9c:	4837      	ldr	r0, [pc, #220]	; (cc7c <ull_conn_tx_lll_enqueue+0x1dc>)
    cb9e:	f240 5363 	movw	r3, #1379	; 0x563
    cba2:	4652      	mov	r2, sl
    cba4:	4649      	mov	r1, r9
    cba6:	f007 f8a5 	bl	13cf4 <printk>
    cbaa:	4040      	eors	r0, r0
    cbac:	f380 8811 	msr	BASEPRI, r0
    cbb0:	f04f 0003 	mov.w	r0, #3
    cbb4:	df02      	svc	2
    cbb6:	e78a      	b.n	cace <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
    cbb8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    cbbc:	f043 0301 	orr.w	r3, r3, #1
    cbc0:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
    cbc4:	e77d      	b.n	cac2 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    cbc6:	791a      	ldrb	r2, [r3, #4]
    cbc8:	f002 0203 	and.w	r2, r2, #3
    cbcc:	2a03      	cmp	r2, #3
    cbce:	d197      	bne.n	cb00 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
    cbd0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    cbd2:	2a03      	cmp	r2, #3
    cbd4:	d001      	beq.n	cbda <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    cbd6:	2a0a      	cmp	r2, #10
    cbd8:	d192      	bne.n	cb00 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
    cbda:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
    cbde:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    cbe2:	428a      	cmp	r2, r1
    cbe4:	d00b      	beq.n	cbfe <ull_conn_tx_lll_enqueue+0x15e>
    cbe6:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
    cbea:	2a03      	cmp	r2, #3
    cbec:	d088      	beq.n	cb00 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
    cbee:	681a      	ldr	r2, [r3, #0]
    cbf0:	b11a      	cbz	r2, cbfa <ull_conn_tx_lll_enqueue+0x15a>
    cbf2:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    cbf6:	428a      	cmp	r2, r1
    cbf8:	d02d      	beq.n	cc56 <ull_conn_tx_lll_enqueue+0x1b6>
}
    cbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
    cbfe:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
    cc02:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
    cc06:	4288      	cmp	r0, r1
    cc08:	d1f1      	bne.n	cbee <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
    cc0a:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    cc0e:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
    cc12:	4288      	cmp	r0, r1
    cc14:	d1eb      	bne.n	cbee <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
    cc16:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
    cc1a:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    cc1e:	4288      	cmp	r0, r1
    cc20:	d1e5      	bne.n	cbee <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
    cc22:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
    cc26:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
    cc2a:	4288      	cmp	r0, r1
    cc2c:	d1df      	bne.n	cbee <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
    cc2e:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
    cc32:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
    cc36:	4288      	cmp	r0, r1
    cc38:	d1d9      	bne.n	cbee <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    cc3a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    cc3e:	2101      	movs	r1, #1
    cc40:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
    cc44:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
    cc46:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
    cc48:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    cc4c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
    cc50:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
    cc54:	e754      	b.n	cb00 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
    cc56:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
    cc5a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
    cc5e:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
    cc62:	680a      	ldr	r2, [r1, #0]
    cc64:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
    cc66:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
    cc68:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
    cc6c:	2800      	cmp	r0, #0
    cc6e:	f47f af47 	bne.w	cb00 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
    cc72:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    cc76:	e743      	b.n	cb00 <ull_conn_tx_lll_enqueue+0x60>
    cc78:	4770      	bx	lr
    cc7a:	bf00      	nop
    cc7c:	0001525c 	.word	0x0001525c
    cc80:	20001754 	.word	0x20001754
    cc84:	0001570c 	.word	0x0001570c
    cc88:	00015778 	.word	0x00015778

0000cc8c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    cc8c:	4901      	ldr	r1, [pc, #4]	; (cc94 <ull_conn_link_tx_release+0x8>)
    cc8e:	f7f7 bcff 	b.w	4690 <mem_release>
    cc92:	bf00      	nop
    cc94:	20001754 	.word	0x20001754

0000cc98 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
    cc98:	4b01      	ldr	r3, [pc, #4]	; (cca0 <ull_conn_ack_last_idx_get+0x8>)
}
    cc9a:	78d8      	ldrb	r0, [r3, #3]
    cc9c:	4770      	bx	lr
    cc9e:	bf00      	nop
    cca0:	20000294 	.word	0x20000294

0000cca4 <ull_conn_ack_peek>:
{
    cca4:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    cca6:	4b0b      	ldr	r3, [pc, #44]	; (ccd4 <ull_conn_ack_peek+0x30>)
    cca8:	789c      	ldrb	r4, [r3, #2]
    ccaa:	78de      	ldrb	r6, [r3, #3]
    ccac:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
    ccae:	42b4      	cmp	r4, r6
    ccb0:	d00d      	beq.n	ccce <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
    ccb2:	3304      	adds	r3, #4
    ccb4:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
    ccb8:	4605      	mov	r5, r0
    ccba:	1918      	adds	r0, r3, r4
    ccbc:	d005      	beq.n	ccca <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
    ccbe:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
    ccc0:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
    ccc2:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
    ccc4:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
    ccc6:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    ccc8:	6818      	ldr	r0, [r3, #0]
}
    ccca:	bcf0      	pop	{r4, r5, r6, r7}
    cccc:	4770      	bx	lr
		return NULL;
    ccce:	2000      	movs	r0, #0
    ccd0:	e7fb      	b.n	ccca <ull_conn_ack_peek+0x26>
    ccd2:	bf00      	nop
    ccd4:	20000294 	.word	0x20000294

0000ccd8 <ull_conn_ack_by_last_peek>:
{
    ccd8:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    ccda:	4b09      	ldr	r3, [pc, #36]	; (cd00 <ull_conn_ack_by_last_peek+0x28>)
    ccdc:	789c      	ldrb	r4, [r3, #2]
    ccde:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
    cce0:	4284      	cmp	r4, r0
    cce2:	d00b      	beq.n	ccfc <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
    cce4:	3304      	adds	r3, #4
    cce6:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
    ccea:	1918      	adds	r0, r3, r4
    ccec:	d004      	beq.n	ccf8 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
    ccee:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
    ccf0:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
    ccf2:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
    ccf4:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    ccf6:	6818      	ldr	r0, [r3, #0]
}
    ccf8:	bc30      	pop	{r4, r5}
    ccfa:	4770      	bx	lr
		return NULL;
    ccfc:	2000      	movs	r0, #0
    ccfe:	e7fb      	b.n	ccf8 <ull_conn_ack_by_last_peek+0x20>
    cd00:	20000294 	.word	0x20000294

0000cd04 <ull_conn_ack_dequeue>:
{
    cd04:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
    cd06:	4b0a      	ldr	r3, [pc, #40]	; (cd30 <ull_conn_ack_dequeue+0x2c>)
	u8_t _first = *first; /* Copy read-index */
    cd08:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    cd0a:	78da      	ldrb	r2, [r3, #3]
    cd0c:	7818      	ldrb	r0, [r3, #0]
    cd0e:	785c      	ldrb	r4, [r3, #1]
    cd10:	428a      	cmp	r2, r1
    cd12:	d00a      	beq.n	cd2a <ull_conn_ack_dequeue+0x26>
	_first += 1U;
    cd14:	1c4a      	adds	r2, r1, #1
    cd16:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    cd18:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    cd1c:	4294      	cmp	r4, r2
    cd1e:	bf08      	it	eq
    cd20:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    cd22:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    cd24:	709a      	strb	r2, [r3, #2]
}
    cd26:	bc10      	pop	{r4}
    cd28:	4770      	bx	lr
		return NULL;
    cd2a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
    cd2c:	e7fb      	b.n	cd26 <ull_conn_ack_dequeue+0x22>
    cd2e:	bf00      	nop
    cd30:	20000294 	.word	0x20000294

0000cd34 <ull_conn_lll_ack_enqueue>:
{
    cd34:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    cd36:	4a13      	ldr	r2, [pc, #76]	; (cd84 <ull_conn_lll_ack_enqueue+0x50>)
    cd38:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    cd3a:	7855      	ldrb	r5, [r2, #1]
    cd3c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    cd3e:	1c73      	adds	r3, r6, #1
    cd40:	b2db      	uxtb	r3, r3
		last = 0U;
    cd42:	429d      	cmp	r5, r3
    cd44:	bf08      	it	eq
    cd46:	2300      	moveq	r3, #0
	if (last == first) {
    cd48:	429c      	cmp	r4, r3
    cd4a:	d00a      	beq.n	cd62 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    cd4c:	4615      	mov	r5, r2
    cd4e:	f815 4b04 	ldrb.w	r4, [r5], #4
    cd52:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
    cd56:	192e      	adds	r6, r5, r4
    cd58:	d003      	beq.n	cd62 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
    cd5a:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
    cd5c:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
    cd5e:	6071      	str	r1, [r6, #4]
}
    cd60:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
    cd62:	4a09      	ldr	r2, [pc, #36]	; (cd88 <ull_conn_lll_ack_enqueue+0x54>)
    cd64:	4909      	ldr	r1, [pc, #36]	; (cd8c <ull_conn_lll_ack_enqueue+0x58>)
    cd66:	480a      	ldr	r0, [pc, #40]	; (cd90 <ull_conn_lll_ack_enqueue+0x5c>)
    cd68:	f240 53a1 	movw	r3, #1441	; 0x5a1
    cd6c:	f006 ffc2 	bl	13cf4 <printk>
    cd70:	4040      	eors	r0, r0
    cd72:	f380 8811 	msr	BASEPRI, r0
    cd76:	f04f 0003 	mov.w	r0, #3
    cd7a:	df02      	svc	2
	lll_tx->handle = handle;
    cd7c:	2300      	movs	r3, #0
    cd7e:	801b      	strh	r3, [r3, #0]
    cd80:	deff      	udf	#255	; 0xff
    cd82:	bf00      	nop
    cd84:	20000294 	.word	0x20000294
    cd88:	0001570c 	.word	0x0001570c
    cd8c:	00015768 	.word	0x00015768
    cd90:	0001525c 	.word	0x0001525c

0000cd94 <ull_conn_tx_ack>:
{
    cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
    cd96:	7953      	ldrb	r3, [r2, #5]
{
    cd98:	b083      	sub	sp, #12
    cd9a:	4614      	mov	r4, r2
    cd9c:	4605      	mov	r5, r0
    cd9e:	460f      	mov	r7, r1
	LL_ASSERT(pdu_tx->len);
    cda0:	2b00      	cmp	r3, #0
    cda2:	d034      	beq.n	ce0e <ull_conn_tx_ack+0x7a>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    cda4:	7923      	ldrb	r3, [r4, #4]
    cda6:	f003 0203 	and.w	r2, r3, #3
    cdaa:	2a03      	cmp	r2, #3
    cdac:	d016      	beq.n	cddc <ull_conn_tx_ack+0x48>
	} else if (handle != 0xFFFF) {
    cdae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cdb2:	4295      	cmp	r5, r2
    cdb4:	d10a      	bne.n	cdcc <ull_conn_tx_ack+0x38>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    cdb6:	f36f 0301 	bfc	r3, #0, #2
    cdba:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
    cdbc:	2600      	movs	r6, #0
	ll_tx_ack_put(handle, tx);
    cdbe:	4621      	mov	r1, r4
    cdc0:	4628      	mov	r0, r5
    cdc2:	f7fc f871 	bl	8ea8 <ll_tx_ack_put>
}
    cdc6:	4630      	mov	r0, r6
    cdc8:	b003      	add	sp, #12
    cdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cdcc:	48c4      	ldr	r0, [pc, #784]	; (d0e0 <ull_conn_tx_ack+0x34c>)
    cdce:	462a      	mov	r2, r5
    cdd0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    cdd4:	f7f7 fc74 	bl	46c0 <mem_get>
    cdd8:	4606      	mov	r6, r0
    cdda:	e7f0      	b.n	cdbe <ull_conn_tx_ack+0x2a>
		if (handle != 0xFFFF) {
    cddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cde0:	429d      	cmp	r5, r3
    cde2:	d122      	bne.n	ce2a <ull_conn_tx_ack+0x96>
	struct ll_conn *conn = NULL;
    cde4:	2600      	movs	r6, #0
		if (link->next == (void *)tx) {
    cde6:	6838      	ldr	r0, [r7, #0]
    cde8:	4284      	cmp	r4, r0
    cdea:	f000 8098 	beq.w	cf1e <ull_conn_tx_ack+0x18a>
			LL_ASSERT(!link->next);
    cdee:	2800      	cmp	r0, #0
    cdf0:	d0e5      	beq.n	cdbe <ull_conn_tx_ack+0x2a>
    cdf2:	4abc      	ldr	r2, [pc, #752]	; (d0e4 <ull_conn_tx_ack+0x350>)
    cdf4:	49bc      	ldr	r1, [pc, #752]	; (d0e8 <ull_conn_tx_ack+0x354>)
    cdf6:	48bd      	ldr	r0, [pc, #756]	; (d0ec <ull_conn_tx_ack+0x358>)
    cdf8:	f240 53c3 	movw	r3, #1475	; 0x5c3
    cdfc:	f006 ff7a 	bl	13cf4 <printk>
    ce00:	4040      	eors	r0, r0
    ce02:	f380 8811 	msr	BASEPRI, r0
    ce06:	f04f 0003 	mov.w	r0, #3
    ce0a:	df02      	svc	2
    ce0c:	e7d7      	b.n	cdbe <ull_conn_tx_ack+0x2a>
	LL_ASSERT(pdu_tx->len);
    ce0e:	4ab5      	ldr	r2, [pc, #724]	; (d0e4 <ull_conn_tx_ack+0x350>)
    ce10:	49b7      	ldr	r1, [pc, #732]	; (d0f0 <ull_conn_tx_ack+0x35c>)
    ce12:	48b6      	ldr	r0, [pc, #728]	; (d0ec <ull_conn_tx_ack+0x358>)
    ce14:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
    ce18:	f006 ff6c 	bl	13cf4 <printk>
    ce1c:	4040      	eors	r0, r0
    ce1e:	f380 8811 	msr	BASEPRI, r0
    ce22:	f04f 0003 	mov.w	r0, #3
    ce26:	df02      	svc	2
    ce28:	e7bc      	b.n	cda4 <ull_conn_tx_ack+0x10>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ce2a:	48ad      	ldr	r0, [pc, #692]	; (d0e0 <ull_conn_tx_ack+0x34c>)
    ce2c:	462a      	mov	r2, r5
    ce2e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    ce32:	f7f7 fc45 	bl	46c0 <mem_get>
    ce36:	79e3      	ldrb	r3, [r4, #7]
    ce38:	3b02      	subs	r3, #2
    ce3a:	4606      	mov	r6, r0
	switch (pdu_tx->llctrl.opcode) {
    ce3c:	2b16      	cmp	r3, #22
    ce3e:	d872      	bhi.n	cf26 <ull_conn_tx_ack+0x192>
    ce40:	e8df f013 	tbh	[pc, r3, lsl #1]
    ce44:	00dd00f9 	.word	0x00dd00f9
    ce48:	0071009e 	.word	0x0071009e
    ce4c:	00710071 	.word	0x00710071
    ce50:	00710071 	.word	0x00710071
    ce54:	001700cc 	.word	0x001700cc
    ce58:	00a90071 	.word	0x00a90071
    ce5c:	00710071 	.word	0x00710071
    ce60:	00a50071 	.word	0x00a50071
    ce64:	00710071 	.word	0x00710071
    ce68:	010000b3 	.word	0x010000b3
    ce6c:	007e0077 	.word	0x007e0077
    ce70:	00bb      	.short	0x00bb
		if (!conn->lll.role) {
    ce72:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    ce76:	2b00      	cmp	r3, #0
    ce78:	f2c0 8082 	blt.w	cf80 <ull_conn_tx_ack+0x1ec>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce7c:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ce7e:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce80:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    ce84:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ce86:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
    ce88:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce8a:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    ce8c:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
    ce8e:	f200 1155 	addw	r1, r0, #341	; 0x155
    ce92:	18a0      	adds	r0, r4, r2
    ce94:	f007 fa41 	bl	1431a <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    ce98:	f896 3153 	ldrb.w	r3, [r6, #339]	; 0x153
    ce9c:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    ce9e:	f896 3154 	ldrb.w	r3, [r6, #340]	; 0x154
    cea2:	7463      	strb	r3, [r4, #17]
	lll_trng_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
    cea4:	210c      	movs	r1, #12
    cea6:	f104 0012 	add.w	r0, r4, #18
    ceaa:	f002 f8c9 	bl	f040 <lll_trng_isr_get>
	    conn->tx_head &&
    ceae:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	if (
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	f000 80ed 	beq.w	d092 <ull_conn_tx_ack+0x2fe>
	    !conn->llcp_enc.pause_tx &&
    ceb8:	f896 2152 	ldrb.w	r2, [r6, #338]	; 0x152
	    conn->tx_head &&
    cebc:	0791      	lsls	r1, r2, #30
    cebe:	f100 80e8 	bmi.w	d092 <ull_conn_tx_ack+0x2fe>
	    !conn->llcp_phy.pause_tx &&
    cec2:	f896 21ab 	ldrb.w	r2, [r6, #427]	; 0x1ab
    cec6:	07d2      	lsls	r2, r2, #31
    cec8:	f100 80e3 	bmi.w	d092 <ull_conn_tx_ack+0x2fe>
		if (conn->tx_head == conn->tx_data) {
    cecc:	f8d6 21bc 	ldr.w	r2, [r6, #444]	; 0x1bc
    ced0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    ced2:	bf04      	itt	eq
    ced4:	681a      	ldreq	r2, [r3, #0]
    ced6:	f8c6 21bc 	streq.w	r2, [r6, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    ceda:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
    cede:	2a00      	cmp	r2, #0
    cee0:	f000 810e 	beq.w	d100 <ull_conn_tx_ack+0x36c>
	tx->next = conn->tx_ctrl_last->next;
    cee4:	f8d6 31b8 	ldr.w	r3, [r6, #440]	; 0x1b8
    cee8:	681a      	ldr	r2, [r3, #0]
    ceea:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
    ceec:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
    ceee:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
    cef2:	6823      	ldr	r3, [r4, #0]
	if (!tx->next) {
    cef4:	2b00      	cmp	r3, #0
    cef6:	f000 80d7 	beq.w	d0a8 <ull_conn_tx_ack+0x314>
		if (link->next == (void *)tx) {
    cefa:	683b      	ldr	r3, [r7, #0]
    cefc:	2b00      	cmp	r3, #0
    cefe:	f47f af62 	bne.w	cdc6 <ull_conn_tx_ack+0x32>
			LL_ASSERT(link->next);
    cf02:	4a78      	ldr	r2, [pc, #480]	; (d0e4 <ull_conn_tx_ack+0x350>)
    cf04:	497b      	ldr	r1, [pc, #492]	; (d0f4 <ull_conn_tx_ack+0x360>)
    cf06:	4879      	ldr	r0, [pc, #484]	; (d0ec <ull_conn_tx_ack+0x358>)
    cf08:	f240 53bc 	movw	r3, #1468	; 0x5bc
    cf0c:	f006 fef2 	bl	13cf4 <printk>
    cf10:	4040      	eors	r0, r0
    cf12:	f380 8811 	msr	BASEPRI, r0
    cf16:	f04f 0003 	mov.w	r0, #3
    cf1a:	df02      	svc	2
    cf1c:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
    cf1e:	4976      	ldr	r1, [pc, #472]	; (d0f8 <ull_conn_tx_ack+0x364>)
    cf20:	f7f7 fbb6 	bl	4690 <mem_release>
			return conn;
    cf24:	e74f      	b.n	cdc6 <ull_conn_tx_ack+0x32>
		if (link->next == (void *)tx) {
    cf26:	6838      	ldr	r0, [r7, #0]
    cf28:	42a0      	cmp	r0, r4
    cf2a:	f47f af60 	bne.w	cdee <ull_conn_tx_ack+0x5a>
    cf2e:	4620      	mov	r0, r4
    cf30:	e7f5      	b.n	cf1e <ull_conn_tx_ack+0x18a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    cf32:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
    cf36:	2202      	movs	r2, #2
    cf38:	f362 0301 	bfi	r3, r2, #0, #2
    cf3c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
    cf40:	f996 303d 	ldrsb.w	r3, [r6, #61]	; 0x3d
    cf44:	2b00      	cmp	r3, #0
    cf46:	da14      	bge.n	cf72 <ull_conn_tx_ack+0x1de>
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    cf48:	496c      	ldr	r1, [pc, #432]	; (d0fc <ull_conn_tx_ack+0x368>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
    cf4a:	f896 2064 	ldrb.w	r2, [r6, #100]	; 0x64
    cf4e:	f896 31aa 	ldrb.w	r3, [r6, #426]	; 0x1aa
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    cf52:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
    cf54:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    cf58:	f10d 0c08 	add.w	ip, sp, #8
    cf5c:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
    cf60:	f003 0307 	and.w	r3, r3, #7
    cf64:	4463      	add	r3, ip
    cf66:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    cf6a:	f363 1206 	bfi	r2, r3, #4, #3
    cf6e:	f886 2064 	strb.w	r2, [r6, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    cf72:	f896 31ab 	ldrb.w	r3, [r6, #427]	; 0x1ab
    cf76:	f36f 0300 	bfc	r3, #0, #1
    cf7a:	f886 31ab 	strb.w	r3, [r6, #427]	; 0x1ab
		break;
    cf7e:	e732      	b.n	cde6 <ull_conn_tx_ack+0x52>
			conn->llcp_enc.pause_tx = 1U;
    cf80:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
    cf84:	f043 0302 	orr.w	r3, r3, #2
    cf88:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
    cf8c:	e72b      	b.n	cde6 <ull_conn_tx_ack+0x52>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
    cf8e:	7a23      	ldrb	r3, [r4, #8]
    cf90:	2b03      	cmp	r3, #3
    cf92:	f47f af28 	bne.w	cde6 <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_rx = 0U;
    cf96:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
    cf9a:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
    cf9c:	f023 0303 	bic.w	r3, r3, #3
    cfa0:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
    cfa4:	f8a6 20cc 	strh.w	r2, [r6, #204]	; 0xcc
		break;
    cfa8:	e71d      	b.n	cde6 <ull_conn_tx_ack+0x52>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
    cfaa:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
    cfae:	2202      	movs	r2, #2
    cfb0:	f362 0302 	bfi	r3, r2, #0, #3
    cfb4:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
    cfb8:	e715      	b.n	cde6 <ull_conn_tx_ack+0x52>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    cfba:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
    cfbe:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    cfc2:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    cfc6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    cfca:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    cfce:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    cfd2:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
    cfd6:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
    cfda:	e704      	b.n	cde6 <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_tx = 1U;
    cfdc:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
    cfe0:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
    cfe4:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
    cfe8:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
    cfec:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
    cff0:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
    cff4:	f043 0306 	orr.w	r3, r3, #6
    cff8:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
    cffc:	e6f3      	b.n	cde6 <ull_conn_tx_ack+0x52>
		memcpy(&conn->llcp.encryption.skd[0],
    cffe:	2208      	movs	r2, #8
    d000:	f104 0112 	add.w	r1, r4, #18
    d004:	30ee      	adds	r0, #238	; 0xee
    d006:	f007 f988 	bl	1431a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
    d00a:	2204      	movs	r2, #4
    d00c:	f104 011a 	add.w	r1, r4, #26
    d010:	f106 0098 	add.w	r0, r6, #152	; 0x98
    d014:	f007 f981 	bl	1431a <memcpy>
		conn->llcp_enc.pause_tx = 1U;
    d018:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
    d01c:	f8b6 10ca 	ldrh.w	r1, [r6, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
    d020:	f896 2150 	ldrb.w	r2, [r6, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
    d024:	f8a6 10cc 	strh.w	r1, [r6, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
    d028:	f043 0302 	orr.w	r3, r3, #2
    d02c:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
    d030:	f886 2151 	strb.w	r2, [r6, #337]	; 0x151
		break;
    d034:	e6d7      	b.n	cde6 <ull_conn_tx_ack+0x52>
		u8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
    d036:	7a21      	ldrb	r1, [r4, #8]
    d038:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
    d03a:	bf08      	it	eq
    d03c:	2116      	moveq	r1, #22
    d03e:	f7ff fb0f 	bl	c660 <conn_cleanup>
	break;
    d042:	e6d0      	b.n	cde6 <ull_conn_tx_ack+0x52>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    d044:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
    d048:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
    d04c:	428b      	cmp	r3, r1
    d04e:	f43f aeca 	beq.w	cde6 <ull_conn_tx_ack+0x52>
			switch (conn->llcp_length.state) {
    d052:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
    d056:	f002 0307 	and.w	r3, r2, #7
    d05a:	2b03      	cmp	r3, #3
    d05c:	d005      	beq.n	d06a <ull_conn_tx_ack+0x2d6>
    d05e:	3303      	adds	r3, #3
    d060:	f003 0307 	and.w	r3, r3, #7
    d064:	2b01      	cmp	r3, #1
    d066:	f63f af5e 	bhi.w	cf26 <ull_conn_tx_ack+0x192>
				conn->lll.max_tx_octets =
    d06a:	f8b6 319e 	ldrh.w	r3, [r6, #414]	; 0x19e
    d06e:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
				if (conn->llcp_length.state ==
    d072:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
    d076:	f8b6 01a2 	ldrh.w	r0, [r6, #418]	; 0x1a2
    d07a:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
				if (conn->llcp_length.state ==
    d07e:	2b05      	cmp	r3, #5
    d080:	d027      	beq.n	d0d2 <ull_conn_tx_ack+0x33e>
				if (!conn->llcp_length.cache.tx_octets) {
    d082:	f8b6 31a4 	ldrh.w	r3, [r6, #420]	; 0x1a4
    d086:	b9b3      	cbnz	r3, d0b6 <ull_conn_tx_ack+0x322>
					conn->llcp_length.ack =
    d088:	f886 1199 	strb.w	r1, [r6, #409]	; 0x199
					conn->procedure_expire = 0U;
    d08c:	f8a6 30cc 	strh.w	r3, [r6, #204]	; 0xcc
					break;
    d090:	e6a9      	b.n	cde6 <ull_conn_tx_ack+0x52>
		if (!conn->tx_ctrl) {
    d092:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
    d096:	2a00      	cmp	r2, #0
    d098:	f47f af24 	bne.w	cee4 <ull_conn_tx_ack+0x150>
			tx->next = conn->tx_head;
    d09c:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
    d09e:	e9c6 446c 	strd	r4, r4, [r6, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    d0a2:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
    d0a6:	e725      	b.n	cef4 <ull_conn_tx_ack+0x160>
		if (link->next == (void *)tx) {
    d0a8:	683b      	ldr	r3, [r7, #0]
		conn->tx_data_last = tx;
    d0aa:	f8c6 41c0 	str.w	r4, [r6, #448]	; 0x1c0
		if (link->next == (void *)tx) {
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	f47f ae89 	bne.w	cdc6 <ull_conn_tx_ack+0x32>
    d0b4:	e725      	b.n	cf02 <ull_conn_tx_ack+0x16e>
				conn->llcp_length.cache.tx_octets = 0;
    d0b6:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    d0b8:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
    d0bc:	f8a6 319e 	strh.w	r3, [r6, #414]	; 0x19e
				conn->llcp_length.tx_time =
    d0c0:	f8b6 31a6 	ldrh.w	r3, [r6, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    d0c4:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    d0c8:	f8a6 11a4 	strh.w	r1, [r6, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    d0cc:	f8a6 31a2 	strh.w	r3, [r6, #418]	; 0x1a2
				break;
    d0d0:	e689      	b.n	cde6 <ull_conn_tx_ack+0x52>
					conn->llcp_length.state =
    d0d2:	2304      	movs	r3, #4
    d0d4:	f363 0202 	bfi	r2, r3, #0, #3
    d0d8:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
					break;
    d0dc:	e683      	b.n	cde6 <ull_conn_tx_ack+0x52>
    d0de:	bf00      	nop
    d0e0:	200013fc 	.word	0x200013fc
    d0e4:	0001570c 	.word	0x0001570c
    d0e8:	0001590c 	.word	0x0001590c
    d0ec:	0001525c 	.word	0x0001525c
    d0f0:	00015900 	.word	0x00015900
    d0f4:	00015918 	.word	0x00015918
    d0f8:	200016d0 	.word	0x200016d0
    d0fc:	00015924 	.word	0x00015924
			tx->next = conn->tx_head->next;
    d100:	681a      	ldr	r2, [r3, #0]
    d102:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
    d104:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
    d106:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
    d108:	e9c6 446d 	strd	r4, r4, [r6, #436]	; 0x1b4
    d10c:	e6f2      	b.n	cef4 <ull_conn_tx_ack+0x160>
    d10e:	bf00      	nop

0000d110 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
    d110:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    d114:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
    d118:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
    d11a:	bf03      	ittte	eq
    d11c:	3301      	addeq	r3, #1
    d11e:	f880 30e8 	strbeq.w	r3, [r0, #232]	; 0xe8
	return 0;
    d122:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
    d124:	200c      	movne	r0, #12
}
    d126:	4770      	bx	lr

0000d128 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
    d128:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	if (lll->enc_tx) {
    d12c:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	switch (lll->phy_tx_time) {
    d130:	f3c3 1302 	ubfx	r3, r3, #4, #3
    d134:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    d136:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
	return max_tx_octets;
    d13a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    d13e:	bf15      	itete	ne
    d140:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    d142:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    d144:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    d146:	3b0b      	subeq	r3, #11
    d148:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
    d14a:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
    d14c:	bf44      	itt	mi
    d14e:	3b04      	submi	r3, #4
    d150:	b29b      	uxthmi	r3, r3
}
    d152:	4298      	cmp	r0, r3
    d154:	bf28      	it	cs
    d156:	4618      	movcs	r0, r3
    d158:	4770      	bx	lr
    d15a:	bf00      	nop

0000d15c <ticker_op_cb>:

static void ticker_op_cb(u32_t status, void *param)
{
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d15c:	b900      	cbnz	r0, d160 <ticker_op_cb+0x4>
    d15e:	4770      	bx	lr
{
    d160:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d162:	4a07      	ldr	r2, [pc, #28]	; (d180 <ticker_op_cb+0x24>)
    d164:	4907      	ldr	r1, [pc, #28]	; (d184 <ticker_op_cb+0x28>)
    d166:	4808      	ldr	r0, [pc, #32]	; (d188 <ticker_op_cb+0x2c>)
    d168:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
    d16c:	f006 fdc2 	bl	13cf4 <printk>
    d170:	4040      	eors	r0, r0
    d172:	f380 8811 	msr	BASEPRI, r0
    d176:	f04f 0003 	mov.w	r0, #3
    d17a:	df02      	svc	2
}
    d17c:	bd08      	pop	{r3, pc}
    d17e:	bf00      	nop
    d180:	00015930 	.word	0x00015930
    d184:	00015780 	.word	0x00015780
    d188:	0001525c 	.word	0x0001525c

0000d18c <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(u32_t status, void *param)
    d18c:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    d18e:	4a07      	ldr	r2, [pc, #28]	; (d1ac <ticker_op_stop_adv_cb.part.0+0x20>)
    d190:	4907      	ldr	r1, [pc, #28]	; (d1b0 <ticker_op_stop_adv_cb.part.0+0x24>)
    d192:	4808      	ldr	r0, [pc, #32]	; (d1b4 <ticker_op_stop_adv_cb.part.0+0x28>)
    d194:	f44f 73de 	mov.w	r3, #444	; 0x1bc
    d198:	f006 fdac 	bl	13cf4 <printk>
    d19c:	4040      	eors	r0, r0
    d19e:	f380 8811 	msr	BASEPRI, r0
    d1a2:	f04f 0003 	mov.w	r0, #3
    d1a6:	df02      	svc	2
}
    d1a8:	bd08      	pop	{r3, pc}
    d1aa:	bf00      	nop
    d1ac:	00015930 	.word	0x00015930
    d1b0:	00015974 	.word	0x00015974
    d1b4:	0001525c 	.word	0x0001525c

0000d1b8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    d1b8:	2801      	cmp	r0, #1
    d1ba:	d000      	beq.n	d1be <ticker_op_stop_adv_cb+0x6>
    d1bc:	4770      	bx	lr
{
    d1be:	b510      	push	{r4, lr}
    d1c0:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    d1c2:	f7fb fecd 	bl	8f60 <ull_disable_mark_get>
    d1c6:	4284      	cmp	r4, r0
    d1c8:	d003      	beq.n	d1d2 <ticker_op_stop_adv_cb+0x1a>
}
    d1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1ce:	f7ff bfdd 	b.w	d18c <ticker_op_stop_adv_cb.part.0>
    d1d2:	bd10      	pop	{r4, pc}

0000d1d4 <ull_slave_ticker_cb>:
{
    d1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1d8:	4605      	mov	r5, r0
    d1da:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    d1dc:	4618      	mov	r0, r3
    d1de:	4629      	mov	r1, r5
{
    d1e0:	461c      	mov	r4, r3
    d1e2:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    d1e4:	f7f3 fd0c 	bl	c00 <ull_conn_llcp>
		if (ret) {
    d1e8:	2800      	cmp	r0, #0
    d1ea:	d13a      	bne.n	d262 <ull_slave_ticker_cb+0x8e>
    d1ec:	7c23      	ldrb	r3, [r4, #16]
    d1ee:	3301      	adds	r3, #1
    d1f0:	b2db      	uxtb	r3, r3
    d1f2:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
    d1f4:	b33b      	cbz	r3, d246 <ull_slave_ticker_cb+0x72>
	p.ticks_at_expire = ticks_at_expire;
    d1f6:	4e1c      	ldr	r6, [pc, #112]	; (d268 <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
    d1f8:	4b1c      	ldr	r3, [pc, #112]	; (d26c <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
    d1fa:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d1fc:	2200      	movs	r2, #0
	p.param = &conn->lll;
    d1fe:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d202:	4611      	mov	r1, r2
    d204:	2001      	movs	r0, #1
	mfy.param = &p;
    d206:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
    d208:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
    d20c:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
    d20e:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d212:	f7f7 fafb 	bl	480c <mayfly_enqueue>
	LL_ASSERT(!err);
    d216:	b940      	cbnz	r0, d22a <ull_slave_ticker_cb+0x56>
	ull_conn_tx_demux(UINT8_MAX);
    d218:	20ff      	movs	r0, #255	; 0xff
    d21a:	f7ff f9a3 	bl	c564 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    d21e:	4620      	mov	r0, r4
    d220:	21ff      	movs	r1, #255	; 0xff
}
    d222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    d226:	f7ff bc3b 	b.w	caa0 <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
    d22a:	4a11      	ldr	r2, [pc, #68]	; (d270 <ull_slave_ticker_cb+0x9c>)
    d22c:	4911      	ldr	r1, [pc, #68]	; (d274 <ull_slave_ticker_cb+0xa0>)
    d22e:	4812      	ldr	r0, [pc, #72]	; (d278 <ull_slave_ticker_cb+0xa4>)
    d230:	f44f 73c0 	mov.w	r3, #384	; 0x180
    d234:	f006 fd5e 	bl	13cf4 <printk>
    d238:	4040      	eors	r0, r0
    d23a:	f380 8811 	msr	BASEPRI, r0
    d23e:	f04f 0003 	mov.w	r0, #3
    d242:	df02      	svc	2
    d244:	e7e8      	b.n	d218 <ull_slave_ticker_cb+0x44>
	LL_ASSERT(ref);
    d246:	4a0a      	ldr	r2, [pc, #40]	; (d270 <ull_slave_ticker_cb+0x9c>)
    d248:	490c      	ldr	r1, [pc, #48]	; (d27c <ull_slave_ticker_cb+0xa8>)
    d24a:	480b      	ldr	r0, [pc, #44]	; (d278 <ull_slave_ticker_cb+0xa4>)
    d24c:	f44f 73ba 	mov.w	r3, #372	; 0x174
    d250:	f006 fd50 	bl	13cf4 <printk>
    d254:	4040      	eors	r0, r0
    d256:	f380 8811 	msr	BASEPRI, r0
    d25a:	f04f 0003 	mov.w	r0, #3
    d25e:	df02      	svc	2
    d260:	e7c9      	b.n	d1f6 <ull_slave_ticker_cb+0x22>
}
    d262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d266:	bf00      	nop
    d268:	200017c8 	.word	0x200017c8
    d26c:	2000036c 	.word	0x2000036c
    d270:	00015930 	.word	0x00015930
    d274:	000154c4 	.word	0x000154c4
    d278:	0001525c 	.word	0x0001525c
    d27c:	0001562c 	.word	0x0001562c

0000d280 <ll_start_enc_req_send>:
{
    d280:	b570      	push	{r4, r5, r6, lr}
    d282:	460e      	mov	r6, r1
    d284:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
    d286:	f7fd f9bb 	bl	a600 <ll_connected_get>
	if (!conn) {
    d28a:	2800      	cmp	r0, #0
    d28c:	d040      	beq.n	d310 <ll_start_enc_req_send+0x90>
	if (error_code) {
    d28e:	4604      	mov	r4, r0
    d290:	b95e      	cbnz	r6, d2aa <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
    d292:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
    d296:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    d29a:	429a      	cmp	r2, r3
    d29c:	d003      	beq.n	d2a6 <ll_start_enc_req_send+0x26>
    d29e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
    d2a2:	2b03      	cmp	r3, #3
    d2a4:	d026      	beq.n	d2f4 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
    d2a6:	200c      	movs	r0, #12
}
    d2a8:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
    d2aa:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
    d2ae:	f010 0004 	ands.w	r0, r0, #4
    d2b2:	d112      	bne.n	d2da <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
    d2b4:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    d2b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    d2bc:	429a      	cmp	r2, r3
    d2be:	d0f2      	beq.n	d2a6 <ll_start_enc_req_send+0x26>
    d2c0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    d2c4:	2b03      	cmp	r3, #3
    d2c6:	d1ee      	bne.n	d2a6 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    d2c8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
    d2cc:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    d2d0:	f360 0301 	bfi	r3, r0, #0, #2
    d2d4:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
    d2d8:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
    d2da:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
			if (conn->llcp_terminate.ack !=
    d2de:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
    d2e2:	4293      	cmp	r3, r2
    d2e4:	d1df      	bne.n	d2a6 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
    d2e6:	3301      	adds	r3, #1
    d2e8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
			conn->llcp_terminate.reason_own = error_code;
    d2ec:	f884 612a 	strb.w	r6, [r4, #298]	; 0x12a
	return 0;
    d2f0:	2000      	movs	r0, #0
}
    d2f2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
    d2f4:	4629      	mov	r1, r5
    d2f6:	2210      	movs	r2, #16
    d2f8:	f200 105d 	addw	r0, r0, #349	; 0x15d
    d2fc:	f007 f80d 	bl	1431a <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    d300:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    d304:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
    d308:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    d30a:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
    d30e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d310:	2002      	movs	r0, #2
}
    d312:	bd70      	pop	{r4, r5, r6, pc}

0000d314 <ticker_op_stop_scan_cb>:
}

static void ticker_op_stop_scan_cb(u32_t status, void *params)
{
	/* TODO: */
}
    d314:	4770      	bx	lr
    d316:	bf00      	nop

0000d318 <ticker_op_cb>:

static void ticker_op_cb(u32_t status, void *params)
{
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d318:	b900      	cbnz	r0, d31c <ticker_op_cb+0x4>
    d31a:	4770      	bx	lr
{
    d31c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d31e:	4a07      	ldr	r2, [pc, #28]	; (d33c <ticker_op_cb+0x24>)
    d320:	4907      	ldr	r1, [pc, #28]	; (d340 <ticker_op_cb+0x28>)
    d322:	4808      	ldr	r0, [pc, #32]	; (d344 <ticker_op_cb+0x2c>)
    d324:	f240 23b2 	movw	r3, #690	; 0x2b2
    d328:	f006 fce4 	bl	13cf4 <printk>
    d32c:	4040      	eors	r0, r0
    d32e:	f380 8811 	msr	BASEPRI, r0
    d332:	f04f 0003 	mov.w	r0, #3
    d336:	df02      	svc	2
}
    d338:	bd08      	pop	{r3, pc}
    d33a:	bf00      	nop
    d33c:	000159a4 	.word	0x000159a4
    d340:	00015780 	.word	0x00015780
    d344:	0001525c 	.word	0x0001525c

0000d348 <ull_master_ticker_cb>:
{
    d348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d34c:	4605      	mov	r5, r0
    d34e:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    d350:	4618      	mov	r0, r3
    d352:	4629      	mov	r1, r5
{
    d354:	461c      	mov	r4, r3
    d356:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    d358:	f7f3 fc52 	bl	c00 <ull_conn_llcp>
		if (ret) {
    d35c:	2800      	cmp	r0, #0
    d35e:	d141      	bne.n	d3e4 <ull_master_ticker_cb+0x9c>
    d360:	7c23      	ldrb	r3, [r4, #16]
    d362:	3301      	adds	r3, #1
    d364:	b2db      	uxtb	r3, r3
    d366:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
    d368:	b373      	cbz	r3, d3c8 <ull_master_ticker_cb+0x80>
	ull_conn_tx_demux(1);
    d36a:	2001      	movs	r0, #1
    d36c:	f7ff f8fa 	bl	c564 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 1);
    d370:	2101      	movs	r1, #1
    d372:	4620      	mov	r0, r4
    d374:	f7ff fb94 	bl	caa0 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
    d378:	4e1b      	ldr	r6, [pc, #108]	; (d3e8 <ull_master_ticker_cb+0xa0>)
	mfy.param = &p;
    d37a:	4b1c      	ldr	r3, [pc, #112]	; (d3ec <ull_master_ticker_cb+0xa4>)
	p.ticks_at_expire = ticks_at_expire;
    d37c:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d37e:	2200      	movs	r2, #0
	p.param = &conn->lll;
    d380:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d384:	4611      	mov	r1, r2
    d386:	2001      	movs	r0, #1
	mfy.param = &p;
    d388:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
    d38a:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
    d38e:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
    d390:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    d394:	f7f7 fa3a 	bl	480c <mayfly_enqueue>
	LL_ASSERT(!err);
    d398:	b940      	cbnz	r0, d3ac <ull_master_ticker_cb+0x64>
	ull_conn_tx_demux(UINT8_MAX);
    d39a:	20ff      	movs	r0, #255	; 0xff
    d39c:	f7ff f8e2 	bl	c564 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    d3a0:	4620      	mov	r0, r4
    d3a2:	21ff      	movs	r1, #255	; 0xff
}
    d3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    d3a8:	f7ff bb7a 	b.w	caa0 <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
    d3ac:	4a10      	ldr	r2, [pc, #64]	; (d3f0 <ull_master_ticker_cb+0xa8>)
    d3ae:	4911      	ldr	r1, [pc, #68]	; (d3f4 <ull_master_ticker_cb+0xac>)
    d3b0:	4811      	ldr	r0, [pc, #68]	; (d3f8 <ull_master_ticker_cb+0xb0>)
    d3b2:	f240 239e 	movw	r3, #670	; 0x29e
    d3b6:	f006 fc9d 	bl	13cf4 <printk>
    d3ba:	4040      	eors	r0, r0
    d3bc:	f380 8811 	msr	BASEPRI, r0
    d3c0:	f04f 0003 	mov.w	r0, #3
    d3c4:	df02      	svc	2
    d3c6:	e7e8      	b.n	d39a <ull_master_ticker_cb+0x52>
	LL_ASSERT(ref);
    d3c8:	4a09      	ldr	r2, [pc, #36]	; (d3f0 <ull_master_ticker_cb+0xa8>)
    d3ca:	490c      	ldr	r1, [pc, #48]	; (d3fc <ull_master_ticker_cb+0xb4>)
    d3cc:	480a      	ldr	r0, [pc, #40]	; (d3f8 <ull_master_ticker_cb+0xb0>)
    d3ce:	f44f 7323 	mov.w	r3, #652	; 0x28c
    d3d2:	f006 fc8f 	bl	13cf4 <printk>
    d3d6:	4040      	eors	r0, r0
    d3d8:	f380 8811 	msr	BASEPRI, r0
    d3dc:	f04f 0003 	mov.w	r0, #3
    d3e0:	df02      	svc	2
    d3e2:	e7c2      	b.n	d36a <ull_master_ticker_cb+0x22>
}
    d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3e8:	200017e0 	.word	0x200017e0
    d3ec:	2000037c 	.word	0x2000037c
    d3f0:	000159a4 	.word	0x000159a4
    d3f4:	000154c4 	.word	0x000154c4
    d3f8:	0001525c 	.word	0x0001525c
    d3fc:	0001562c 	.word	0x0001562c

0000d400 <ll_create_connection>:
{
    d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d404:	b08b      	sub	sp, #44	; 0x2c
    d406:	4606      	mov	r6, r0
    d408:	9304      	str	r3, [sp, #16]
    d40a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    d40e:	9305      	str	r3, [sp, #20]
	scan = ull_scan_is_disabled_get(0);
    d410:	2000      	movs	r0, #0
{
    d412:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d416:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    d41a:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
    d41e:	9303      	str	r3, [sp, #12]
    d420:	460f      	mov	r7, r1
    d422:	4690      	mov	r8, r2
	scan = ull_scan_is_disabled_get(0);
    d424:	f7fc fcee 	bl	9e04 <ull_scan_is_disabled_get>
	if (!scan) {
    d428:	b128      	cbz	r0, d436 <ll_create_connection+0x36>
	if (lll->conn) {
    d42a:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
    d42e:	4605      	mov	r5, r0
    d430:	f1bb 0f00 	cmp.w	fp, #0
    d434:	d003      	beq.n	d43e <ll_create_connection+0x3e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d436:	200c      	movs	r0, #12
}
    d438:	b00b      	add	sp, #44	; 0x2c
    d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	link = ll_rx_link_alloc();
    d43e:	f7fb fcd5 	bl	8dec <ll_rx_link_alloc>
	if (!link) {
    d442:	9006      	str	r0, [sp, #24]
    d444:	2800      	cmp	r0, #0
    d446:	f000 81e0 	beq.w	d80a <ll_create_connection+0x40a>
	conn = ll_conn_acquire();
    d44a:	f7fd f8bd 	bl	a5c8 <ll_conn_acquire>
	if (!conn) {
    d44e:	4604      	mov	r4, r0
    d450:	2800      	cmp	r0, #0
    d452:	f000 8243 	beq.w	d8dc <ll_create_connection+0x4dc>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    d456:	463b      	mov	r3, r7
    d458:	4632      	mov	r2, r6
    d45a:	4659      	mov	r1, fp
    d45c:	f105 001c 	add.w	r0, r5, #28
    d460:	f8cd 8000 	str.w	r8, [sp]
    d464:	f7f3 faf0 	bl	a48 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
    d468:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
    d46c:	9a04      	ldr	r2, [sp, #16]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    d46e:	9914      	ldr	r1, [sp, #80]	; 0x50
	lll->adv_addr_type = peer_addr_type;
    d470:	f362 1345 	bfi	r3, r2, #5, #1
    d474:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    d478:	2206      	movs	r2, #6
    d47a:	f105 003b 	add.w	r0, r5, #59	; 0x3b
    d47e:	f006 ff4c 	bl	1431a <memcpy>
	conn_lll = &conn->lll;
    d482:	f104 031c 	add.w	r3, r4, #28
    d486:	9307      	str	r3, [sp, #28]
	lll->conn_timeout = timeout;
    d488:	9b03      	ldr	r3, [sp, #12]
    d48a:	862b      	strh	r3, [r5, #48]	; 0x30
	lll->conn_ticks_slot = 0; /* TODO: */
    d48c:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	u32_t aa;
	u8_t transitions;
	u8_t bit_idx;
	u8_t retry;

	retry = 3U;
    d490:	2603      	movs	r6, #3
	lll_trng_get(access_addr, 4);
	aa = sys_get_le32(access_addr);

	bit_idx = 31U;
	transitions = 0U;
	consecutive_cnt = 1U;
    d492:	2701      	movs	r7, #1
	lll_trng_get(access_addr, 4);
    d494:	2104      	movs	r1, #4
    d496:	a808      	add	r0, sp, #32
    d498:	f001 fdc6 	bl	f028 <lll_trng_get>
	return ((u16_t)src[1] << 8) | src[0];
    d49c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    d4a0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    d4a4:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    d4a8:	f89d b020 	ldrb.w	fp, [sp, #32]
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d4ac:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    d4b0:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
	retry--;
    d4b4:	3e01      	subs	r6, #1
    d4b6:	ea4b 4b01 	orr.w	fp, fp, r1, lsl #16
    d4ba:	b2f6      	uxtb	r6, r6
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	ones_count_lsb8 = 0U;
	transitions_lsb16 = 0U;
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	consecutive_bit = (aa >> bit_idx) & 0x01;
    d4bc:	0bc9      	lsrs	r1, r1, #15
    d4be:	231e      	movs	r3, #30
	transitions = 0U;
    d4c0:	2000      	movs	r0, #0
	consecutive_cnt = 1U;
    d4c2:	f04f 0e01 	mov.w	lr, #1
    d4c6:	e00c      	b.n	d4e2 <ll_create_connection+0xe2>
		if (bit == consecutive_bit) {
			consecutive_cnt++;
		} else {
			consecutive_cnt = 1U;
			consecutive_bit = bit;
			transitions++;
    d4c8:	1c42      	adds	r2, r0, #1
					   (ones_count_lsb8 < 2)) ||
					  ((bit_idx < 4) &&
					   (ones_count_lsb8 < 3)))) ||
#endif /* CONFIG_BT_CTLR_PHY_CODED */
		    ((consecutive_cnt < 6) &&
		     (((bit_idx < 29) && (transitions < 1)) ||
    d4ca:	2b1b      	cmp	r3, #27
			transitions++;
    d4cc:	b2d2      	uxtb	r2, r2
		     (((bit_idx < 29) && (transitions < 1)) ||
    d4ce:	f240 820a 	bls.w	d8e6 <ll_create_connection+0x4e6>
			transitions++;
    d4d2:	4610      	mov	r0, r2
    d4d4:	4661      	mov	r1, ip
			consecutive_cnt = 1U;
    d4d6:	f04f 0e01 	mov.w	lr, #1

		/* It shall have no more than 24 transitions
		 * It shall have no more than eleven transitions in the least
		 * significant 16 bits.
		 */
		if ((transitions > 24) ||
    d4da:	2819      	cmp	r0, #25
    d4dc:	d01f      	beq.n	d51e <ll_create_connection+0x11e>
	while (bit_idx--) {
    d4de:	3b01      	subs	r3, #1
    d4e0:	d326      	bcc.n	d530 <ll_create_connection+0x130>
		bit = (aa >> bit_idx) & 0x01;
    d4e2:	fa2b fc03 	lsr.w	ip, fp, r3
    d4e6:	f00c 0c01 	and.w	ip, ip, #1
		if (bit == consecutive_bit) {
    d4ea:	458c      	cmp	ip, r1
    d4ec:	d1ec      	bne.n	d4c8 <ll_create_connection+0xc8>
			consecutive_cnt++;
    d4ee:	f10e 0c01 	add.w	ip, lr, #1
    d4f2:	fa5f fc8c 	uxtb.w	ip, ip
		if ((consecutive_cnt > 6) ||
    d4f6:	f1bc 0f06 	cmp.w	ip, #6
    d4fa:	d93d      	bls.n	d578 <ll_create_connection+0x178>
    d4fc:	4602      	mov	r2, r0
			if (consecutive_bit) {
    d4fe:	2900      	cmp	r1, #0
    d500:	f000 8169 	beq.w	d7d6 <ll_create_connection+0x3d6>
				aa &= ~BIT(bit_idx);
    d504:	fa07 f103 	lsl.w	r1, r7, r3
    d508:	ea2b 0b01 	bic.w	fp, fp, r1
				consecutive_bit = 0U;
    d50c:	2100      	movs	r1, #0
			if (transitions != transitions_prev) {
    d50e:	4290      	cmp	r0, r2
    d510:	d1e5      	bne.n	d4de <ll_create_connection+0xde>
				transitions++;
    d512:	3001      	adds	r0, #1
    d514:	b2c0      	uxtb	r0, r0
		if ((transitions > 24) ||
    d516:	2819      	cmp	r0, #25
				consecutive_cnt = 1U;
    d518:	f04f 0e01 	mov.w	lr, #1
		if ((transitions > 24) ||
    d51c:	d1df      	bne.n	d4de <ll_create_connection+0xde>
#if defined(CONFIG_BT_CTLR_PHY_CODED)
		    (transitions_lsb16 > 11) ||
#endif /* CONFIG_BT_CTLR_PHY_CODED */
		    0) {
			if (consecutive_bit) {
				aa &= ~(BIT(bit_idx + 1) - 1);
    d51e:	3301      	adds	r3, #1
    d520:	fa07 f303 	lsl.w	r3, r7, r3
			if (consecutive_bit) {
    d524:	2900      	cmp	r1, #0
    d526:	f000 815c 	beq.w	d7e2 <ll_create_connection+0x3e2>
				aa &= ~(BIT(bit_idx + 1) - 1);
    d52a:	425b      	negs	r3, r3
    d52c:	ea0b 0b03 	and.w	fp, fp, r3

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    d530:	4bd1      	ldr	r3, [pc, #836]	; (d878 <ll_create_connection+0x478>)
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    d532:	2104      	movs	r1, #4
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    d534:	ea8b 0303 	eor.w	r3, fp, r3
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    d538:	a809      	add	r0, sp, #36	; 0x24
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    d53a:	9309      	str	r3, [sp, #36]	; 0x24
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    d53c:	f7f7 fa58 	bl	49f0 <util_ones_count_get>
    d540:	2801      	cmp	r0, #1
    d542:	d909      	bls.n	d558 <ll_create_connection+0x158>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    d544:	fa1f f38b 	uxth.w	r3, fp
    d548:	ebb3 4f1b 	cmp.w	r3, fp, lsr #16
    d54c:	d118      	bne.n	d580 <ll_create_connection+0x180>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    d54e:	fa5f f38b 	uxtb.w	r3, fp
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    d552:	ebb3 6f1b 	cmp.w	r3, fp, lsr #24
    d556:	d113      	bne.n	d580 <ll_create_connection+0x180>
	LL_ASSERT(retry);
    d558:	2e00      	cmp	r6, #0
    d55a:	d19b      	bne.n	d494 <ll_create_connection+0x94>
    d55c:	4ac7      	ldr	r2, [pc, #796]	; (d87c <ll_create_connection+0x47c>)
    d55e:	49c8      	ldr	r1, [pc, #800]	; (d880 <ll_create_connection+0x480>)
    d560:	48c8      	ldr	r0, [pc, #800]	; (d884 <ll_create_connection+0x484>)
    d562:	f240 23d5 	movw	r3, #725	; 0x2d5
    d566:	f006 fbc5 	bl	13cf4 <printk>
    d56a:	4040      	eors	r0, r0
    d56c:	f380 8811 	msr	BASEPRI, r0
    d570:	f04f 0003 	mov.w	r0, #3
    d574:	df02      	svc	2
    d576:	e78d      	b.n	d494 <ll_create_connection+0x94>
		if ((consecutive_cnt > 6) ||
    d578:	f040 81be 	bne.w	d8f8 <ll_create_connection+0x4f8>
    d57c:	46e6      	mov	lr, ip
    d57e:	e7ae      	b.n	d4de <ll_create_connection+0xde>
	memcpy(conn_lll->access_addr, &access_addr,
    d580:	2204      	movs	r2, #4
    d582:	a908      	add	r1, sp, #32
    d584:	f104 0024 	add.w	r0, r4, #36	; 0x24
	dst[0] = val;
    d588:	f8cd b020 	str.w	fp, [sp, #32]
    d58c:	f006 fec5 	bl	1431a <memcpy>
	lll_trng_get(&conn_lll->crc_init[0], 3);
    d590:	2103      	movs	r1, #3
    d592:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d596:	f001 fd47 	bl	f028 <lll_trng_get>
	if (!conn_lll->link_tx_free) {
    d59a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	conn_lll->latency = latency;
    d59c:	9a05      	ldr	r2, [sp, #20]
	conn_lll->interval = interval;
    d59e:	f8a4 a02e 	strh.w	sl, [r4, #46]	; 0x2e
	conn_lll->handle = 0xFFFF;
    d5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    d5a6:	8622      	strh	r2, [r4, #48]	; 0x30
	conn_lll->handle = 0xFFFF;
    d5a8:	85a3      	strh	r3, [r4, #44]	; 0x2c
	if (!conn_lll->link_tx_free) {
    d5aa:	2800      	cmp	r0, #0
    d5ac:	f000 8129 	beq.w	d802 <ll_create_connection+0x402>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    d5b0:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    d5b4:	f104 0168 	add.w	r1, r4, #104	; 0x68
    d5b8:	f7f7 f8a6 	bl	4708 <memq_init>
	conn_lll->phy_tx = BIT(0);
    d5bc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
	conn_lll->sn = 0;
    d5c0:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    d5c4:	49b0      	ldr	r1, [pc, #704]	; (d888 <ll_create_connection+0x488>)
    d5c6:	6621      	str	r1, [r4, #96]	; 0x60
	conn_lll->phy_tx = BIT(0);
    d5c8:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
    d5cc:	f023 0307 	bic.w	r3, r3, #7
    d5d0:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    d5d4:	f043 0301 	orr.w	r3, r3, #1
	conn_lll->link_tx_free = NULL;
    d5d8:	2600      	movs	r6, #0
	conn_lll->sn = 0;
    d5da:	f022 0207 	bic.w	r2, r2, #7
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d5de:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
	conn_lll->phy_tx = BIT(0);
    d5e2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn_lll->rssi_latest = 0x7F;
    d5e6:	237f      	movs	r3, #127	; 0x7f
	conn_lll->sn = 0;
    d5e8:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	conn_lll->link_tx_free = NULL;
    d5ec:	67a6      	str	r6, [r4, #120]	; 0x78
	conn_lll->packet_tx_head_len = 0;
    d5ee:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
	conn_lll->latency_prepare = 0;
    d5f2:	8666      	strh	r6, [r4, #50]	; 0x32
	conn_lll->latency_event = 0;
    d5f4:	6366      	str	r6, [r4, #52]	; 0x34
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d5f6:	65e1      	str	r1, [r4, #92]	; 0x5c
	conn_lll->rssi_latest = 0x7F;
    d5f8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		ull_conn_chan_map_cpy(conn_lll->data_chan_map);
    d5fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
    d600:	f7fd fb38 	bl	ac74 <ull_conn_chan_map_cpy>
	conn_lll->data_chan_count =
    d604:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    d608:	f360 0305 	bfi	r3, r0, #0, #6
    d60c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	lll_trng_get(&hop, sizeof(u8_t));
    d610:	2101      	movs	r1, #1
    d612:	a809      	add	r0, sp, #36	; 0x24
    d614:	f001 fd08 	bl	f028 <lll_trng_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    d618:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    d61c:	499b      	ldr	r1, [pc, #620]	; (d88c <ll_create_connection+0x48c>)
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    d61e:	4b9c      	ldr	r3, [pc, #624]	; (d890 <ll_create_connection+0x490>)
	conn_lll->data_chan_use = 0;
    d620:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
    d624:	fba1 0102 	umull	r0, r1, r1, r2
    d628:	08c9      	lsrs	r1, r1, #3
    d62a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d62e:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
	conn_interval_us = (u32_t)interval * 1250U;
    d632:	f240 47e2 	movw	r7, #1250	; 0x4e2
	conn_lll->data_chan_hop = 5 + (hop % 12);
    d636:	3205      	adds	r2, #5
	conn_interval_us = (u32_t)interval * 1250U;
    d638:	fb07 fa0a 	mul.w	sl, r7, sl
	conn_lll->data_chan_sel = 0;
    d63c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    d640:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	conn_lll->data_chan_hop = 5 + (hop % 12);
    d642:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    d646:	9a03      	ldr	r2, [sp, #12]
	conn->supervision_expire = 0U;
    d648:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    d64c:	f242 7c10 	movw	ip, #10000	; 0x2710
	conn->procedure_expire = 0U;
    d650:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
	conn->apto_expire = 0U;
    d654:	f8a4 60d4 	strh.w	r6, [r4, #212]	; 0xd4
	conn->appto_expire = 0U;
    d658:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    d65c:	f10a 36ff 	add.w	r6, sl, #4294967295
    d660:	fb0c 6602 	mla	r6, ip, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    d664:	4453      	add	r3, sl
	conn_lll->data_chan_sel = 0;
    d666:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    d66a:	fbb3 f3fa 	udiv	r3, r3, sl
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    d66e:	4989      	ldr	r1, [pc, #548]	; (d894 <ll_create_connection+0x494>)
	conn_lll->data_chan_sel = 0;
    d670:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    d674:	fa1f fc83 	uxth.w	ip, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    d678:	1dba      	adds	r2, r7, #6
	conn->connect_expire = 6U;
    d67a:	2006      	movs	r0, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    d67c:	4594      	cmp	ip, r2
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    d67e:	fbb6 f6fa 	udiv	r6, r6, sl
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    d682:	4451      	add	r1, sl
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    d684:	f8a4 c0d2 	strh.w	ip, [r4, #210]	; 0xd2
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    d688:	fbb1 fafa 	udiv	sl, r1, sl
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    d68c:	f8a4 60c6 	strh.w	r6, [r4, #198]	; 0xc6
	conn->connect_expire = 6U;
    d690:	f8a4 00c4 	strh.w	r0, [r4, #196]	; 0xc4
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    d694:	f8a4 a0ca 	strh.w	sl, [r4, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    d698:	dd05      	ble.n	d6a6 <ll_create_connection+0x2a6>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
    d69a:	ebac 0c07 	sub.w	ip, ip, r7
    d69e:	f1ac 0c06 	sub.w	ip, ip, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    d6a2:	fa1f fc8c 	uxth.w	ip, ip
	conn->common.fex_valid = 0U;
    d6a6:	f894 60dc 	ldrb.w	r6, [r4, #220]	; 0xdc
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    d6aa:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	conn->llcp_terminate.node_rx.hdr.link = link;
    d6ae:	9806      	ldr	r0, [sp, #24]
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    d6b0:	f894 1122 	ldrb.w	r1, [r4, #290]	; 0x122
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    d6b4:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	conn->llcp_conn_param.disabled = 0U;
    d6b8:	f894 7172 	ldrb.w	r7, [r4, #370]	; 0x172
	conn->llcp_terminate.node_rx.hdr.link = link;
    d6bc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
	conn->common.fex_valid = 0U;
    d6c0:	f026 0603 	bic.w	r6, r6, #3
	conn->llcp_length.disabled = 0U;
    d6c4:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
	conn->common.fex_valid = 0U;
    d6c8:	f884 60dc 	strb.w	r6, [r4, #220]	; 0xdc
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    d6cc:	f023 0307 	bic.w	r3, r3, #7
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    d6d0:	2600      	movs	r6, #0
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    d6d2:	f021 0103 	bic.w	r1, r1, #3
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    d6d6:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_length.disabled = 0U;
    d6da:	f366 00c3 	bfi	r0, r6, #3, #1
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    d6de:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->llcp_conn_param.disabled = 0U;
    d6e2:	f366 1704 	bfi	r7, r6, #4, #1
	conn->llcp_feature.features = LL_FEAT;
    d6e6:	4b6c      	ldr	r3, [pc, #432]	; (d898 <ll_create_connection+0x498>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    d6e8:	f8a4 c0ce 	strh.w	ip, [r4, #206]	; 0xce
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    d6ec:	f884 1122 	strb.w	r1, [r4, #290]	; 0x122
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    d6f0:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	conn->llcp_feature.features = LL_FEAT;
    d6f4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_conn_param.disabled = 0U;
    d6f8:	f884 7172 	strb.w	r7, [r4, #370]	; 0x172
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    d6fc:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
    d700:	f884 60ea 	strb.w	r6, [r4, #234]	; 0xea
	conn->llcp_rx = NULL;
    d704:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    d708:	f8a4 6104 	strh.w	r6, [r4, #260]	; 0x104
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    d70c:	f8a4 6118 	strh.w	r6, [r4, #280]	; 0x118
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    d710:	f8a4 6120 	strh.w	r6, [r4, #288]	; 0x120
	conn->llcp_terminate.reason_peer = 0U;
    d714:	f884 612b 	strb.w	r6, [r4, #299]	; 0x12b
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    d718:	f8a4 6150 	strh.w	r6, [r4, #336]	; 0x150
	conn->llcp_conn_param.req = 0U;
    d71c:	f8a4 6170 	strh.w	r6, [r4, #368]	; 0x170
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    d720:	f8a4 6198 	strh.w	r6, [r4, #408]	; 0x198
	conn->llcp_length.cache.tx_octets = 0U;
    d724:	f8a4 61a4 	strh.w	r6, [r4, #420]	; 0x1a4
	conn->llcp_length.disabled = 0U;
    d728:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    d72c:	f7fd fac0 	bl	acb0 <ull_conn_default_tx_octets_get>
    d730:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    d734:	f7fd fac2 	bl	acbc <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    d738:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    d73c:	4b57      	ldr	r3, [pc, #348]	; (d89c <ll_create_connection+0x49c>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    d73e:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    d742:	4013      	ands	r3, r2
    d744:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    d748:	f7fd fabe 	bl	acc8 <ull_conn_default_phy_tx_get>
    d74c:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    d750:	f360 0302 	bfi	r3, r0, #0, #3
    d754:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    d758:	f7fd fabc 	bl	acd4 <ull_conn_default_phy_rx_get>
	conn->phy_pref_flags = 0U;
    d75c:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
	conn->tx_data = conn->tx_data_last = 0;
    d760:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
	conn->phy_pref_flags = 0U;
    d764:	0100      	lsls	r0, r0, #4
    d766:	f023 0378 	bic.w	r3, r3, #120	; 0x78
    d76a:	f000 0070 	and.w	r0, r0, #112	; 0x70
    d76e:	4318      	orrs	r0, r3
	lll->conn = conn_lll;
    d770:	9b07      	ldr	r3, [sp, #28]
	conn->phy_pref_flags = 0U;
    d772:	f884 01ac 	strb.w	r0, [r4, #428]	; 0x1ac
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    d776:	e9c4 666e 	strd	r6, r6, [r4, #440]	; 0x1b8
    d77a:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
	lll->conn = conn_lll;
    d77e:	626b      	str	r3, [r5, #36]	; 0x24
    d780:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    d784:	61a6      	str	r6, [r4, #24]
    d786:	f366 0300 	bfi	r3, r6, #0, #1
    d78a:	f884 3020 	strb.w	r3, [r4, #32]
    d78e:	6166      	str	r6, [r4, #20]
	hdr->parent = parent;
    d790:	61e4      	str	r4, [r4, #28]
	ull_filter_scan_update(filter_policy);
    d792:	4640      	mov	r0, r8
    d794:	f000 fbd4 	bl	df40 <ull_filter_scan_update>
	lll->rpa_gen = 0;
    d798:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    d79c:	22ff      	movs	r2, #255	; 0xff
	lll->rpa_gen = 0;
    d79e:	f366 0300 	bfi	r3, r6, #0, #1
    d7a2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    d7a6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    d7aa:	f1b8 0f00 	cmp.w	r8, #0
    d7ae:	d01c      	beq.n	d7ea <ll_create_connection+0x3ea>
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    d7b0:	f1a9 0302 	sub.w	r3, r9, #2
    d7b4:	2b01      	cmp	r3, #1
    d7b6:	d92a      	bls.n	d80e <ll_create_connection+0x40e>
	scan->own_addr_type = own_addr_type;
    d7b8:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    d7bc:	f369 0342 	bfi	r3, r9, #1, #2
    d7c0:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	err = lll_clock_wait();
    d7c4:	f001 fdb2 	bl	f32c <lll_clock_wait>
	if (err) {
    d7c8:	bb68      	cbnz	r0, d826 <ll_create_connection+0x426>
	return ull_scan_enable(scan);
    d7ca:	4628      	mov	r0, r5
    d7cc:	f7f3 f964 	bl	a98 <ull_scan_enable>
}
    d7d0:	b00b      	add	sp, #44	; 0x2c
    d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aa |= BIT(bit_idx);
    d7d6:	fa07 f103 	lsl.w	r1, r7, r3
    d7da:	ea4b 0b01 	orr.w	fp, fp, r1
				consecutive_bit = 1U;
    d7de:	2101      	movs	r1, #1
    d7e0:	e695      	b.n	d50e <ll_create_connection+0x10e>
				aa |= (BIT(bit_idx + 1) - 1);
    d7e2:	3b01      	subs	r3, #1
    d7e4:	ea4b 0b03 	orr.w	fp, fp, r3
    d7e8:	e6a2      	b.n	d530 <ll_create_connection+0x130>
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    d7ea:	f001 fa37 	bl	ec5c <ull_filter_lll_rl_enabled>
    d7ee:	2800      	cmp	r0, #0
    d7f0:	d0de      	beq.n	d7b0 <ll_create_connection+0x3b0>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    d7f2:	9804      	ldr	r0, [sp, #16]
    d7f4:	9914      	ldr	r1, [sp, #80]	; 0x50
    d7f6:	4642      	mov	r2, r8
    d7f8:	f000 fd8a 	bl	e310 <ull_filter_rl_find>
    d7fc:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    d800:	e7d6      	b.n	d7b0 <ll_create_connection+0x3b0>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    d802:	f104 0070 	add.w	r0, r4, #112	; 0x70
    d806:	67a0      	str	r0, [r4, #120]	; 0x78
    d808:	e6d2      	b.n	d5b0 <ll_create_connection+0x1b0>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    d80a:	2007      	movs	r0, #7
    d80c:	e614      	b.n	d438 <ll_create_connection+0x38>
		ull_filter_rpa_update(false);
    d80e:	2000      	movs	r0, #0
    d810:	f000 fc46 	bl	e0a0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    d814:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    d818:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
    d81c:	f009 0901 	and.w	r9, r9, #1
		lll->rpa_gen = 1;
    d820:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    d824:	e7c8      	b.n	d7b8 <ll_create_connection+0x3b8>
	sys_put_le32(aa, access_addr);
}

static inline void conn_release(struct ll_scan_set *scan)
{
	struct lll_conn *lll = scan->lll.conn;
    d826:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	struct node_rx_pdu *cc;
	struct ll_conn *conn;
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
    d828:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    d82a:	b163      	cbz	r3, d846 <ll_create_connection+0x446>
    d82c:	4a13      	ldr	r2, [pc, #76]	; (d87c <ll_create_connection+0x47c>)
    d82e:	491c      	ldr	r1, [pc, #112]	; (d8a0 <ll_create_connection+0x4a0>)
    d830:	4814      	ldr	r0, [pc, #80]	; (d884 <ll_create_connection+0x484>)
    d832:	f44f 7359 	mov.w	r3, #868	; 0x364
    d836:	f006 fa5d 	bl	13cf4 <printk>
    d83a:	4040      	eors	r0, r0
    d83c:	f380 8811 	msr	BASEPRI, r0
    d840:	f04f 0003 	mov.w	r0, #3
    d844:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    d846:	f104 0150 	add.w	r1, r4, #80	; 0x50
    d84a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    d84e:	f7f6 ff5f 	bl	4710 <memq_deinit>
	LL_ASSERT(link);
    d852:	4606      	mov	r6, r0
    d854:	2800      	cmp	r0, #0
    d856:	d033      	beq.n	d8c0 <ll_create_connection+0x4c0>
	lll->link_tx_free = link;

	conn = (void *)HDR_LLL2EVT(lll);
    d858:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    d85a:	65e6      	str	r6, [r4, #92]	; 0x5c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    d85c:	f8d7 412c 	ldr.w	r4, [r7, #300]	; 0x12c
	LL_ASSERT(link);
    d860:	b304      	cbz	r4, d8a4 <ll_create_connection+0x4a4>

	ll_rx_link_release(link);
    d862:	4620      	mov	r0, r4
    d864:	f7fb fac8 	bl	8df8 <ll_rx_link_release>

	ll_conn_release(conn);
    d868:	4638      	mov	r0, r7
    d86a:	f7fc feb3 	bl	a5d4 <ll_conn_release>
	scan->lll.conn = NULL;
    d86e:	2300      	movs	r3, #0
    d870:	626b      	str	r3, [r5, #36]	; 0x24
		return BT_HCI_ERR_HW_FAILURE;
    d872:	2003      	movs	r0, #3
}
    d874:	e5e0      	b.n	d438 <ll_create_connection+0x38>
    d876:	bf00      	nop
    d878:	8e89bed6 	.word	0x8e89bed6
    d87c:	000159a4 	.word	0x000159a4
    d880:	000159e8 	.word	0x000159e8
    d884:	0001525c 	.word	0x0001525c
    d888:	01480148 	.word	0x01480148
    d88c:	aaaaaaab 	.word	0xaaaaaaab
    d890:	01c9c37f 	.word	0x01c9c37f
    d894:	026259ff 	.word	0x026259ff
    d898:	000141ff 	.word	0x000141ff
    d89c:	f6ff0000 	.word	0xf6ff0000
    d8a0:	0001569c 	.word	0x0001569c
	LL_ASSERT(link);
    d8a4:	4a1a      	ldr	r2, [pc, #104]	; (d910 <ll_create_connection+0x510>)
    d8a6:	491b      	ldr	r1, [pc, #108]	; (d914 <ll_create_connection+0x514>)
    d8a8:	481b      	ldr	r0, [pc, #108]	; (d918 <ll_create_connection+0x518>)
    d8aa:	f240 336d 	movw	r3, #877	; 0x36d
    d8ae:	f006 fa21 	bl	13cf4 <printk>
    d8b2:	4040      	eors	r0, r0
    d8b4:	f380 8811 	msr	BASEPRI, r0
    d8b8:	f04f 0003 	mov.w	r0, #3
    d8bc:	df02      	svc	2
    d8be:	e7d0      	b.n	d862 <ll_create_connection+0x462>
	LL_ASSERT(link);
    d8c0:	4a13      	ldr	r2, [pc, #76]	; (d910 <ll_create_connection+0x510>)
    d8c2:	4914      	ldr	r1, [pc, #80]	; (d914 <ll_create_connection+0x514>)
    d8c4:	4814      	ldr	r0, [pc, #80]	; (d918 <ll_create_connection+0x518>)
    d8c6:	f240 3366 	movw	r3, #870	; 0x366
    d8ca:	f006 fa13 	bl	13cf4 <printk>
    d8ce:	4040      	eors	r0, r0
    d8d0:	f380 8811 	msr	BASEPRI, r0
    d8d4:	f04f 0003 	mov.w	r0, #3
    d8d8:	df02      	svc	2
    d8da:	e7bd      	b.n	d858 <ll_create_connection+0x458>
		ll_rx_link_release(link);
    d8dc:	9806      	ldr	r0, [sp, #24]
    d8de:	f7fb fa8b 	bl	8df8 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    d8e2:	2007      	movs	r0, #7
    d8e4:	e5a8      	b.n	d438 <ll_create_connection+0x38>
    d8e6:	4661      	mov	r1, ip
			consecutive_cnt = 1U;
    d8e8:	f04f 0c01 	mov.w	ip, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
    d8ec:	2a01      	cmp	r2, #1
    d8ee:	f67f ae06 	bls.w	d4fe <ll_create_connection+0xfe>
    d8f2:	4610      	mov	r0, r2
    d8f4:	46e6      	mov	lr, ip
    d8f6:	e5f0      	b.n	d4da <ll_create_connection+0xda>
		    ((consecutive_cnt < 6) &&
    d8f8:	2b1c      	cmp	r3, #28
    d8fa:	d904      	bls.n	d906 <ll_create_connection+0x506>
		     (((bit_idx < 29) && (transitions < 1)) ||
    d8fc:	2b1b      	cmp	r3, #27
    d8fe:	f63f ae3d 	bhi.w	d57c <ll_create_connection+0x17c>
    d902:	4602      	mov	r2, r0
    d904:	e7f2      	b.n	d8ec <ll_create_connection+0x4ec>
    d906:	2800      	cmp	r0, #0
    d908:	d1f8      	bne.n	d8fc <ll_create_connection+0x4fc>
    d90a:	4602      	mov	r2, r0
    d90c:	e5f7      	b.n	d4fe <ll_create_connection+0xfe>
    d90e:	bf00      	nop
    d910:	000159a4 	.word	0x000159a4
    d914:	00015778 	.word	0x00015778
    d918:	0001525c 	.word	0x0001525c

0000d91c <ll_connect_disable>:
{
    d91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d920:	4607      	mov	r7, r0
	scan = ull_scan_is_enabled_get(0);
    d922:	2000      	movs	r0, #0
    d924:	f7fc fa60 	bl	9de8 <ull_scan_is_enabled_get>
	if (!scan) {
    d928:	b328      	cbz	r0, d976 <ll_connect_disable+0x5a>
	conn_lll = scan->lll.conn;
    d92a:	6a46      	ldr	r6, [r0, #36]	; 0x24
	if (!conn_lll) {
    d92c:	4604      	mov	r4, r0
    d92e:	b316      	cbz	r6, d976 <ll_connect_disable+0x5a>
	status = ull_scan_disable(0, scan);
    d930:	4601      	mov	r1, r0
    d932:	2000      	movs	r0, #0
    d934:	f7fc f960 	bl	9bf8 <ull_scan_disable>
	if (!status) {
    d938:	4605      	mov	r5, r0
    d93a:	b9c8      	cbnz	r0, d970 <ll_connect_disable+0x54>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
    d93c:	6836      	ldr	r6, [r6, #0]
		link = cc->hdr.link;
    d93e:	f8d6 812c 	ldr.w	r8, [r6, #300]	; 0x12c
		cc = (void *)&conn->llcp_terminate.node_rx;
    d942:	f506 7996 	add.w	r9, r6, #300	; 0x12c
		LL_ASSERT(link);
    d946:	f1b8 0f00 	cmp.w	r8, #0
    d94a:	d018      	beq.n	d97e <ll_connect_disable+0x62>
		ll_rx_link_release(link);
    d94c:	4640      	mov	r0, r8
    d94e:	f7fb fa53 	bl	8df8 <ll_rx_link_release>
		ftr->param = &scan->lll;
    d952:	341c      	adds	r4, #28
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
    d954:	2108      	movs	r1, #8
		cc->hdr.handle = 0xffff;
    d956:	f64f 72ff 	movw	r2, #65535	; 0xffff
		*((u8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
    d95a:	2302      	movs	r3, #2
		ftr->param = &scan->lll;
    d95c:	f8c6 4134 	str.w	r4, [r6, #308]	; 0x134
		cc->hdr.type = NODE_RX_TYPE_CONNECTION;
    d960:	f886 1130 	strb.w	r1, [r6, #304]	; 0x130
		cc->hdr.handle = 0xffff;
    d964:	f8a6 2132 	strh.w	r2, [r6, #306]	; 0x132
		*((u8_t *)cc->pdu) = BT_HCI_ERR_UNKNOWN_CONN_ID;
    d968:	f886 314c 	strb.w	r3, [r6, #332]	; 0x14c
		*rx = cc;
    d96c:	f8c7 9000 	str.w	r9, [r7]
}
    d970:	4628      	mov	r0, r5
    d972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d976:	250c      	movs	r5, #12
}
    d978:	4628      	mov	r0, r5
    d97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
    d97e:	4a07      	ldr	r2, [pc, #28]	; (d99c <ll_connect_disable+0x80>)
    d980:	4907      	ldr	r1, [pc, #28]	; (d9a0 <ll_connect_disable+0x84>)
    d982:	4808      	ldr	r0, [pc, #32]	; (d9a4 <ll_connect_disable+0x88>)
    d984:	f240 1339 	movw	r3, #313	; 0x139
    d988:	f006 f9b4 	bl	13cf4 <printk>
    d98c:	4040      	eors	r0, r0
    d98e:	f380 8811 	msr	BASEPRI, r0
    d992:	f04f 0003 	mov.w	r0, #3
    d996:	df02      	svc	2
    d998:	e7d8      	b.n	d94c <ll_connect_disable+0x30>
    d99a:	bf00      	nop
    d99c:	000159a4 	.word	0x000159a4
    d9a0:	00015778 	.word	0x00015778
    d9a4:	0001525c 	.word	0x0001525c

0000d9a8 <ll_chm_update>:
{
    d9a8:	b570      	push	{r4, r5, r6, lr}
    d9aa:	4606      	mov	r6, r0
	ull_conn_chan_map_set(chm);
    d9ac:	f7fd f96e 	bl	ac8c <ull_conn_chan_map_set>
		conn = ll_connected_get(handle);
    d9b0:	2000      	movs	r0, #0
    d9b2:	f7fc fe25 	bl	a600 <ll_connected_get>
		if (!conn || conn->lll.role) {
    d9b6:	4604      	mov	r4, r0
    d9b8:	b1e8      	cbz	r0, d9f6 <ll_chm_update+0x4e>
    d9ba:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    d9be:	2b00      	cmp	r3, #0
    d9c0:	db19      	blt.n	d9f6 <ll_chm_update+0x4e>
		ret = ull_conn_llcp_req(conn);
    d9c2:	f7ff fba5 	bl	d110 <ull_conn_llcp_req>
		if (ret) {
    d9c6:	4605      	mov	r5, r0
    d9c8:	b998      	cbnz	r0, d9f2 <ll_chm_update+0x4a>
		memcpy(conn->llcp.chan_map.chm, chm,
    d9ca:	4631      	mov	r1, r6
    d9cc:	2205      	movs	r2, #5
    d9ce:	f104 00ed 	add.w	r0, r4, #237	; 0xed
    d9d2:	f006 fca2 	bl	1431a <memcpy>
		conn->llcp.chan_map.initiate = 1U;
    d9d6:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
		conn->llcp_req++;
    d9da:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		conn->llcp.chan_map.initiate = 1U;
    d9de:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
    d9e2:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    d9e4:	2102      	movs	r1, #2
		conn->llcp.chan_map.initiate = 1U;
    d9e6:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_req++;
    d9ea:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_CHAN_MAP;
    d9ee:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
}
    d9f2:	4628      	mov	r0, r5
    d9f4:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    d9f6:	2500      	movs	r5, #0
}
    d9f8:	4628      	mov	r0, r5
    d9fa:	bd70      	pop	{r4, r5, r6, pc}

0000d9fc <ll_enc_req_send>:
{
    d9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    da00:	4688      	mov	r8, r1
    da02:	4616      	mov	r6, r2
    da04:	4699      	mov	r9, r3
    da06:	4607      	mov	r7, r0
	conn = ll_connected_get(handle);
    da08:	f7fc fdfa 	bl	a600 <ll_connected_get>
	if (!conn) {
    da0c:	2800      	cmp	r0, #0
    da0e:	d063      	beq.n	dad8 <ll_enc_req_send+0xdc>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
    da10:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
    da14:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    da18:	429a      	cmp	r2, r3
    da1a:	4604      	mov	r4, r0
    da1c:	d13d      	bne.n	da9a <ll_enc_req_send+0x9e>
    da1e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
    da22:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    da26:	429a      	cmp	r2, r3
    da28:	d003      	beq.n	da32 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
    da2a:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
    da2e:	2b03      	cmp	r3, #3
    da30:	d033      	beq.n	da9a <ll_enc_req_send+0x9e>
	tx = ll_tx_mem_acquire();
    da32:	f7fc fdf7 	bl	a624 <ll_tx_mem_acquire>
	if (tx) {
    da36:	4605      	mov	r5, r0
    da38:	b378      	cbz	r0, da9a <ll_enc_req_send+0x9e>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
    da3a:	4649      	mov	r1, r9
    da3c:	2210      	movs	r2, #16
    da3e:	f204 105d 	addw	r0, r4, #349	; 0x15d
    da42:	f006 fc6a 	bl	1431a <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
    da46:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    da4a:	f013 0318 	ands.w	r3, r3, #24
    da4e:	d027      	beq.n	daa0 <ll_enc_req_send+0xa4>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
    da50:	2b18      	cmp	r3, #24
    da52:	d11f      	bne.n	da94 <ll_enc_req_send+0x98>
			memcpy(&conn->llcp_enc.rand[0], rand,
    da54:	4641      	mov	r1, r8
    da56:	2208      	movs	r2, #8
    da58:	f204 1055 	addw	r0, r4, #341	; 0x155
    da5c:	f006 fc5d 	bl	1431a <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
    da60:	7833      	ldrb	r3, [r6, #0]
    da62:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
			conn->llcp_enc.ediv[1] = ediv[1];
    da66:	7873      	ldrb	r3, [r6, #1]
    da68:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    da6c:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    da6e:	2101      	movs	r1, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    da70:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
    da74:	220a      	movs	r2, #10
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    da76:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    da78:	7169      	strb	r1, [r5, #5]
			pdu_data_tx->llctrl.opcode =
    da7a:	71ea      	strb	r2, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
    da7c:	4638      	mov	r0, r7
    da7e:	4629      	mov	r1, r5
    da80:	f7fc fddc 	bl	a63c <ll_tx_mem_enqueue>
    da84:	b930      	cbnz	r0, da94 <ll_enc_req_send+0x98>
		conn->llcp_enc.req++;
    da86:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
    da8a:	3301      	adds	r3, #1
    da8c:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
    da90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
    da94:	4628      	mov	r0, r5
    da96:	f7fc fdcb 	bl	a630 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
    da9a:	200c      	movs	r0, #12
}
    da9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    daa0:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
    daa2:	2203      	movs	r2, #3
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    daa4:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
    daa8:	71ea      	strb	r2, [r5, #7]
			pdu_data_tx->len =
    daaa:	2017      	movs	r0, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    daac:	2208      	movs	r2, #8
    daae:	4641      	mov	r1, r8
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    dab0:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
    dab2:	7168      	strb	r0, [r5, #5]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    dab4:	18a8      	adds	r0, r5, r2
    dab6:	f006 fc30 	bl	1431a <memcpy>
			enc_req->ediv[0] = ediv[0];
    daba:	7833      	ldrb	r3, [r6, #0]
    dabc:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
    dabe:	7873      	ldrb	r3, [r6, #1]
    dac0:	746b      	strb	r3, [r5, #17]
			lll_trng_get(enc_req->skdm, sizeof(enc_req->skdm));
    dac2:	2108      	movs	r1, #8
    dac4:	f105 0012 	add.w	r0, r5, #18
    dac8:	f001 faae 	bl	f028 <lll_trng_get>
			lll_trng_get(enc_req->ivm, sizeof(enc_req->ivm));
    dacc:	2104      	movs	r1, #4
    dace:	f105 001a 	add.w	r0, r5, #26
    dad2:	f001 faa9 	bl	f028 <lll_trng_get>
    dad6:	e7d1      	b.n	da7c <ll_enc_req_send+0x80>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    dad8:	2002      	movs	r0, #2
}
    dada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dade:	bf00      	nop

0000dae0 <ull_sched_after_mstr_slot_get>:

void ull_sched_after_mstr_slot_get(u8_t user_id, u32_t ticks_slot_abs,
				   u32_t *ticks_anchor, u32_t *us_offset)
{
	/* TODO: */
}
    dae0:	4770      	bx	lr
    dae2:	bf00      	nop

0000dae4 <ull_sched_mfy_after_mstr_offset_get>:
void ull_sched_mfy_after_mstr_offset_get(void *param)
{
	struct ll_scan_set *scan = param;

	/* TODO: */
	scan->lll.conn_win_offset_us = 0;
    dae4:	2300      	movs	r3, #0
    dae6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    dae8:	4770      	bx	lr
    daea:	bf00      	nop

0000daec <ull_sched_mfy_free_win_offset_calc>:

void ull_sched_mfy_free_win_offset_calc(void *param)
{
	/* TODO: */
}
    daec:	4770      	bx	lr
    daee:	bf00      	nop

0000daf0 <ull_sched_mfy_win_offset_use>:
    daf0:	4770      	bx	lr
    daf2:	bf00      	nop

0000daf4 <ull_sched_mfy_win_offset_select>:
    daf4:	4770      	bx	lr
    daf6:	bf00      	nop

0000daf8 <wl_find>:
		wl[i].taken = 0U;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
    daf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dafc:	4688      	mov	r8, r1
	int i;

	if (free) {
    dafe:	4615      	mov	r5, r2
    db00:	b10a      	cbz	r2, db06 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
    db02:	23ff      	movs	r3, #255	; 0xff
    db04:	7013      	strb	r3, [r2, #0]
    db06:	4e17      	ldr	r6, [pc, #92]	; (db64 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    db08:	f000 0701 	and.w	r7, r0, #1
    db0c:	f106 0902 	add.w	r9, r6, #2
{
    db10:	2400      	movs	r4, #0
    db12:	e004      	b.n	db1e <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    db14:	42ba      	cmp	r2, r7
    db16:	d014      	beq.n	db42 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
    db18:	3401      	adds	r4, #1
    db1a:	2c08      	cmp	r4, #8
    db1c:	d00e      	beq.n	db3c <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    db1e:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    db22:	07d9      	lsls	r1, r3, #31
    db24:	f3c3 0240 	ubfx	r2, r3, #1, #1
    db28:	d4f4      	bmi.n	db14 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    db2a:	2d00      	cmp	r5, #0
    db2c:	d0f4      	beq.n	db18 <wl_find+0x20>
    db2e:	782b      	ldrb	r3, [r5, #0]
    db30:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    db32:	bf08      	it	eq
    db34:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
    db36:	3401      	adds	r4, #1
    db38:	2c08      	cmp	r4, #8
    db3a:	d1f0      	bne.n	db1e <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
    db3c:	20ff      	movs	r0, #255	; 0xff
}
    db3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    db42:	2206      	movs	r2, #6
    db44:	4641      	mov	r1, r8
    db46:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    db4a:	f006 fbd6 	bl	142fa <memcmp>
    db4e:	b130      	cbz	r0, db5e <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    db50:	2d00      	cmp	r5, #0
    db52:	d0e1      	beq.n	db18 <wl_find+0x20>
    db54:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    db58:	07db      	lsls	r3, r3, #31
    db5a:	d4dd      	bmi.n	db18 <wl_find+0x20>
    db5c:	e7e7      	b.n	db2e <wl_find+0x36>
			return i;
    db5e:	b2e0      	uxtb	r0, r4
    db60:	e7ed      	b.n	db3e <wl_find+0x46>
    db62:	bf00      	nop
    db64:	20001a40 	.word	0x20001a40

0000db68 <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
    db68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db6c:	4f21      	ldr	r7, [pc, #132]	; (dbf4 <wl_update+0x8c>)
    db6e:	4d22      	ldr	r5, [pc, #136]	; (dbf8 <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    db70:	f8df 9088 	ldr.w	r9, [pc, #136]	; dbfc <wl_update+0x94>
    db74:	f8df a088 	ldr.w	sl, [pc, #136]	; dc00 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    db78:	f1a7 0802 	sub.w	r8, r7, #2
    db7c:	f1a5 0b02 	sub.w	fp, r5, #2
{
    db80:	2400      	movs	r4, #0
		if (!wl[i].taken) {
    db82:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    db86:	2601      	movs	r6, #1
		if (!wl[i].taken) {
    db88:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    db8c:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
    db8e:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    db92:	4629      	mov	r1, r5
    db94:	f107 0706 	add.w	r7, r7, #6
    db98:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
    db9c:	d022      	beq.n	dbe4 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    db9e:	f899 3000 	ldrb.w	r3, [r9]
    dba2:	b163      	cbz	r3, dbbe <wl_update+0x56>
		j = wl[i].rl_idx;
    dba4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    dba8:	2b07      	cmp	r3, #7
    dbaa:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    dbae:	d806      	bhi.n	dbbe <wl_update+0x56>
    dbb0:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
    dbb4:	f013 0f04 	tst.w	r3, #4
    dbb8:	d001      	beq.n	dbbe <wl_update+0x56>
    dbba:	06db      	lsls	r3, r3, #27
    dbbc:	d512      	bpl.n	dbe4 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    dbbe:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    dbc2:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
    dbc6:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    dbca:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    dbce:	40a3      	lsls	r3, r4
    dbd0:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
    dbd4:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    dbd8:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
    dbdc:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    dbe0:	f006 fb9b 	bl	1431a <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
    dbe4:	3401      	adds	r4, #1
    dbe6:	2c08      	cmp	r4, #8
    dbe8:	f105 0508 	add.w	r5, r5, #8
    dbec:	d1c9      	bne.n	db82 <wl_update+0x1a>
}
    dbee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbf2:	bf00      	nop
    dbf4:	20001a82 	.word	0x20001a82
    dbf8:	20001a42 	.word	0x20001a42
    dbfc:	20002069 	.word	0x20002069
    dc00:	200018a8 	.word	0x200018a8

0000dc04 <rl_update>:
{
    dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc08:	f8df 8060 	ldr.w	r8, [pc, #96]	; dc6c <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
    dc0c:	4d16      	ldr	r5, [pc, #88]	; (dc68 <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    dc0e:	f108 0701 	add.w	r7, r8, #1
    dc12:	1cae      	adds	r6, r5, #2
{
    dc14:	2400      	movs	r4, #0
    dc16:	e002      	b.n	dc1e <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    dc18:	3401      	adds	r4, #1
    dc1a:	2c08      	cmp	r4, #8
    dc1c:	d021      	beq.n	dc62 <rl_update+0x5e>
		if (rl[i].taken) {
    dc1e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    dc22:	00d9      	lsls	r1, r3, #3
    dc24:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
    dc28:	07da      	lsls	r2, r3, #31
    dc2a:	d5f5      	bpl.n	dc18 <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    dc2c:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
    dc2e:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    dc32:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
    dc36:	f04f 0e01 	mov.w	lr, #1
    dc3a:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    dc3e:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    dc40:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    dc44:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
    dc46:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    dc4a:	4439      	add	r1, r7
    dc4c:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    dc50:	2206      	movs	r2, #6
    dc52:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    dc54:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
    dc56:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    dc5a:	f006 fb5e 	bl	1431a <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    dc5e:	2c08      	cmp	r4, #8
    dc60:	d1dd      	bne.n	dc1e <rl_update+0x1a>
}
    dc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc66:	bf00      	nop
    dc68:	200019e8 	.word	0x200019e8
    dc6c:	200018a8 	.word	0x200018a8

0000dc70 <rl_access_check.part.0>:
static int rl_access_check(bool check_ar)
    dc70:	b508      	push	{r3, lr}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
    dc72:	2000      	movs	r0, #0
    dc74:	f7fc f8d4 	bl	9e20 <ull_scan_is_enabled>
}
    dc78:	fab0 f080 	clz	r0, r0
    dc7c:	0940      	lsrs	r0, r0, #5
    dc7e:	bd08      	pop	{r3, pc}

0000dc80 <ll_wl_size_get>:
}
    dc80:	2008      	movs	r0, #8
    dc82:	4770      	bx	lr

0000dc84 <ll_wl_clear>:
{
    dc84:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
    dc86:	2000      	movs	r0, #0
    dc88:	f7fb ff40 	bl	9b0c <ull_adv_filter_pol_get>
    dc8c:	bb00      	cbnz	r0, dcd0 <ll_wl_clear+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
    dc8e:	f7fc f8df 	bl	9e50 <ull_scan_filter_pol_get>
    dc92:	f010 0001 	ands.w	r0, r0, #1
    dc96:	d11b      	bne.n	dcd0 <ll_wl_clear+0x4c>
    dc98:	4a0e      	ldr	r2, [pc, #56]	; (dcd4 <ll_wl_clear+0x50>)
			rl[j].wl = 0U;
    dc9a:	4c0f      	ldr	r4, [pc, #60]	; (dcd8 <ll_wl_clear+0x54>)
		u8_t j = wl[i].rl_idx;
    dc9c:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    dca0:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
    dca2:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
    dca4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
    dca8:	d805      	bhi.n	dcb6 <ll_wl_clear+0x32>
			rl[j].wl = 0U;
    dcaa:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
    dcae:	f36f 1345 	bfc	r3, #5, #1
    dcb2:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
    dcb6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
    dcba:	f36f 0300 	bfc	r3, #0, #1
    dcbe:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    dcc2:	3001      	adds	r0, #1
    dcc4:	2808      	cmp	r0, #8
    dcc6:	d1e9      	bne.n	dc9c <ll_wl_clear+0x18>
	wl_anon = 0U;
    dcc8:	4b04      	ldr	r3, [pc, #16]	; (dcdc <ll_wl_clear+0x58>)
    dcca:	2000      	movs	r0, #0
    dccc:	7018      	strb	r0, [r3, #0]
}
    dcce:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    dcd0:	200c      	movs	r0, #12
}
    dcd2:	bd10      	pop	{r4, pc}
    dcd4:	20001a40 	.word	0x20001a40
    dcd8:	200018a8 	.word	0x200018a8
    dcdc:	2000206a 	.word	0x2000206a

0000dce0 <ll_wl_remove>:
{
    dce0:	b538      	push	{r3, r4, r5, lr}
    dce2:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
    dce4:	2000      	movs	r0, #0
    dce6:	f7fb ff11 	bl	9b0c <ull_adv_filter_pol_get>
    dcea:	b978      	cbnz	r0, dd0c <ll_wl_remove+0x2c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
    dcec:	f7fc f8b0 	bl	9e50 <ull_scan_filter_pol_get>
    dcf0:	f010 0501 	ands.w	r5, r0, #1
    dcf4:	d10a      	bne.n	dd0c <ll_wl_remove+0x2c>
	if (addr->type == ADDR_TYPE_ANON) {
    dcf6:	7820      	ldrb	r0, [r4, #0]
    dcf8:	28ff      	cmp	r0, #255	; 0xff
    dcfa:	d009      	beq.n	dd10 <ll_wl_remove+0x30>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
    dcfc:	1c61      	adds	r1, r4, #1
    dcfe:	462a      	mov	r2, r5
    dd00:	f7ff fefa 	bl	daf8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    dd04:	2807      	cmp	r0, #7
    dd06:	d907      	bls.n	dd18 <ll_wl_remove+0x38>
    dd08:	2002      	movs	r0, #2
}
    dd0a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    dd0c:	200c      	movs	r0, #12
}
    dd0e:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
    dd10:	4b0d      	ldr	r3, [pc, #52]	; (dd48 <ll_wl_remove+0x68>)
    dd12:	701d      	strb	r5, [r3, #0]
		return 0;
    dd14:	4628      	mov	r0, r5
}
    dd16:	bd38      	pop	{r3, r4, r5, pc}
		u8_t j = wl[i].rl_idx;
    dd18:	4a0c      	ldr	r2, [pc, #48]	; (dd4c <ll_wl_remove+0x6c>)
    dd1a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    dd1e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
    dd20:	2b07      	cmp	r3, #7
    dd22:	d808      	bhi.n	dd36 <ll_wl_remove+0x56>
			rl[j].wl = 0U;
    dd24:	490a      	ldr	r1, [pc, #40]	; (dd50 <ll_wl_remove+0x70>)
    dd26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    dd2a:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
    dd2e:	f365 1445 	bfi	r4, r5, #5, #1
    dd32:	f801 4033 	strb.w	r4, [r1, r3, lsl #3]
		wl[i].taken = 0U;
    dd36:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
    dd3a:	f36f 0300 	bfc	r3, #0, #1
    dd3e:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
    dd42:	2000      	movs	r0, #0
}
    dd44:	bd38      	pop	{r3, r4, r5, pc}
    dd46:	bf00      	nop
    dd48:	2000206a 	.word	0x2000206a
    dd4c:	20001a40 	.word	0x20001a40
    dd50:	200018a8 	.word	0x200018a8

0000dd54 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    dd54:	2807      	cmp	r0, #7
{
    dd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd5a:	4604      	mov	r4, r0
    dd5c:	460d      	mov	r5, r1
    dd5e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    dd60:	d817      	bhi.n	dd92 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
    dd62:	4e19      	ldr	r6, [pc, #100]	; (ddc8 <ll_rl_id_addr_get+0x74>)
    dd64:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    dd68:	00a7      	lsls	r7, r4, #2
    dd6a:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
    dd6e:	07db      	lsls	r3, r3, #31
    dd70:	d51c      	bpl.n	ddac <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
    dd72:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    dd74:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
    dd76:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
    dd7a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    dd7e:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
    dd82:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    dd84:	4640      	mov	r0, r8
    dd86:	3101      	adds	r1, #1
}
    dd88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    dd8c:	2206      	movs	r2, #6
    dd8e:	f006 bac4 	b.w	1431a <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    dd92:	4a0e      	ldr	r2, [pc, #56]	; (ddcc <ll_rl_id_addr_get+0x78>)
    dd94:	490e      	ldr	r1, [pc, #56]	; (ddd0 <ll_rl_id_addr_get+0x7c>)
    dd96:	480f      	ldr	r0, [pc, #60]	; (ddd4 <ll_rl_id_addr_get+0x80>)
    dd98:	23e7      	movs	r3, #231	; 0xe7
    dd9a:	f005 ffab 	bl	13cf4 <printk>
    dd9e:	4040      	eors	r0, r0
    dda0:	f380 8811 	msr	BASEPRI, r0
    dda4:	f04f 0003 	mov.w	r0, #3
    dda8:	df02      	svc	2
    ddaa:	e7da      	b.n	dd62 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
    ddac:	4a07      	ldr	r2, [pc, #28]	; (ddcc <ll_rl_id_addr_get+0x78>)
    ddae:	490a      	ldr	r1, [pc, #40]	; (ddd8 <ll_rl_id_addr_get+0x84>)
    ddb0:	4808      	ldr	r0, [pc, #32]	; (ddd4 <ll_rl_id_addr_get+0x80>)
    ddb2:	23e8      	movs	r3, #232	; 0xe8
    ddb4:	f005 ff9e 	bl	13cf4 <printk>
    ddb8:	4040      	eors	r0, r0
    ddba:	f380 8811 	msr	BASEPRI, r0
    ddbe:	f04f 0003 	mov.w	r0, #3
    ddc2:	df02      	svc	2
    ddc4:	e7d5      	b.n	dd72 <ll_rl_id_addr_get+0x1e>
    ddc6:	bf00      	nop
    ddc8:	200018a8 	.word	0x200018a8
    ddcc:	000159f0 	.word	0x000159f0
    ddd0:	00015a34 	.word	0x00015a34
    ddd4:	0001525c 	.word	0x0001525c
    ddd8:	00015a40 	.word	0x00015a40

0000dddc <ll_rl_size_get>:
    dddc:	2008      	movs	r0, #8
    ddde:	4770      	bx	lr

0000dde0 <ll_rl_clear>:
{
    dde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    dde2:	2000      	movs	r0, #0
    dde4:	f7fb fe86 	bl	9af4 <ull_adv_is_enabled>
		? 0 : 1;
    dde8:	b108      	cbz	r0, ddee <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ddea:	200c      	movs	r0, #12
}
    ddec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddee:	4604      	mov	r4, r0
    ddf0:	f7ff ff3e 	bl	dc70 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
    ddf4:	2800      	cmp	r0, #0
    ddf6:	d0f8      	beq.n	ddea <ll_rl_clear+0xa>
		rl[i].taken = 0U;
    ddf8:	4b1a      	ldr	r3, [pc, #104]	; (de64 <ll_rl_clear+0x84>)
	peer_irk_count = 0U;
    ddfa:	491b      	ldr	r1, [pc, #108]	; (de68 <ll_rl_clear+0x88>)
		rl[i].taken = 0U;
    ddfc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    de00:	f893 c000 	ldrb.w	ip, [r3]
    de04:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
    de08:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
    de0c:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
    de10:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
    de14:	700c      	strb	r4, [r1, #0]
		rl[i].taken = 0U;
    de16:	f364 0200 	bfi	r2, r4, #0, #1
    de1a:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
    de1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    de22:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
    de26:	f364 0000 	bfi	r0, r4, #0, #1
    de2a:	f364 0c00 	bfi	ip, r4, #0, #1
    de2e:	f364 0700 	bfi	r7, r4, #0, #1
    de32:	f364 0600 	bfi	r6, r4, #0, #1
    de36:	f364 0500 	bfi	r5, r4, #0, #1
    de3a:	f364 0100 	bfi	r1, r4, #0, #1
    de3e:	f364 0200 	bfi	r2, r4, #0, #1
    de42:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
    de46:	f883 c000 	strb.w	ip, [r3]
    de4a:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
    de4e:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
    de52:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
    de56:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    de5a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
    de5e:	4620      	mov	r0, r4
}
    de60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de62:	bf00      	nop
    de64:	200018a8 	.word	0x200018a8
    de68:	20002068 	.word	0x20002068

0000de6c <ll_rl_enable>:
{
    de6c:	b538      	push	{r3, r4, r5, lr}
    de6e:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    de70:	2000      	movs	r0, #0
    de72:	f7fb fe3f 	bl	9af4 <ull_adv_is_enabled>
		? 0 : 1;
    de76:	b108      	cbz	r0, de7c <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    de78:	200c      	movs	r0, #12
}
    de7a:	bd38      	pop	{r3, r4, r5, pc}
    de7c:	4604      	mov	r4, r0
    de7e:	f7ff fef7 	bl	dc70 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
    de82:	2800      	cmp	r0, #0
    de84:	d0f8      	beq.n	de78 <ll_rl_enable+0xc>
	switch (enable) {
    de86:	b13d      	cbz	r5, de98 <ll_rl_enable+0x2c>
    de88:	2d01      	cmp	r5, #1
    de8a:	d001      	beq.n	de90 <ll_rl_enable+0x24>
    de8c:	2012      	movs	r0, #18
}
    de8e:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 1U;
    de90:	4b03      	ldr	r3, [pc, #12]	; (dea0 <ll_rl_enable+0x34>)
    de92:	701d      	strb	r5, [r3, #0]
	return 0;
    de94:	4620      	mov	r0, r4
}
    de96:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 0U;
    de98:	4b01      	ldr	r3, [pc, #4]	; (dea0 <ll_rl_enable+0x34>)
    de9a:	701d      	strb	r5, [r3, #0]
	return 0;
    de9c:	4628      	mov	r0, r5
}
    de9e:	bd38      	pop	{r3, r4, r5, pc}
    dea0:	20002069 	.word	0x20002069

0000dea4 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
    dea4:	4a03      	ldr	r2, [pc, #12]	; (deb4 <ll_rl_timeout_set+0x10>)
    dea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    deaa:	fb03 f300 	mul.w	r3, r3, r0
    deae:	6013      	str	r3, [r2, #0]
}
    deb0:	4770      	bx	lr
    deb2:	bf00      	nop
    deb4:	20001a1c 	.word	0x20001a1c

0000deb8 <ull_filter_adv_scan_state_cb>:
	if (bm) {
    deb8:	b1b0      	cbz	r0, dee8 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
    deba:	4b0d      	ldr	r3, [pc, #52]	; (def0 <ull_filter_adv_scan_state_cb+0x38>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    debc:	681a      	ldr	r2, [r3, #0]
{
    debe:	b510      	push	{r4, lr}
    dec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    dec4:	f240 30e7 	movw	r0, #999	; 0x3e7
    dec8:	2100      	movs	r1, #0
    deca:	fbe3 0102 	umlal	r0, r1, r3, r2
    dece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ded2:	2300      	movs	r3, #0
    ded4:	f7f2 f904 	bl	e0 <__aeabi_uldivmod>
}
    ded8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dedc:	4602      	mov	r2, r0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dede:	4905      	ldr	r1, [pc, #20]	; (def4 <ull_filter_adv_scan_state_cb+0x3c>)
    dee0:	4805      	ldr	r0, [pc, #20]	; (def8 <ull_filter_adv_scan_state_cb+0x40>)
    dee2:	2300      	movs	r3, #0
    dee4:	f005 bce0 	b.w	138a8 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
    dee8:	4802      	ldr	r0, [pc, #8]	; (def4 <ull_filter_adv_scan_state_cb+0x3c>)
    deea:	f006 beda 	b.w	14ca2 <k_delayed_work_cancel>
    deee:	bf00      	nop
    def0:	20001a1c 	.word	0x20001a1c
    def4:	20001a20 	.word	0x20001a20
    def8:	20001fcc 	.word	0x20001fcc

0000defc <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
    defc:	4a0d      	ldr	r2, [pc, #52]	; (df34 <ull_filter_adv_update+0x38>)
{
    defe:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
    df00:	2300      	movs	r3, #0
    df02:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
    df04:	b970      	cbnz	r0, df24 <ull_filter_adv_update+0x28>
	if (rl_enable &&
    df06:	4b0c      	ldr	r3, [pc, #48]	; (df38 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
    df08:	4a0c      	ldr	r2, [pc, #48]	; (df3c <ull_filter_adv_update+0x40>)
	if (rl_enable &&
    df0a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
    df0c:	2000      	movs	r0, #0
    df0e:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
    df10:	b903      	cbnz	r3, df14 <ull_filter_adv_update+0x18>
}
    df12:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
    df14:	f7fb ff84 	bl	9e20 <ull_scan_is_enabled>
	if (rl_enable &&
    df18:	2800      	cmp	r0, #0
    df1a:	d1fa      	bne.n	df12 <ull_filter_adv_update+0x16>
}
    df1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
    df20:	f7ff be70 	b.w	dc04 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
    df24:	4618      	mov	r0, r3
    df26:	f7fb ff93 	bl	9e50 <ull_scan_filter_pol_get>
	if (adv_fp &&
    df2a:	07c3      	lsls	r3, r0, #31
    df2c:	d4eb      	bmi.n	df06 <ull_filter_adv_update+0xa>
		wl_update();
    df2e:	f7ff fe1b 	bl	db68 <wl_update>
    df32:	e7e8      	b.n	df06 <ull_filter_adv_update+0xa>
    df34:	20001a80 	.word	0x20001a80
    df38:	20002069 	.word	0x20002069
    df3c:	200019e8 	.word	0x200019e8

0000df40 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
    df40:	4a0e      	ldr	r2, [pc, #56]	; (df7c <ull_filter_scan_update+0x3c>)
{
    df42:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
    df44:	2300      	movs	r3, #0
    df46:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
    df48:	07c2      	lsls	r2, r0, #31
    df4a:	d40e      	bmi.n	df6a <ull_filter_scan_update+0x2a>
	if (rl_enable &&
    df4c:	4b0c      	ldr	r3, [pc, #48]	; (df80 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
    df4e:	4a0d      	ldr	r2, [pc, #52]	; (df84 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
    df50:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
    df52:	2000      	movs	r0, #0
    df54:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
    df56:	b903      	cbnz	r3, df5a <ull_filter_scan_update+0x1a>
}
    df58:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
    df5a:	f7fb fdcb 	bl	9af4 <ull_adv_is_enabled>
	if (rl_enable &&
    df5e:	2800      	cmp	r0, #0
    df60:	d1fa      	bne.n	df58 <ull_filter_scan_update+0x18>
}
    df62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
    df66:	f7ff be4d 	b.w	dc04 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
    df6a:	4618      	mov	r0, r3
    df6c:	f7fb fdce 	bl	9b0c <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
    df70:	2800      	cmp	r0, #0
    df72:	d1eb      	bne.n	df4c <ull_filter_scan_update+0xc>
		wl_update();
    df74:	f7ff fdf8 	bl	db68 <wl_update>
    df78:	e7e8      	b.n	df4c <ull_filter_scan_update+0xc>
    df7a:	bf00      	nop
    df7c:	20001a80 	.word	0x20001a80
    df80:	20002069 	.word	0x20002069
    df84:	200019e8 	.word	0x200019e8

0000df88 <ull_filter_adv_pdu_update>:
{
    df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8_t idx = adv->lll.rl_idx;
    df8c:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
    df90:	2f07      	cmp	r7, #7
{
    df92:	4605      	mov	r5, r0
    df94:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
    df96:	f101 0602 	add.w	r6, r1, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
    df9a:	d847      	bhi.n	e02c <ull_filter_adv_pdu_update+0xa4>
    df9c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; e09c <ull_filter_adv_pdu_update+0x114>
    dfa0:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    dfa4:	ea4f 0987 	mov.w	r9, r7, lsl #2
    dfa8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
    dfac:	0719      	lsls	r1, r3, #28
    dfae:	d529      	bpl.n	e004 <ull_filter_adv_pdu_update+0x7c>
		LL_ASSERT(rl[idx].rpas_ready);
    dfb0:	079a      	lsls	r2, r3, #30
    dfb2:	d55f      	bpl.n	e074 <ull_filter_adv_pdu_update+0xec>
		pdu->tx_addr = 1;
    dfb4:	7822      	ldrb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
    dfb6:	eb09 0307 	add.w	r3, r9, r7
    dfba:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
		pdu->tx_addr = 1;
    dfbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
    dfc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
		pdu->tx_addr = 1;
    dfc4:	7022      	strb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
    dfc6:	4630      	mov	r0, r6
    dfc8:	2206      	movs	r2, #6
    dfca:	f006 f9a6 	bl	1431a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    dfce:	7823      	ldrb	r3, [r4, #0]
    dfd0:	f003 030f 	and.w	r3, r3, #15
    dfd4:	2b01      	cmp	r3, #1
    dfd6:	d127      	bne.n	e028 <ull_filter_adv_pdu_update+0xa0>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
    dfd8:	44b9      	add	r9, r7
    dfda:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
    dfde:	075b      	lsls	r3, r3, #29
    dfe0:	d438      	bmi.n	e054 <ull_filter_adv_pdu_update+0xcc>
			pdu->rx_addr = adv->id_addr_type;
    dfe2:	f895 30da 	ldrb.w	r3, [r5, #218]	; 0xda
    dfe6:	7822      	ldrb	r2, [r4, #0]
    dfe8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dfec:	4620      	mov	r0, r4
    dfee:	f363 12c7 	bfi	r2, r3, #7, #1
    dff2:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->direct_ind.tgt_addr[0],
    dff6:	f105 01db 	add.w	r1, r5, #219	; 0xdb
    dffa:	2206      	movs	r2, #6
}
    dffc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
    e000:	f006 b98b 	b.w	1431a <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
    e004:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
    e008:	7823      	ldrb	r3, [r4, #0]
    e00a:	f000 0003 	and.w	r0, r0, #3
    e00e:	f360 1386 	bfi	r3, r0, #6, #1
    e012:	7023      	strb	r3, [r4, #0]
		ll_addr_get(adv->own_addr_type & 0x1, adva);
    e014:	4631      	mov	r1, r6
    e016:	f000 0001 	and.w	r0, r0, #1
    e01a:	f7f7 feaf 	bl	5d7c <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e01e:	7823      	ldrb	r3, [r4, #0]
    e020:	f003 030f 	and.w	r3, r3, #15
    e024:	2b01      	cmp	r3, #1
    e026:	d0d7      	beq.n	dfd8 <ull_filter_adv_pdu_update+0x50>
}
    e028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
    e02c:	f890 00da 	ldrb.w	r0, [r0, #218]	; 0xda
    e030:	780b      	ldrb	r3, [r1, #0]
    e032:	f000 0003 	and.w	r0, r0, #3
    e036:	f360 1386 	bfi	r3, r0, #6, #1
    e03a:	7023      	strb	r3, [r4, #0]
		ll_addr_get(adv->own_addr_type & 0x1, adva);
    e03c:	4631      	mov	r1, r6
    e03e:	f000 0001 	and.w	r0, r0, #1
    e042:	f7f7 fe9b 	bl	5d7c <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e046:	7823      	ldrb	r3, [r4, #0]
    e048:	f003 030f 	and.w	r3, r3, #15
    e04c:	2b01      	cmp	r3, #1
    e04e:	d0c8      	beq.n	dfe2 <ull_filter_adv_pdu_update+0x5a>
}
    e050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu->rx_addr = 1;
    e054:	7823      	ldrb	r3, [r4, #0]
    e056:	4620      	mov	r0, r4
    e058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e05c:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
    e060:	2328      	movs	r3, #40	; 0x28
    e062:	fb03 8707 	mla	r7, r3, r7, r8
			memcpy(&pdu->direct_ind.tgt_addr[0],
    e066:	f107 011e 	add.w	r1, r7, #30
    e06a:	2206      	movs	r2, #6
}
    e06c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
    e070:	f006 b953 	b.w	1431a <memcpy>
		LL_ASSERT(rl[idx].rpas_ready);
    e074:	4a06      	ldr	r2, [pc, #24]	; (e090 <ull_filter_adv_pdu_update+0x108>)
    e076:	4907      	ldr	r1, [pc, #28]	; (e094 <ull_filter_adv_pdu_update+0x10c>)
    e078:	4807      	ldr	r0, [pc, #28]	; (e098 <ull_filter_adv_pdu_update+0x110>)
    e07a:	f240 234a 	movw	r3, #586	; 0x24a
    e07e:	f005 fe39 	bl	13cf4 <printk>
    e082:	4040      	eors	r0, r0
    e084:	f380 8811 	msr	BASEPRI, r0
    e088:	f04f 0003 	mov.w	r0, #3
    e08c:	df02      	svc	2
    e08e:	e791      	b.n	dfb4 <ull_filter_adv_pdu_update+0x2c>
    e090:	000159f0 	.word	0x000159f0
    e094:	00015a54 	.word	0x00015a54
    e098:	0001525c 	.word	0x0001525c
    e09c:	200018a8 	.word	0x200018a8

0000e0a0 <ull_filter_rpa_update>:
{
    e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0a4:	4682      	mov	sl, r0
    e0a6:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
    e0a8:	f006 fe54 	bl	14d54 <z_impl_k_uptime_ticks>
		} else {
			return (t * to_hz + off) / from_hz;
    e0ac:	014b      	lsls	r3, r1, #5
    e0ae:	0142      	lsls	r2, r0, #5
    e0b0:	ebb2 0800 	subs.w	r8, r2, r0
    e0b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    e0b8:	eb63 0301 	sbc.w	r3, r3, r1
    e0bc:	009b      	lsls	r3, r3, #2
    e0be:	ea4f 0288 	mov.w	r2, r8, lsl #2
    e0c2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
    e0c6:	eb12 0800 	adds.w	r8, r2, r0
    e0ca:	eb43 0101 	adc.w	r1, r3, r1
    e0ce:	00c9      	lsls	r1, r1, #3
    e0d0:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
    e0d4:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    e0d8:	ea4f 38d3 	mov.w	r8, r3, lsr #15
    e0dc:	0bce      	lsrs	r6, r1, #15
    e0de:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
    e0e2:	9601      	str	r6, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
    e0e4:	f1ba 0f00 	cmp.w	sl, #0
    e0e8:	d117      	bne.n	e11a <ull_filter_rpa_update+0x7a>
    e0ea:	4b71      	ldr	r3, [pc, #452]	; (e2b0 <ull_filter_rpa_update+0x210>)
    e0ec:	e9d3 0100 	ldrd	r0, r1, [r3]
    e0f0:	1c4c      	adds	r4, r1, #1
    e0f2:	bf08      	it	eq
    e0f4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    e0f8:	d00f      	beq.n	e11a <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    e0fa:	4b6e      	ldr	r3, [pc, #440]	; (e2b4 <ull_filter_rpa_update+0x214>)
    e0fc:	681a      	ldr	r2, [r3, #0]
    e0fe:	ebb8 0400 	subs.w	r4, r8, r0
    e102:	eb66 0501 	sbc.w	r5, r6, r1
    e106:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
    e108:	4294      	cmp	r4, r2
    e10a:	eb75 0303 	sbcs.w	r3, r5, r3
    e10e:	bfac      	ite	ge
    e110:	f04f 0901 	movge.w	r9, #1
    e114:	f04f 0900 	movlt.w	r9, #0
    e118:	e001      	b.n	e11e <ull_filter_rpa_update+0x7e>
    e11a:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    e11e:	4e66      	ldr	r6, [pc, #408]	; (e2b8 <ull_filter_rpa_update+0x218>)
				LL_ASSERT(!err);
    e120:	f8df b1a8 	ldr.w	fp, [pc, #424]	; e2cc <ull_filter_rpa_update+0x22c>
    e124:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
    e128:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    e12a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e12e:	00a5      	lsls	r5, r4, #2
    e130:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    e134:	07da      	lsls	r2, r3, #31
    e136:	d515      	bpl.n	e164 <ull_filter_rpa_update+0xc4>
    e138:	f1b9 0f00 	cmp.w	r9, #0
    e13c:	d101      	bne.n	e142 <ull_filter_rpa_update+0xa2>
    e13e:	0798      	lsls	r0, r3, #30
    e140:	d410      	bmi.n	e164 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
    e142:	192b      	adds	r3, r5, r4
    e144:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    e148:	0759      	lsls	r1, r3, #29
    e14a:	d434      	bmi.n	e1b6 <ull_filter_rpa_update+0x116>
			if (rl[i].lirk) {
    e14c:	192b      	adds	r3, r5, r4
    e14e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    e152:	071a      	lsls	r2, r3, #28
    e154:	d419      	bmi.n	e18a <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
    e156:	4425      	add	r5, r4
    e158:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
    e15c:	f043 0302 	orr.w	r3, r3, #2
    e160:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    e164:	3401      	adds	r4, #1
    e166:	2c08      	cmp	r4, #8
    e168:	f106 0628 	add.w	r6, r6, #40	; 0x28
    e16c:	d1dd      	bne.n	e12a <ull_filter_rpa_update+0x8a>
	if (all) {
    e16e:	f1b9 0f00 	cmp.w	r9, #0
    e172:	d004      	beq.n	e17e <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
    e174:	4b4e      	ldr	r3, [pc, #312]	; (e2b0 <ull_filter_rpa_update+0x210>)
    e176:	9a01      	ldr	r2, [sp, #4]
    e178:	f8c3 8000 	str.w	r8, [r3]
    e17c:	605a      	str	r2, [r3, #4]
	if (timeout) {
    e17e:	f1ba 0f00 	cmp.w	sl, #0
    e182:	d13c      	bne.n	e1fe <ull_filter_rpa_update+0x15e>
}
    e184:	b007      	add	sp, #28
    e186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
    e18a:	a902      	add	r1, sp, #8
    e18c:	f1a6 001d 	sub.w	r0, r6, #29
    e190:	f006 f946 	bl	14420 <bt_rpa_create>
				LL_ASSERT(!err);
    e194:	2800      	cmp	r0, #0
    e196:	d170      	bne.n	e27a <ull_filter_rpa_update+0x1da>
				rl[i].local_rpa = &rpa;
    e198:	4a48      	ldr	r2, [pc, #288]	; (e2bc <ull_filter_rpa_update+0x21c>)
    e19a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    e19e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
    e1a2:	a902      	add	r1, sp, #8
    e1a4:	4618      	mov	r0, r3
    e1a6:	2206      	movs	r2, #6
    e1a8:	6031      	str	r1, [r6, #0]
    e1aa:	9300      	str	r3, [sp, #0]
    e1ac:	f006 f8b5 	bl	1431a <memcpy>
				rl[i].local_rpa = &local_rpas[i];
    e1b0:	9b00      	ldr	r3, [sp, #0]
    e1b2:	6033      	str	r3, [r6, #0]
    e1b4:	e7cf      	b.n	e156 <ull_filter_rpa_update+0xb6>

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
    e1b6:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
    e1ba:	4a41      	ldr	r2, [pc, #260]	; (e2c0 <ull_filter_rpa_update+0x220>)
    e1bc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    e1c0:	320f      	adds	r2, #15

	for (; length > 0; length--) {
    e1c2:	f10d 0307 	add.w	r3, sp, #7
    e1c6:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
    e1ca:	f812 1901 	ldrb.w	r1, [r2], #-1
    e1ce:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
    e1d2:	4283      	cmp	r3, r0
    e1d4:	d1f9      	bne.n	e1ca <ull_filter_rpa_update+0x12a>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    e1d6:	1fb1      	subs	r1, r6, #6
    e1d8:	a802      	add	r0, sp, #8
    e1da:	f006 f921 	bl	14420 <bt_rpa_create>
				LL_ASSERT(!err);
    e1de:	2800      	cmp	r0, #0
    e1e0:	d0b4      	beq.n	e14c <ull_filter_rpa_update+0xac>
    e1e2:	4938      	ldr	r1, [pc, #224]	; (e2c4 <ull_filter_rpa_update+0x224>)
    e1e4:	4838      	ldr	r0, [pc, #224]	; (e2c8 <ull_filter_rpa_update+0x228>)
    e1e6:	f44f 7305 	mov.w	r3, #532	; 0x214
    e1ea:	465a      	mov	r2, fp
    e1ec:	f005 fd82 	bl	13cf4 <printk>
    e1f0:	4040      	eors	r0, r0
    e1f2:	f380 8811 	msr	BASEPRI, r0
    e1f6:	f04f 0003 	mov.w	r0, #3
    e1fa:	df02      	svc	2
    e1fc:	e7a6      	b.n	e14c <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
    e1fe:	2000      	movs	r0, #0
    e200:	f7fb fc6a 	bl	9ad8 <ull_adv_is_enabled_get>
		if (adv) {
    e204:	4604      	mov	r4, r0
    e206:	2800      	cmp	r0, #0
    e208:	d0bc      	beq.n	e184 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    e20a:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
    e20e:	079b      	lsls	r3, r3, #30
    e210:	d5b8      	bpl.n	e184 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
    e212:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
    e216:	2b07      	cmp	r3, #7
    e218:	d8b4      	bhi.n	e184 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    e21a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
	if (pdu->first == pdu->last) {
    e21e:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
    e222:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    e226:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    e22a:	f102 0311 	add.w	r3, r2, #17
    e22e:	301c      	adds	r0, #28
	if (pdu->first == pdu->last) {
    e230:	42a9      	cmp	r1, r5
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    e232:	eb00 0603 	add.w	r6, r0, r3
	if (pdu->first == pdu->last) {
    e236:	d02e      	beq.n	e296 <ull_filter_rpa_update+0x1f6>
    e238:	3202      	adds	r2, #2
	return (void *)pdu->pdu[last];
    e23a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
		pdu->chan_sel = prev->chan_sel;
    e23e:	5cc3      	ldrb	r3, [r0, r3]
	pdu->type = prev->type;
    e240:	5c88      	ldrb	r0, [r1, r2]
		pdu->chan_sel = prev->chan_sel;
    e242:	f3c3 1740 	ubfx	r7, r3, #5, #1
	pdu->type = prev->type;
    e246:	f3c3 0303 	ubfx	r3, r3, #0, #4
    e24a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
    e24e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    e252:	4303      	orrs	r3, r0
    e254:	188f      	adds	r7, r1, r2
    e256:	548b      	strb	r3, [r1, r2]
	ull_filter_adv_pdu_update(adv, pdu);
    e258:	4620      	mov	r0, r4
    e25a:	4639      	mov	r1, r7
    e25c:	f7ff fe94 	bl	df88 <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
    e260:	7872      	ldrb	r2, [r6, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
    e262:	f107 0008 	add.w	r0, r7, #8
    e266:	3a06      	subs	r2, #6
    e268:	f106 0108 	add.w	r1, r6, #8
    e26c:	f006 f855 	bl	1431a <memcpy>
	pdu->len = prev->len;
    e270:	7873      	ldrb	r3, [r6, #1]
    e272:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
    e274:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
    e278:	e784      	b.n	e184 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
    e27a:	4912      	ldr	r1, [pc, #72]	; (e2c4 <ull_filter_rpa_update+0x224>)
    e27c:	4812      	ldr	r0, [pc, #72]	; (e2c8 <ull_filter_rpa_update+0x228>)
    e27e:	f240 2321 	movw	r3, #545	; 0x221
    e282:	465a      	mov	r2, fp
    e284:	f005 fd36 	bl	13cf4 <printk>
    e288:	4040      	eors	r0, r0
    e28a:	f380 8811 	msr	BASEPRI, r0
    e28e:	f04f 0003 	mov.w	r0, #3
    e292:	df02      	svc	2
    e294:	e780      	b.n	e198 <ull_filter_rpa_update+0xf8>
		last = pdu->last + 1;
    e296:	3501      	adds	r5, #1
    e298:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    e29a:	2d02      	cmp	r5, #2
    e29c:	d004      	beq.n	e2a8 <ull_filter_rpa_update+0x208>
    e29e:	2127      	movs	r1, #39	; 0x27
    e2a0:	2202      	movs	r2, #2
    e2a2:	fb11 2205 	smlabb	r2, r1, r5, r2
    e2a6:	e7c8      	b.n	e23a <ull_filter_rpa_update+0x19a>
    e2a8:	462a      	mov	r2, r5
			last = 0U;
    e2aa:	2500      	movs	r5, #0
    e2ac:	e7c5      	b.n	e23a <ull_filter_rpa_update+0x19a>
    e2ae:	bf00      	nop
    e2b0:	20000568 	.word	0x20000568
    e2b4:	20001a1c 	.word	0x20001a1c
    e2b8:	200018cc 	.word	0x200018cc
    e2bc:	200017f0 	.word	0x200017f0
    e2c0:	20001828 	.word	0x20001828
    e2c4:	000154c4 	.word	0x000154c4
    e2c8:	0001525c 	.word	0x0001525c
    e2cc:	000159f0 	.word	0x000159f0

0000e2d0 <rpa_timeout>:
{
    e2d0:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
    e2d2:	2001      	movs	r0, #1
    e2d4:	f7ff fee4 	bl	e0a0 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
    e2d8:	4b0a      	ldr	r3, [pc, #40]	; (e304 <rpa_timeout+0x34>)
			return (u32_t)((t * to_hz + off) / from_hz);
    e2da:	681a      	ldr	r2, [r3, #0]
    e2dc:	f240 30e7 	movw	r0, #999	; 0x3e7
    e2e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e2e4:	2100      	movs	r1, #0
    e2e6:	fbe3 0102 	umlal	r0, r1, r3, r2
    e2ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e2ee:	2300      	movs	r3, #0
    e2f0:	f7f1 fef6 	bl	e0 <__aeabi_uldivmod>
}
    e2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2f8:	4602      	mov	r2, r0
    e2fa:	4903      	ldr	r1, [pc, #12]	; (e308 <rpa_timeout+0x38>)
    e2fc:	4803      	ldr	r0, [pc, #12]	; (e30c <rpa_timeout+0x3c>)
    e2fe:	2300      	movs	r3, #0
    e300:	f005 bad2 	b.w	138a8 <k_delayed_work_submit_to_queue>
    e304:	20001a1c 	.word	0x20001a1c
    e308:	20001a20 	.word	0x20001a20
    e30c:	20001fcc 	.word	0x20001fcc

0000e310 <ull_filter_rl_find>:
{
    e310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e314:	468b      	mov	fp, r1
	if (free) {
    e316:	4616      	mov	r6, r2
    e318:	b10a      	cbz	r2, e31e <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
    e31a:	23ff      	movs	r3, #255	; 0xff
    e31c:	7013      	strb	r3, [r2, #0]
    e31e:	f8df 8064 	ldr.w	r8, [pc, #100]	; e384 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    e322:	f000 0901 	and.w	r9, r0, #1
    e326:	f108 0a01 	add.w	sl, r8, #1
{
    e32a:	2400      	movs	r4, #0
    e32c:	e004      	b.n	e338 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    e32e:	454a      	cmp	r2, r9
    e330:	d019      	beq.n	e366 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    e332:	3401      	adds	r4, #1
    e334:	2c08      	cmp	r4, #8
    e336:	d012      	beq.n	e35e <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    e338:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    e33c:	00e8      	lsls	r0, r5, #3
    e33e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
    e342:	07d9      	lsls	r1, r3, #31
    e344:	f3c3 1280 	ubfx	r2, r3, #6, #1
    e348:	b2e7      	uxtb	r7, r4
    e34a:	d4f0      	bmi.n	e32e <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    e34c:	2e00      	cmp	r6, #0
    e34e:	d0f0      	beq.n	e332 <ull_filter_rl_find+0x22>
    e350:	7833      	ldrb	r3, [r6, #0]
    e352:	3401      	adds	r4, #1
    e354:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    e356:	bf08      	it	eq
    e358:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    e35a:	2c08      	cmp	r4, #8
    e35c:	d1ec      	bne.n	e338 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
    e35e:	27ff      	movs	r7, #255	; 0xff
}
    e360:	4638      	mov	r0, r7
    e362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    e366:	4450      	add	r0, sl
    e368:	2206      	movs	r2, #6
    e36a:	4659      	mov	r1, fp
    e36c:	f005 ffc5 	bl	142fa <memcmp>
    e370:	2800      	cmp	r0, #0
    e372:	d0f5      	beq.n	e360 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    e374:	2e00      	cmp	r6, #0
    e376:	d0dc      	beq.n	e332 <ull_filter_rl_find+0x22>
    e378:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
    e37c:	07db      	lsls	r3, r3, #31
    e37e:	d4d8      	bmi.n	e332 <ull_filter_rl_find+0x22>
    e380:	e7e6      	b.n	e350 <ull_filter_rl_find+0x40>
    e382:	bf00      	nop
    e384:	200018a8 	.word	0x200018a8

0000e388 <ll_wl_add>:
{
    e388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e38c:	4605      	mov	r5, r0
    e38e:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
    e390:	2000      	movs	r0, #0
    e392:	f7fb fbbb 	bl	9b0c <ull_adv_filter_pol_get>
    e396:	2800      	cmp	r0, #0
    e398:	d140      	bne.n	e41c <ll_wl_add+0x94>
	if (ull_scan_filter_pol_get(0) & 0x1) {
    e39a:	f7fb fd59 	bl	9e50 <ull_scan_filter_pol_get>
    e39e:	f010 0401 	ands.w	r4, r0, #1
    e3a2:	d13b      	bne.n	e41c <ll_wl_add+0x94>
	if (addr->type == ADDR_TYPE_ANON) {
    e3a4:	7828      	ldrb	r0, [r5, #0]
    e3a6:	28ff      	cmp	r0, #255	; 0xff
    e3a8:	d03c      	beq.n	e424 <ll_wl_add+0x9c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
    e3aa:	f105 0801 	add.w	r8, r5, #1
    e3ae:	4641      	mov	r1, r8
    e3b0:	f10d 0207 	add.w	r2, sp, #7
    e3b4:	f7ff fba0 	bl	daf8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    e3b8:	2807      	cmp	r0, #7
    e3ba:	d92b      	bls.n	e414 <ll_wl_add+0x8c>
	} else if (j >= ARRAY_SIZE(wl)) {
    e3bc:	f89d 6007 	ldrb.w	r6, [sp, #7]
    e3c0:	2e07      	cmp	r6, #7
    e3c2:	d836      	bhi.n	e432 <ll_wl_add+0xaa>
	wl[i].id_addr_type = id_addr->type & 0x1;
    e3c4:	4f1e      	ldr	r7, [pc, #120]	; (e440 <ll_wl_add+0xb8>)
    e3c6:	782a      	ldrb	r2, [r5, #0]
    e3c8:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
    e3cc:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
    e3d0:	f362 0341 	bfi	r3, r2, #1, #1
    e3d4:	4641      	mov	r1, r8
    e3d6:	2206      	movs	r2, #6
    e3d8:	3002      	adds	r0, #2
    e3da:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
    e3de:	f005 ff9c 	bl	1431a <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e3e2:	7828      	ldrb	r0, [r5, #0]
    e3e4:	4622      	mov	r2, r4
    e3e6:	4641      	mov	r1, r8
    e3e8:	f7ff ff92 	bl	e310 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
    e3ec:	2807      	cmp	r0, #7
    e3ee:	d822      	bhi.n	e436 <ll_wl_add+0xae>
		rl[j].wl = 1U;
    e3f0:	4914      	ldr	r1, [pc, #80]	; (e444 <ll_wl_add+0xbc>)
    e3f2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
    e3f6:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
    e3fa:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
    e3fe:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
    e400:	f043 0320 	orr.w	r3, r3, #32
    e404:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
	wl[i].taken = 1U;
    e408:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
    e40c:	f043 0301 	orr.w	r3, r3, #1
    e410:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
    e414:	2000      	movs	r0, #0
}
    e416:	b002      	add	sp, #8
    e418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    e41c:	200c      	movs	r0, #12
}
    e41e:	b002      	add	sp, #8
    e420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
    e424:	4b08      	ldr	r3, [pc, #32]	; (e448 <ll_wl_add+0xc0>)
    e426:	2201      	movs	r2, #1
		return 0;
    e428:	4620      	mov	r0, r4
		wl_anon = 1U;
    e42a:	701a      	strb	r2, [r3, #0]
}
    e42c:	b002      	add	sp, #8
    e42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e432:	2007      	movs	r0, #7
	return wl_add(addr);
    e434:	e7f3      	b.n	e41e <ll_wl_add+0x96>
		wl[i].rl_idx = FILTER_IDX_NONE;
    e436:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
    e43a:	22ff      	movs	r2, #255	; 0xff
    e43c:	705a      	strb	r2, [r3, #1]
    e43e:	e7e3      	b.n	e408 <ll_wl_add+0x80>
    e440:	20001a40 	.word	0x20001a40
    e444:	200018a8 	.word	0x200018a8
    e448:	2000206a 	.word	0x2000206a

0000e44c <ll_rl_add>:
{
    e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e450:	4606      	mov	r6, r0
    e452:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    e454:	2000      	movs	r0, #0
{
    e456:	460d      	mov	r5, r1
    e458:	4614      	mov	r4, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    e45a:	f7fb fb4b 	bl	9af4 <ull_adv_is_enabled>
		? 0 : 1;
    e45e:	b118      	cbz	r0, e468 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e460:	200c      	movs	r0, #12
}
    e462:	b005      	add	sp, #20
    e464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e468:	f7ff fc02 	bl	dc70 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
    e46c:	2800      	cmp	r0, #0
    e46e:	d0f7      	beq.n	e460 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
    e470:	46b1      	mov	r9, r6
    e472:	f10d 020f 	add.w	r2, sp, #15
    e476:	f819 0b01 	ldrb.w	r0, [r9], #1
    e47a:	4649      	mov	r1, r9
    e47c:	f7ff ff48 	bl	e310 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    e480:	2807      	cmp	r0, #7
    e482:	f240 8086 	bls.w	e592 <ll_rl_add+0x146>
	} else if (j >= ARRAY_SIZE(rl)) {
    e486:	f89d 800f 	ldrb.w	r8, [sp, #15]
    e48a:	f1b8 0f07 	cmp.w	r8, #7
    e48e:	d879      	bhi.n	e584 <ll_rl_add+0x138>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    e490:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    e494:	4f47      	ldr	r7, [pc, #284]	; (e5b4 <ll_rl_add+0x168>)
    e496:	00db      	lsls	r3, r3, #3
    e498:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
    e49a:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
    e49e:	2206      	movs	r2, #6
    e4a0:	4649      	mov	r1, r9
    e4a2:	4438      	add	r0, r7
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    e4a4:	9301      	str	r3, [sp, #4]
    e4a6:	f005 ff38 	bl	1431a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    e4aa:	7831      	ldrb	r1, [r6, #0]
    e4ac:	f817 203a 	ldrb.w	r2, [r7, sl, lsl #3]
    e4b0:	ea4f 0bca 	mov.w	fp, sl, lsl #3
    e4b4:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
    e4b8:	4628      	mov	r0, r5
    e4ba:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
    e4bc:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
    e4c0:	f7f6 f916 	bl	46f0 <mem_nz>
    e4c4:	f817 200b 	ldrb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
    e4c8:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
    e4ca:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
    e4ce:	4620      	mov	r0, r4
	rl[i].pirk = mem_nz((u8_t *)pirk, IRK_SIZE);
    e4d0:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
    e4d4:	f7f6 f90c 	bl	46f0 <mem_nz>
    e4d8:	f817 200b 	ldrb.w	r2, [r7, fp]
	if (rl[i].pirk) {
    e4dc:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
    e4de:	f000 0001 	and.w	r0, r0, #1
    e4e2:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
    e4e6:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, IRK_SIZE);
    e4ea:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
    e4ee:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
    e4f2:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
    e4f6:	d01a      	beq.n	e52e <ll_rl_add+0xe2>
		rl[i].pirk_idx = peer_irk_count;
    e4f8:	f8df e0c4 	ldr.w	lr, [pc, #196]	; e5c0 <ll_rl_add+0x174>
		peer_irk_rl_ids[peer_irk_count] = i;
    e4fc:	f8df c0c4 	ldr.w	ip, [pc, #196]	; e5c4 <ll_rl_add+0x178>
		rl[i].pirk_idx = peer_irk_count;
    e500:	f89e 1000 	ldrb.w	r1, [lr]
    e504:	4a2c      	ldr	r2, [pc, #176]	; (e5b8 <ll_rl_add+0x16c>)
		peer_irk_rl_ids[peer_irk_count] = i;
    e506:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
    e50a:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
    e50e:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
    e512:	3101      	adds	r1, #1
    e514:	f88e 1000 	strb.w	r1, [lr]
	psrc += length - 1;
    e518:	f10c 3cff 	add.w	ip, ip, #4294967295
    e51c:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
    e520:	1e69      	subs	r1, r5, #1
		*pdst++ = *psrc--;
    e522:	f812 5901 	ldrb.w	r5, [r2], #-1
    e526:	f80c 5f01 	strb.w	r5, [ip, #1]!
	for (; length > 0; length--) {
    e52a:	428a      	cmp	r2, r1
    e52c:	d1f9      	bne.n	e522 <ll_rl_add+0xd6>
	if (rl[i].lirk) {
    e52e:	bb90      	cbnz	r0, e596 <ll_rl_add+0x14a>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
    e530:	f103 0018 	add.w	r0, r3, #24
    e534:	2206      	movs	r2, #6
    e536:	2100      	movs	r1, #0
    e538:	4438      	add	r0, r7
    e53a:	f005 ff19 	bl	14370 <memset>
	rl[i].dev = 0U;
    e53e:	eb0b 0308 	add.w	r3, fp, r8
    e542:	00dc      	lsls	r4, r3, #3
	rl[i].rpas_ready = 0U;
    e544:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    e548:	f023 0312 	bic.w	r3, r3, #18
    e54c:	553b      	strb	r3, [r7, r4]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
    e54e:	4649      	mov	r1, r9
    e550:	7830      	ldrb	r0, [r6, #0]
    e552:	2200      	movs	r2, #0
    e554:	f7ff fad0 	bl	daf8 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
    e558:	2807      	cmp	r0, #7
    e55a:	d815      	bhi.n	e588 <ll_rl_add+0x13c>
		rl[i].wl = 1U;
    e55c:	5d3b      	ldrb	r3, [r7, r4]
		wl[j].rl_idx = i;
    e55e:	4a17      	ldr	r2, [pc, #92]	; (e5bc <ll_rl_add+0x170>)
		rl[i].wl = 1U;
    e560:	f043 0320 	orr.w	r3, r3, #32
		wl[j].rl_idx = i;
    e564:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
    e568:	553b      	strb	r3, [r7, r4]
		wl[j].rl_idx = i;
    e56a:	f880 8001 	strb.w	r8, [r0, #1]
	rl[i].taken = 1U;
    e56e:	44d8      	add	r8, fp
	return 0;
    e570:	2000      	movs	r0, #0
	rl[i].taken = 1U;
    e572:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
    e576:	f043 0301 	orr.w	r3, r3, #1
    e57a:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
}
    e57e:	b005      	add	sp, #20
    e580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    e584:	2007      	movs	r0, #7
    e586:	e76c      	b.n	e462 <ll_rl_add+0x16>
		rl[i].wl = 0U;
    e588:	5d3b      	ldrb	r3, [r7, r4]
    e58a:	f36f 1345 	bfc	r3, #5, #1
    e58e:	553b      	strb	r3, [r7, r4]
    e590:	e7ed      	b.n	e56e <ll_rl_add+0x122>
		return BT_HCI_ERR_INVALID_PARAM;
    e592:	2012      	movs	r0, #18
    e594:	e765      	b.n	e462 <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
    e596:	1dd8      	adds	r0, r3, #7
    e598:	4621      	mov	r1, r4
    e59a:	2210      	movs	r2, #16
    e59c:	4438      	add	r0, r7
    e59e:	9301      	str	r3, [sp, #4]
    e5a0:	f005 febb 	bl	1431a <memcpy>
		rl[i].local_rpa = NULL;
    e5a4:	eb0b 0208 	add.w	r2, fp, r8
    e5a8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
    e5ac:	2100      	movs	r1, #0
    e5ae:	9b01      	ldr	r3, [sp, #4]
    e5b0:	6251      	str	r1, [r2, #36]	; 0x24
    e5b2:	e7bd      	b.n	e530 <ll_rl_add+0xe4>
    e5b4:	200018a8 	.word	0x200018a8
    e5b8:	20001828 	.word	0x20001828
    e5bc:	20001a40 	.word	0x20001a40
    e5c0:	20002068 	.word	0x20002068
    e5c4:	20001820 	.word	0x20001820

0000e5c8 <ll_rl_remove>:
{
    e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5cc:	4605      	mov	r5, r0
    e5ce:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    e5d0:	2000      	movs	r0, #0
    e5d2:	f7fb fa8f 	bl	9af4 <ull_adv_is_enabled>
		? 0 : 1;
    e5d6:	b118      	cbz	r0, e5e0 <ll_rl_remove+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e5d8:	200c      	movs	r0, #12
}
    e5da:	b003      	add	sp, #12
    e5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5e0:	4604      	mov	r4, r0
    e5e2:	f7ff fb45 	bl	dc70 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
    e5e6:	2800      	cmp	r0, #0
    e5e8:	d0f6      	beq.n	e5d8 <ll_rl_remove+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e5ea:	462f      	mov	r7, r5
    e5ec:	4622      	mov	r2, r4
    e5ee:	f817 0b01 	ldrb.w	r0, [r7], #1
    e5f2:	4639      	mov	r1, r7
    e5f4:	f7ff fe8c 	bl	e310 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    e5f8:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e5fa:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
    e5fc:	d903      	bls.n	e606 <ll_rl_remove+0x3e>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e5fe:	2002      	movs	r0, #2
}
    e600:	b003      	add	sp, #12
    e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
    e606:	f8df 80bc 	ldr.w	r8, [pc, #188]	; e6c4 <ll_rl_remove+0xfc>
    e60a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    e60e:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
    e612:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
    e616:	075b      	lsls	r3, r3, #29
    e618:	ea4f 0980 	mov.w	r9, r0, lsl #2
    e61c:	d52e      	bpl.n	e67c <ll_rl_remove+0xb4>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    e61e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; e6c8 <ll_rl_remove+0x100>
    e622:	f89a 2000 	ldrb.w	r2, [sl]
    e626:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
    e628:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
    e62c:	d023      	beq.n	e676 <ll_rl_remove+0xae>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    e62e:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
    e630:	455b      	cmp	r3, fp
    e632:	d021      	beq.n	e678 <ll_rl_remove+0xb0>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
    e634:	4820      	ldr	r0, [pc, #128]	; (e6b8 <ll_rl_remove+0xf0>)
    e636:	9301      	str	r3, [sp, #4]
    e638:	eb00 110b 	add.w	r1, r0, fp, lsl #4
    e63c:	2210      	movs	r2, #16
    e63e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    e642:	f005 fe6a 	bl	1431a <memcpy>
    e646:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
    e648:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    e64c:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
    e650:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
    e654:	f012 0f01 	tst.w	r2, #1
    e658:	b2e0      	uxtb	r0, r4
    e65a:	f104 0401 	add.w	r4, r4, #1
    e65e:	d004      	beq.n	e66a <ll_rl_remove+0xa2>
    e660:	0752      	lsls	r2, r2, #29
    e662:	d502      	bpl.n	e66a <ll_rl_remove+0xa2>
    e664:	7dca      	ldrb	r2, [r1, #23]
    e666:	455a      	cmp	r2, fp
    e668:	d01f      	beq.n	e6aa <ll_rl_remove+0xe2>
				for (k = 0U;
    e66a:	2c08      	cmp	r4, #8
    e66c:	d1ec      	bne.n	e648 <ll_rl_remove+0x80>
    e66e:	f89a 2000 	ldrb.w	r2, [sl]
    e672:	3a01      	subs	r2, #1
    e674:	e000      	b.n	e678 <ll_rl_remove+0xb0>
    e676:	465a      	mov	r2, fp
			peer_irk_count--;
    e678:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
    e67c:	7828      	ldrb	r0, [r5, #0]
    e67e:	4639      	mov	r1, r7
    e680:	2200      	movs	r2, #0
    e682:	f7ff fa39 	bl	daf8 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
    e686:	2807      	cmp	r0, #7
    e688:	d804      	bhi.n	e694 <ll_rl_remove+0xcc>
			wl[j].rl_idx = FILTER_IDX_NONE;
    e68a:	4b0c      	ldr	r3, [pc, #48]	; (e6bc <ll_rl_remove+0xf4>)
    e68c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e690:	23ff      	movs	r3, #255	; 0xff
    e692:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
    e694:	444e      	add	r6, r9
		return 0;
    e696:	2000      	movs	r0, #0
		rl[i].taken = 0U;
    e698:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
    e69c:	f36f 0300 	bfc	r3, #0, #1
    e6a0:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
    e6a4:	b003      	add	sp, #12
    e6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						peer_irk_rl_ids[pi] = k;
    e6aa:	4c05      	ldr	r4, [pc, #20]	; (e6c0 <ll_rl_remove+0xf8>)
    e6ac:	f89a 2000 	ldrb.w	r2, [sl]
    e6b0:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
    e6b2:	75cb      	strb	r3, [r1, #23]
						break;
    e6b4:	3a01      	subs	r2, #1
    e6b6:	e7df      	b.n	e678 <ll_rl_remove+0xb0>
    e6b8:	20001828 	.word	0x20001828
    e6bc:	20001a40 	.word	0x20001a40
    e6c0:	20001820 	.word	0x20001820
    e6c4:	200018a8 	.word	0x200018a8
    e6c8:	20002068 	.word	0x20002068

0000e6cc <ll_rl_crpa_set>:
{
    e6cc:	b538      	push	{r3, r4, r5, lr}
    e6ce:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
    e6d0:	795b      	ldrb	r3, [r3, #5]
    e6d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e6d6:	2b40      	cmp	r3, #64	; 0x40
    e6d8:	d000      	beq.n	e6dc <ll_rl_crpa_set+0x10>
}
    e6da:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
    e6dc:	b119      	cbz	r1, e6e6 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
    e6de:	2200      	movs	r2, #0
    e6e0:	f7ff fe16 	bl	e310 <ull_filter_rl_find>
    e6e4:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    e6e6:	2a07      	cmp	r2, #7
    e6e8:	d8f7      	bhi.n	e6da <ll_rl_crpa_set+0xe>
    e6ea:	4b09      	ldr	r3, [pc, #36]	; (e710 <ll_rl_crpa_set+0x44>)
    e6ec:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    e6f0:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
    e6f4:	07c9      	lsls	r1, r1, #31
    e6f6:	d5f0      	bpl.n	e6da <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
    e6f8:	2118      	movs	r1, #24
    e6fa:	2028      	movs	r0, #40	; 0x28
    e6fc:	fb10 1002 	smlabb	r0, r0, r2, r1
    e700:	4418      	add	r0, r3
    e702:	4621      	mov	r1, r4
    e704:	2206      	movs	r2, #6
}
    e706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
    e70a:	f005 be06 	b.w	1431a <memcpy>
    e70e:	bf00      	nop
    e710:	200018a8 	.word	0x200018a8

0000e714 <ll_rl_crpa_get>:
{
    e714:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e716:	4603      	mov	r3, r0
{
    e718:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e71a:	f813 0b01 	ldrb.w	r0, [r3], #1
    e71e:	2200      	movs	r2, #0
    e720:	4619      	mov	r1, r3
    e722:	f7ff fdf5 	bl	e310 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
    e726:	2807      	cmp	r0, #7
    e728:	d901      	bls.n	e72e <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e72a:	2002      	movs	r0, #2
}
    e72c:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    e72e:	4c09      	ldr	r4, [pc, #36]	; (e754 <ll_rl_crpa_get+0x40>)
    e730:	2328      	movs	r3, #40	; 0x28
    e732:	2218      	movs	r2, #24
    e734:	fb13 2000 	smlabb	r0, r3, r0, r2
    e738:	4404      	add	r4, r0
    e73a:	4620      	mov	r0, r4
    e73c:	2106      	movs	r1, #6
    e73e:	f7f5 ffd7 	bl	46f0 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    e742:	2800      	cmp	r0, #0
    e744:	d0f1      	beq.n	e72a <ll_rl_crpa_get+0x16>
    e746:	4621      	mov	r1, r4
    e748:	4628      	mov	r0, r5
    e74a:	2206      	movs	r2, #6
    e74c:	f005 fde5 	bl	1431a <memcpy>
		return 0;
    e750:	2000      	movs	r0, #0
}
    e752:	bd38      	pop	{r3, r4, r5, pc}
    e754:	200018a8 	.word	0x200018a8

0000e758 <ll_rl_lrpa_get>:
{
    e758:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e75a:	4603      	mov	r3, r0
{
    e75c:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e75e:	f813 0b01 	ldrb.w	r0, [r3], #1
    e762:	2200      	movs	r2, #0
    e764:	4619      	mov	r1, r3
    e766:	f7ff fdd3 	bl	e310 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    e76a:	2807      	cmp	r0, #7
    e76c:	d901      	bls.n	e772 <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e76e:	2002      	movs	r0, #2
}
    e770:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
    e772:	4b06      	ldr	r3, [pc, #24]	; (e78c <ll_rl_lrpa_get+0x34>)
    e774:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e778:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    e77c:	2206      	movs	r2, #6
    e77e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    e780:	4620      	mov	r0, r4
    e782:	f005 fdca 	bl	1431a <memcpy>
		return 0;
    e786:	2000      	movs	r0, #0
}
    e788:	bd10      	pop	{r4, pc}
    e78a:	bf00      	nop
    e78c:	200018a8 	.word	0x200018a8

0000e790 <ll_priv_mode_set>:
{
    e790:	b570      	push	{r4, r5, r6, lr}
    e792:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    e794:	2000      	movs	r0, #0
{
    e796:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    e798:	f7fb f9ac 	bl	9af4 <ull_adv_is_enabled>
		? 0 : 1;
    e79c:	b108      	cbz	r0, e7a2 <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e79e:	200c      	movs	r0, #12
}
    e7a0:	bd70      	pop	{r4, r5, r6, pc}
    e7a2:	4604      	mov	r4, r0
    e7a4:	f7ff fa64 	bl	dc70 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
    e7a8:	2800      	cmp	r0, #0
    e7aa:	d0f8      	beq.n	e79e <ll_priv_mode_set+0xe>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    e7ac:	4629      	mov	r1, r5
    e7ae:	4622      	mov	r2, r4
    e7b0:	f811 0b01 	ldrb.w	r0, [r1], #1
    e7b4:	f7ff fdac 	bl	e310 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    e7b8:	2807      	cmp	r0, #7
    e7ba:	d81a      	bhi.n	e7f2 <ll_priv_mode_set+0x62>
		switch (mode) {
    e7bc:	b176      	cbz	r6, e7dc <ll_priv_mode_set+0x4c>
    e7be:	2e01      	cmp	r6, #1
    e7c0:	d10a      	bne.n	e7d8 <ll_priv_mode_set+0x48>
			rl[i].dev = 1U;
    e7c2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    e7c6:	490c      	ldr	r1, [pc, #48]	; (e7f8 <ll_priv_mode_set+0x68>)
    e7c8:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
    e7cc:	f042 0210 	orr.w	r2, r2, #16
    e7d0:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
    e7d4:	4620      	mov	r0, r4
}
    e7d6:	bd70      	pop	{r4, r5, r6, pc}
		switch (mode) {
    e7d8:	2012      	movs	r0, #18
}
    e7da:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
    e7dc:	4b06      	ldr	r3, [pc, #24]	; (e7f8 <ll_priv_mode_set+0x68>)
    e7de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e7e2:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
    e7e6:	f366 1204 	bfi	r2, r6, #4, #1
    e7ea:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
    e7ee:	4630      	mov	r0, r6
}
    e7f0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e7f2:	2002      	movs	r0, #2
}
    e7f4:	bd70      	pop	{r4, r5, r6, pc}
    e7f6:	bf00      	nop
    e7f8:	200018a8 	.word	0x200018a8

0000e7fc <ull_filter_reset>:
	wl_anon = 0U;
    e7fc:	4a31      	ldr	r2, [pc, #196]	; (e8c4 <ull_filter_reset+0xc8>)
    e7fe:	4932      	ldr	r1, [pc, #200]	; (e8c8 <ull_filter_reset+0xcc>)
{
    e800:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
    e802:	2300      	movs	r3, #0
    e804:	4c31      	ldr	r4, [pc, #196]	; (e8cc <ull_filter_reset+0xd0>)
    e806:	7013      	strb	r3, [r2, #0]
		u8_t j = wl[i].rl_idx;
    e808:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    e80c:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    e80e:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
    e810:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
    e814:	d805      	bhi.n	e822 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
    e816:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
    e81a:	f36f 1245 	bfc	r2, #5, #1
    e81e:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
    e822:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    e826:	f36f 0200 	bfc	r2, #0, #1
    e82a:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    e82e:	3301      	adds	r3, #1
    e830:	2b08      	cmp	r3, #8
    e832:	d1e9      	bne.n	e808 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
    e834:	780f      	ldrb	r7, [r1, #0]
    e836:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    e83a:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
    e83e:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    e842:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
    e846:	2300      	movs	r3, #0
		rl[i].taken = 0U;
    e848:	f363 0700 	bfi	r7, r3, #0, #1
    e84c:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
    e84e:	4f20      	ldr	r7, [pc, #128]	; (e8d0 <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
    e850:	f363 0500 	bfi	r5, r3, #0, #1
    e854:	f363 0400 	bfi	r4, r3, #0, #1
    e858:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
    e85c:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
    e85e:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
    e862:	4f1c      	ldr	r7, [pc, #112]	; (e8d4 <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
    e864:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
    e868:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
    e86c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
    e870:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
    e874:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
    e878:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
    e87a:	f363 0600 	bfi	r6, r3, #0, #1
    e87e:	f363 0500 	bfi	r5, r3, #0, #1
    e882:	f363 0400 	bfi	r4, r3, #0, #1
    e886:	f363 0200 	bfi	r2, r3, #0, #1
    e88a:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
    e88e:	4b12      	ldr	r3, [pc, #72]	; (e8d8 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    e890:	4e12      	ldr	r6, [pc, #72]	; (e8dc <ull_filter_reset+0xe0>)
    e892:	4f13      	ldr	r7, [pc, #76]	; (e8e0 <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
    e894:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
    e898:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
    e89c:	f04f 35ff 	mov.w	r5, #4294967295
    e8a0:	f04f 34ff 	mov.w	r4, #4294967295
    e8a4:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
    e8a8:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    e8ac:	6037      	str	r7, [r6, #0]
	if (init) {
    e8ae:	b120      	cbz	r0, e8ba <ull_filter_reset+0xbe>
}
    e8b0:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
    e8b2:	490c      	ldr	r1, [pc, #48]	; (e8e4 <ull_filter_reset+0xe8>)
    e8b4:	480c      	ldr	r0, [pc, #48]	; (e8e8 <ull_filter_reset+0xec>)
    e8b6:	f006 b9ec 	b.w	14c92 <k_delayed_work_init>
}
    e8ba:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
    e8bc:	480a      	ldr	r0, [pc, #40]	; (e8e8 <ull_filter_reset+0xec>)
    e8be:	f006 b9f0 	b.w	14ca2 <k_delayed_work_cancel>
    e8c2:	bf00      	nop
    e8c4:	2000206a 	.word	0x2000206a
    e8c8:	200018a8 	.word	0x200018a8
    e8cc:	20001a40 	.word	0x20001a40
    e8d0:	20002069 	.word	0x20002069
    e8d4:	20002068 	.word	0x20002068
    e8d8:	20000568 	.word	0x20000568
    e8dc:	20001a1c 	.word	0x20001a1c
    e8e0:	000dbba0 	.word	0x000dbba0
    e8e4:	0000e2d1 	.word	0x0000e2d1
    e8e8:	20001a20 	.word	0x20001a20

0000e8ec <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
    e8ec:	2807      	cmp	r0, #7
    e8ee:	d807      	bhi.n	e900 <ull_filter_lll_lrpa_used+0x14>
    e8f0:	4b04      	ldr	r3, [pc, #16]	; (e904 <ull_filter_lll_lrpa_used+0x18>)
    e8f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e8f6:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
    e8fa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e8fe:	4770      	bx	lr
    e900:	2000      	movs	r0, #0
}
    e902:	4770      	bx	lr
    e904:	200018a8 	.word	0x200018a8

0000e908 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    e908:	2807      	cmp	r0, #7
    e90a:	d80d      	bhi.n	e928 <ull_filter_lll_lrpa_get+0x20>
    e90c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e910:	4906      	ldr	r1, [pc, #24]	; (e92c <ull_filter_lll_lrpa_get+0x24>)
    e912:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
    e916:	071a      	lsls	r2, r3, #28
    e918:	ea4f 00c0 	mov.w	r0, r0, lsl #3
    e91c:	d504      	bpl.n	e928 <ull_filter_lll_lrpa_get+0x20>
    e91e:	079b      	lsls	r3, r3, #30
    e920:	d502      	bpl.n	e928 <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
    e922:	4408      	add	r0, r1
    e924:	6a40      	ldr	r0, [r0, #36]	; 0x24
    e926:	4770      	bx	lr
		return NULL;
    e928:	2000      	movs	r0, #0
    e92a:	4770      	bx	lr
    e92c:	200018a8 	.word	0x200018a8

0000e930 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
    e930:	4b02      	ldr	r3, [pc, #8]	; (e93c <ull_filter_lll_irks_get+0xc>)
    e932:	781b      	ldrb	r3, [r3, #0]
    e934:	7003      	strb	r3, [r0, #0]
}
    e936:	4802      	ldr	r0, [pc, #8]	; (e940 <ull_filter_lll_irks_get+0x10>)
    e938:	4770      	bx	lr
    e93a:	bf00      	nop
    e93c:	20002068 	.word	0x20002068
    e940:	20001828 	.word	0x20001828

0000e944 <ull_filter_lll_rl_idx>:
{
    e944:	b538      	push	{r3, r4, r5, lr}
    e946:	460c      	mov	r4, r1
	if (whitelist) {
    e948:	b150      	cbz	r0, e960 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
    e94a:	2907      	cmp	r1, #7
    e94c:	d822      	bhi.n	e994 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
    e94e:	4d2a      	ldr	r5, [pc, #168]	; (e9f8 <ull_filter_lll_rl_idx+0xb4>)
    e950:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
    e954:	07da      	lsls	r2, r3, #31
    e956:	d52f      	bpl.n	e9b8 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
    e958:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    e95c:	7860      	ldrb	r0, [r4, #1]
}
    e95e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    e960:	2907      	cmp	r1, #7
    e962:	d83a      	bhi.n	e9da <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
    e964:	4b25      	ldr	r3, [pc, #148]	; (e9fc <ull_filter_lll_rl_idx+0xb8>)
    e966:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    e96a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
    e96e:	07db      	lsls	r3, r3, #31
    e970:	d501      	bpl.n	e976 <ull_filter_lll_rl_idx+0x32>
    e972:	4620      	mov	r0, r4
}
    e974:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
    e976:	4a22      	ldr	r2, [pc, #136]	; (ea00 <ull_filter_lll_rl_idx+0xbc>)
    e978:	4922      	ldr	r1, [pc, #136]	; (ea04 <ull_filter_lll_rl_idx+0xc0>)
    e97a:	4823      	ldr	r0, [pc, #140]	; (ea08 <ull_filter_lll_rl_idx+0xc4>)
    e97c:	f240 23b2 	movw	r3, #690	; 0x2b2
    e980:	f005 f9b8 	bl	13cf4 <printk>
    e984:	4040      	eors	r0, r0
    e986:	f380 8811 	msr	BASEPRI, r0
    e98a:	f04f 0003 	mov.w	r0, #3
    e98e:	df02      	svc	2
    e990:	4620      	mov	r0, r4
}
    e992:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
    e994:	4a1a      	ldr	r2, [pc, #104]	; (ea00 <ull_filter_lll_rl_idx+0xbc>)
    e996:	491d      	ldr	r1, [pc, #116]	; (ea0c <ull_filter_lll_rl_idx+0xc8>)
    e998:	481b      	ldr	r0, [pc, #108]	; (ea08 <ull_filter_lll_rl_idx+0xc4>)
    e99a:	f44f 732b 	mov.w	r3, #684	; 0x2ac
    e99e:	f005 f9a9 	bl	13cf4 <printk>
    e9a2:	4040      	eors	r0, r0
    e9a4:	f380 8811 	msr	BASEPRI, r0
    e9a8:	f04f 0003 	mov.w	r0, #3
    e9ac:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
    e9ae:	4d12      	ldr	r5, [pc, #72]	; (e9f8 <ull_filter_lll_rl_idx+0xb4>)
    e9b0:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
    e9b4:	07da      	lsls	r2, r3, #31
    e9b6:	d4cf      	bmi.n	e958 <ull_filter_lll_rl_idx+0x14>
    e9b8:	4a11      	ldr	r2, [pc, #68]	; (ea00 <ull_filter_lll_rl_idx+0xbc>)
    e9ba:	4915      	ldr	r1, [pc, #84]	; (ea10 <ull_filter_lll_rl_idx+0xcc>)
    e9bc:	4812      	ldr	r0, [pc, #72]	; (ea08 <ull_filter_lll_rl_idx+0xc4>)
    e9be:	f240 23ad 	movw	r3, #685	; 0x2ad
    e9c2:	f005 f997 	bl	13cf4 <printk>
    e9c6:	4040      	eors	r0, r0
    e9c8:	f380 8811 	msr	BASEPRI, r0
    e9cc:	f04f 0003 	mov.w	r0, #3
    e9d0:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
    e9d2:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    e9d6:	7860      	ldrb	r0, [r4, #1]
    e9d8:	e7c1      	b.n	e95e <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    e9da:	4a09      	ldr	r2, [pc, #36]	; (ea00 <ull_filter_lll_rl_idx+0xbc>)
    e9dc:	490d      	ldr	r1, [pc, #52]	; (ea14 <ull_filter_lll_rl_idx+0xd0>)
    e9de:	480a      	ldr	r0, [pc, #40]	; (ea08 <ull_filter_lll_rl_idx+0xc4>)
    e9e0:	f44f 732c 	mov.w	r3, #688	; 0x2b0
    e9e4:	f005 f986 	bl	13cf4 <printk>
    e9e8:	4040      	eors	r0, r0
    e9ea:	f380 8811 	msr	BASEPRI, r0
    e9ee:	f04f 0003 	mov.w	r0, #3
    e9f2:	df02      	svc	2
    e9f4:	e7b6      	b.n	e964 <ull_filter_lll_rl_idx+0x20>
    e9f6:	bf00      	nop
    e9f8:	20001a40 	.word	0x20001a40
    e9fc:	200018a8 	.word	0x200018a8
    ea00:	000159f0 	.word	0x000159f0
    ea04:	00015bc8 	.word	0x00015bc8
    ea08:	0001525c 	.word	0x0001525c
    ea0c:	00015a68 	.word	0x00015a68
    ea10:	00015b0c 	.word	0x00015b0c
    ea14:	00015b24 	.word	0x00015b24

0000ea18 <ull_filter_lll_rl_irk_idx>:
{
    ea18:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
    ea1a:	4b20      	ldr	r3, [pc, #128]	; (ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
    ea1c:	781b      	ldrb	r3, [r3, #0]
    ea1e:	4283      	cmp	r3, r0
{
    ea20:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
    ea22:	d90c      	bls.n	ea3e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
    ea24:	4b1e      	ldr	r3, [pc, #120]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    ea26:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    ea28:	2c07      	cmp	r4, #7
    ea2a:	d819      	bhi.n	ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
	LL_ASSERT(rl[i].taken);
    ea2c:	4b1d      	ldr	r3, [pc, #116]	; (eaa4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x44>)
    ea2e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    ea32:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
    ea36:	07db      	lsls	r3, r3, #31
    ea38:	d520      	bpl.n	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
}
    ea3a:	4620      	mov	r0, r4
    ea3c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
    ea3e:	4a1a      	ldr	r2, [pc, #104]	; (eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea40:	491a      	ldr	r1, [pc, #104]	; (eaac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
    ea42:	481b      	ldr	r0, [pc, #108]	; (eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    ea44:	f44f 732f 	mov.w	r3, #700	; 0x2bc
    ea48:	f005 f954 	bl	13cf4 <printk>
    ea4c:	4040      	eors	r0, r0
    ea4e:	f380 8811 	msr	BASEPRI, r0
    ea52:	f04f 0003 	mov.w	r0, #3
    ea56:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
    ea58:	4b11      	ldr	r3, [pc, #68]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    ea5a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    ea5c:	2c07      	cmp	r4, #7
    ea5e:	d9e5      	bls.n	ea2c <ull_filter_lll_rl_irk_idx+0x14>
    ea60:	4a11      	ldr	r2, [pc, #68]	; (eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea62:	4914      	ldr	r1, [pc, #80]	; (eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    ea64:	4812      	ldr	r0, [pc, #72]	; (eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    ea66:	f240 23be 	movw	r3, #702	; 0x2be
    ea6a:	f005 f943 	bl	13cf4 <printk>
    ea6e:	4040      	eors	r0, r0
    ea70:	f380 8811 	msr	BASEPRI, r0
    ea74:	f04f 0003 	mov.w	r0, #3
    ea78:	df02      	svc	2
    ea7a:	e7d7      	b.n	ea2c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
    ea7c:	4a0a      	ldr	r2, [pc, #40]	; (eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea7e:	490e      	ldr	r1, [pc, #56]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    ea80:	480b      	ldr	r0, [pc, #44]	; (eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    ea82:	f240 23bf 	movw	r3, #703	; 0x2bf
    ea86:	f005 f935 	bl	13cf4 <printk>
    ea8a:	4040      	eors	r0, r0
    ea8c:	f380 8811 	msr	BASEPRI, r0
    ea90:	f04f 0003 	mov.w	r0, #3
    ea94:	df02      	svc	2
}
    ea96:	4620      	mov	r0, r4
    ea98:	bd10      	pop	{r4, pc}
    ea9a:	bf00      	nop
    ea9c:	20002068 	.word	0x20002068
    eaa0:	20001820 	.word	0x20001820
    eaa4:	200018a8 	.word	0x200018a8
    eaa8:	000159f0 	.word	0x000159f0
    eaac:	00015bd4 	.word	0x00015bd4
    eab0:	0001525c 	.word	0x0001525c
    eab4:	00015bf4 	.word	0x00015bf4
    eab8:	00015bc8 	.word	0x00015bc8

0000eabc <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    eabc:	2807      	cmp	r0, #7
    eabe:	d823      	bhi.n	eb08 <ull_filter_lll_irk_whitelisted+0x4c>
{
    eac0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
    eac2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    eac6:	4e11      	ldr	r6, [pc, #68]	; (eb0c <ull_filter_lll_irk_whitelisted+0x50>)
    eac8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
    eacc:	07db      	lsls	r3, r3, #31
    eace:	4604      	mov	r4, r0
    ead0:	ea4f 0580 	mov.w	r5, r0, lsl #2
    ead4:	d505      	bpl.n	eae2 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
    ead6:	442c      	add	r4, r5
    ead8:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
    eadc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
    eae0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
    eae2:	4a0b      	ldr	r2, [pc, #44]	; (eb10 <ull_filter_lll_irk_whitelisted+0x54>)
    eae4:	490b      	ldr	r1, [pc, #44]	; (eb14 <ull_filter_lll_irk_whitelisted+0x58>)
    eae6:	480c      	ldr	r0, [pc, #48]	; (eb18 <ull_filter_lll_irk_whitelisted+0x5c>)
    eae8:	f240 23ca 	movw	r3, #714	; 0x2ca
    eaec:	f005 f902 	bl	13cf4 <printk>
    eaf0:	4040      	eors	r0, r0
    eaf2:	f380 8811 	msr	BASEPRI, r0
    eaf6:	f04f 0003 	mov.w	r0, #3
    eafa:	df02      	svc	2
	return rl[rl_idx].wl;
    eafc:	442c      	add	r4, r5
    eafe:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
    eb02:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
    eb06:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    eb08:	2000      	movs	r0, #0
}
    eb0a:	4770      	bx	lr
    eb0c:	200018a8 	.word	0x200018a8
    eb10:	000159f0 	.word	0x000159f0
    eb14:	00015a40 	.word	0x00015a40
    eb18:	0001525c 	.word	0x0001525c

0000eb1c <ull_filter_lll_get>:
		return &wl_filter;
    eb1c:	4a03      	ldr	r2, [pc, #12]	; (eb2c <ull_filter_lll_get+0x10>)
    eb1e:	4b04      	ldr	r3, [pc, #16]	; (eb30 <ull_filter_lll_get+0x14>)
}
    eb20:	2800      	cmp	r0, #0
    eb22:	bf0c      	ite	eq
    eb24:	4610      	moveq	r0, r2
    eb26:	4618      	movne	r0, r3
    eb28:	4770      	bx	lr
    eb2a:	bf00      	nop
    eb2c:	200019e8 	.word	0x200019e8
    eb30:	20001a80 	.word	0x20001a80

0000eb34 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    eb34:	4b14      	ldr	r3, [pc, #80]	; (eb88 <ull_filter_lll_rl_idx_allowed+0x54>)
    eb36:	781b      	ldrb	r3, [r3, #0]
    eb38:	b19b      	cbz	r3, eb62 <ull_filter_lll_rl_idx_allowed+0x2e>
    eb3a:	2907      	cmp	r1, #7
{
    eb3c:	b570      	push	{r4, r5, r6, lr}
    eb3e:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    eb40:	d80d      	bhi.n	eb5e <ull_filter_lll_rl_idx_allowed+0x2a>
    eb42:	b960      	cbnz	r0, eb5e <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
    eb44:	4e11      	ldr	r6, [pc, #68]	; (eb8c <ull_filter_lll_rl_idx_allowed+0x58>)
    eb46:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    eb4a:	008d      	lsls	r5, r1, #2
    eb4c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
    eb50:	07da      	lsls	r2, r3, #31
    eb52:	d50b      	bpl.n	eb6c <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    eb54:	442c      	add	r4, r5
    eb56:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
    eb5a:	0743      	lsls	r3, r0, #29
    eb5c:	d403      	bmi.n	eb66 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
    eb5e:	2001      	movs	r0, #1
}
    eb60:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    eb62:	2001      	movs	r0, #1
}
    eb64:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    eb66:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
    eb6a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
    eb6c:	4a08      	ldr	r2, [pc, #32]	; (eb90 <ull_filter_lll_rl_idx_allowed+0x5c>)
    eb6e:	4909      	ldr	r1, [pc, #36]	; (eb94 <ull_filter_lll_rl_idx_allowed+0x60>)
    eb70:	4809      	ldr	r0, [pc, #36]	; (eb98 <ull_filter_lll_rl_idx_allowed+0x64>)
    eb72:	f240 23f2 	movw	r3, #754	; 0x2f2
    eb76:	f005 f8bd 	bl	13cf4 <printk>
    eb7a:	4040      	eors	r0, r0
    eb7c:	f380 8811 	msr	BASEPRI, r0
    eb80:	f04f 0003 	mov.w	r0, #3
    eb84:	df02      	svc	2
    eb86:	e7e5      	b.n	eb54 <ull_filter_lll_rl_idx_allowed+0x20>
    eb88:	20002069 	.word	0x20002069
    eb8c:	200018a8 	.word	0x200018a8
    eb90:	000159f0 	.word	0x000159f0
    eb94:	00015a40 	.word	0x00015a40
    eb98:	0001525c 	.word	0x0001525c

0000eb9c <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
    eb9c:	4b1c      	ldr	r3, [pc, #112]	; (ec10 <ull_filter_lll_rl_addr_allowed+0x74>)
    eb9e:	781b      	ldrb	r3, [r3, #0]
    eba0:	b1fb      	cbz	r3, ebe2 <ull_filter_lll_rl_addr_allowed+0x46>
    eba2:	7813      	ldrb	r3, [r2, #0]
    eba4:	2bff      	cmp	r3, #255	; 0xff
    eba6:	d11c      	bne.n	ebe2 <ull_filter_lll_rl_addr_allowed+0x46>
{
    eba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ebac:	4d19      	ldr	r5, [pc, #100]	; (ec14 <ull_filter_lll_rl_addr_allowed+0x78>)
    ebae:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
    ebb0:	2300      	movs	r3, #0
    ebb2:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    ebb4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    ebb8:	fa5f fe83 	uxtb.w	lr, r3
    ebbc:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
    ebc0:	f014 0001 	ands.w	r0, r4, #1
    ebc4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    ebc8:	d003      	beq.n	ebd2 <ull_filter_lll_rl_addr_allowed+0x36>
    ebca:	f3c4 1480 	ubfx	r4, r4, #6, #1
    ebce:	42b4      	cmp	r4, r6
    ebd0:	d009      	beq.n	ebe6 <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    ebd2:	3301      	adds	r3, #1
    ebd4:	2b08      	cmp	r3, #8
    ebd6:	f105 0528 	add.w	r5, r5, #40	; 0x28
    ebda:	d1eb      	bne.n	ebb4 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
    ebdc:	2001      	movs	r0, #1
}
    ebde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
    ebe2:	2001      	movs	r0, #1
}
    ebe4:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
    ebe6:	1fac      	subs	r4, r5, #6
    ebe8:	f101 38ff 	add.w	r8, r1, #4294967295
				if (addr[j] != id_addr[j]) {
    ebec:	f814 af01 	ldrb.w	sl, [r4, #1]!
    ebf0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    ebf4:	45ca      	cmp	sl, r9
    ebf6:	d1ec      	bne.n	ebd2 <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
    ebf8:	42ac      	cmp	r4, r5
    ebfa:	d1f7      	bne.n	ebec <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
    ebfc:	4463      	add	r3, ip
				*rl_idx = i;
    ebfe:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
    ec02:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    ec06:	075a      	lsls	r2, r3, #29
    ec08:	d5e9      	bpl.n	ebde <ull_filter_lll_rl_addr_allowed+0x42>
    ec0a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    ec0e:	e7e6      	b.n	ebde <ull_filter_lll_rl_addr_allowed+0x42>
    ec10:	20002069 	.word	0x20002069
    ec14:	200018ae 	.word	0x200018ae

0000ec18 <ull_filter_lll_rl_addr_resolve>:
{
    ec18:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    ec1a:	4b0e      	ldr	r3, [pc, #56]	; (ec54 <ull_filter_lll_rl_addr_resolve+0x3c>)
    ec1c:	781c      	ldrb	r4, [r3, #0]
    ec1e:	b174      	cbz	r4, ec3e <ull_filter_lll_rl_addr_resolve+0x26>
    ec20:	2a07      	cmp	r2, #7
    ec22:	d80c      	bhi.n	ec3e <ull_filter_lll_rl_addr_resolve+0x26>
    ec24:	4c0c      	ldr	r4, [pc, #48]	; (ec58 <ull_filter_lll_rl_addr_resolve+0x40>)
    ec26:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    ec2a:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
    ec2e:	072b      	lsls	r3, r5, #28
    ec30:	d505      	bpl.n	ec3e <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
    ec32:	b120      	cbz	r0, ec3e <ull_filter_lll_rl_addr_resolve+0x26>
    ec34:	794b      	ldrb	r3, [r1, #5]
    ec36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ec3a:	2b40      	cmp	r3, #64	; 0x40
    ec3c:	d002      	beq.n	ec44 <ull_filter_lll_rl_addr_resolve+0x2c>
}
    ec3e:	2000      	movs	r0, #0
    ec40:	bc30      	pop	{r4, r5}
    ec42:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    ec44:	2028      	movs	r0, #40	; 0x28
    ec46:	fb00 4002 	mla	r0, r0, r2, r4
    ec4a:	3007      	adds	r0, #7
}
    ec4c:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    ec4e:	f005 bbd4 	b.w	143fa <bt_rpa_irk_matches>
    ec52:	bf00      	nop
    ec54:	20002069 	.word	0x20002069
    ec58:	200018a8 	.word	0x200018a8

0000ec5c <ull_filter_lll_rl_enabled>:
	return rl_enable;
    ec5c:	4b02      	ldr	r3, [pc, #8]	; (ec68 <ull_filter_lll_rl_enabled+0xc>)
    ec5e:	7818      	ldrb	r0, [r3, #0]
}
    ec60:	3800      	subs	r0, #0
    ec62:	bf18      	it	ne
    ec64:	2001      	movne	r0, #1
    ec66:	4770      	bx	lr
    ec68:	20002069 	.word	0x20002069

0000ec6c <radio_nrf5_isr>:
#if (CONFIG_BT_CTLR_LLL_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
static void ticker_op_job_disable(u32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ec6c:	4668      	mov	r0, sp
    ec6e:	f020 0107 	bic.w	r1, r0, #7
    ec72:	468d      	mov	sp, r1
    ec74:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
    ec76:	f002 fabd 	bl	111f4 <isr_radio>

	ISR_DIRECT_PM();
    ec7a:	f7f5 f943 	bl	3f04 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
    ec7e:	f7f5 fa35 	bl	40ec <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ec82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    ec86:	4685      	mov	sp, r0
    ec88:	4770      	bx	lr
    ec8a:	bf00      	nop

0000ec8c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    ec8c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    ec8e:	4b09      	ldr	r3, [pc, #36]	; (ecb4 <rtc0_nrf5_isr+0x28>)
    ec90:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ec94:	b93a      	cbnz	r2, eca6 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    ec96:	2001      	movs	r0, #1
    ec98:	f7f5 fe0c 	bl	48b4 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
    ec9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
    eca0:	2002      	movs	r0, #2
    eca2:	f7f5 be07 	b.w	48b4 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    eca6:	2000      	movs	r0, #0
    eca8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
    ecac:	f7f6 ff40 	bl	5b30 <ticker_trigger>
    ecb0:	e7f1      	b.n	ec96 <rtc0_nrf5_isr+0xa>
    ecb2:	bf00      	nop
    ecb4:	4000b000 	.word	0x4000b000

0000ecb8 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
    ecb8:	2000      	movs	r0, #0
    ecba:	f7f5 bdfb 	b.w	48b4 <mayfly_run>
    ecbe:	bf00      	nop

0000ecc0 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ecc0:	2801      	cmp	r0, #1
    ecc2:	d800      	bhi.n	ecc6 <ticker_start_op_cb+0x6>
    ecc4:	4770      	bx	lr
{
    ecc6:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    ecc8:	4a06      	ldr	r2, [pc, #24]	; (ece4 <ticker_start_op_cb+0x24>)
    ecca:	4907      	ldr	r1, [pc, #28]	; (ece8 <ticker_start_op_cb+0x28>)
    eccc:	4807      	ldr	r0, [pc, #28]	; (ecec <ticker_start_op_cb+0x2c>)
    ecce:	f240 2307 	movw	r3, #519	; 0x207
    ecd2:	f005 f80f 	bl	13cf4 <printk>
    ecd6:	4040      	eors	r0, r0
    ecd8:	f380 8811 	msr	BASEPRI, r0
    ecdc:	f04f 0003 	mov.w	r0, #3
    ece0:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
    ece2:	bd08      	pop	{r3, pc}
    ece4:	00015bfc 	.word	0x00015bfc
    ece8:	00015c44 	.word	0x00015c44
    ecec:	0001525c 	.word	0x0001525c

0000ecf0 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
    ecf0:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    ecf2:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
    ecf4:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
    ecf6:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    ecf8:	4c15      	ldr	r4, [pc, #84]	; (ed50 <preempt_ticker_start.isra.0+0x60>)
    ecfa:	4916      	ldr	r1, [pc, #88]	; (ed54 <preempt_ticker_start.isra.0+0x64>)
    ecfc:	9208      	str	r2, [sp, #32]
    ecfe:	e9cd 2203 	strd	r2, r2, [sp, #12]
    ed02:	e9cd 2201 	strd	r2, r2, [sp, #4]
    ed06:	9206      	str	r2, [sp, #24]
    ed08:	9407      	str	r4, [sp, #28]
    ed0a:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
    ed0c:	e9d3 5400 	ldrd	r5, r4, [r3]
    ed10:	6899      	ldr	r1, [r3, #8]
    ed12:	42a5      	cmp	r5, r4
    ed14:	bf2c      	ite	cs
    ed16:	ebc1 0105 	rsbcs	r1, r1, r5
    ed1a:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
    ed1e:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    ed20:	9100      	str	r1, [sp, #0]
    ed22:	4610      	mov	r0, r2
    ed24:	4611      	mov	r1, r2
    ed26:	f7f6 ff71 	bl	5c0c <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ed2a:	2802      	cmp	r0, #2
    ed2c:	d801      	bhi.n	ed32 <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
    ed2e:	b00b      	add	sp, #44	; 0x2c
    ed30:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ed32:	4a09      	ldr	r2, [pc, #36]	; (ed58 <preempt_ticker_start.isra.0+0x68>)
    ed34:	4909      	ldr	r1, [pc, #36]	; (ed5c <preempt_ticker_start.isra.0+0x6c>)
    ed36:	480a      	ldr	r0, [pc, #40]	; (ed60 <preempt_ticker_start.isra.0+0x70>)
    ed38:	f240 2325 	movw	r3, #549	; 0x225
    ed3c:	f004 ffda 	bl	13cf4 <printk>
    ed40:	4040      	eors	r0, r0
    ed42:	f380 8811 	msr	BASEPRI, r0
    ed46:	f04f 0003 	mov.w	r0, #3
    ed4a:	df02      	svc	2
}
    ed4c:	b00b      	add	sp, #44	; 0x2c
    ed4e:	bd30      	pop	{r4, r5, pc}
    ed50:	0000ecc1 	.word	0x0000ecc1
    ed54:	0000ef85 	.word	0x0000ef85
    ed58:	00015bfc 	.word	0x00015bfc
    ed5c:	00015c64 	.word	0x00015c64
    ed60:	0001525c 	.word	0x0001525c

0000ed64 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
    ed64:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	u8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
    ed66:	4e4c      	ldr	r6, [pc, #304]	; (ee98 <preempt+0x134>)
{
    ed68:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
    ed6a:	f7fa f9e1 	bl	9130 <ull_prepare_dequeue_get>
	if (!event.curr.abort_cb || !event.curr.param) {
    ed6e:	68b3      	ldr	r3, [r6, #8]
	u8_t idx = UINT8_MAX;
    ed70:	22ff      	movs	r2, #255	; 0xff
    ed72:	f88d 200e 	strb.w	r2, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
    ed76:	b19b      	cbz	r3, eda0 <preempt+0x3c>
    ed78:	6833      	ldr	r3, [r6, #0]
    ed7a:	b18b      	cbz	r3, eda0 <preempt+0x3c>
		return;
	}

	next = ull_prepare_dequeue_iter(&idx);
    ed7c:	f10d 000e 	add.w	r0, sp, #14
    ed80:	f7fa f9e4 	bl	914c <ull_prepare_dequeue_iter>
	if (!next) {
    ed84:	4604      	mov	r4, r0
    ed86:	b158      	cbz	r0, eda0 <preempt+0x3c>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
    ed88:	f894 3020 	ldrb.w	r3, [r4, #32]
    ed8c:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
    ed90:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
    ed94:	d006      	beq.n	eda4 <preempt+0x40>
		next = ull_prepare_dequeue_iter(&idx);
    ed96:	f7fa f9d9 	bl	914c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
    ed9a:	4604      	mov	r4, r0
    ed9c:	2800      	cmp	r0, #0
    ed9e:	d1f3      	bne.n	ed88 <preempt+0x24>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
    eda0:	b00b      	add	sp, #44	; 0x2c
    eda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
    eda4:	ab05      	add	r3, sp, #20
    eda6:	e9d6 2700 	ldrd	r2, r7, [r6]
    edaa:	69e1      	ldr	r1, [r4, #28]
    edac:	68e0      	ldr	r0, [r4, #12]
    edae:	9300      	str	r3, [sp, #0]
    edb0:	ab04      	add	r3, sp, #16
    edb2:	47b8      	blx	r7
	if (!ret) {
    edb4:	4607      	mov	r7, r0
    edb6:	2800      	cmp	r0, #0
    edb8:	d062      	beq.n	ee80 <preempt+0x11c>
	event.curr.abort_cb(NULL, event.curr.param);
    edba:	68b3      	ldr	r3, [r6, #8]
    edbc:	6831      	ldr	r1, [r6, #0]
    edbe:	4628      	mov	r0, r5
    edc0:	4798      	blx	r3
	if (ret == -EAGAIN) {
    edc2:	f117 0f0b 	cmn.w	r7, #11
    edc6:	d01a      	beq.n	edfe <preempt+0x9a>
		LL_ASSERT(ret == -ECANCELED);
    edc8:	3748      	adds	r7, #72	; 0x48
    edca:	d011      	beq.n	edf0 <preempt+0x8c>
    edcc:	4a33      	ldr	r2, [pc, #204]	; (ee9c <preempt+0x138>)
    edce:	4934      	ldr	r1, [pc, #208]	; (eea0 <preempt+0x13c>)
    edd0:	4834      	ldr	r0, [pc, #208]	; (eea4 <preempt+0x140>)
    edd2:	f240 236f 	movw	r3, #623	; 0x26f
    edd6:	f004 ff8d 	bl	13cf4 <printk>
    edda:	4040      	eors	r0, r0
    eddc:	f380 8811 	msr	BASEPRI, r0
    ede0:	f04f 0003 	mov.w	r0, #3
    ede4:	df02      	svc	2
    ede6:	e003      	b.n	edf0 <preempt+0x8c>
	} while (next->is_aborted || next->is_resume);
    ede8:	f890 3020 	ldrb.w	r3, [r0, #32]
    edec:	079b      	lsls	r3, r3, #30
    edee:	d041      	beq.n	ee74 <preempt+0x110>
		next = ull_prepare_dequeue_iter(&idx);
    edf0:	f10d 000e 	add.w	r0, sp, #14
    edf4:	f7fa f9aa 	bl	914c <ull_prepare_dequeue_iter>
		if (!next) {
    edf8:	2800      	cmp	r0, #0
    edfa:	d1f5      	bne.n	ede8 <preempt+0x84>
    edfc:	e7d0      	b.n	eda0 <preempt+0x3c>
		u8_t iter_idx = UINT8_MAX;
    edfe:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
    ee00:	f10d 000f 	add.w	r0, sp, #15
		u8_t iter_idx = UINT8_MAX;
    ee04:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
    ee08:	f7fa f9a0 	bl	914c <ull_prepare_dequeue_iter>
		while (iter) {
    ee0c:	bb48      	cbnz	r0, ee62 <preempt+0xfe>
	prepare_param.param = event.curr.param;
    ee0e:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
    ee10:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    ee12:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
    ee14:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    ee16:	2301      	movs	r3, #1
	event.curr.param = NULL;
    ee18:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    ee1a:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
    ee1c:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    ee1e:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
    ee22:	9b04      	ldr	r3, [sp, #16]
    ee24:	aa06      	add	r2, sp, #24
    ee26:	f7fa f94b 	bl	90c0 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    ee2a:	2800      	cmp	r0, #0
    ee2c:	d0e0      	beq.n	edf0 <preempt+0x8c>
    ee2e:	4a1b      	ldr	r2, [pc, #108]	; (ee9c <preempt+0x138>)
    ee30:	491d      	ldr	r1, [pc, #116]	; (eea8 <preempt+0x144>)
    ee32:	481c      	ldr	r0, [pc, #112]	; (eea4 <preempt+0x140>)
    ee34:	f240 236d 	movw	r3, #621	; 0x26d
    ee38:	f004 ff5c 	bl	13cf4 <printk>
    ee3c:	4040      	eors	r0, r0
    ee3e:	f380 8811 	msr	BASEPRI, r0
    ee42:	f04f 0003 	mov.w	r0, #3
    ee46:	df02      	svc	2
    ee48:	e7d2      	b.n	edf0 <preempt+0x8c>
				iter->is_aborted = 1;
    ee4a:	f043 0302 	orr.w	r3, r3, #2
    ee4e:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
    ee52:	6983      	ldr	r3, [r0, #24]
    ee54:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
    ee56:	f10d 000f 	add.w	r0, sp, #15
    ee5a:	f7fa f977 	bl	914c <ull_prepare_dequeue_iter>
		while (iter) {
    ee5e:	2800      	cmp	r0, #0
    ee60:	d0d5      	beq.n	ee0e <preempt+0xaa>
			if (!iter->is_aborted &&
    ee62:	f890 3020 	ldrb.w	r3, [r0, #32]
    ee66:	079a      	lsls	r2, r3, #30
    ee68:	d4f5      	bmi.n	ee56 <preempt+0xf2>
			    event.curr.param == iter->prepare_param.param) {
    ee6a:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
    ee6c:	6831      	ldr	r1, [r6, #0]
    ee6e:	4291      	cmp	r1, r2
    ee70:	d1f1      	bne.n	ee56 <preempt+0xf2>
    ee72:	e7ea      	b.n	ee4a <preempt+0xe6>
	preempt_ticker_start(&next->prepare_param);
    ee74:	68c1      	ldr	r1, [r0, #12]
    ee76:	6800      	ldr	r0, [r0, #0]
    ee78:	f7ff ff3a 	bl	ecf0 <preempt_ticker_start.isra.0>
}
    ee7c:	b00b      	add	sp, #44	; 0x2c
    ee7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
    ee80:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    ee84:	69a2      	ldr	r2, [r4, #24]
    ee86:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
    ee88:	f043 0302 	orr.w	r3, r3, #2
    ee8c:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    ee90:	4620      	mov	r0, r4
    ee92:	4790      	blx	r2
		goto preempt_next;
    ee94:	e7ac      	b.n	edf0 <preempt+0x8c>
    ee96:	bf00      	nop
    ee98:	20001ab8 	.word	0x20001ab8
    ee9c:	00015bfc 	.word	0x00015bfc
    eea0:	00015c8c 	.word	0x00015c8c
    eea4:	0001525c 	.word	0x0001525c
    eea8:	000154d0 	.word	0x000154d0

0000eeac <prepare>:
{
    eeac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eeb0:	b085      	sub	sp, #20
    eeb2:	4604      	mov	r4, r0
	u8_t idx = UINT8_MAX;
    eeb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
    eeb8:	f10d 000f 	add.w	r0, sp, #15
{
    eebc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    eec0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	u8_t idx = UINT8_MAX;
    eec4:	f88d c00f 	strb.w	ip, [sp, #15]
{
    eec8:	460d      	mov	r5, r1
    eeca:	4616      	mov	r6, r2
    eecc:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
    eece:	f7fa f93d 	bl	914c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
    eed2:	b918      	cbnz	r0, eedc <prepare+0x30>
    eed4:	e01d      	b.n	ef12 <prepare+0x66>
		p = ull_prepare_dequeue_iter(&idx);
    eed6:	f7fa f939 	bl	914c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
    eeda:	b1d0      	cbz	r0, ef12 <prepare+0x66>
    eedc:	f890 3020 	ldrb.w	r3, [r0, #32]
    eee0:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
    eee2:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
    eee6:	d1f6      	bne.n	eed6 <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
    eee8:	4b22      	ldr	r3, [pc, #136]	; (ef74 <prepare+0xc8>)
    eeea:	689a      	ldr	r2, [r3, #8]
    eeec:	b9a2      	cbnz	r2, ef18 <prepare+0x6c>
    eeee:	f1b9 0f00 	cmp.w	r9, #0
    eef2:	d035      	beq.n	ef60 <prepare+0xb4>
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
    eef4:	2201      	movs	r2, #1
    eef6:	9201      	str	r2, [sp, #4]
    eef8:	9700      	str	r7, [sp, #0]
    eefa:	4633      	mov	r3, r6
    eefc:	4629      	mov	r1, r5
    eefe:	4620      	mov	r0, r4
    ef00:	4642      	mov	r2, r8
    ef02:	f7fa f8dd 	bl	90c0 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    ef06:	b9d0      	cbnz	r0, ef3e <prepare+0x92>
		return -EINPROGRESS;
    ef08:	f06f 0043 	mvn.w	r0, #67	; 0x43
}
    ef0c:	b005      	add	sp, #20
    ef0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
    ef12:	4b18      	ldr	r3, [pc, #96]	; (ef74 <prepare+0xc8>)
    ef14:	689a      	ldr	r2, [r3, #8]
    ef16:	b31a      	cbz	r2, ef60 <prepare+0xb4>
		ret = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
    ef18:	e9cd 7900 	strd	r7, r9, [sp]
    ef1c:	4633      	mov	r3, r6
    ef1e:	4629      	mov	r1, r5
    ef20:	4620      	mov	r0, r4
    ef22:	4642      	mov	r2, r8
    ef24:	f7fa f8cc 	bl	90c0 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
    ef28:	b948      	cbnz	r0, ef3e <prepare+0x92>
		if (is_resume) {
    ef2a:	f1b9 0f00 	cmp.w	r9, #0
    ef2e:	d1eb      	bne.n	ef08 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
    ef30:	f8d8 100c 	ldr.w	r1, [r8, #12]
    ef34:	f8d8 0000 	ldr.w	r0, [r8]
    ef38:	f7ff feda 	bl	ecf0 <preempt_ticker_start.isra.0>
    ef3c:	e7e4      	b.n	ef08 <prepare+0x5c>
		LL_ASSERT(!ret);
    ef3e:	4a0e      	ldr	r2, [pc, #56]	; (ef78 <prepare+0xcc>)
    ef40:	490e      	ldr	r1, [pc, #56]	; (ef7c <prepare+0xd0>)
    ef42:	480f      	ldr	r0, [pc, #60]	; (ef80 <prepare+0xd4>)
    ef44:	f240 13bb 	movw	r3, #443	; 0x1bb
    ef48:	f004 fed4 	bl	13cf4 <printk>
    ef4c:	4040      	eors	r0, r0
    ef4e:	f380 8811 	msr	BASEPRI, r0
    ef52:	f04f 0003 	mov.w	r0, #3
    ef56:	df02      	svc	2
		if (is_resume) {
    ef58:	f1b9 0f00 	cmp.w	r9, #0
    ef5c:	d1d4      	bne.n	ef08 <prepare+0x5c>
    ef5e:	e7e7      	b.n	ef30 <prepare+0x84>
	event.curr.param = prepare_param->param;
    ef60:	f8d8 200c 	ldr.w	r2, [r8, #12]
    ef64:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
    ef66:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
    ef6a:	4640      	mov	r0, r8
    ef6c:	47b0      	blx	r6
}
    ef6e:	b005      	add	sp, #20
    ef70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef74:	20001ab8 	.word	0x20001ab8
    ef78:	00015bfc 	.word	0x00015bfc
    ef7c:	000154d0 	.word	0x000154d0
    ef80:	0001525c 	.word	0x0001525c

0000ef84 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ef84:	2200      	movs	r2, #0
{
    ef86:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ef88:	4611      	mov	r1, r2
    ef8a:	4b0a      	ldr	r3, [pc, #40]	; (efb4 <preempt_ticker_cb+0x30>)
    ef8c:	2001      	movs	r0, #1
    ef8e:	f7f5 fc3d 	bl	480c <mayfly_enqueue>
	LL_ASSERT(!ret);
    ef92:	b900      	cbnz	r0, ef96 <preempt_ticker_cb+0x12>
}
    ef94:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    ef96:	4a08      	ldr	r2, [pc, #32]	; (efb8 <preempt_ticker_cb+0x34>)
    ef98:	4908      	ldr	r1, [pc, #32]	; (efbc <preempt_ticker_cb+0x38>)
    ef9a:	4809      	ldr	r0, [pc, #36]	; (efc0 <preempt_ticker_cb+0x3c>)
    ef9c:	f240 2333 	movw	r3, #563	; 0x233
    efa0:	f004 fea8 	bl	13cf4 <printk>
    efa4:	4040      	eors	r0, r0
    efa6:	f380 8811 	msr	BASEPRI, r0
    efaa:	f04f 0003 	mov.w	r0, #3
    efae:	df02      	svc	2
}
    efb0:	bd08      	pop	{r3, pc}
    efb2:	bf00      	nop
    efb4:	2000038c 	.word	0x2000038c
    efb8:	00015bfc 	.word	0x00015bfc
    efbc:	000154d0 	.word	0x000154d0
    efc0:	0001525c 	.word	0x0001525c

0000efc4 <lll_init>:
{
    efc4:	b510      	push	{r4, lr}
    efc6:	4815      	ldr	r0, [pc, #84]	; (f01c <lll_init+0x58>)
    efc8:	f003 fed0 	bl	12d6c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
    efcc:	4b14      	ldr	r3, [pc, #80]	; (f020 <lll_init+0x5c>)
    efce:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
    efd0:	b300      	cbz	r0, f014 <lll_init+0x50>
	event.curr.abort_cb = NULL;
    efd2:	4b14      	ldr	r3, [pc, #80]	; (f024 <lll_init+0x60>)
    efd4:	2200      	movs	r2, #0
    efd6:	609a      	str	r2, [r3, #8]
	err = lll_clock_init();
    efd8:	f000 f994 	bl	f304 <lll_clock_init>
	if (err) {
    efdc:	4604      	mov	r4, r0
    efde:	b9b8      	cbnz	r0, f010 <lll_init+0x4c>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    efe0:	4602      	mov	r2, r0
    efe2:	4601      	mov	r1, r0
    efe4:	2001      	movs	r0, #1
    efe6:	f7f4 ff75 	bl	3ed4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
    efea:	4622      	mov	r2, r4
    efec:	4621      	mov	r1, r4
    efee:	200b      	movs	r0, #11
    eff0:	f7f4 ff70 	bl	3ed4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
    eff4:	4622      	mov	r2, r4
    eff6:	4621      	mov	r1, r4
    eff8:	2018      	movs	r0, #24
    effa:	f7f4 ff6b 	bl	3ed4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    effe:	2001      	movs	r0, #1
    f000:	f7f4 ff36 	bl	3e70 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
    f004:	200b      	movs	r0, #11
    f006:	f7f4 ff33 	bl	3e70 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
    f00a:	2018      	movs	r0, #24
    f00c:	f7f4 ff30 	bl	3e70 <arch_irq_enable>
}
    f010:	4620      	mov	r0, r4
    f012:	bd10      	pop	{r4, pc}
		return -ENODEV;
    f014:	f06f 0412 	mvn.w	r4, #18
    f018:	e7fa      	b.n	f010 <lll_init+0x4c>
    f01a:	bf00      	nop
    f01c:	00015c98 	.word	0x00015c98
    f020:	20001ab4 	.word	0x20001ab4
    f024:	20001ab8 	.word	0x20001ab8

0000f028 <lll_trng_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
    f028:	4a04      	ldr	r2, [pc, #16]	; (f03c <lll_trng_get+0x14>)
{
    f02a:	b410      	push	{r4}
    f02c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
    f02e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    f030:	6884      	ldr	r4, [r0, #8]
    f032:	b28a      	uxth	r2, r1
    f034:	4619      	mov	r1, r3
    f036:	6823      	ldr	r3, [r4, #0]
}
    f038:	bc10      	pop	{r4}
    f03a:	4718      	bx	r3
    f03c:	20001ab4 	.word	0x20001ab4

0000f040 <lll_trng_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
    f040:	4b08      	ldr	r3, [pc, #32]	; (f064 <lll_trng_isr_get+0x24>)
    f042:	681b      	ldr	r3, [r3, #0]
					  u32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
    f044:	689a      	ldr	r2, [r3, #8]
{
    f046:	b410      	push	{r4}
    f048:	6854      	ldr	r4, [r2, #4]
    f04a:	b134      	cbz	r4, f05a <lll_trng_isr_get+0x1a>
    f04c:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    f04e:	46a4      	mov	ip, r4
    f050:	4601      	mov	r1, r0
}
    f052:	bc10      	pop	{r4}
    f054:	4618      	mov	r0, r3
    f056:	2300      	movs	r3, #0
    f058:	4760      	bx	ip
    f05a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f05e:	bc10      	pop	{r4}
    f060:	4770      	bx	lr
    f062:	bf00      	nop
    f064:	20001ab4 	.word	0x20001ab4

0000f068 <lll_rng_isr_get>:
    f068:	f7ff bfea 	b.w	f040 <lll_trng_isr_get>

0000f06c <lll_reset>:
}
    f06c:	2000      	movs	r0, #0
    f06e:	4770      	bx	lr

0000f070 <lll_prepare>:
{
    f070:	b510      	push	{r4, lr}
    f072:	b082      	sub	sp, #8
    f074:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
    f076:	9400      	str	r4, [sp, #0]
    f078:	2400      	movs	r4, #0
    f07a:	9401      	str	r4, [sp, #4]
    f07c:	f7ff ff16 	bl	eeac <prepare>
}
    f080:	b002      	add	sp, #8
    f082:	bd10      	pop	{r4, pc}

0000f084 <lll_resume>:
{
    f084:	b510      	push	{r4, lr}
    f086:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
    f088:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
    f08a:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
    f08e:	69c3      	ldr	r3, [r0, #28]
    f090:	6902      	ldr	r2, [r0, #16]
    f092:	f004 0401 	and.w	r4, r4, #1
    f096:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
    f09a:	9401      	str	r4, [sp, #4]
    f09c:	f7ff ff06 	bl	eeac <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    f0a0:	b108      	cbz	r0, f0a6 <lll_resume+0x22>
    f0a2:	3044      	adds	r0, #68	; 0x44
    f0a4:	d101      	bne.n	f0aa <lll_resume+0x26>
}
    f0a6:	b002      	add	sp, #8
    f0a8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    f0aa:	4a07      	ldr	r2, [pc, #28]	; (f0c8 <lll_resume+0x44>)
    f0ac:	4907      	ldr	r1, [pc, #28]	; (f0cc <lll_resume+0x48>)
    f0ae:	4808      	ldr	r0, [pc, #32]	; (f0d0 <lll_resume+0x4c>)
    f0b0:	23e1      	movs	r3, #225	; 0xe1
    f0b2:	f004 fe1f 	bl	13cf4 <printk>
    f0b6:	4040      	eors	r0, r0
    f0b8:	f380 8811 	msr	BASEPRI, r0
    f0bc:	f04f 0003 	mov.w	r0, #3
    f0c0:	df02      	svc	2
}
    f0c2:	b002      	add	sp, #8
    f0c4:	bd10      	pop	{r4, pc}
    f0c6:	bf00      	nop
    f0c8:	00015bfc 	.word	0x00015bfc
    f0cc:	00015c9c 	.word	0x00015c9c
    f0d0:	0001525c 	.word	0x0001525c

0000f0d4 <lll_disable>:
{
    f0d4:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
    f0d6:	4604      	mov	r4, r0
{
    f0d8:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
    f0da:	2800      	cmp	r0, #0
    f0dc:	d033      	beq.n	f146 <lll_disable+0x72>
    f0de:	4b25      	ldr	r3, [pc, #148]	; (f174 <lll_disable+0xa0>)
    f0e0:	681a      	ldr	r2, [r3, #0]
    f0e2:	4282      	cmp	r2, r0
    f0e4:	d029      	beq.n	f13a <lll_disable+0x66>
		u8_t idx = UINT8_MAX;
    f0e6:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
    f0e8:	f10d 0007 	add.w	r0, sp, #7
		u8_t idx = UINT8_MAX;
    f0ec:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
    f0f0:	f7fa f82c 	bl	914c <ull_prepare_dequeue_iter>
		while (next) {
    f0f4:	b940      	cbnz	r0, f108 <lll_disable+0x34>
    f0f6:	e01c      	b.n	f132 <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
    f0f8:	68c3      	ldr	r3, [r0, #12]
    f0fa:	42a3      	cmp	r3, r4
    f0fc:	d01b      	beq.n	f136 <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
    f0fe:	f10d 0007 	add.w	r0, sp, #7
    f102:	f7fa f823 	bl	914c <ull_prepare_dequeue_iter>
		while (next) {
    f106:	b1a0      	cbz	r0, f132 <lll_disable+0x5e>
			if (!next->is_aborted &&
    f108:	f890 3020 	ldrb.w	r3, [r0, #32]
    f10c:	079b      	lsls	r3, r3, #30
    f10e:	d4f6      	bmi.n	f0fe <lll_disable+0x2a>
    f110:	2c00      	cmp	r4, #0
    f112:	d1f1      	bne.n	f0f8 <lll_disable+0x24>
    f114:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
    f116:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
    f11a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
    f11c:	f043 0302 	orr.w	r3, r3, #2
    f120:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
    f124:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
    f126:	f10d 0007 	add.w	r0, sp, #7
    f12a:	f7fa f80f 	bl	914c <ull_prepare_dequeue_iter>
		while (next) {
    f12e:	2800      	cmp	r0, #0
    f130:	d1ea      	bne.n	f108 <lll_disable+0x34>
}
    f132:	b002      	add	sp, #8
    f134:	bd10      	pop	{r4, pc}
    f136:	4621      	mov	r1, r4
    f138:	e7ed      	b.n	f116 <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
    f13a:	689b      	ldr	r3, [r3, #8]
    f13c:	b16b      	cbz	r3, f15a <lll_disable+0x86>
    f13e:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
    f140:	2000      	movs	r0, #0
    f142:	4798      	blx	r3
    f144:	e7cf      	b.n	f0e6 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
    f146:	4a0b      	ldr	r2, [pc, #44]	; (f174 <lll_disable+0xa0>)
    f148:	6893      	ldr	r3, [r2, #8]
    f14a:	2b00      	cmp	r3, #0
    f14c:	d0cb      	beq.n	f0e6 <lll_disable+0x12>
    f14e:	6811      	ldr	r1, [r2, #0]
    f150:	2900      	cmp	r1, #0
    f152:	d0c8      	beq.n	f0e6 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
    f154:	2000      	movs	r0, #0
    f156:	4798      	blx	r3
    f158:	e7c5      	b.n	f0e6 <lll_disable+0x12>
			LL_ASSERT(!param);
    f15a:	4a07      	ldr	r2, [pc, #28]	; (f178 <lll_disable+0xa4>)
    f15c:	4907      	ldr	r1, [pc, #28]	; (f17c <lll_disable+0xa8>)
    f15e:	4808      	ldr	r0, [pc, #32]	; (f180 <lll_disable+0xac>)
    f160:	23eb      	movs	r3, #235	; 0xeb
    f162:	f004 fdc7 	bl	13cf4 <printk>
    f166:	4040      	eors	r0, r0
    f168:	f380 8811 	msr	BASEPRI, r0
    f16c:	f04f 0003 	mov.w	r0, #3
    f170:	df02      	svc	2
    f172:	e7b8      	b.n	f0e6 <lll_disable+0x12>
    f174:	20001ab8 	.word	0x20001ab8
    f178:	00015bfc 	.word	0x00015bfc
    f17c:	00015cb0 	.word	0x00015cb0
    f180:	0001525c 	.word	0x0001525c

0000f184 <lll_prepare_done>:
}
    f184:	2000      	movs	r0, #0
    f186:	4770      	bx	lr

0000f188 <lll_done>:
{
    f188:	b510      	push	{r4, lr}
    f18a:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
    f18c:	f7f9 ffd0 	bl	9130 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
    f190:	b13c      	cbz	r4, f1a2 <lll_done+0x1a>
    f192:	b320      	cbz	r0, f1de <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    f194:	6820      	ldr	r0, [r4, #0]
    f196:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
    f198:	f7fa f806 	bl	91a8 <ull_event_done>
	LL_ASSERT(evdone);
    f19c:	b180      	cbz	r0, f1c0 <lll_done+0x38>
}
    f19e:	2000      	movs	r0, #0
    f1a0:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
    f1a2:	4c1d      	ldr	r4, [pc, #116]	; (f218 <lll_done+0x90>)
    f1a4:	68a3      	ldr	r3, [r4, #8]
    f1a6:	b343      	cbz	r3, f1fa <lll_done+0x72>
		param = event.curr.param;
    f1a8:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
    f1aa:	2300      	movs	r3, #0
    f1ac:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
    f1ae:	6023      	str	r3, [r4, #0]
		if (param) {
    f1b0:	2800      	cmp	r0, #0
    f1b2:	d0f1      	beq.n	f198 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
    f1b4:	6800      	ldr	r0, [r0, #0]
    f1b6:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
    f1b8:	f7f9 fff6 	bl	91a8 <ull_event_done>
	LL_ASSERT(evdone);
    f1bc:	2800      	cmp	r0, #0
    f1be:	d1ee      	bne.n	f19e <lll_done+0x16>
    f1c0:	4a16      	ldr	r2, [pc, #88]	; (f21c <lll_done+0x94>)
    f1c2:	4917      	ldr	r1, [pc, #92]	; (f220 <lll_done+0x98>)
    f1c4:	4817      	ldr	r0, [pc, #92]	; (f224 <lll_done+0x9c>)
    f1c6:	f240 1337 	movw	r3, #311	; 0x137
    f1ca:	f004 fd93 	bl	13cf4 <printk>
    f1ce:	4040      	eors	r0, r0
    f1d0:	f380 8811 	msr	BASEPRI, r0
    f1d4:	f04f 0003 	mov.w	r0, #3
    f1d8:	df02      	svc	2
}
    f1da:	2000      	movs	r0, #0
    f1dc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
    f1de:	4a0f      	ldr	r2, [pc, #60]	; (f21c <lll_done+0x94>)
    f1e0:	4911      	ldr	r1, [pc, #68]	; (f228 <lll_done+0xa0>)
    f1e2:	4810      	ldr	r0, [pc, #64]	; (f224 <lll_done+0x9c>)
    f1e4:	f44f 738d 	mov.w	r3, #282	; 0x11a
    f1e8:	f004 fd84 	bl	13cf4 <printk>
    f1ec:	4040      	eors	r0, r0
    f1ee:	f380 8811 	msr	BASEPRI, r0
    f1f2:	f04f 0003 	mov.w	r0, #3
    f1f6:	df02      	svc	2
    f1f8:	e7cc      	b.n	f194 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
    f1fa:	4a08      	ldr	r2, [pc, #32]	; (f21c <lll_done+0x94>)
    f1fc:	490b      	ldr	r1, [pc, #44]	; (f22c <lll_done+0xa4>)
    f1fe:	4809      	ldr	r0, [pc, #36]	; (f224 <lll_done+0x9c>)
    f200:	f240 131f 	movw	r3, #287	; 0x11f
    f204:	f004 fd76 	bl	13cf4 <printk>
    f208:	4040      	eors	r0, r0
    f20a:	f380 8811 	msr	BASEPRI, r0
    f20e:	f04f 0003 	mov.w	r0, #3
    f212:	df02      	svc	2
    f214:	e7c8      	b.n	f1a8 <lll_done+0x20>
    f216:	bf00      	nop
    f218:	20001ab8 	.word	0x20001ab8
    f21c:	00015bfc 	.word	0x00015bfc
    f220:	00015cdc 	.word	0x00015cdc
    f224:	0001525c 	.word	0x0001525c
    f228:	00015cb8 	.word	0x00015cb8
    f22c:	00015cc8 	.word	0x00015cc8

0000f230 <lll_is_done>:
	return !event.curr.abort_cb;
    f230:	4b02      	ldr	r3, [pc, #8]	; (f23c <lll_is_done+0xc>)
    f232:	6898      	ldr	r0, [r3, #8]
}
    f234:	fab0 f080 	clz	r0, r0
    f238:	0940      	lsrs	r0, r0, #5
    f23a:	4770      	bx	lr
    f23c:	20001ab8 	.word	0x20001ab8

0000f240 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
    f240:	6803      	ldr	r3, [r0, #0]
    f242:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
    f244:	bfb4      	ite	lt
    f246:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
    f24a:	6840      	ldrge	r0, [r0, #4]
    f24c:	4298      	cmp	r0, r3
    f24e:	bf38      	it	cc
    f250:	4618      	movcc	r0, r3
}
    f252:	4770      	bx	lr

0000f254 <lll_preempt_calc>:
{
    f254:	b510      	push	{r4, lr}
    f256:	4614      	mov	r4, r2
	u32_t ticks_now = ticker_ticks_now_get();
    f258:	f7f6 fd8a 	bl	5d70 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
    f25c:	4621      	mov	r1, r4
    f25e:	f7f6 fd89 	bl	5d74 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
    f262:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
    f264:	0203      	lsls	r3, r0, #8
    f266:	d404      	bmi.n	f272 <lll_preempt_calc+0x1e>
    f268:	2809      	cmp	r0, #9
    f26a:	bf94      	ite	ls
    f26c:	2000      	movls	r0, #0
    f26e:	2001      	movhi	r0, #1
}
    f270:	bd10      	pop	{r4, pc}
	return 0;
    f272:	2000      	movs	r0, #0
}
    f274:	bd10      	pop	{r4, pc}
    f276:	bf00      	nop

0000f278 <lll_chan_set>:
	switch (chan) {
    f278:	2826      	cmp	r0, #38	; 0x26
{
    f27a:	b510      	push	{r4, lr}
    f27c:	4604      	mov	r4, r0
	switch (chan) {
    f27e:	d01c      	beq.n	f2ba <lll_chan_set+0x42>
    f280:	2827      	cmp	r0, #39	; 0x27
    f282:	d012      	beq.n	f2aa <lll_chan_set+0x32>
    f284:	2825      	cmp	r0, #37	; 0x25
    f286:	d008      	beq.n	f29a <lll_chan_set+0x22>
		if (chan < 11) {
    f288:	280a      	cmp	r0, #10
    f28a:	d91e      	bls.n	f2ca <lll_chan_set+0x52>
		} else if (chan < 40) {
    f28c:	2827      	cmp	r0, #39	; 0x27
    f28e:	d821      	bhi.n	f2d4 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    f290:	3003      	adds	r0, #3
    f292:	0040      	lsls	r0, r0, #1
    f294:	f002 f818 	bl	112c8 <radio_freq_chan_set>
    f298:	e002      	b.n	f2a0 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
    f29a:	2002      	movs	r0, #2
    f29c:	f002 f814 	bl	112c8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    f2a0:	4620      	mov	r0, r4
}
    f2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    f2a6:	f002 b815 	b.w	112d4 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
    f2aa:	2050      	movs	r0, #80	; 0x50
    f2ac:	f002 f80c 	bl	112c8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    f2b0:	4620      	mov	r0, r4
}
    f2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    f2b6:	f002 b80d 	b.w	112d4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    f2ba:	201a      	movs	r0, #26
    f2bc:	f002 f804 	bl	112c8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    f2c0:	4620      	mov	r0, r4
}
    f2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    f2c6:	f002 b805 	b.w	112d4 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
    f2ca:	3002      	adds	r0, #2
    f2cc:	0040      	lsls	r0, r0, #1
    f2ce:	f001 fffb 	bl	112c8 <radio_freq_chan_set>
    f2d2:	e7e5      	b.n	f2a0 <lll_chan_set+0x28>
			LL_ASSERT(0);
    f2d4:	4a06      	ldr	r2, [pc, #24]	; (f2f0 <lll_chan_set+0x78>)
    f2d6:	4907      	ldr	r1, [pc, #28]	; (f2f4 <lll_chan_set+0x7c>)
    f2d8:	4807      	ldr	r0, [pc, #28]	; (f2f8 <lll_chan_set+0x80>)
    f2da:	f240 137b 	movw	r3, #379	; 0x17b
    f2de:	f004 fd09 	bl	13cf4 <printk>
    f2e2:	4040      	eors	r0, r0
    f2e4:	f380 8811 	msr	BASEPRI, r0
    f2e8:	f04f 0003 	mov.w	r0, #3
    f2ec:	df02      	svc	2
    f2ee:	e7d7      	b.n	f2a0 <lll_chan_set+0x28>
    f2f0:	00015bfc 	.word	0x00015bfc
    f2f4:	000152dc 	.word	0x000152dc
    f2f8:	0001525c 	.word	0x0001525c

0000f2fc <clock_ready>:
	return err;
}

static void clock_ready(struct device *dev, clock_control_subsys_t subsys,
			void *user_data)
{
    f2fc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f2fe:	f004 b991 	b.w	13624 <z_impl_k_sem_give>
    f302:	bf00      	nop

0000f304 <lll_clock_init>:
{
    f304:	b510      	push	{r4, lr}
    f306:	4807      	ldr	r0, [pc, #28]	; (f324 <lll_clock_init+0x20>)
    f308:	f003 fd30 	bl	12d6c <z_impl_device_get_binding>
	dev = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
    f30c:	4a06      	ldr	r2, [pc, #24]	; (f328 <lll_clock_init+0x24>)
    f30e:	6010      	str	r0, [r2, #0]
	if (!dev) {
    f310:	b128      	cbz	r0, f31e <lll_clock_init+0x1a>
    f312:	6883      	ldr	r3, [r0, #8]
}
    f314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f318:	681b      	ldr	r3, [r3, #0]
    f31a:	2101      	movs	r1, #1
    f31c:	4718      	bx	r3
    f31e:	f06f 0012 	mvn.w	r0, #18
    f322:	bd10      	pop	{r4, pc}
    f324:	00015ce4 	.word	0x00015ce4
    f328:	20001acc 	.word	0x20001acc

0000f32c <lll_clock_wait>:
	if (done) {
    f32c:	4b12      	ldr	r3, [pc, #72]	; (f378 <lll_clock_wait+0x4c>)
    f32e:	7819      	ldrb	r1, [r3, #0]
    f330:	b109      	cbz	r1, f336 <lll_clock_wait+0xa>
		return 0;
    f332:	2000      	movs	r0, #0
}
    f334:	4770      	bx	lr
{
    f336:	b530      	push	{r4, r5, lr}
	struct clock_control_async_data async_data = {
    f338:	4a10      	ldr	r2, [pc, #64]	; (f37c <lll_clock_wait+0x50>)
{
    f33a:	b08b      	sub	sp, #44	; 0x2c
	done = true;
    f33c:	2401      	movs	r4, #1
	struct clock_control_async_data async_data = {
    f33e:	ad04      	add	r5, sp, #16
    f340:	e9cd 2502 	strd	r2, r5, [sp, #8]
    f344:	9101      	str	r1, [sp, #4]
	done = true;
    f346:	701c      	strb	r4, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f348:	4622      	mov	r2, r4
    f34a:	4628      	mov	r0, r5
    f34c:	f005 fc20 	bl	14b90 <z_impl_k_sem_init>
	err = clock_control_async_on(dev, CLOCK_CONTROL_NRF_SUBSYS_LF,
    f350:	4b0b      	ldr	r3, [pc, #44]	; (f380 <lll_clock_wait+0x54>)
    f352:	6818      	ldr	r0, [r3, #0]
					 struct clock_control_async_data *data)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	if (!api->async_on) {
    f354:	6883      	ldr	r3, [r0, #8]
    f356:	689b      	ldr	r3, [r3, #8]
    f358:	b15b      	cbz	r3, f372 <lll_clock_wait+0x46>
		return -ENOTSUP;
	}

	return api->async_on(dev, sys, data);
    f35a:	4621      	mov	r1, r4
    f35c:	aa01      	add	r2, sp, #4
    f35e:	4798      	blx	r3
	if (err) {
    f360:	b928      	cbnz	r0, f36e <lll_clock_wait+0x42>
	return z_impl_k_sem_take(sem, timeout);
    f362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f366:	2300      	movs	r3, #0
    f368:	4628      	mov	r0, r5
    f36a:	f004 f981 	bl	13670 <z_impl_k_sem_take>
}
    f36e:	b00b      	add	sp, #44	; 0x2c
    f370:	bd30      	pop	{r4, r5, pc}
		return -ENOTSUP;
    f372:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f376:	e7fa      	b.n	f36e <lll_clock_wait+0x42>
    f378:	2000206b 	.word	0x2000206b
    f37c:	0000f2fd 	.word	0x0000f2fd
    f380:	20001acc 	.word	0x20001acc

0000f384 <lll_hfclock_on>:
	err = clock_control_on(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
    f384:	4b02      	ldr	r3, [pc, #8]	; (f390 <lll_hfclock_on+0xc>)
    f386:	6818      	ldr	r0, [r3, #0]
	return api->on(dev, sys);
    f388:	6883      	ldr	r3, [r0, #8]
    f38a:	2100      	movs	r1, #0
    f38c:	681b      	ldr	r3, [r3, #0]
    f38e:	4718      	bx	r3
    f390:	20001acc 	.word	0x20001acc

0000f394 <lll_hfclock_off>:
	err = clock_control_off(dev, CLOCK_CONTROL_NRF_SUBSYS_HF);
    f394:	4b02      	ldr	r3, [pc, #8]	; (f3a0 <lll_hfclock_off+0xc>)
    f396:	6818      	ldr	r0, [r3, #0]
	return api->off(dev, sys);
    f398:	6883      	ldr	r3, [r0, #8]
    f39a:	2100      	movs	r1, #0
    f39c:	685b      	ldr	r3, [r3, #4]
    f39e:	4718      	bx	r3
    f3a0:	20001acc 	.word	0x20001acc

0000f3a4 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
    f3a4:	f002 b830 	b.w	11408 <radio_status_reset>

0000f3a8 <isr_cleanup>:
{
    f3a8:	b508      	push	{r3, lr}
    f3aa:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
    f3ac:	4813      	ldr	r0, [pc, #76]	; (f3fc <isr_cleanup+0x54>)
    f3ae:	f001 ff31 	bl	11214 <radio_isr_set>
	if (!radio_is_idle()) {
    f3b2:	f002 f849 	bl	11448 <radio_is_idle>
    f3b6:	b1e8      	cbz	r0, f3f4 <isr_cleanup+0x4c>
	radio_tmr_stop();
    f3b8:	f002 f9d6 	bl	11768 <radio_tmr_stop>
	err = lll_hfclock_off();
    f3bc:	f7ff ffea 	bl	f394 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
    f3c0:	b108      	cbz	r0, f3c6 <isr_cleanup+0x1e>
    f3c2:	3010      	adds	r0, #16
    f3c4:	d104      	bne.n	f3d0 <isr_cleanup+0x28>
}
    f3c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
    f3ca:	2000      	movs	r0, #0
    f3cc:	f7ff bedc 	b.w	f188 <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
    f3d0:	4a0b      	ldr	r2, [pc, #44]	; (f400 <isr_cleanup+0x58>)
    f3d2:	490c      	ldr	r1, [pc, #48]	; (f404 <isr_cleanup+0x5c>)
    f3d4:	480c      	ldr	r0, [pc, #48]	; (f408 <isr_cleanup+0x60>)
    f3d6:	f240 2349 	movw	r3, #585	; 0x249
    f3da:	f004 fc8b 	bl	13cf4 <printk>
    f3de:	4040      	eors	r0, r0
    f3e0:	f380 8811 	msr	BASEPRI, r0
    f3e4:	f04f 0003 	mov.w	r0, #3
    f3e8:	df02      	svc	2
	lll_done(NULL);
    f3ea:	2000      	movs	r0, #0
}
    f3ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
    f3f0:	f7ff beca 	b.w	f188 <lll_done>
		radio_disable();
    f3f4:	f001 fff0 	bl	113d8 <radio_disable>
    f3f8:	e7de      	b.n	f3b8 <isr_cleanup+0x10>
    f3fa:	bf00      	nop
    f3fc:	0000f3a5 	.word	0x0000f3a5
    f400:	00015cec 	.word	0x00015cec
    f404:	00015d38 	.word	0x00015d38
    f408:	0001525c 	.word	0x0001525c

0000f40c <isr_abort>:
{
    f40c:	b510      	push	{r4, lr}
    f40e:	4604      	mov	r4, r0
	radio_status_reset();
    f410:	f001 fffa 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    f414:	f002 f8cc 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f418:	f002 f8b2 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
    f41c:	f002 facc 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f420:	f002 f876 	bl	11510 <radio_rssi_status_reset>
	radio_filter_disable();
    f424:	f002 f8a2 	bl	1156c <radio_filter_disable>
	isr_cleanup(param);
    f428:	4620      	mov	r0, r4
}
    f42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
    f42e:	f7ff bfbb 	b.w	f3a8 <isr_cleanup>
    f432:	bf00      	nop

0000f434 <isr_tx>:
{
    f434:	b530      	push	{r4, r5, lr}
    f436:	b083      	sub	sp, #12
    f438:	4604      	mov	r4, r0
	radio_status_reset();
    f43a:	f001 ffe5 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    f43e:	f002 f8b7 	bl	115b0 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
    f442:	2096      	movs	r0, #150	; 0x96
    f444:	f002 f8c4 	bl	115d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    f448:	2300      	movs	r3, #0
    f44a:	461a      	mov	r2, r3
    f44c:	4619      	mov	r1, r3
    f44e:	4618      	mov	r0, r3
    f450:	f002 f834 	bl	114bc <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
    f454:	f002 f81c 	bl	11490 <radio_pkt_scratch_get>
    f458:	f001 ff96 	bl	11388 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
    f45c:	f001 ffe0 	bl	11420 <radio_is_ready>
    f460:	b9e8      	cbnz	r0, f49e <isr_tx+0x6a>
	radio_isr_set(isr_rx, param);
    f462:	481e      	ldr	r0, [pc, #120]	; (f4dc <isr_tx+0xa8>)
    f464:	4621      	mov	r1, r4
    f466:	f001 fed5 	bl	11214 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
    f46a:	f7ff fbf7 	bl	ec5c <ull_filter_lll_rl_enabled>
    f46e:	bb58      	cbnz	r0, f4c8 <isr_tx+0x94>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    f470:	f002 f9d6 	bl	11820 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
    f474:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    f476:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    f478:	4608      	mov	r0, r1
    f47a:	f001 ff9b 	bl	113b4 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
    f47e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
    f480:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
    f482:	4608      	mov	r0, r1
    f484:	f001 ff92 	bl	113ac <radio_tx_chain_delay_get>
    f488:	442c      	add	r4, r5
    f48a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
    f48c:	1a20      	subs	r0, r4, r0
    f48e:	f002 f97f 	bl	11790 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    f492:	f002 f9b7 	bl	11804 <radio_tmr_end_capture>
		radio_rssi_measure();
    f496:	f002 f82b 	bl	114f0 <radio_rssi_measure>
}
    f49a:	b003      	add	sp, #12
    f49c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
    f49e:	4a10      	ldr	r2, [pc, #64]	; (f4e0 <isr_tx+0xac>)
    f4a0:	4910      	ldr	r1, [pc, #64]	; (f4e4 <isr_tx+0xb0>)
    f4a2:	4811      	ldr	r0, [pc, #68]	; (f4e8 <isr_tx+0xb4>)
    f4a4:	f240 1357 	movw	r3, #343	; 0x157
    f4a8:	f004 fc24 	bl	13cf4 <printk>
    f4ac:	4040      	eors	r0, r0
    f4ae:	f380 8811 	msr	BASEPRI, r0
    f4b2:	f04f 0003 	mov.w	r0, #3
    f4b6:	df02      	svc	2
	radio_isr_set(isr_rx, param);
    f4b8:	4808      	ldr	r0, [pc, #32]	; (f4dc <isr_tx+0xa8>)
    f4ba:	4621      	mov	r1, r4
    f4bc:	f001 feaa 	bl	11214 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
    f4c0:	f7ff fbcc 	bl	ec5c <ull_filter_lll_rl_enabled>
    f4c4:	2800      	cmp	r0, #0
    f4c6:	d0d3      	beq.n	f470 <isr_tx+0x3c>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
    f4c8:	f10d 0007 	add.w	r0, sp, #7
    f4cc:	f7ff fa30 	bl	e930 <ull_filter_lll_irks_get>
    f4d0:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
    f4d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f4d6:	f002 fa35 	bl	11944 <radio_ar_configure>
    f4da:	e7c9      	b.n	f470 <isr_tx+0x3c>
    f4dc:	0000f885 	.word	0x0000f885
    f4e0:	00015cec 	.word	0x00015cec
    f4e4:	00015d4c 	.word	0x00015d4c
    f4e8:	0001525c 	.word	0x0001525c

0000f4ec <chan_prepare>:
}

static void chan_prepare(struct lll_adv *lll)
{
    f4ec:	b538      	push	{r3, r4, r5, lr}
static inline struct pdu_adv *lll_adv_pdu_latest_get(struct lll_adv_pdu *pdu,
						     u8_t *is_modified)
{
	u8_t first;

	first = pdu->first;
    f4ee:	7bc3      	ldrb	r3, [r0, #15]
	if (first != pdu->last) {
    f4f0:	7c05      	ldrb	r5, [r0, #16]
    f4f2:	429d      	cmp	r5, r3
    f4f4:	4604      	mov	r4, r0
    f4f6:	d050      	beq.n	f59a <chan_prepare+0xae>
		first += 1U;
    f4f8:	3301      	adds	r3, #1
    f4fa:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    f4fc:	2b02      	cmp	r3, #2
    f4fe:	d049      	beq.n	f594 <chan_prepare+0xa8>
    f500:	2527      	movs	r5, #39	; 0x27
    f502:	2202      	movs	r2, #2
    f504:	fb15 2203 	smlabb	r2, r5, r3, r2
			first = 0U;
		}
		pdu->first = first;
    f508:	4625      	mov	r5, r4
    f50a:	f805 3f0f 	strb.w	r3, [r5, #15]!
	first = pdu->first;
    f50e:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
	if (first != pdu->last) {
    f512:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    f516:	4298      	cmp	r0, r3
		*is_modified = 1U;
	}

	return (void *)pdu->pdu[first];
    f518:	4415      	add	r5, r2
	if (first != pdu->last) {
    f51a:	d067      	beq.n	f5ec <chan_prepare+0x100>
		first += 1U;
    f51c:	3301      	adds	r3, #1
    f51e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    f520:	2b02      	cmp	r3, #2
    f522:	d049      	beq.n	f5b8 <chan_prepare+0xcc>
    f524:	2027      	movs	r0, #39	; 0x27
    f526:	2202      	movs	r2, #2
    f528:	fb10 2203 	smlabb	r2, r0, r3, r2
		pdu->first = first;
    f52c:	4620      	mov	r0, r4
    f52e:	f800 3f5f 	strb.w	r3, [r0, #95]!
	return (void *)pdu->pdu[first];
    f532:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (upd) {
		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->scan_rsp.addr[0],
    f534:	3002      	adds	r0, #2
    f536:	2206      	movs	r2, #6
    f538:	1ca9      	adds	r1, r5, #2
    f53a:	f004 feee 	bl	1431a <memcpy>
#else
	ARG_UNUSED(scan_pdu);
	ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

	radio_pkt_tx_set(pdu);
    f53e:	4628      	mov	r0, r5
    f540:	f001 ff28 	bl	11394 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    f544:	782b      	ldrb	r3, [r5, #0]
    f546:	f003 030f 	and.w	r3, r3, #15
    f54a:	2b02      	cmp	r3, #2
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		radio_isr_set(isr_tx, lll);
    f54c:	4621      	mov	r1, r4
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    f54e:	d036      	beq.n	f5be <chan_prepare+0xd2>
		radio_isr_set(isr_tx, lll);
    f550:	4829      	ldr	r0, [pc, #164]	; (f5f8 <chan_prepare+0x10c>)
    f552:	f001 fe5f 	bl	11214 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
    f556:	2096      	movs	r0, #150	; 0x96
    f558:	f002 f83a 	bl	115d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    f55c:	2000      	movs	r0, #0
    f55e:	f001 ff9f 	bl	114a0 <radio_switch_complete_and_rx>
	} else {
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	chan = find_lsb_set(lll->chan_map_curr);
    f562:	7b23      	ldrb	r3, [r4, #12]
    f564:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f568:	2b00      	cmp	r3, #0
    f56a:	fa93 f0a3 	rbit	r0, r3
    f56e:	fab0 f080 	clz	r0, r0
    f572:	bf08      	it	eq
    f574:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
    f578:	1c45      	adds	r5, r0, #1
    f57a:	d026      	beq.n	f5ca <chan_prepare+0xde>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
    f57c:	7b22      	ldrb	r2, [r4, #12]
    f57e:	1e59      	subs	r1, r3, #1
    f580:	400b      	ands	r3, r1
    f582:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
    f586:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
    f58a:	7322      	strb	r2, [r4, #12]
}
    f58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_chan_set(36 + chan);
    f590:	f7ff be72 	b.w	f278 <lll_chan_set>
    f594:	461a      	mov	r2, r3
			first = 0U;
    f596:	2300      	movs	r3, #0
    f598:	e7b6      	b.n	f508 <chan_prepare+0x1c>
	first = pdu->first;
    f59a:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
	if (first != pdu->last) {
    f59e:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
	return (void *)pdu->pdu[first];
    f5a2:	2127      	movs	r1, #39	; 0x27
    f5a4:	fb01 0505 	mla	r5, r1, r5, r0
	if (first != pdu->last) {
    f5a8:	429a      	cmp	r2, r3
	return (void *)pdu->pdu[first];
    f5aa:	f105 0511 	add.w	r5, r5, #17
	if (first != pdu->last) {
    f5ae:	d0c6      	beq.n	f53e <chan_prepare+0x52>
		first += 1U;
    f5b0:	3301      	adds	r3, #1
    f5b2:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    f5b4:	2b02      	cmp	r3, #2
    f5b6:	d1b5      	bne.n	f524 <chan_prepare+0x38>
    f5b8:	461a      	mov	r2, r3
			first = 0U;
    f5ba:	2300      	movs	r3, #0
    f5bc:	e7b6      	b.n	f52c <chan_prepare+0x40>
		radio_isr_set(isr_done, lll);
    f5be:	480f      	ldr	r0, [pc, #60]	; (f5fc <chan_prepare+0x110>)
    f5c0:	f001 fe28 	bl	11214 <radio_isr_set>
		radio_switch_complete_and_disable();
    f5c4:	f001 ff86 	bl	114d4 <radio_switch_complete_and_disable>
    f5c8:	e7cb      	b.n	f562 <chan_prepare+0x76>
	LL_ASSERT(chan);
    f5ca:	4a0d      	ldr	r2, [pc, #52]	; (f600 <chan_prepare+0x114>)
    f5cc:	490d      	ldr	r1, [pc, #52]	; (f604 <chan_prepare+0x118>)
    f5ce:	480e      	ldr	r0, [pc, #56]	; (f608 <chan_prepare+0x11c>)
    f5d0:	f240 2379 	movw	r3, #633	; 0x279
    f5d4:	f004 fb8e 	bl	13cf4 <printk>
    f5d8:	4040      	eors	r0, r0
    f5da:	f380 8811 	msr	BASEPRI, r0
    f5de:	f04f 0003 	mov.w	r0, #3
    f5e2:	df02      	svc	2
    f5e4:	7b23      	ldrb	r3, [r4, #12]
    f5e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
    f5ea:	e7c7      	b.n	f57c <chan_prepare+0x90>
	return (void *)pdu->pdu[first];
    f5ec:	2327      	movs	r3, #39	; 0x27
    f5ee:	fb03 4000 	mla	r0, r3, r0, r4
    f5f2:	3061      	adds	r0, #97	; 0x61
	if (upd) {
    f5f4:	e79e      	b.n	f534 <chan_prepare+0x48>
    f5f6:	bf00      	nop
    f5f8:	0000f435 	.word	0x0000f435
    f5fc:	0000f831 	.word	0x0000f831
    f600:	00015cec 	.word	0x00015cec
    f604:	00015d60 	.word	0x00015d60
    f608:	0001525c 	.word	0x0001525c

0000f60c <prepare_cb>:
{
    f60c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
    f60e:	68c5      	ldr	r5, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    f610:	4b43      	ldr	r3, [pc, #268]	; (f720 <prepare_cb+0x114>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
    f612:	792c      	ldrb	r4, [r5, #4]
{
    f614:	b083      	sub	sp, #12
	if (lll_is_stop(lll)) {
    f616:	f014 0401 	ands.w	r4, r4, #1
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    f61a:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
    f61c:	d153      	bne.n	f6c6 <prepare_cb+0xba>
	radio_reset();
    f61e:	4606      	mov	r6, r0
    f620:	f001 fe18 	bl	11254 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    f624:	4620      	mov	r0, r4
    f626:	f001 fe49 	bl	112bc <radio_tx_power_set>
	radio_phy_set(0, 0);
    f62a:	4621      	mov	r1, r4
    f62c:	4620      	mov	r0, r4
    f62e:	f001 fe35 	bl	1129c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
    f632:	4622      	mov	r2, r4
    f634:	2125      	movs	r1, #37	; 0x25
    f636:	2008      	movs	r0, #8
    f638:	f001 fe78 	bl	1132c <radio_pkt_configure>
	radio_aa_set((u8_t *)&aa);
    f63c:	a801      	add	r0, sp, #4
    f63e:	f001 fe5b 	bl	112f8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    f642:	4938      	ldr	r1, [pc, #224]	; (f724 <prepare_cb+0x118>)
    f644:	f240 605b 	movw	r0, #1627	; 0x65b
    f648:	f001 ff08 	bl	1145c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
    f64c:	7b2b      	ldrb	r3, [r5, #12]
    f64e:	f3c3 0242 	ubfx	r2, r3, #1, #3
    f652:	f362 1306 	bfi	r3, r2, #4, #3
    f656:	732b      	strb	r3, [r5, #12]
	chan_prepare(lll);
    f658:	4628      	mov	r0, r5
    f65a:	f7ff ff47 	bl	f4ec <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
    f65e:	f7ff fafd 	bl	ec5c <ull_filter_lll_rl_enabled>
    f662:	bb18      	cbnz	r0, f6ac <prepare_cb+0xa0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
    f664:	7b6b      	ldrb	r3, [r5, #13]
    f666:	079b      	lsls	r3, r3, #30
    f668:	d158      	bne.n	f71c <prepare_cb+0x110>
	evt = HDR_LLL2EVT(lll);
    f66a:	682f      	ldr	r7, [r5, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
    f66c:	6834      	ldr	r4, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
    f66e:	4638      	mov	r0, r7
    f670:	f7ff fde6 	bl	f240 <lll_evt_offset_get>
    f674:	4404      	add	r4, r0
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
    f676:	6872      	ldr	r2, [r6, #4]
    f678:	f104 0109 	add.w	r1, r4, #9
    f67c:	2001      	movs	r0, #1
    f67e:	f001 ffb3 	bl	115e8 <radio_tmr_start>
	radio_tmr_end_capture();
    f682:	f002 f8bf 	bl	11804 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
    f686:	4628      	mov	r0, r5
    f688:	f7fa fa18 	bl	9abc <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
    f68c:	1c81      	adds	r1, r0, #2
    f68e:	4622      	mov	r2, r4
    f690:	b2c9      	uxtb	r1, r1
    f692:	4638      	mov	r0, r7
    f694:	f7ff fdde 	bl	f254 <lll_preempt_calc>
    f698:	b360      	cbz	r0, f6f4 <prepare_cb+0xe8>
		radio_isr_set(isr_abort, lll);
    f69a:	4823      	ldr	r0, [pc, #140]	; (f728 <prepare_cb+0x11c>)
    f69c:	4629      	mov	r1, r5
    f69e:	f001 fdb9 	bl	11214 <radio_isr_set>
		radio_disable();
    f6a2:	f001 fe99 	bl	113d8 <radio_disable>
}
    f6a6:	2000      	movs	r0, #0
    f6a8:	b003      	add	sp, #12
    f6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
    f6ac:	7b68      	ldrb	r0, [r5, #13]
    f6ae:	f010 0003 	ands.w	r0, r0, #3
    f6b2:	bf18      	it	ne
    f6b4:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
    f6b6:	f7ff fa31 	bl	eb1c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
    f6ba:	7841      	ldrb	r1, [r0, #1]
    f6bc:	1c82      	adds	r2, r0, #2
    f6be:	7800      	ldrb	r0, [r0, #0]
    f6c0:	f001 ff38 	bl	11534 <radio_filter_configure>
    f6c4:	e7d1      	b.n	f66a <prepare_cb+0x5e>
		err = lll_hfclock_off();
    f6c6:	f7ff fe65 	bl	f394 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
    f6ca:	b168      	cbz	r0, f6e8 <prepare_cb+0xdc>
    f6cc:	3010      	adds	r0, #16
    f6ce:	d00b      	beq.n	f6e8 <prepare_cb+0xdc>
    f6d0:	4a16      	ldr	r2, [pc, #88]	; (f72c <prepare_cb+0x120>)
    f6d2:	4917      	ldr	r1, [pc, #92]	; (f730 <prepare_cb+0x124>)
    f6d4:	4817      	ldr	r0, [pc, #92]	; (f734 <prepare_cb+0x128>)
    f6d6:	238b      	movs	r3, #139	; 0x8b
    f6d8:	f004 fb0c 	bl	13cf4 <printk>
    f6dc:	4040      	eors	r0, r0
    f6de:	f380 8811 	msr	BASEPRI, r0
    f6e2:	f04f 0003 	mov.w	r0, #3
    f6e6:	df02      	svc	2
		lll_done(NULL);
    f6e8:	2000      	movs	r0, #0
    f6ea:	f7ff fd4d 	bl	f188 <lll_done>
}
    f6ee:	2000      	movs	r0, #0
    f6f0:	b003      	add	sp, #12
    f6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = lll_prepare_done(lll);
    f6f4:	4628      	mov	r0, r5
    f6f6:	f7ff fd45 	bl	f184 <lll_prepare_done>
		LL_ASSERT(!ret);
    f6fa:	2800      	cmp	r0, #0
    f6fc:	d0d3      	beq.n	f6a6 <prepare_cb+0x9a>
    f6fe:	4a0b      	ldr	r2, [pc, #44]	; (f72c <prepare_cb+0x120>)
    f700:	490d      	ldr	r1, [pc, #52]	; (f738 <prepare_cb+0x12c>)
    f702:	480c      	ldr	r0, [pc, #48]	; (f734 <prepare_cb+0x128>)
    f704:	23e9      	movs	r3, #233	; 0xe9
    f706:	f004 faf5 	bl	13cf4 <printk>
    f70a:	4040      	eors	r0, r0
    f70c:	f380 8811 	msr	BASEPRI, r0
    f710:	f04f 0003 	mov.w	r0, #3
    f714:	df02      	svc	2
}
    f716:	2000      	movs	r0, #0
    f718:	b003      	add	sp, #12
    f71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
    f71c:	2001      	movs	r0, #1
    f71e:	e7ca      	b.n	f6b6 <prepare_cb+0xaa>
    f720:	8e89bed6 	.word	0x8e89bed6
    f724:	00555555 	.word	0x00555555
    f728:	0000f40d 	.word	0x0000f40d
    f72c:	00015cec 	.word	0x00015cec
    f730:	00015d38 	.word	0x00015d38
    f734:	0001525c 	.word	0x0001525c
    f738:	000154d0 	.word	0x000154d0

0000f73c <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
    f73c:	68c3      	ldr	r3, [r0, #12]
{
    f73e:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
    f740:	681e      	ldr	r6, [r3, #0]
{
    f742:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
    f744:	f7f6 fb14 	bl	5d70 <ticker_ticks_now_get>
    f748:	4605      	mov	r5, r0
    f74a:	4630      	mov	r0, r6
    f74c:	f7ff fd78 	bl	f240 <lll_evt_offset_get>
	p->remainder = 0;
    f750:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
    f752:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
    f754:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
    f758:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
    f75a:	4620      	mov	r0, r4
}
    f75c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
    f760:	f7ff bf54 	b.w	f60c <prepare_cb>

0000f764 <is_abort_cb>:
	if (next != curr) {
    f764:	4282      	cmp	r2, r0
{
    f766:	b508      	push	{r3, lr}
	if (next != curr) {
    f768:	d01f      	beq.n	f7aa <is_abort_cb+0x46>
		} else if (lll->is_hdcd) {
    f76a:	7b12      	ldrb	r2, [r2, #12]
    f76c:	07d2      	lsls	r2, r2, #31
    f76e:	d402      	bmi.n	f776 <is_abort_cb+0x12>
			return -ECANCELED;
    f770:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
    f774:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
    f776:	4a15      	ldr	r2, [pc, #84]	; (f7cc <is_abort_cb+0x68>)
    f778:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
    f77a:	9a02      	ldr	r2, [sp, #8]
    f77c:	2300      	movs	r3, #0
    f77e:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
    f780:	f7ff fe00 	bl	f384 <lll_hfclock_on>
			LL_ASSERT(!err || err == -EINPROGRESS);
    f784:	b1f0      	cbz	r0, f7c4 <is_abort_cb+0x60>
    f786:	3044      	adds	r0, #68	; 0x44
    f788:	d01c      	beq.n	f7c4 <is_abort_cb+0x60>
    f78a:	4a11      	ldr	r2, [pc, #68]	; (f7d0 <is_abort_cb+0x6c>)
    f78c:	4911      	ldr	r1, [pc, #68]	; (f7d4 <is_abort_cb+0x70>)
    f78e:	4812      	ldr	r0, [pc, #72]	; (f7d8 <is_abort_cb+0x74>)
    f790:	f240 1313 	movw	r3, #275	; 0x113
    f794:	f004 faae 	bl	13cf4 <printk>
    f798:	4040      	eors	r0, r0
    f79a:	f380 8811 	msr	BASEPRI, r0
    f79e:	f04f 0003 	mov.w	r0, #3
    f7a2:	df02      	svc	2
    f7a4:	f06f 000a 	mvn.w	r0, #10
}
    f7a8:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
    f7aa:	7bd3      	ldrb	r3, [r2, #15]
    f7ac:	2127      	movs	r1, #39	; 0x27
    f7ae:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    f7b2:	7c53      	ldrb	r3, [r2, #17]
    f7b4:	f003 030f 	and.w	r3, r3, #15
    f7b8:	2b01      	cmp	r3, #1
		return 0;
    f7ba:	bf14      	ite	ne
    f7bc:	f06f 0047 	mvnne.w	r0, #71	; 0x47
    f7c0:	2000      	moveq	r0, #0
}
    f7c2:	bd08      	pop	{r3, pc}
    f7c4:	f06f 000a 	mvn.w	r0, #10
    f7c8:	bd08      	pop	{r3, pc}
    f7ca:	bf00      	nop
    f7cc:	0000f73d 	.word	0x0000f73d
    f7d0:	00015cec 	.word	0x00015cec
    f7d4:	00015d68 	.word	0x00015d68
    f7d8:	0001525c 	.word	0x0001525c

0000f7dc <abort_cb>:
{
    f7dc:	b510      	push	{r4, lr}
	if (!prepare_param) {
    f7de:	b1b8      	cbz	r0, f810 <abort_cb+0x34>
	err = lll_hfclock_off();
    f7e0:	460c      	mov	r4, r1
    f7e2:	f7ff fdd7 	bl	f394 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
    f7e6:	b170      	cbz	r0, f806 <abort_cb+0x2a>
    f7e8:	3010      	adds	r0, #16
    f7ea:	d00c      	beq.n	f806 <abort_cb+0x2a>
    f7ec:	4a0c      	ldr	r2, [pc, #48]	; (f820 <abort_cb+0x44>)
    f7ee:	490d      	ldr	r1, [pc, #52]	; (f824 <abort_cb+0x48>)
    f7f0:	480d      	ldr	r0, [pc, #52]	; (f828 <abort_cb+0x4c>)
    f7f2:	f240 1339 	movw	r3, #313	; 0x139
    f7f6:	f004 fa7d 	bl	13cf4 <printk>
    f7fa:	4040      	eors	r0, r0
    f7fc:	f380 8811 	msr	BASEPRI, r0
    f800:	f04f 0003 	mov.w	r0, #3
    f804:	df02      	svc	2
	lll_done(param);
    f806:	4620      	mov	r0, r4
}
    f808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
    f80c:	f7ff bcbc 	b.w	f188 <lll_done>
		radio_isr_set(isr_abort, param);
    f810:	4806      	ldr	r0, [pc, #24]	; (f82c <abort_cb+0x50>)
    f812:	f001 fcff 	bl	11214 <radio_isr_set>
}
    f816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    f81a:	f001 bddd 	b.w	113d8 <radio_disable>
    f81e:	bf00      	nop
    f820:	00015cec 	.word	0x00015cec
    f824:	00015d38 	.word	0x00015d38
    f828:	0001525c 	.word	0x0001525c
    f82c:	0000f40d 	.word	0x0000f40d

0000f830 <isr_done>:
{
    f830:	b510      	push	{r4, lr}
    f832:	4604      	mov	r4, r0
	radio_status_reset();
    f834:	f001 fde8 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    f838:	f001 feba 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f83c:	f001 fea0 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
    f840:	f002 f8ba 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f844:	f001 fe64 	bl	11510 <radio_rssi_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
    f848:	7b23      	ldrb	r3, [r4, #12]
    f84a:	f003 0271 	and.w	r2, r3, #113	; 0x71
    f84e:	2a01      	cmp	r2, #1
    f850:	d105      	bne.n	f85e <isr_done+0x2e>
		lll->chan_map_curr = lll->chan_map;
    f852:	f3c3 0242 	ubfx	r2, r3, #1, #3
    f856:	f362 1306 	bfi	r3, r2, #4, #3
    f85a:	7323      	strb	r3, [r4, #12]
    f85c:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
    f85e:	f013 0f70 	tst.w	r3, #112	; 0x70
    f862:	d106      	bne.n	f872 <isr_done+0x42>
	radio_filter_disable();
    f864:	f001 fe82 	bl	1156c <radio_filter_disable>
	isr_cleanup(param);
    f868:	4620      	mov	r0, r4
}
    f86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
    f86e:	f7ff bd9b 	b.w	f3a8 <isr_cleanup>
		chan_prepare(lll);
    f872:	4620      	mov	r0, r4
    f874:	f7ff fe3a 	bl	f4ec <chan_prepare>
		radio_tx_enable();
    f878:	f001 fda8 	bl	113cc <radio_tx_enable>
}
    f87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
    f880:	f001 bfc0 	b.w	11804 <radio_tmr_end_capture>

0000f884 <isr_rx>:
{
    f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f888:	b085      	sub	sp, #20
    f88a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    f88c:	f001 fdd2 	bl	11434 <radio_is_done>
	if (trx_done) {
    f890:	f010 0fff 	tst.w	r0, #255	; 0xff
    f894:	d112      	bne.n	f8bc <isr_rx+0x38>
	radio_status_reset();
    f896:	f001 fdb7 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    f89a:	f001 fe89 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f89e:	f001 fe6f 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
    f8a2:	f002 f889 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f8a6:	f001 fe33 	bl	11510 <radio_rssi_status_reset>
	radio_isr_set(isr_done, param);
    f8aa:	48c6      	ldr	r0, [pc, #792]	; (fbc4 <__kernel_ram_size+0x124>)
    f8ac:	4621      	mov	r1, r4
    f8ae:	f001 fcb1 	bl	11214 <radio_isr_set>
	radio_disable();
    f8b2:	f001 fd91 	bl	113d8 <radio_disable>
}
    f8b6:	b005      	add	sp, #20
    f8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
    f8bc:	f001 fdda 	bl	11474 <radio_crc_is_valid>
    f8c0:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    f8c2:	f001 fe65 	bl	11590 <radio_filter_has_match>
    f8c6:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
    f8c8:	f001 fe6c 	bl	115a4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    f8cc:	f002 f880 	bl	119d0 <radio_ar_has_match>
    f8d0:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    f8d2:	f002 f86b 	bl	119ac <radio_ar_match_get>
    f8d6:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
    f8d8:	f001 fe22 	bl	11520 <radio_rssi_is_ready>
    f8dc:	4681      	mov	r9, r0
	radio_status_reset();
    f8de:	f001 fd93 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    f8e2:	f001 fe65 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f8e6:	f001 fe4b 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
    f8ea:	f002 f865 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f8ee:	f001 fe0f 	bl	11510 <radio_rssi_status_reset>
	if (crc_ok) {
    f8f2:	f015 0fff 	tst.w	r5, #255	; 0xff
    f8f6:	d0d8      	beq.n	f8aa <isr_rx+0x26>
{
	struct pdu_adv *pdu_rx, *pdu_adv;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    f8f8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    f8fc:	f040 808e 	bne.w	fa1c <isr_rx+0x198>
    f900:	20ff      	movs	r0, #255	; 0xff
    f902:	f88d 000f 	strb.w	r0, [sp, #15]
				    FILTER_IDX_NONE;
#else
	u8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
    f906:	f001 fdc3 	bl	11490 <radio_pkt_scratch_get>
    f90a:	4680      	mov	r8, r0
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f90c:	7800      	ldrb	r0, [r0, #0]
    f90e:	7be1      	ldrb	r1, [r4, #15]
    f910:	2527      	movs	r5, #39	; 0x27
    f912:	2211      	movs	r2, #17
    f914:	f000 030f 	and.w	r3, r0, #15
    f918:	fb15 2501 	smlabb	r5, r5, r1, r2
    f91c:	2b03      	cmp	r3, #3
		devmatch_ok = radio_filter_has_match();
    f91e:	b2ff      	uxtb	r7, r7
    f920:	eb04 0a05 	add.w	sl, r4, r5
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
    f924:	f000 808e 	beq.w	fa44 <isr_rx+0x1c0>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
    f928:	2b05      	cmp	r3, #5
    f92a:	d1be      	bne.n	f8aa <isr_rx+0x26>
    f92c:	f898 3001 	ldrb.w	r3, [r8, #1]
    f930:	2b22      	cmp	r3, #34	; 0x22
    f932:	d1ba      	bne.n	f8aa <isr_rx+0x26>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, u8_t devmatch_ok,
				   u8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f934:	5d63      	ldrb	r3, [r4, r5]
    f936:	f003 030f 	and.w	r3, r3, #15
    f93a:	2b01      	cmp	r3, #1
    f93c:	f000 80d9 	beq.w	faf2 <__kernel_ram_size+0x52>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
    f940:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    f942:	0799      	lsls	r1, r3, #30
    f944:	d56f      	bpl.n	fa26 <isr_rx+0x1a2>
		(((lll->filter_policy & 0x02) != 0) &&
    f946:	2f00      	cmp	r7, #0
    f948:	f000 80cb 	beq.w	fae2 <__kernel_ram_size+0x42>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
    f94c:	5d63      	ldrb	r3, [r4, r5]
    f94e:	f898 1000 	ldrb.w	r1, [r8]
    f952:	f3c3 1280 	ubfx	r2, r3, #6, #1
    f956:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
    f95a:	d1a6      	bne.n	f8aa <isr_rx+0x26>
    f95c:	f003 030f 	and.w	r3, r3, #15
    f960:	2b01      	cmp	r3, #1
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    f962:	f10a 0a02 	add.w	sl, sl, #2
    f966:	f108 0508 	add.w	r5, r8, #8
	return (adv->tx_addr == ci->rx_addr) &&
    f96a:	f000 80f0 	beq.w	fb4e <__kernel_ram_size+0xae>
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    f96e:	4629      	mov	r1, r5
    f970:	4650      	mov	r0, sl
    f972:	2206      	movs	r2, #6
    f974:	f004 fcc1 	bl	142fa <memcmp>
			 BDADDR_SIZE)) ||
    f978:	fab0 f080 	clz	r0, r0
    f97c:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
    f97e:	2800      	cmp	r0, #0
    f980:	d093      	beq.n	f8aa <isr_rx+0x26>
				   &rl_idx) &&
    f982:	68a3      	ldr	r3, [r4, #8]
    f984:	2b00      	cmp	r3, #0
    f986:	d090      	beq.n	f8aa <isr_rx+0x26>
			rx = ull_pdu_rx_alloc_peek(4);
    f988:	2004      	movs	r0, #4
    f98a:	f7f9 fb4b 	bl	9024 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    f98e:	2800      	cmp	r0, #0
    f990:	d08b      	beq.n	f8aa <isr_rx+0x26>
		radio_isr_set(isr_abort, lll);
    f992:	488d      	ldr	r0, [pc, #564]	; (fbc8 <__kernel_ram_size+0x128>)
    f994:	4621      	mov	r1, r4
    f996:	f001 fc3d 	bl	11214 <radio_isr_set>
		radio_disable();
    f99a:	f001 fd1d 	bl	113d8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f99e:	f001 fd3f 	bl	11420 <radio_is_ready>
    f9a2:	2800      	cmp	r0, #0
    f9a4:	f040 808f 	bne.w	fac6 <__kernel_ram_size+0x26>
		if (rssi_ready) {
    f9a8:	f019 0fff 	tst.w	r9, #255	; 0xff
    f9ac:	f040 8085 	bne.w	faba <__kernel_ram_size+0x1a>
	int ret = !!hdr->is_stop;
    f9b0:	7923      	ldrb	r3, [r4, #4]
	hdr->is_stop = 1U;
    f9b2:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    f9b6:	07db      	lsls	r3, r3, #31
    f9b8:	7122      	strb	r2, [r4, #4]
    f9ba:	d470      	bmi.n	fa9e <isr_rx+0x21a>
		rx = ull_pdu_rx_alloc();
    f9bc:	f7f9 fb50 	bl	9060 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
    f9c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
    f9c4:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f9c6:	2208      	movs	r2, #8
		rx->hdr.handle = 0xffff;
    f9c8:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
    f9ca:	4641      	mov	r1, r8
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f9cc:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
    f9ce:	2224      	movs	r2, #36	; 0x24
    f9d0:	3020      	adds	r0, #32
    f9d2:	f004 fca2 	bl	1431a <memcpy>
		ftr->param = lll;
    f9d6:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
    f9d8:	f001 fec0 	bl	1175c <radio_tmr_start_get>
    f9dc:	6128      	str	r0, [r5, #16]
		ftr->us_radio_end = radio_tmr_end_get() -
    f9de:	f001 ff19 	bl	11814 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
    f9e2:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
    f9e4:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
    f9e6:	4608      	mov	r0, r1
    f9e8:	f001 fce0 	bl	113ac <radio_tx_chain_delay_get>
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
    f9ec:	2100      	movs	r1, #0
		ftr->us_radio_end = radio_tmr_end_get() -
    f9ee:	1a24      	subs	r4, r4, r0
    f9f0:	616c      	str	r4, [r5, #20]
		ftr->us_radio_rdy = radio_rx_ready_delay_get(0, 0);
    f9f2:	4608      	mov	r0, r1
    f9f4:	f001 fcdc 	bl	113b0 <radio_rx_ready_delay_get>
    f9f8:	61a8      	str	r0, [r5, #24]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    f9fa:	2e00      	cmp	r6, #0
    f9fc:	d04d      	beq.n	fa9a <isr_rx+0x216>
    f9fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fa02:	77ab      	strb	r3, [r5, #30]
			ftr->extra = ull_pdu_rx_alloc();
    fa04:	f7f9 fb2c 	bl	9060 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    fa08:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
    fa0a:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
    fa0c:	6828      	ldr	r0, [r5, #0]
    fa0e:	f7f9 fb3f 	bl	9090 <ull_rx_put>
		ull_rx_sched();
    fa12:	f7f9 fb4d 	bl	90b0 <ull_rx_sched>
}
    fa16:	b005      	add	sp, #20
    fa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    fa1c:	fa5f f088 	uxtb.w	r0, r8
    fa20:	f7fe fffa 	bl	ea18 <ull_filter_lll_rl_irk_idx>
    fa24:	e76d      	b.n	f902 <isr_rx+0x7e>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
    fa26:	f3c0 1080 	ubfx	r0, r0, #6, #1
    fa2a:	f10d 020f 	add.w	r2, sp, #15
    fa2e:	f108 0102 	add.w	r1, r8, #2
    fa32:	f7ff f8b3 	bl	eb9c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
    fa36:	2800      	cmp	r0, #0
    fa38:	d188      	bne.n	f94c <isr_rx+0xc8>
		(((lll->filter_policy & 0x02) != 0) &&
    fa3a:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
    fa3c:	079a      	lsls	r2, r3, #30
    fa3e:	f57f af34 	bpl.w	f8aa <isr_rx+0x26>
    fa42:	e780      	b.n	f946 <isr_rx+0xc2>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
    fa44:	f898 3001 	ldrb.w	r3, [r8, #1]
    fa48:	2b0c      	cmp	r3, #12
    fa4a:	f47f af2e 	bne.w	f8aa <isr_rx+0x26>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
    fa4e:	5d63      	ldrb	r3, [r4, r5]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
    fa50:	f003 030f 	and.w	r3, r3, #15
    fa54:	2b01      	cmp	r3, #1
    fa56:	f43f af28 	beq.w	f8aa <isr_rx+0x26>
	return ((((lll->filter_policy & 0x01) == 0) &&
    fa5a:	7b63      	ldrb	r3, [r4, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    fa5c:	07db      	lsls	r3, r3, #31
    fa5e:	d50c      	bpl.n	fa7a <isr_rx+0x1f6>
		(((lll->filter_policy & 0x01) != 0) &&
    fa60:	2f00      	cmp	r7, #0
    fa62:	d07d      	beq.n	fb60 <__kernel_ram_size+0xc0>
	return (adv->tx_addr == sr->rx_addr) &&
    fa64:	5d63      	ldrb	r3, [r4, r5]
    fa66:	f898 0000 	ldrb.w	r0, [r8]
    fa6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fa6e:	ebb3 1fd0 	cmp.w	r3, r0, lsr #7
    fa72:	d07d      	beq.n	fb70 <__kernel_ram_size+0xd0>
    fa74:	f000 030f 	and.w	r3, r0, #15
    fa78:	e756      	b.n	f928 <isr_rx+0xa4>
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
    fa7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    fa7e:	f10d 020f 	add.w	r2, sp, #15
    fa82:	f108 0102 	add.w	r1, r8, #2
    fa86:	f7ff f889 	bl	eb9c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
    fa8a:	2800      	cmp	r0, #0
    fa8c:	d1ea      	bne.n	fa64 <isr_rx+0x1e0>
		(((lll->filter_policy & 0x01) != 0) &&
    fa8e:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
    fa90:	07d8      	lsls	r0, r3, #31
    fa92:	d4e5      	bmi.n	fa60 <isr_rx+0x1dc>
    fa94:	f898 0000 	ldrb.w	r0, [r8]
    fa98:	e7ec      	b.n	fa74 <isr_rx+0x1f0>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    fa9a:	23ff      	movs	r3, #255	; 0xff
    fa9c:	e7b1      	b.n	fa02 <isr_rx+0x17e>
		LL_ASSERT(!ret);
    fa9e:	4a4b      	ldr	r2, [pc, #300]	; (fbcc <__kernel_ram_size+0x12c>)
    faa0:	494b      	ldr	r1, [pc, #300]	; (fbd0 <__kernel_ram_size+0x130>)
    faa2:	484c      	ldr	r0, [pc, #304]	; (fbd4 <__kernel_ram_size+0x134>)
    faa4:	f240 23e5 	movw	r3, #741	; 0x2e5
    faa8:	f004 f924 	bl	13cf4 <printk>
    faac:	4040      	eors	r0, r0
    faae:	f380 8811 	msr	BASEPRI, r0
    fab2:	f04f 0003 	mov.w	r0, #3
    fab6:	df02      	svc	2
    fab8:	e780      	b.n	f9bc <isr_rx+0x138>
			lll->conn->rssi_latest =  radio_rssi_get();
    faba:	f001 fd23 	bl	11504 <radio_rssi_get>
    fabe:	68a3      	ldr	r3, [r4, #8]
    fac0:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
    fac4:	e774      	b.n	f9b0 <isr_rx+0x12c>
		LL_ASSERT(!radio_is_ready());
    fac6:	4a41      	ldr	r2, [pc, #260]	; (fbcc <__kernel_ram_size+0x12c>)
    fac8:	4943      	ldr	r1, [pc, #268]	; (fbd8 <__kernel_ram_size+0x138>)
    faca:	4842      	ldr	r0, [pc, #264]	; (fbd4 <__kernel_ram_size+0x134>)
    facc:	f240 23d7 	movw	r3, #727	; 0x2d7
    fad0:	f004 f910 	bl	13cf4 <printk>
    fad4:	4040      	eors	r0, r0
    fad6:	f380 8811 	msr	BASEPRI, r0
    fada:	f04f 0003 	mov.w	r0, #3
    fade:	df02      	svc	2
    fae0:	e762      	b.n	f9a8 <isr_rx+0x124>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    fae2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    fae6:	f7fe ffe9 	bl	eabc <ull_filter_lll_irk_whitelisted>
    faea:	2800      	cmp	r0, #0
    faec:	f47f af2e 	bne.w	f94c <isr_rx+0xc8>
    faf0:	e6db      	b.n	f8aa <isr_rx+0x26>
						      ci->connect_ind.init_addr,
    faf2:	f108 0702 	add.w	r7, r8, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
    faf6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    fafa:	4639      	mov	r1, r7
    fafc:	f10d 020f 	add.w	r2, sp, #15
    fb00:	f7ff f84c 	bl	eb9c <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
    fb04:	2800      	cmp	r0, #0
    fb06:	f43f aed0 	beq.w	f8aa <isr_rx+0x26>
	return (adv->tx_addr == ci->rx_addr) &&
    fb0a:	5d63      	ldrb	r3, [r4, r5]
    fb0c:	f898 1000 	ldrb.w	r1, [r8]
    fb10:	f3c3 1280 	ubfx	r2, r3, #6, #1
    fb14:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
    fb18:	f47f aec7 	bne.w	f8aa <isr_rx+0x26>
    fb1c:	f003 030f 	and.w	r3, r3, #15
    fb20:	2b01      	cmp	r3, #1
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    fb22:	f108 0108 	add.w	r1, r8, #8
    fb26:	f10a 0b02 	add.w	fp, sl, #2
	return (adv->tx_addr == ci->rx_addr) &&
    fb2a:	d061      	beq.n	fbf0 <__kernel_ram_size+0x150>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    fb2c:	4658      	mov	r0, fp
    fb2e:	2206      	movs	r2, #6
    fb30:	f004 fbe3 	bl	142fa <memcmp>
			 BDADDR_SIZE)) ||
    fb34:	2800      	cmp	r0, #0
    fb36:	f47f aeb8 	bne.w	f8aa <isr_rx+0x26>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
    fb3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	if (rl_idx != FILTER_IDX_NONE) {
    fb3e:	2bff      	cmp	r3, #255	; 0xff
    fb40:	d04c      	beq.n	fbdc <__kernel_ram_size+0x13c>
		return rl_idx == lll->rl_idx;
    fb42:	7ba0      	ldrb	r0, [r4, #14]
    fb44:	1ac0      	subs	r0, r0, r3
    fb46:	fab0 f080 	clz	r0, r0
    fb4a:	0940      	lsrs	r0, r0, #5
    fb4c:	e717      	b.n	f97e <isr_rx+0xfa>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    fb4e:	4650      	mov	r0, sl
    fb50:	4629      	mov	r1, r5
    fb52:	2206      	movs	r2, #6
    fb54:	f004 fbd1 	bl	142fa <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    fb58:	2800      	cmp	r0, #0
    fb5a:	f43f af12 	beq.w	f982 <isr_rx+0xfe>
    fb5e:	e706      	b.n	f96e <isr_rx+0xea>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
    fb60:	f89d 000f 	ldrb.w	r0, [sp, #15]
    fb64:	f7fe ffaa 	bl	eabc <ull_filter_lll_irk_whitelisted>
    fb68:	2800      	cmp	r0, #0
    fb6a:	f47f af7b 	bne.w	fa64 <isr_rx+0x1e0>
    fb6e:	e791      	b.n	fa94 <isr_rx+0x210>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    fb70:	2206      	movs	r2, #6
    fb72:	f108 0108 	add.w	r1, r8, #8
    fb76:	f10a 0002 	add.w	r0, sl, #2
    fb7a:	f004 fbbe 	bl	142fa <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
    fb7e:	2800      	cmp	r0, #0
    fb80:	d188      	bne.n	fa94 <isr_rx+0x210>
		radio_isr_set(isr_done, lll);
    fb82:	4810      	ldr	r0, [pc, #64]	; (fbc4 <__kernel_ram_size+0x124>)
    fb84:	4621      	mov	r1, r4
    fb86:	f001 fb45 	bl	11214 <radio_isr_set>
		radio_switch_complete_and_disable();
    fb8a:	f001 fca3 	bl	114d4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
    fb8e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    fb92:	2327      	movs	r3, #39	; 0x27
    fb94:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
    fb98:	3061      	adds	r0, #97	; 0x61
    fb9a:	f001 fbfb 	bl	11394 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    fb9e:	f001 fc3f 	bl	11420 <radio_is_ready>
    fba2:	2800      	cmp	r0, #0
    fba4:	f43f ae87 	beq.w	f8b6 <isr_rx+0x32>
    fba8:	4a08      	ldr	r2, [pc, #32]	; (fbcc <__kernel_ram_size+0x12c>)
    fbaa:	490b      	ldr	r1, [pc, #44]	; (fbd8 <__kernel_ram_size+0x138>)
    fbac:	4809      	ldr	r0, [pc, #36]	; (fbd4 <__kernel_ram_size+0x134>)
    fbae:	f240 239b 	movw	r3, #667	; 0x29b
    fbb2:	f004 f89f 	bl	13cf4 <printk>
    fbb6:	4040      	eors	r0, r0
    fbb8:	f380 8811 	msr	BASEPRI, r0
    fbbc:	f04f 0003 	mov.w	r0, #3
    fbc0:	df02      	svc	2
		if (!err) {
    fbc2:	e678      	b.n	f8b6 <isr_rx+0x32>
    fbc4:	0000f831 	.word	0x0000f831
    fbc8:	0000f40d 	.word	0x0000f40d
    fbcc:	00015cec 	.word	0x00015cec
    fbd0:	000154d0 	.word	0x000154d0
    fbd4:	0001525c 	.word	0x0001525c
    fbd8:	00015d4c 	.word	0x00015d4c
	return (adv->rx_addr == ci->tx_addr) &&
    fbdc:	f898 3000 	ldrb.w	r3, [r8]
    fbe0:	5d62      	ldrb	r2, [r4, r5]
    fbe2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    fbe6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    fbea:	d00a      	beq.n	fc02 <__kernel_ram_size+0x162>
    fbec:	2000      	movs	r0, #0
		       isr_rx_ci_adva_check(adv, ci) &&
    fbee:	e6c6      	b.n	f97e <isr_rx+0xfa>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    fbf0:	4658      	mov	r0, fp
    fbf2:	2206      	movs	r2, #6
    fbf4:	9101      	str	r1, [sp, #4]
    fbf6:	f004 fb80 	bl	142fa <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d09d      	beq.n	fb3a <__kernel_ram_size+0x9a>
    fbfe:	9901      	ldr	r1, [sp, #4]
    fc00:	e794      	b.n	fb2c <__kernel_ram_size+0x8c>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    fc02:	4639      	mov	r1, r7
    fc04:	f10a 0008 	add.w	r0, sl, #8
    fc08:	2206      	movs	r2, #6
    fc0a:	f004 fb76 	bl	142fa <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    fc0e:	fab0 f080 	clz	r0, r0
    fc12:	0940      	lsrs	r0, r0, #5
    fc14:	e6b3      	b.n	f97e <isr_rx+0xfa>
    fc16:	bf00      	nop

0000fc18 <lll_adv_init>:
}
    fc18:	2000      	movs	r0, #0
    fc1a:	4770      	bx	lr

0000fc1c <lll_adv_reset>:
    fc1c:	2000      	movs	r0, #0
    fc1e:	4770      	bx	lr

0000fc20 <lll_adv_prepare>:
{
    fc20:	b510      	push	{r4, lr}
    fc22:	b082      	sub	sp, #8
    fc24:	4604      	mov	r4, r0
	err = lll_hfclock_on();
    fc26:	f7ff fbad 	bl	f384 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
    fc2a:	b108      	cbz	r0, fc30 <lll_adv_prepare+0x10>
    fc2c:	3044      	adds	r0, #68	; 0x44
    fc2e:	d119      	bne.n	fc64 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
    fc30:	4a13      	ldr	r2, [pc, #76]	; (fc80 <lll_adv_prepare+0x60>)
    fc32:	4914      	ldr	r1, [pc, #80]	; (fc84 <lll_adv_prepare+0x64>)
    fc34:	4814      	ldr	r0, [pc, #80]	; (fc88 <lll_adv_prepare+0x68>)
    fc36:	9400      	str	r4, [sp, #0]
    fc38:	2300      	movs	r3, #0
    fc3a:	f7ff fa19 	bl	f070 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
    fc3e:	b108      	cbz	r0, fc44 <lll_adv_prepare+0x24>
    fc40:	3044      	adds	r0, #68	; 0x44
    fc42:	d101      	bne.n	fc48 <lll_adv_prepare+0x28>
}
    fc44:	b002      	add	sp, #8
    fc46:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
    fc48:	4a10      	ldr	r2, [pc, #64]	; (fc8c <lll_adv_prepare+0x6c>)
    fc4a:	4911      	ldr	r1, [pc, #68]	; (fc90 <lll_adv_prepare+0x70>)
    fc4c:	4811      	ldr	r0, [pc, #68]	; (fc94 <lll_adv_prepare+0x74>)
    fc4e:	2371      	movs	r3, #113	; 0x71
    fc50:	f004 f850 	bl	13cf4 <printk>
    fc54:	4040      	eors	r0, r0
    fc56:	f380 8811 	msr	BASEPRI, r0
    fc5a:	f04f 0003 	mov.w	r0, #3
    fc5e:	df02      	svc	2
}
    fc60:	b002      	add	sp, #8
    fc62:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
    fc64:	4a09      	ldr	r2, [pc, #36]	; (fc8c <lll_adv_prepare+0x6c>)
    fc66:	490a      	ldr	r1, [pc, #40]	; (fc90 <lll_adv_prepare+0x70>)
    fc68:	480a      	ldr	r0, [pc, #40]	; (fc94 <lll_adv_prepare+0x74>)
    fc6a:	236e      	movs	r3, #110	; 0x6e
    fc6c:	f004 f842 	bl	13cf4 <printk>
    fc70:	4040      	eors	r0, r0
    fc72:	f380 8811 	msr	BASEPRI, r0
    fc76:	f04f 0003 	mov.w	r0, #3
    fc7a:	df02      	svc	2
    fc7c:	e7d8      	b.n	fc30 <lll_adv_prepare+0x10>
    fc7e:	bf00      	nop
    fc80:	0000f60d 	.word	0x0000f60d
    fc84:	0000f7dd 	.word	0x0000f7dd
    fc88:	0000f765 	.word	0x0000f765
    fc8c:	00015cec 	.word	0x00015cec
    fc90:	00015d68 	.word	0x00015d68
    fc94:	0001525c 	.word	0x0001525c

0000fc98 <ticker_stop_cb>:
{
    fc98:	b508      	push	{r3, lr}
	radio_isr_set(isr_cleanup, param);
    fc9a:	4619      	mov	r1, r3
    fc9c:	4803      	ldr	r0, [pc, #12]	; (fcac <ticker_stop_cb+0x14>)
    fc9e:	f001 fab9 	bl	11214 <radio_isr_set>
}
    fca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
    fca6:	f001 bb97 	b.w	113d8 <radio_disable>
    fcaa:	bf00      	nop
    fcac:	0001018d 	.word	0x0001018d

0000fcb0 <prepare_cb>:
{
    fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_scan *lll = prepare_param->param;
    fcb2:	68c5      	ldr	r5, [r0, #12]
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    fcb4:	4b73      	ldr	r3, [pc, #460]	; (fe84 <prepare_cb+0x1d4>)
	return !!hdr->is_stop;
    fcb6:	792c      	ldrb	r4, [r5, #4]
{
    fcb8:	b08d      	sub	sp, #52	; 0x34
	if (lll_is_stop(lll)) {
    fcba:	f014 0401 	ands.w	r4, r4, #1
	u32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    fcbe:	930b      	str	r3, [sp, #44]	; 0x2c
	if (lll_is_stop(lll)) {
    fcc0:	d179      	bne.n	fdb6 <prepare_cb+0x106>
	radio_reset();
    fcc2:	4606      	mov	r6, r0
    fcc4:	f001 fac6 	bl	11254 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    fcc8:	4620      	mov	r0, r4
    fcca:	f001 faf7 	bl	112bc <radio_tx_power_set>
	radio_phy_set(0, 0);
    fcce:	4621      	mov	r1, r4
    fcd0:	4620      	mov	r0, r4
    fcd2:	f001 fae3 	bl	1129c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
    fcd6:	4622      	mov	r2, r4
    fcd8:	2125      	movs	r1, #37	; 0x25
    fcda:	2008      	movs	r0, #8
    fcdc:	f001 fb26 	bl	1132c <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
    fce0:	2001      	movs	r0, #1
    fce2:	f7f9 f99f 	bl	9024 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    fce6:	4604      	mov	r4, r0
    fce8:	2800      	cmp	r0, #0
    fcea:	f000 80bd 	beq.w	fe68 <prepare_cb+0x1b8>
	radio_pkt_rx_set(node_rx->pdu);
    fcee:	f104 0020 	add.w	r0, r4, #32
    fcf2:	f001 fb49 	bl	11388 <radio_pkt_rx_set>
	radio_aa_set((u8_t *)&aa);
    fcf6:	a80b      	add	r0, sp, #44	; 0x2c
    fcf8:	f001 fafe 	bl	112f8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    fcfc:	4962      	ldr	r1, [pc, #392]	; (fe88 <prepare_cb+0x1d8>)
    fcfe:	f240 605b 	movw	r0, #1627	; 0x65b
    fd02:	f001 fbab 	bl	1145c <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
    fd06:	7da8      	ldrb	r0, [r5, #22]
    fd08:	f3c0 0041 	ubfx	r0, r0, #1, #2
    fd0c:	3025      	adds	r0, #37	; 0x25
    fd0e:	f7ff fab3 	bl	f278 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
    fd12:	4629      	mov	r1, r5
    fd14:	485d      	ldr	r0, [pc, #372]	; (fe8c <prepare_cb+0x1dc>)
    fd16:	f001 fa7d 	bl	11214 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
    fd1a:	2096      	movs	r0, #150	; 0x96
    fd1c:	f001 fc58 	bl	115d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    fd20:	2300      	movs	r3, #0
    fd22:	461a      	mov	r2, r3
    fd24:	4619      	mov	r1, r3
    fd26:	4618      	mov	r0, r3
    fd28:	f001 fbc8 	bl	114bc <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
    fd2c:	f7fe ff96 	bl	ec5c <ull_filter_lll_rl_enabled>
    fd30:	bb58      	cbnz	r0, fd8a <prepare_cb+0xda>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
    fd32:	7dab      	ldrb	r3, [r5, #22]
    fd34:	f013 0f18 	tst.w	r3, #24
    fd38:	f040 808d 	bne.w	fe56 <prepare_cb+0x1a6>
	evt = HDR_LLL2EVT(lll);
    fd3c:	682f      	ldr	r7, [r5, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
    fd3e:	6834      	ldr	r4, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
    fd40:	4638      	mov	r0, r7
    fd42:	f7ff fa7d 	bl	f240 <lll_evt_offset_get>
    fd46:	4404      	add	r4, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
    fd48:	6872      	ldr	r2, [r6, #4]
    fd4a:	f104 0109 	add.w	r1, r4, #9
    fd4e:	2000      	movs	r0, #0
    fd50:	f001 fc4a 	bl	115e8 <radio_tmr_start>
	radio_tmr_end_capture();
    fd54:	f001 fd56 	bl	11804 <radio_tmr_end_capture>
	radio_rssi_measure();
    fd58:	f001 fbca 	bl	114f0 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
    fd5c:	4628      	mov	r0, r5
    fd5e:	f7fa f835 	bl	9dcc <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
    fd62:	1d01      	adds	r1, r0, #4
    fd64:	b2c9      	uxtb	r1, r1
    fd66:	4638      	mov	r0, r7
    fd68:	4622      	mov	r2, r4
    fd6a:	f7ff fa73 	bl	f254 <lll_preempt_calc>
    fd6e:	4601      	mov	r1, r0
    fd70:	2800      	cmp	r0, #0
    fd72:	d137      	bne.n	fde4 <prepare_cb+0x134>
		if (lll->ticks_window) {
    fd74:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fd76:	2b00      	cmp	r3, #0
    fd78:	d14d      	bne.n	fe16 <prepare_cb+0x166>
		ret = lll_prepare_done(lll);
    fd7a:	4628      	mov	r0, r5
    fd7c:	f7ff fa02 	bl	f184 <lll_prepare_done>
		LL_ASSERT(!ret);
    fd80:	2800      	cmp	r0, #0
    fd82:	d138      	bne.n	fdf6 <prepare_cb+0x146>
}
    fd84:	2000      	movs	r0, #0
    fd86:	b00d      	add	sp, #52	; 0x34
    fd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
    fd8a:	7da8      	ldrb	r0, [r5, #22]
    fd8c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    fd90:	f7fe fec4 	bl	eb1c <ull_filter_lll_get>
    fd94:	4604      	mov	r4, r0
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
    fd96:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
    fd9a:	f7fe fdc9 	bl	e930 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    fd9e:	7861      	ldrb	r1, [r4, #1]
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
    fda0:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    fda2:	1ca2      	adds	r2, r4, #2
    fda4:	7820      	ldrb	r0, [r4, #0]
    fda6:	f001 fbc5 	bl	11534 <radio_filter_configure>
		radio_ar_configure(count, irks);
    fdaa:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    fdae:	4639      	mov	r1, r7
    fdb0:	f001 fdc8 	bl	11944 <radio_ar_configure>
    fdb4:	e7c2      	b.n	fd3c <prepare_cb+0x8c>
		err = lll_hfclock_off();
    fdb6:	f7ff faed 	bl	f394 <lll_hfclock_off>
		LL_ASSERT(!err || err == -EBUSY);
    fdba:	b168      	cbz	r0, fdd8 <prepare_cb+0x128>
    fdbc:	3010      	adds	r0, #16
    fdbe:	d00b      	beq.n	fdd8 <prepare_cb+0x128>
    fdc0:	4a33      	ldr	r2, [pc, #204]	; (fe90 <prepare_cb+0x1e0>)
    fdc2:	4934      	ldr	r1, [pc, #208]	; (fe94 <prepare_cb+0x1e4>)
    fdc4:	4834      	ldr	r0, [pc, #208]	; (fe98 <prepare_cb+0x1e8>)
    fdc6:	238b      	movs	r3, #139	; 0x8b
    fdc8:	f003 ff94 	bl	13cf4 <printk>
    fdcc:	4040      	eors	r0, r0
    fdce:	f380 8811 	msr	BASEPRI, r0
    fdd2:	f04f 0003 	mov.w	r0, #3
    fdd6:	df02      	svc	2
		lll_done(NULL);
    fdd8:	2000      	movs	r0, #0
    fdda:	f7ff f9d5 	bl	f188 <lll_done>
}
    fdde:	2000      	movs	r0, #0
    fde0:	b00d      	add	sp, #52	; 0x34
    fde2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
    fde4:	482d      	ldr	r0, [pc, #180]	; (fe9c <prepare_cb+0x1ec>)
    fde6:	4629      	mov	r1, r5
    fde8:	f001 fa14 	bl	11214 <radio_isr_set>
		radio_disable();
    fdec:	f001 faf4 	bl	113d8 <radio_disable>
}
    fdf0:	2000      	movs	r0, #0
    fdf2:	b00d      	add	sp, #52	; 0x34
    fdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(!ret);
    fdf6:	4a26      	ldr	r2, [pc, #152]	; (fe90 <prepare_cb+0x1e0>)
    fdf8:	4929      	ldr	r1, [pc, #164]	; (fea0 <prepare_cb+0x1f0>)
    fdfa:	4827      	ldr	r0, [pc, #156]	; (fe98 <prepare_cb+0x1e8>)
    fdfc:	f44f 7382 	mov.w	r3, #260	; 0x104
    fe00:	f003 ff78 	bl	13cf4 <printk>
    fe04:	4040      	eors	r0, r0
    fe06:	f380 8811 	msr	BASEPRI, r0
    fe0a:	f04f 0003 	mov.w	r0, #3
    fe0e:	df02      	svc	2
}
    fe10:	2000      	movs	r0, #0
    fe12:	b00d      	add	sp, #52	; 0x34
    fe14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    fe16:	22fe      	movs	r2, #254	; 0xfe
    fe18:	9300      	str	r3, [sp, #0]
    fe1a:	9208      	str	r2, [sp, #32]
    fe1c:	4b21      	ldr	r3, [pc, #132]	; (fea4 <prepare_cb+0x1f4>)
    fe1e:	4a22      	ldr	r2, [pc, #136]	; (fea8 <prepare_cb+0x1f8>)
    fe20:	9307      	str	r3, [sp, #28]
    fe22:	9205      	str	r2, [sp, #20]
    fe24:	4623      	mov	r3, r4
    fe26:	e9cd 0003 	strd	r0, r0, [sp, #12]
    fe2a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    fe2e:	9506      	str	r5, [sp, #24]
    fe30:	2203      	movs	r2, #3
    fe32:	f7f5 feeb 	bl	5c0c <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fe36:	f030 0302 	bics.w	r3, r0, #2
    fe3a:	d09e      	beq.n	fd7a <prepare_cb+0xca>
    fe3c:	4a14      	ldr	r2, [pc, #80]	; (fe90 <prepare_cb+0x1e0>)
    fe3e:	491b      	ldr	r1, [pc, #108]	; (feac <prepare_cb+0x1fc>)
    fe40:	4815      	ldr	r0, [pc, #84]	; (fe98 <prepare_cb+0x1e8>)
    fe42:	23ff      	movs	r3, #255	; 0xff
    fe44:	f003 ff56 	bl	13cf4 <printk>
    fe48:	4040      	eors	r0, r0
    fe4a:	f380 8811 	msr	BASEPRI, r0
    fe4e:	f04f 0003 	mov.w	r0, #3
    fe52:	df02      	svc	2
    fe54:	e791      	b.n	fd7a <prepare_cb+0xca>
		struct lll_filter *wl = ull_filter_lll_get(true);
    fe56:	2001      	movs	r0, #1
    fe58:	f7fe fe60 	bl	eb1c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
    fe5c:	7841      	ldrb	r1, [r0, #1]
    fe5e:	1c82      	adds	r2, r0, #2
    fe60:	7800      	ldrb	r0, [r0, #0]
    fe62:	f001 fb67 	bl	11534 <radio_filter_configure>
    fe66:	e769      	b.n	fd3c <prepare_cb+0x8c>
	LL_ASSERT(node_rx);
    fe68:	4a09      	ldr	r2, [pc, #36]	; (fe90 <prepare_cb+0x1e0>)
    fe6a:	4911      	ldr	r1, [pc, #68]	; (feb0 <prepare_cb+0x200>)
    fe6c:	480a      	ldr	r0, [pc, #40]	; (fe98 <prepare_cb+0x1e8>)
    fe6e:	23a4      	movs	r3, #164	; 0xa4
    fe70:	f003 ff40 	bl	13cf4 <printk>
    fe74:	4040      	eors	r0, r0
    fe76:	f380 8811 	msr	BASEPRI, r0
    fe7a:	f04f 0003 	mov.w	r0, #3
    fe7e:	df02      	svc	2
    fe80:	e735      	b.n	fcee <prepare_cb+0x3e>
    fe82:	bf00      	nop
    fe84:	8e89bed6 	.word	0x8e89bed6
    fe88:	00555555 	.word	0x00555555
    fe8c:	00002d79 	.word	0x00002d79
    fe90:	00015d7c 	.word	0x00015d7c
    fe94:	00015d38 	.word	0x00015d38
    fe98:	0001525c 	.word	0x0001525c
    fe9c:	00010219 	.word	0x00010219
    fea0:	000154d0 	.word	0x000154d0
    fea4:	0001007d 	.word	0x0001007d
    fea8:	0000fc99 	.word	0x0000fc99
    feac:	00015630 	.word	0x00015630
    feb0:	00015dc8 	.word	0x00015dc8

0000feb4 <isr_race>:
	radio_status_reset();
    feb4:	f001 baa8 	b.w	11408 <radio_status_reset>

0000feb8 <isr_common_done>:
{
    feb8:	b530      	push	{r4, r5, lr}
    feba:	b083      	sub	sp, #12
    febc:	4605      	mov	r5, r0
	radio_status_reset();
    febe:	f001 faa3 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    fec2:	f001 fb75 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    fec6:	f001 fb5b 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
    feca:	f001 fd75 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    fece:	f001 fb1f 	bl	11510 <radio_rssi_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
    fed2:	2096      	movs	r0, #150	; 0x96
    fed4:	f001 fb7c 	bl	115d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    fed8:	2300      	movs	r3, #0
    feda:	4618      	mov	r0, r3
    fedc:	461a      	mov	r2, r3
    fede:	4619      	mov	r1, r3
    fee0:	f001 faec 	bl	114bc <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
    fee4:	2001      	movs	r0, #1
    fee6:	f7f9 f89d 	bl	9024 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    feea:	4604      	mov	r4, r0
    feec:	b1c0      	cbz	r0, ff20 <isr_common_done+0x68>
	radio_pkt_rx_set(node_rx->pdu);
    feee:	f104 0020 	add.w	r0, r4, #32
    fef2:	f001 fa49 	bl	11388 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
    fef6:	f7fe feb1 	bl	ec5c <ull_filter_lll_rl_enabled>
    fefa:	b938      	cbnz	r0, ff0c <isr_common_done+0x54>
	radio_rssi_measure();
    fefc:	f001 faf8 	bl	114f0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
    ff00:	480e      	ldr	r0, [pc, #56]	; (ff3c <isr_common_done+0x84>)
    ff02:	4629      	mov	r1, r5
    ff04:	f001 f986 	bl	11214 <radio_isr_set>
}
    ff08:	b003      	add	sp, #12
    ff0a:	bd30      	pop	{r4, r5, pc}
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
    ff0c:	f10d 0007 	add.w	r0, sp, #7
    ff10:	f7fe fd0e 	bl	e930 <ull_filter_lll_irks_get>
    ff14:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
    ff16:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ff1a:	f001 fd13 	bl	11944 <radio_ar_configure>
    ff1e:	e7ed      	b.n	fefc <isr_common_done+0x44>
	LL_ASSERT(node_rx);
    ff20:	4a07      	ldr	r2, [pc, #28]	; (ff40 <isr_common_done+0x88>)
    ff22:	4908      	ldr	r1, [pc, #32]	; (ff44 <isr_common_done+0x8c>)
    ff24:	4808      	ldr	r0, [pc, #32]	; (ff48 <isr_common_done+0x90>)
    ff26:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    ff2a:	f003 fee3 	bl	13cf4 <printk>
    ff2e:	4040      	eors	r0, r0
    ff30:	f380 8811 	msr	BASEPRI, r0
    ff34:	f04f 0003 	mov.w	r0, #3
    ff38:	df02      	svc	2
    ff3a:	e7d8      	b.n	feee <isr_common_done+0x36>
    ff3c:	00002d79 	.word	0x00002d79
    ff40:	00015d7c 	.word	0x00015d7c
    ff44:	00015dc8 	.word	0x00015dc8
    ff48:	0001525c 	.word	0x0001525c

0000ff4c <isr_done>:
{
    ff4c:	b508      	push	{r3, lr}
	isr_common_done(param);
    ff4e:	f7ff ffb3 	bl	feb8 <isr_common_done>
	radio_rx_enable();
    ff52:	f001 fa35 	bl	113c0 <radio_rx_enable>
}
    ff56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
    ff5a:	f001 bc53 	b.w	11804 <radio_tmr_end_capture>
    ff5e:	bf00      	nop

0000ff60 <isr_tx>:
{
    ff60:	b570      	push	{r4, r5, r6, lr}
    ff62:	b082      	sub	sp, #8
    ff64:	4605      	mov	r5, r0
	radio_status_reset();
    ff66:	f001 fa4f 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
    ff6a:	f001 fb21 	bl	115b0 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
    ff6e:	2096      	movs	r0, #150	; 0x96
    ff70:	f001 fb2e 	bl	115d0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    ff74:	2300      	movs	r3, #0
    ff76:	4618      	mov	r0, r3
    ff78:	461a      	mov	r2, r3
    ff7a:	4619      	mov	r1, r3
    ff7c:	f001 fa9e 	bl	114bc <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
    ff80:	2001      	movs	r0, #1
    ff82:	f7f9 f84f 	bl	9024 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    ff86:	4604      	mov	r4, r0
    ff88:	2800      	cmp	r0, #0
    ff8a:	d03d      	beq.n	10008 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9>
	radio_pkt_rx_set(node_rx->pdu);
    ff8c:	f104 0020 	add.w	r0, r4, #32
    ff90:	f001 f9fa 	bl	11388 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
    ff94:	f001 fa44 	bl	11420 <radio_is_ready>
    ff98:	b9d8      	cbnz	r0, ffd2 <isr_tx+0x72>
	if (ull_filter_lll_rl_enabled()) {
    ff9a:	f7fe fe5f 	bl	ec5c <ull_filter_lll_rl_enabled>
    ff9e:	bb48      	cbnz	r0, fff4 <isr_tx+0x94>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    ffa0:	f001 fc3e 	bl	11820 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
    ffa4:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    ffa6:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    ffa8:	4608      	mov	r0, r1
    ffaa:	f001 fa03 	bl	113b4 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
    ffae:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
    ffb0:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
    ffb2:	4608      	mov	r0, r1
    ffb4:	f001 f9fa 	bl	113ac <radio_tx_chain_delay_get>
    ffb8:	4434      	add	r4, r6
    ffba:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
    ffbc:	1a20      	subs	r0, r4, r0
    ffbe:	f001 fbe7 	bl	11790 <radio_tmr_hcto_configure>
	radio_rssi_measure();
    ffc2:	f001 fa95 	bl	114f0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
    ffc6:	4817      	ldr	r0, [pc, #92]	; (10024 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25>)
    ffc8:	4629      	mov	r1, r5
    ffca:	f001 f923 	bl	11214 <radio_isr_set>
}
    ffce:	b002      	add	sp, #8
    ffd0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
    ffd2:	4a15      	ldr	r2, [pc, #84]	; (10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>)
    ffd4:	4915      	ldr	r1, [pc, #84]	; (1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>)
    ffd6:	4816      	ldr	r0, [pc, #88]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
    ffd8:	f240 13c7 	movw	r3, #455	; 0x1c7
    ffdc:	f003 fe8a 	bl	13cf4 <printk>
    ffe0:	4040      	eors	r0, r0
    ffe2:	f380 8811 	msr	BASEPRI, r0
    ffe6:	f04f 0003 	mov.w	r0, #3
    ffea:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
    ffec:	f7fe fe36 	bl	ec5c <ull_filter_lll_rl_enabled>
    fff0:	2800      	cmp	r0, #0
    fff2:	d0d5      	beq.n	ffa0 <isr_tx+0x40>
		u8_t count, *irks = ull_filter_lll_irks_get(&count);
    fff4:	f10d 0007 	add.w	r0, sp, #7
    fff8:	f7fe fc9a 	bl	e930 <ull_filter_lll_irks_get>
    fffc:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
    fffe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   10002:	f001 fc9f 	bl	11944 <radio_ar_configure>
   10006:	e7cb      	b.n	ffa0 <isr_tx+0x40>
	LL_ASSERT(node_rx);
   10008:	4a07      	ldr	r2, [pc, #28]	; (10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>)
   1000a:	490a      	ldr	r1, [pc, #40]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
   1000c:	4808      	ldr	r0, [pc, #32]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
   1000e:	f240 13c3 	movw	r3, #451	; 0x1c3
   10012:	f003 fe6f 	bl	13cf4 <printk>
   10016:	4040      	eors	r0, r0
   10018:	f380 8811 	msr	BASEPRI, r0
   1001c:	f04f 0003 	mov.w	r0, #3
   10020:	df02      	svc	2
   10022:	e7b3      	b.n	ff8c <isr_tx+0x2c>
   10024:	00002d79 	.word	0x00002d79
   10028:	00015d7c 	.word	0x00015d7c
   1002c:	00015d4c 	.word	0x00015d4c
   10030:	0001525c 	.word	0x0001525c
   10034:	00015dc8 	.word	0x00015dc8

00010038 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   10038:	68c3      	ldr	r3, [r0, #12]
{
   1003a:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   1003c:	681e      	ldr	r6, [r3, #0]
{
   1003e:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   10040:	f7f5 fe96 	bl	5d70 <ticker_ticks_now_get>
   10044:	4605      	mov	r5, r0
   10046:	4630      	mov	r0, r6
   10048:	f7ff f8fa 	bl	f240 <lll_evt_offset_get>
	p->remainder = 0;
   1004c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1004e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   10050:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   10054:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   10056:	4620      	mov	r0, r4
}
   10058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1005c:	f7ff be28 	b.w	fcb0 <prepare_cb>

00010060 <isr_window>:
{
   10060:	b508      	push	{r3, lr}
	isr_common_done(param);
   10062:	f7ff ff29 	bl	feb8 <isr_common_done>
	ticks_at_start = ticker_ticks_now_get() +
   10066:	f7f5 fe83 	bl	5d70 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   1006a:	1cc1      	adds	r1, r0, #3
   1006c:	2000      	movs	r0, #0
   1006e:	f001 fb3b 	bl	116e8 <radio_tmr_start_tick>
}
   10072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   10076:	f001 bbc5 	b.w	11804 <radio_tmr_end_capture>
   1007a:	bf00      	nop

0001007c <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1007c:	b900      	cbnz	r0, 10080 <ticker_op_start_cb+0x4>
   1007e:	4770      	bx	lr
{
   10080:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10082:	4a07      	ldr	r2, [pc, #28]	; (100a0 <ticker_op_start_cb+0x24>)
   10084:	4907      	ldr	r1, [pc, #28]	; (100a4 <ticker_op_start_cb+0x28>)
   10086:	4808      	ldr	r0, [pc, #32]	; (100a8 <ticker_op_start_cb+0x2c>)
   10088:	f44f 73b0 	mov.w	r3, #352	; 0x160
   1008c:	f003 fe32 	bl	13cf4 <printk>
   10090:	4040      	eors	r0, r0
   10092:	f380 8811 	msr	BASEPRI, r0
   10096:	f04f 0003 	mov.w	r0, #3
   1009a:	df02      	svc	2
}
   1009c:	bd08      	pop	{r3, pc}
   1009e:	bf00      	nop
   100a0:	00015d7c 	.word	0x00015d7c
   100a4:	00015780 	.word	0x00015780
   100a8:	0001525c 	.word	0x0001525c

000100ac <abort_cb>:
{
   100ac:	b510      	push	{r4, lr}
	if (!prepare_param) {
   100ae:	b1b8      	cbz	r0, 100e0 <abort_cb+0x34>
	err = lll_hfclock_off();
   100b0:	460c      	mov	r4, r1
   100b2:	f7ff f96f 	bl	f394 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   100b6:	b170      	cbz	r0, 100d6 <abort_cb+0x2a>
   100b8:	3010      	adds	r0, #16
   100ba:	d00c      	beq.n	100d6 <abort_cb+0x2a>
   100bc:	4a0c      	ldr	r2, [pc, #48]	; (100f0 <abort_cb+0x44>)
   100be:	490d      	ldr	r1, [pc, #52]	; (100f4 <abort_cb+0x48>)
   100c0:	480d      	ldr	r0, [pc, #52]	; (100f8 <abort_cb+0x4c>)
   100c2:	f44f 73a8 	mov.w	r3, #336	; 0x150
   100c6:	f003 fe15 	bl	13cf4 <printk>
   100ca:	4040      	eors	r0, r0
   100cc:	f380 8811 	msr	BASEPRI, r0
   100d0:	f04f 0003 	mov.w	r0, #3
   100d4:	df02      	svc	2
	lll_done(param);
   100d6:	4620      	mov	r0, r4
}
   100d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   100dc:	f7ff b854 	b.w	f188 <lll_done>
			radio_isr_set(isr_abort, param);
   100e0:	4806      	ldr	r0, [pc, #24]	; (100fc <abort_cb+0x50>)
   100e2:	f001 f897 	bl	11214 <radio_isr_set>
}
   100e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   100ea:	f001 b975 	b.w	113d8 <radio_disable>
   100ee:	bf00      	nop
   100f0:	00015d7c 	.word	0x00015d7c
   100f4:	00015d38 	.word	0x00015d38
   100f8:	0001525c 	.word	0x0001525c
   100fc:	00010219 	.word	0x00010219

00010100 <is_abort_cb>:
	if (next != curr) {
   10100:	4282      	cmp	r2, r0
{
   10102:	b510      	push	{r4, lr}
	if (next != curr) {
   10104:	d11b      	bne.n	1013e <is_abort_cb+0x3e>
	radio_isr_set(isr_window, lll);
   10106:	4614      	mov	r4, r2
   10108:	481b      	ldr	r0, [pc, #108]	; (10178 <is_abort_cb+0x78>)
   1010a:	4611      	mov	r1, r2
   1010c:	f001 f882 	bl	11214 <radio_isr_set>
	radio_disable();
   10110:	f001 f962 	bl	113d8 <radio_disable>
	if (++lll->chan == 3U) {
   10114:	7da3      	ldrb	r3, [r4, #22]
   10116:	f3c3 0041 	ubfx	r0, r3, #1, #2
   1011a:	3001      	adds	r0, #1
   1011c:	f000 0003 	and.w	r0, r0, #3
   10120:	2803      	cmp	r0, #3
   10122:	d007      	beq.n	10134 <is_abort_cb+0x34>
   10124:	f360 0342 	bfi	r3, r0, #1, #2
   10128:	75a3      	strb	r3, [r4, #22]
   1012a:	3025      	adds	r0, #37	; 0x25
	lll_chan_set(37 + lll->chan);
   1012c:	f7ff f8a4 	bl	f278 <lll_chan_set>
	return 0;
   10130:	2000      	movs	r0, #0
}
   10132:	bd10      	pop	{r4, pc}
		lll->chan = 0U;
   10134:	f36f 0342 	bfc	r3, #1, #2
   10138:	75a3      	strb	r3, [r4, #22]
   1013a:	2025      	movs	r0, #37	; 0x25
   1013c:	e7f6      	b.n	1012c <is_abort_cb+0x2c>
		*resume_cb = resume_prepare_cb;
   1013e:	4a0f      	ldr	r2, [pc, #60]	; (1017c <is_abort_cb+0x7c>)
   10140:	601a      	str	r2, [r3, #0]
		*resume_prio = 0; /* TODO: */
   10142:	9a02      	ldr	r2, [sp, #8]
   10144:	2300      	movs	r3, #0
   10146:	6013      	str	r3, [r2, #0]
		err = lll_hfclock_on();
   10148:	f7ff f91c 	bl	f384 <lll_hfclock_on>
		LL_ASSERT(!err || err == -EINPROGRESS);
   1014c:	b188      	cbz	r0, 10172 <is_abort_cb+0x72>
   1014e:	3044      	adds	r0, #68	; 0x44
   10150:	d00f      	beq.n	10172 <is_abort_cb+0x72>
   10152:	4a0b      	ldr	r2, [pc, #44]	; (10180 <is_abort_cb+0x80>)
   10154:	490b      	ldr	r1, [pc, #44]	; (10184 <is_abort_cb+0x84>)
   10156:	480c      	ldr	r0, [pc, #48]	; (10188 <is_abort_cb+0x88>)
   10158:	f44f 7393 	mov.w	r3, #294	; 0x126
   1015c:	f003 fdca 	bl	13cf4 <printk>
   10160:	4040      	eors	r0, r0
   10162:	f380 8811 	msr	BASEPRI, r0
   10166:	f04f 0003 	mov.w	r0, #3
   1016a:	df02      	svc	2
   1016c:	f06f 000a 	mvn.w	r0, #10
}
   10170:	bd10      	pop	{r4, pc}
   10172:	f06f 000a 	mvn.w	r0, #10
   10176:	bd10      	pop	{r4, pc}
   10178:	00010061 	.word	0x00010061
   1017c:	00010039 	.word	0x00010039
   10180:	00015d7c 	.word	0x00015d7c
   10184:	00015d68 	.word	0x00015d68
   10188:	0001525c 	.word	0x0001525c

0001018c <isr_cleanup>:
{
   1018c:	b538      	push	{r3, r4, r5, lr}
   1018e:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   10190:	f7ff f84e 	bl	f230 <lll_is_done>
   10194:	b100      	cbz	r0, 10198 <isr_cleanup+0xc>
}
   10196:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   10198:	4605      	mov	r5, r0
   1019a:	f001 f9e7 	bl	1156c <radio_filter_disable>
	if (++lll->chan == 3U) {
   1019e:	7da2      	ldrb	r2, [r4, #22]
	radio_isr_set(isr_race, param);
   101a0:	4819      	ldr	r0, [pc, #100]	; (10208 <isr_cleanup+0x7c>)
	if (++lll->chan == 3U) {
   101a2:	f3c2 0341 	ubfx	r3, r2, #1, #2
   101a6:	3301      	adds	r3, #1
   101a8:	f003 0303 	and.w	r3, r3, #3
   101ac:	2b03      	cmp	r3, #3
   101ae:	bf14      	ite	ne
   101b0:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   101b4:	f365 0242 	bfieq	r2, r5, #1, #2
   101b8:	75a2      	strb	r2, [r4, #22]
	radio_isr_set(isr_race, param);
   101ba:	4621      	mov	r1, r4
   101bc:	f001 f82a 	bl	11214 <radio_isr_set>
	if (!radio_is_idle()) {
   101c0:	f001 f942 	bl	11448 <radio_is_idle>
   101c4:	b1e8      	cbz	r0, 10202 <isr_cleanup+0x76>
	radio_tmr_stop();
   101c6:	f001 facf 	bl	11768 <radio_tmr_stop>
	err = lll_hfclock_off();
   101ca:	f7ff f8e3 	bl	f394 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   101ce:	b108      	cbz	r0, 101d4 <isr_cleanup+0x48>
   101d0:	3010      	adds	r0, #16
   101d2:	d104      	bne.n	101de <isr_cleanup+0x52>
}
   101d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(NULL);
   101d8:	2000      	movs	r0, #0
   101da:	f7fe bfd5 	b.w	f188 <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
   101de:	4a0b      	ldr	r2, [pc, #44]	; (1020c <isr_cleanup+0x80>)
   101e0:	490b      	ldr	r1, [pc, #44]	; (10210 <isr_cleanup+0x84>)
   101e2:	480c      	ldr	r0, [pc, #48]	; (10214 <isr_cleanup+0x88>)
   101e4:	f240 2387 	movw	r3, #647	; 0x287
   101e8:	f003 fd84 	bl	13cf4 <printk>
   101ec:	4040      	eors	r0, r0
   101ee:	f380 8811 	msr	BASEPRI, r0
   101f2:	f04f 0003 	mov.w	r0, #3
   101f6:	df02      	svc	2
	lll_done(NULL);
   101f8:	2000      	movs	r0, #0
}
   101fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(NULL);
   101fe:	f7fe bfc3 	b.w	f188 <lll_done>
		radio_disable();
   10202:	f001 f8e9 	bl	113d8 <radio_disable>
   10206:	e7de      	b.n	101c6 <isr_cleanup+0x3a>
   10208:	0000feb5 	.word	0x0000feb5
   1020c:	00015d7c 	.word	0x00015d7c
   10210:	00015d38 	.word	0x00015d38
   10214:	0001525c 	.word	0x0001525c

00010218 <isr_abort>:
{
   10218:	b510      	push	{r4, lr}
   1021a:	b082      	sub	sp, #8
   1021c:	4604      	mov	r4, r0
	radio_status_reset();
   1021e:	f001 f8f3 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
   10222:	f001 f9c5 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   10226:	f001 f9ab 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
   1022a:	f001 fbc5 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1022e:	f001 f96f 	bl	11510 <radio_rssi_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   10232:	2300      	movs	r3, #0
   10234:	9300      	str	r3, [sp, #0]
   10236:	4619      	mov	r1, r3
   10238:	4618      	mov	r0, r3
   1023a:	2203      	movs	r2, #3
   1023c:	f7f5 fd52 	bl	5ce4 <ticker_stop>
	radio_disable();
   10240:	f001 f8ca 	bl	113d8 <radio_disable>
	isr_cleanup(param);
   10244:	4620      	mov	r0, r4
}
   10246:	b002      	add	sp, #8
   10248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1024c:	f7ff bf9e 	b.w	1018c <isr_cleanup>

00010250 <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static u32_t isr_rx_scan_report(struct lll_scan *lll, u8_t rssi_ready,
   10250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10252:	4607      	mov	r7, r0
				u8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	struct pdu_adv *pdu_adv_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   10254:	2003      	movs	r0, #3
static u32_t isr_rx_scan_report(struct lll_scan *lll, u8_t rssi_ready,
   10256:	460e      	mov	r6, r1
   10258:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1025a:	f7f8 fee3 	bl	9024 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1025e:	b1c8      	cbz	r0, 10294 <isr_rx_scan_report.isra.0+0x44>
		return 1;
	}
	ull_pdu_rx_alloc();
   10260:	4604      	mov	r4, r0
   10262:	f7f8 fefd 	bl	9060 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   10266:	f64f 72ff 	movw	r2, #65535	; 0xffff
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1026a:	2304      	movs	r3, #4
	node_rx->hdr.handle = 0xffff;
   1026c:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1026e:	7123      	strb	r3, [r4, #4]
	}

	pdu_adv_rx = (void *)node_rx->pdu;

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   10270:	b95f      	cbnz	r7, 1028a <isr_rx_scan_report.isra.0+0x3a>
   10272:	207f      	movs	r0, #127	; 0x7f
   10274:	7720      	strb	r0, [r4, #28]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   10276:	4621      	mov	r1, r4
   10278:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1027a:	77a6      	strb	r6, [r4, #30]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1027c:	77e5      	strb	r5, [r4, #31]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1027e:	f7f8 ff07 	bl	9090 <ull_rx_put>
	ull_rx_sched();
   10282:	f7f8 ff15 	bl	90b0 <ull_rx_sched>

	return 0;
   10286:	2000      	movs	r0, #0
}
   10288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				   (radio_rssi_get() & 0x7f)
   1028a:	f001 f93b 	bl	11504 <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1028e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   10292:	e7ef      	b.n	10274 <isr_rx_scan_report.isra.0+0x24>
		return 1;
   10294:	2001      	movs	r0, #1
}
   10296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010298 <lll_scan_init>:
}
   10298:	2000      	movs	r0, #0
   1029a:	4770      	bx	lr

0001029c <lll_scan_reset>:
   1029c:	2000      	movs	r0, #0
   1029e:	4770      	bx	lr

000102a0 <lll_scan_prepare>:
{
   102a0:	b510      	push	{r4, lr}
   102a2:	b082      	sub	sp, #8
   102a4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   102a6:	f7ff f86d 	bl	f384 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   102aa:	b108      	cbz	r0, 102b0 <lll_scan_prepare+0x10>
   102ac:	3044      	adds	r0, #68	; 0x44
   102ae:	d119      	bne.n	102e4 <lll_scan_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   102b0:	4a13      	ldr	r2, [pc, #76]	; (10300 <lll_scan_prepare+0x60>)
   102b2:	4914      	ldr	r1, [pc, #80]	; (10304 <lll_scan_prepare+0x64>)
   102b4:	4814      	ldr	r0, [pc, #80]	; (10308 <lll_scan_prepare+0x68>)
   102b6:	9400      	str	r4, [sp, #0]
   102b8:	2300      	movs	r3, #0
   102ba:	f7fe fed9 	bl	f070 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   102be:	b108      	cbz	r0, 102c4 <lll_scan_prepare+0x24>
   102c0:	3044      	adds	r0, #68	; 0x44
   102c2:	d101      	bne.n	102c8 <lll_scan_prepare+0x28>
}
   102c4:	b002      	add	sp, #8
   102c6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   102c8:	4a10      	ldr	r2, [pc, #64]	; (1030c <lll_scan_prepare+0x6c>)
   102ca:	4911      	ldr	r1, [pc, #68]	; (10310 <lll_scan_prepare+0x70>)
   102cc:	4811      	ldr	r0, [pc, #68]	; (10314 <lll_scan_prepare+0x74>)
   102ce:	2370      	movs	r3, #112	; 0x70
   102d0:	f003 fd10 	bl	13cf4 <printk>
   102d4:	4040      	eors	r0, r0
   102d6:	f380 8811 	msr	BASEPRI, r0
   102da:	f04f 0003 	mov.w	r0, #3
   102de:	df02      	svc	2
}
   102e0:	b002      	add	sp, #8
   102e2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   102e4:	4a09      	ldr	r2, [pc, #36]	; (1030c <lll_scan_prepare+0x6c>)
   102e6:	490a      	ldr	r1, [pc, #40]	; (10310 <lll_scan_prepare+0x70>)
   102e8:	480a      	ldr	r0, [pc, #40]	; (10314 <lll_scan_prepare+0x74>)
   102ea:	236d      	movs	r3, #109	; 0x6d
   102ec:	f003 fd02 	bl	13cf4 <printk>
   102f0:	4040      	eors	r0, r0
   102f2:	f380 8811 	msr	BASEPRI, r0
   102f6:	f04f 0003 	mov.w	r0, #3
   102fa:	df02      	svc	2
   102fc:	e7d8      	b.n	102b0 <lll_scan_prepare+0x10>
   102fe:	bf00      	nop
   10300:	0000fcb1 	.word	0x0000fcb1
   10304:	000100ad 	.word	0x000100ad
   10308:	00010101 	.word	0x00010101
   1030c:	00015d7c 	.word	0x00015d7c
   10310:	00015d68 	.word	0x00015d68
   10314:	0001525c 	.word	0x0001525c

00010318 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   10318:	f001 b876 	b.w	11408 <radio_status_reset>

0001031c <isr_cleanup>:
{
   1031c:	b508      	push	{r3, lr}
   1031e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   10320:	4813      	ldr	r0, [pc, #76]	; (10370 <isr_cleanup+0x54>)
   10322:	f000 ff77 	bl	11214 <radio_isr_set>
	if (!radio_is_idle()) {
   10326:	f001 f88f 	bl	11448 <radio_is_idle>
   1032a:	b1e8      	cbz	r0, 10368 <isr_cleanup+0x4c>
	radio_tmr_stop();
   1032c:	f001 fa1c 	bl	11768 <radio_tmr_stop>
	err = lll_hfclock_off();
   10330:	f7ff f830 	bl	f394 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   10334:	b108      	cbz	r0, 1033a <isr_cleanup+0x1e>
   10336:	3010      	adds	r0, #16
   10338:	d104      	bne.n	10344 <isr_cleanup+0x28>
}
   1033a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1033e:	2000      	movs	r0, #0
   10340:	f7fe bf22 	b.w	f188 <lll_done>
	LL_ASSERT(!err || err == -EBUSY);
   10344:	4a0b      	ldr	r2, [pc, #44]	; (10374 <isr_cleanup+0x58>)
   10346:	490c      	ldr	r1, [pc, #48]	; (10378 <isr_cleanup+0x5c>)
   10348:	480c      	ldr	r0, [pc, #48]	; (1037c <isr_cleanup+0x60>)
   1034a:	f240 239a 	movw	r3, #666	; 0x29a
   1034e:	f003 fcd1 	bl	13cf4 <printk>
   10352:	4040      	eors	r0, r0
   10354:	f380 8811 	msr	BASEPRI, r0
   10358:	f04f 0003 	mov.w	r0, #3
   1035c:	df02      	svc	2
	lll_done(NULL);
   1035e:	2000      	movs	r0, #0
}
   10360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10364:	f7fe bf10 	b.w	f188 <lll_done>
		radio_disable();
   10368:	f001 f836 	bl	113d8 <radio_disable>
   1036c:	e7de      	b.n	1032c <isr_cleanup+0x10>
   1036e:	bf00      	nop
   10370:	00010319 	.word	0x00010319
   10374:	00015dd0 	.word	0x00015dd0
   10378:	00015d38 	.word	0x00015d38
   1037c:	0001525c 	.word	0x0001525c

00010380 <isr_done>:
{
   10380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10382:	4605      	mov	r5, r0
	radio_status_reset();
   10384:	f001 f840 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
   10388:	f001 f912 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1038c:	f001 f8f8 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
   10390:	f001 fb12 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   10394:	f001 f8bc 	bl	11510 <radio_rssi_status_reset>
	e = ull_event_done_extra_get();
   10398:	f7f8 fef6 	bl	9188 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1039c:	4604      	mov	r4, r0
   1039e:	2800      	cmp	r0, #0
   103a0:	d033      	beq.n	1040a <isr_done+0x8a>
	e->trx_cnt = trx_cnt;
   103a2:	4b21      	ldr	r3, [pc, #132]	; (10428 <isr_done+0xa8>)
	e->crc_valid = crc_valid;
   103a4:	4921      	ldr	r1, [pc, #132]	; (1042c <isr_done+0xac>)
	e->mic_state = mic_state;
   103a6:	4a22      	ldr	r2, [pc, #136]	; (10430 <isr_done+0xb0>)
	e->trx_cnt = trx_cnt;
   103a8:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   103aa:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   103ac:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   103ae:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   103b0:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   103b2:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   103b4:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   103b6:	7022      	strb	r2, [r4, #0]
	if (trx_cnt) {
   103b8:	b11b      	cbz	r3, 103c2 <isr_done+0x42>
		if (lll->role) {
   103ba:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   103be:	2b00      	cmp	r3, #0
   103c0:	db04      	blt.n	103cc <isr_done+0x4c>
	isr_cleanup(param);
   103c2:	4628      	mov	r0, r5
}
   103c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	isr_cleanup(param);
   103c8:	f7ff bfa8 	b.w	1031c <isr_cleanup>
				addr_us_get(lll->phy_rx);
   103cc:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   103d0:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   103d4:	2b02      	cmp	r3, #2
   103d6:	d016      	beq.n	10406 <isr_done+0x86>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   103d8:	2b04      	cmp	r3, #4
   103da:	bf14      	ite	ne
   103dc:	2728      	movne	r7, #40	; 0x28
   103de:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   103e2:	f001 fa03 	bl	117ec <radio_tmr_aa_restore>
   103e6:	4606      	mov	r6, r0
   103e8:	f001 fa06 	bl	117f8 <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   103ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   103ee:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   103f0:	2300      	movs	r3, #0
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   103f2:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->slave.start_to_address_actual_us =
   103f6:	60a6      	str	r6, [r4, #8]
	isr_cleanup(param);
   103f8:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   103fa:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   103fc:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   103fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	isr_cleanup(param);
   10402:	f7ff bf8b 	b.w	1031c <isr_cleanup>
	switch (phy) {
   10406:	2718      	movs	r7, #24
   10408:	e7eb      	b.n	103e2 <isr_done+0x62>
	LL_ASSERT(e);
   1040a:	4a0a      	ldr	r2, [pc, #40]	; (10434 <isr_done+0xb4>)
   1040c:	490a      	ldr	r1, [pc, #40]	; (10438 <isr_done+0xb8>)
   1040e:	480b      	ldr	r0, [pc, #44]	; (1043c <isr_done+0xbc>)
   10410:	f240 2365 	movw	r3, #613	; 0x265
   10414:	f003 fc6e 	bl	13cf4 <printk>
   10418:	4040      	eors	r0, r0
   1041a:	f380 8811 	msr	BASEPRI, r0
   1041e:	f04f 0003 	mov.w	r0, #3
   10422:	df02      	svc	2
   10424:	e7bd      	b.n	103a2 <isr_done+0x22>
   10426:	bf00      	nop
   10428:	20002062 	.word	0x20002062
   1042c:	2000206d 	.word	0x2000206d
   10430:	2000206e 	.word	0x2000206e
   10434:	00015dd0 	.word	0x00015dd0
   10438:	00015610 	.word	0x00015610
   1043c:	0001525c 	.word	0x0001525c

00010440 <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   10440:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   10442:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   10446:	f043 0304 	orr.w	r3, r3, #4
   1044a:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
{
   1044e:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   10450:	f001 f81a 	bl	11488 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10454:	7803      	ldrb	r3, [r0, #0]
	p->len = 0;
   10456:	2200      	movs	r2, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10458:	2101      	movs	r1, #1
   1045a:	f361 0301 	bfi	r3, r1, #0, #2
	p->len = 0;
   1045e:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   10460:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10462:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   10464:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   10468:	f7f4 f964 	bl	4734 <memq_peek>
   1046c:	7823      	ldrb	r3, [r4, #0]
   1046e:	3800      	subs	r0, #0
   10470:	bf18      	it	ne
   10472:	2001      	movne	r0, #1
   10474:	f360 1304 	bfi	r3, r0, #4, #1
   10478:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   1047a:	4620      	mov	r0, r4
   1047c:	bd38      	pop	{r3, r4, r5, pc}
   1047e:	bf00      	nop

00010480 <lll_conn_init>:
}
   10480:	2000      	movs	r0, #0
   10482:	4770      	bx	lr

00010484 <lll_conn_reset>:
   10484:	2000      	movs	r0, #0
   10486:	4770      	bx	lr

00010488 <lll_conn_sca_local_get>:
}
   10488:	2007      	movs	r0, #7
   1048a:	4770      	bx	lr

0001048c <lll_conn_ppm_local_get>:
}
   1048c:	2014      	movs	r0, #20
   1048e:	4770      	bx	lr

00010490 <lll_conn_ppm_get>:
	return sca_ppm_lut[sca];
   10490:	4b01      	ldr	r3, [pc, #4]	; (10498 <lll_conn_ppm_get+0x8>)
}
   10492:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   10496:	4770      	bx	lr
   10498:	00015e3c 	.word	0x00015e3c

0001049c <lll_conn_prepare_reset>:
	crc_expire = 0U;
   1049c:	4805      	ldr	r0, [pc, #20]	; (104b4 <lll_conn_prepare_reset+0x18>)
	crc_valid = 0U;
   1049e:	4906      	ldr	r1, [pc, #24]	; (104b8 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   104a0:	4a06      	ldr	r2, [pc, #24]	; (104bc <lll_conn_prepare_reset+0x20>)
{
   104a2:	b410      	push	{r4}
	trx_cnt = 0U;
   104a4:	2300      	movs	r3, #0
   104a6:	4c06      	ldr	r4, [pc, #24]	; (104c0 <lll_conn_prepare_reset+0x24>)
	crc_expire = 0U;
   104a8:	7003      	strb	r3, [r0, #0]
	crc_valid = 0U;
   104aa:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   104ac:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   104ae:	8023      	strh	r3, [r4, #0]
}
   104b0:	bc10      	pop	{r4}
   104b2:	4770      	bx	lr
   104b4:	2000206c 	.word	0x2000206c
   104b8:	2000206d 	.word	0x2000206d
   104bc:	2000206e 	.word	0x2000206e
   104c0:	20002062 	.word	0x20002062

000104c4 <lll_conn_is_abort_cb>:
}
   104c4:	f06f 0047 	mvn.w	r0, #71	; 0x47
   104c8:	4770      	bx	lr
   104ca:	bf00      	nop

000104cc <lll_conn_abort_cb>:
{
   104cc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   104ce:	b1b0      	cbz	r0, 104fe <lll_conn_abort_cb+0x32>
	err = lll_hfclock_off();
   104d0:	460c      	mov	r4, r1
   104d2:	f7fe ff5f 	bl	f394 <lll_hfclock_off>
	LL_ASSERT(!err || err == -EBUSY);
   104d6:	b168      	cbz	r0, 104f4 <lll_conn_abort_cb+0x28>
   104d8:	3010      	adds	r0, #16
   104da:	d00b      	beq.n	104f4 <lll_conn_abort_cb+0x28>
   104dc:	4a0b      	ldr	r2, [pc, #44]	; (1050c <lll_conn_abort_cb+0x40>)
   104de:	490c      	ldr	r1, [pc, #48]	; (10510 <lll_conn_abort_cb+0x44>)
   104e0:	480c      	ldr	r0, [pc, #48]	; (10514 <lll_conn_abort_cb+0x48>)
   104e2:	2382      	movs	r3, #130	; 0x82
   104e4:	f003 fc06 	bl	13cf4 <printk>
   104e8:	4040      	eors	r0, r0
   104ea:	f380 8811 	msr	BASEPRI, r0
   104ee:	f04f 0003 	mov.w	r0, #3
   104f2:	df02      	svc	2
	lll_done(param);
   104f4:	4620      	mov	r0, r4
}
   104f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   104fa:	f7fe be45 	b.w	f188 <lll_done>
		radio_isr_set(isr_done, param);
   104fe:	4806      	ldr	r0, [pc, #24]	; (10518 <lll_conn_abort_cb+0x4c>)
   10500:	f000 fe88 	bl	11214 <radio_isr_set>
}
   10504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   10508:	f000 bf66 	b.w	113d8 <radio_disable>
   1050c:	00015dd0 	.word	0x00015dd0
   10510:	00015d38 	.word	0x00015d38
   10514:	0001525c 	.word	0x0001525c
   10518:	00010381 	.word	0x00010381

0001051c <lll_conn_isr_abort>:
{
   1051c:	b510      	push	{r4, lr}
   1051e:	4604      	mov	r4, r0
	radio_status_reset();
   10520:	f000 ff72 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
   10524:	f001 f844 	bl	115b0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   10528:	f001 f82a 	bl	11580 <radio_filter_status_reset>
	radio_ar_status_reset();
   1052c:	f001 fa44 	bl	119b8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   10530:	f000 ffee 	bl	11510 <radio_rssi_status_reset>
	isr_cleanup(param);
   10534:	4620      	mov	r0, r4
}
   10536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	isr_cleanup(param);
   1053a:	f7ff beef 	b.w	1031c <isr_cleanup>
   1053e:	bf00      	nop

00010540 <lll_conn_rx_pkt_set>:
{
   10540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10542:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   10544:	2001      	movs	r0, #1
   10546:	f7f8 fd6d 	bl	9024 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1054a:	4606      	mov	r6, r0
   1054c:	b370      	cbz	r0, 105ac <lll_conn_rx_pkt_set+0x6c>
	phy = lll->phy_rx;
   1054e:	f895 4049 	ldrb.w	r4, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   10552:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   10556:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1055a:	4620      	mov	r0, r4
   1055c:	2100      	movs	r1, #0
   1055e:	f000 fe9d 	bl	1129c <radio_phy_set>
	} else if (lll->enc_rx) {
   10562:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   10566:	071b      	lsls	r3, r3, #28
   10568:	d513      	bpl.n	10592 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1056a:	1d39      	adds	r1, r7, #4
   1056c:	0062      	lsls	r2, r4, #1
   1056e:	b2c9      	uxtb	r1, r1
   10570:	f042 0201 	orr.w	r2, r2, #1
   10574:	2008      	movs	r0, #8
   10576:	f000 fed9 	bl	1132c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1057a:	f000 ff8d 	bl	11498 <radio_pkt_decrypt_get>
   1057e:	4621      	mov	r1, r4
   10580:	4602      	mov	r2, r0
   10582:	f105 0063 	add.w	r0, r5, #99	; 0x63
   10586:	f001 f951 	bl	1182c <radio_ccm_rx_pkt_set>
}
   1058a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1058e:	f000 befb 	b.w	11388 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   10592:	0062      	lsls	r2, r4, #1
   10594:	b2f9      	uxtb	r1, r7
   10596:	2008      	movs	r0, #8
   10598:	f042 0201 	orr.w	r2, r2, #1
   1059c:	f000 fec6 	bl	1132c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   105a0:	f106 0020 	add.w	r0, r6, #32
}
   105a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   105a8:	f000 beee 	b.w	11388 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   105ac:	4a06      	ldr	r2, [pc, #24]	; (105c8 <lll_conn_rx_pkt_set+0x88>)
   105ae:	4907      	ldr	r1, [pc, #28]	; (105cc <lll_conn_rx_pkt_set+0x8c>)
   105b0:	4807      	ldr	r0, [pc, #28]	; (105d0 <lll_conn_rx_pkt_set+0x90>)
   105b2:	f240 13cf 	movw	r3, #463	; 0x1cf
   105b6:	f003 fb9d 	bl	13cf4 <printk>
   105ba:	4040      	eors	r0, r0
   105bc:	f380 8811 	msr	BASEPRI, r0
   105c0:	f04f 0003 	mov.w	r0, #3
   105c4:	df02      	svc	2
   105c6:	e7c2      	b.n	1054e <lll_conn_rx_pkt_set+0xe>
   105c8:	00015dd0 	.word	0x00015dd0
   105cc:	00015dc8 	.word	0x00015dc8
   105d0:	0001525c 	.word	0x0001525c

000105d4 <lll_conn_isr_tx>:
{
   105d4:	b538      	push	{r3, r4, r5, lr}
   105d6:	4604      	mov	r4, r0
	radio_status_reset();
   105d8:	f000 ff16 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
   105dc:	f000 ffe8 	bl	115b0 <radio_tmr_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   105e0:	2096      	movs	r0, #150	; 0x96
   105e2:	f000 fff5 	bl	115d0 <radio_tmr_tifs_set>
				     lll->phy_flags);
   105e6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   105ea:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   105ee:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   105f2:	f000 0007 	and.w	r0, r0, #7
   105f6:	f002 0207 	and.w	r2, r2, #7
   105fa:	2100      	movs	r1, #0
   105fc:	f000 ff5e 	bl	114bc <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   10600:	4620      	mov	r0, r4
   10602:	f7ff ff9d 	bl	10540 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   10606:	f000 ff0b 	bl	11420 <radio_is_ready>
   1060a:	bba0      	cbnz	r0, 10676 <lll_conn_isr_tx+0xa2>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1060c:	f001 f908 	bl	11820 <radio_tmr_tifs_base_get>
   10610:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   10612:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   10616:	2101      	movs	r1, #1
   10618:	f000 0007 	and.w	r0, r0, #7
   1061c:	f000 feca 	bl	113b4 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   10620:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   10624:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   10628:	4405      	add	r5, r0
   1062a:	2b02      	cmp	r3, #2
   1062c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   10630:	d01f      	beq.n	10672 <lll_conn_isr_tx+0x9e>
		return 376;
   10632:	2b04      	cmp	r3, #4
   10634:	bf14      	ite	ne
   10636:	2328      	movne	r3, #40	; 0x28
   10638:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1063c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   10640:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   10644:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   10648:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1064a:	f000 feaf 	bl	113ac <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1064e:	1a28      	subs	r0, r5, r0
   10650:	f001 f89e 	bl	11790 <radio_tmr_hcto_configure>
	if (!trx_cnt && !lll->role) {
   10654:	4b0f      	ldr	r3, [pc, #60]	; (10694 <lll_conn_isr_tx+0xc0>)
   10656:	881b      	ldrh	r3, [r3, #0]
   10658:	b92b      	cbnz	r3, 10666 <lll_conn_isr_tx+0x92>
   1065a:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1065e:	2b00      	cmp	r3, #0
   10660:	db01      	blt.n	10666 <lll_conn_isr_tx+0x92>
		radio_rssi_measure();
   10662:	f000 ff45 	bl	114f0 <radio_rssi_measure>
	radio_isr_set(lll_conn_isr_rx, param);
   10666:	4621      	mov	r1, r4
   10668:	480b      	ldr	r0, [pc, #44]	; (10698 <lll_conn_isr_tx+0xc4>)
}
   1066a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1066e:	f000 bdd1 	b.w	11214 <radio_isr_set>
	switch (phy) {
   10672:	2318      	movs	r3, #24
   10674:	e7e2      	b.n	1063c <lll_conn_isr_tx+0x68>
	LL_ASSERT(!radio_is_ready());
   10676:	4a09      	ldr	r2, [pc, #36]	; (1069c <lll_conn_isr_tx+0xc8>)
   10678:	4909      	ldr	r1, [pc, #36]	; (106a0 <lll_conn_isr_tx+0xcc>)
   1067a:	480a      	ldr	r0, [pc, #40]	; (106a4 <lll_conn_isr_tx+0xd0>)
   1067c:	f44f 73c5 	mov.w	r3, #394	; 0x18a
   10680:	f003 fb38 	bl	13cf4 <printk>
   10684:	4040      	eors	r0, r0
   10686:	f380 8811 	msr	BASEPRI, r0
   1068a:	f04f 0003 	mov.w	r0, #3
   1068e:	df02      	svc	2
   10690:	e7bc      	b.n	1060c <lll_conn_isr_tx+0x38>
   10692:	bf00      	nop
   10694:	20002062 	.word	0x20002062
   10698:	000107b1 	.word	0x000107b1
   1069c:	00015dd0 	.word	0x00015dd0
   106a0:	00015d4c 	.word	0x00015d4c
   106a4:	0001525c 	.word	0x0001525c

000106a8 <lll_conn_tx_pkt_set>:
{
   106a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106aa:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   106ac:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   106b0:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   106b4:	f001 0507 	and.w	r5, r1, #7
{
   106b8:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   106ba:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   106be:	4628      	mov	r0, r5
   106c0:	f000 fdec 	bl	1129c <radio_phy_set>
	} else if (lll->enc_tx) {
   106c4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   106c8:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   106ca:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   106ce:	d50f      	bpl.n	106f0 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   106d0:	1d39      	adds	r1, r7, #4
   106d2:	f042 0201 	orr.w	r2, r2, #1
   106d6:	b2c9      	uxtb	r1, r1
   106d8:	2008      	movs	r0, #8
   106da:	f000 fe27 	bl	1132c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   106de:	4631      	mov	r1, r6
   106e0:	f104 0084 	add.w	r0, r4, #132	; 0x84
   106e4:	f001 f8d8 	bl	11898 <radio_ccm_tx_pkt_set>
}
   106e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   106ec:	f000 be52 	b.w	11394 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   106f0:	b2f9      	uxtb	r1, r7
   106f2:	2008      	movs	r0, #8
   106f4:	f042 0201 	orr.w	r2, r2, #1
   106f8:	f000 fe18 	bl	1132c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   106fc:	4630      	mov	r0, r6
}
   106fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   10702:	f000 be47 	b.w	11394 <radio_pkt_tx_set>
   10706:	bf00      	nop

00010708 <lll_conn_pdu_tx_prep>:
{
   10708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lll->empty) {
   1070c:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   10710:	075b      	lsls	r3, r3, #29
{
   10712:	b083      	sub	sp, #12
   10714:	4688      	mov	r8, r1
	if (lll->empty) {
   10716:	d43e      	bmi.n	10796 <lll_conn_pdu_tx_prep+0x8e>
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   10718:	4604      	mov	r4, r0
   1071a:	aa01      	add	r2, sp, #4
   1071c:	e9d0 0113 	ldrd	r0, r1, [r0, #76]	; 0x4c
   10720:	f7f4 f808 	bl	4734 <memq_peek>
	if (!link) {
   10724:	4681      	mov	r9, r0
   10726:	2800      	cmp	r0, #0
   10728:	d03c      	beq.n	107a4 <lll_conn_pdu_tx_prep+0x9c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1072a:	9f01      	ldr	r7, [sp, #4]
   1072c:	f894 6061 	ldrb.w	r6, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   10730:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   10734:	3704      	adds	r7, #4
   10736:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   10738:	b913      	cbnz	r3, 10740 <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   1073a:	786b      	ldrb	r3, [r5, #1]
   1073c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   10740:	b126      	cbz	r6, 1074c <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10742:	5dba      	ldrb	r2, [r7, r6]
   10744:	2101      	movs	r1, #1
   10746:	f361 0201 	bfi	r2, r1, #0, #2
   1074a:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1074c:	1b9b      	subs	r3, r3, r6
   1074e:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   10750:	5dbb      	ldrb	r3, [r7, r6]
   10752:	f36f 1304 	bfc	r3, #4, #1
   10756:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   10758:	4620      	mov	r0, r4
   1075a:	f7fc fce5 	bl	d128 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1075e:	786b      	ldrb	r3, [r5, #1]
   10760:	4283      	cmp	r3, r0
   10762:	d904      	bls.n	1076e <lll_conn_pdu_tx_prep+0x66>
			p->len = max_tx_octets;
   10764:	7068      	strb	r0, [r5, #1]
			p->md = 1;
   10766:	5dbb      	ldrb	r3, [r7, r6]
   10768:	f043 0310 	orr.w	r3, r3, #16
   1076c:	55bb      	strb	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   1076e:	f8d9 2000 	ldr.w	r2, [r9]
   10772:	6d23      	ldr	r3, [r4, #80]	; 0x50
   10774:	429a      	cmp	r2, r3
   10776:	d003      	beq.n	10780 <lll_conn_pdu_tx_prep+0x78>
			p->md = 1;
   10778:	5dbb      	ldrb	r3, [r7, r6]
   1077a:	f043 0310 	orr.w	r3, r3, #16
   1077e:	55bb      	strb	r3, [r7, r6]
	p->rfu = 0U;
   10780:	782b      	ldrb	r3, [r5, #0]
	p->resv = 0U;
   10782:	2200      	movs	r2, #0
	p->rfu = 0U;
   10784:	f36f 1347 	bfc	r3, #5, #3
   10788:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   1078a:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1078c:	f8c8 5000 	str.w	r5, [r8]
}
   10790:	b003      	add	sp, #12
   10792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pdu_data_tx = empty_tx_enqueue(lll);
   10796:	f7ff fe53 	bl	10440 <empty_tx_enqueue>
   1079a:	f8c8 0000 	str.w	r0, [r8]
}
   1079e:	b003      	add	sp, #12
   107a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		p = empty_tx_enqueue(lll);
   107a4:	4620      	mov	r0, r4
   107a6:	f7ff fe4b 	bl	10440 <empty_tx_enqueue>
   107aa:	4605      	mov	r5, r0
   107ac:	e7e8      	b.n	10780 <lll_conn_pdu_tx_prep+0x78>
   107ae:	bf00      	nop

000107b0 <lll_conn_isr_rx>:
{
   107b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   107b4:	b083      	sub	sp, #12
   107b6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   107b8:	f000 fe3c 	bl	11434 <radio_is_done>
	if (trx_done) {
   107bc:	f010 0fff 	tst.w	r0, #255	; 0xff
   107c0:	d10e      	bne.n	107e0 <lll_conn_isr_rx+0x30>
	radio_status_reset();
   107c2:	f000 fe21 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
   107c6:	f000 fef3 	bl	115b0 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   107ca:	f000 fea1 	bl	11510 <radio_rssi_status_reset>
		radio_isr_set(isr_done, param);
   107ce:	48c0      	ldr	r0, [pc, #768]	; (10ad0 <lll_conn_isr_rx+0x320>)
   107d0:	4621      	mov	r1, r4
   107d2:	f000 fd1f 	bl	11214 <radio_isr_set>
		radio_disable();
   107d6:	f000 fdff 	bl	113d8 <radio_disable>
}
   107da:	b003      	add	sp, #12
   107dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   107e0:	f000 fe48 	bl	11474 <radio_crc_is_valid>
   107e4:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   107e6:	f000 fe9b 	bl	11520 <radio_rssi_is_ready>
   107ea:	fa5f f880 	uxtb.w	r8, r0
	radio_status_reset();
   107ee:	f000 fe0b 	bl	11408 <radio_status_reset>
	radio_tmr_status_reset();
   107f2:	f000 fedd 	bl	115b0 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   107f6:	f000 fe8b 	bl	11510 <radio_rssi_status_reset>
	trx_cnt++;
   107fa:	4ab6      	ldr	r2, [pc, #728]	; (10ad4 <lll_conn_isr_rx+0x324>)
   107fc:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   107fe:	2001      	movs	r0, #1
	trx_cnt++;
   10800:	3301      	adds	r3, #1
   10802:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   10804:	f7f8 fc0e 	bl	9024 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   10808:	4606      	mov	r6, r0
   1080a:	2800      	cmp	r0, #0
   1080c:	f000 80d2 	beq.w	109b4 <lll_conn_isr_rx+0x204>
	if (crc_ok) {
   10810:	2d00      	cmp	r5, #0
   10812:	d162      	bne.n	108da <lll_conn_isr_rx+0x12a>
		if (crc_expire == 0U) {
   10814:	4ab0      	ldr	r2, [pc, #704]	; (10ad8 <lll_conn_isr_rx+0x328>)
   10816:	7817      	ldrb	r7, [r2, #0]
   10818:	2f00      	cmp	r7, #0
   1081a:	f040 80a4 	bne.w	10966 <lll_conn_isr_rx+0x1b6>
		crc_expire--;
   1081e:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   10820:	a901      	add	r1, sp, #4
   10822:	4620      	mov	r0, r4
		crc_expire--;
   10824:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   10826:	f7ff ff6f 	bl	10708 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1082a:	2096      	movs	r0, #150	; 0x96
   1082c:	f000 fed0 	bl	115d0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   10830:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   10834:	f000 0007 	and.w	r0, r0, #7
   10838:	f000 fe32 	bl	114a0 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1083c:	48a7      	ldr	r0, [pc, #668]	; (10adc <lll_conn_isr_rx+0x32c>)
   1083e:	4621      	mov	r1, r4
   10840:	f000 fce8 	bl	11214 <radio_isr_set>
		radio_tmr_end_capture();
   10844:	f000 ffde 	bl	11804 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   10848:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   1084c:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1084e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   10852:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   10854:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   10858:	009b      	lsls	r3, r3, #2
   1085a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1085e:	f020 020c 	bic.w	r2, r0, #12
   10862:	4313      	orrs	r3, r2
   10864:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   10866:	4620      	mov	r0, r4
   10868:	f7ff ff1e 	bl	106a8 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1086c:	f000 fdd8 	bl	11420 <radio_is_ready>
   10870:	2800      	cmp	r0, #0
   10872:	f040 80bb 	bne.w	109ec <lll_conn_isr_rx+0x23c>
	if (!radio_tmr_aa_restore()) {
   10876:	f000 ffb9 	bl	117ec <radio_tmr_aa_restore>
   1087a:	b328      	cbz	r0, 108c8 <lll_conn_isr_rx+0x118>
	if (tx_release) {
   1087c:	b355      	cbz	r5, 108d4 <lll_conn_isr_rx+0x124>
		LL_ASSERT(lll->handle != 0xFFFF);
   1087e:	8a20      	ldrh	r0, [r4, #16]
   10880:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10884:	4298      	cmp	r0, r3
   10886:	f000 80c9 	beq.w	10a1c <lll_conn_isr_rx+0x26c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1088a:	4629      	mov	r1, r5
   1088c:	f7fc fa52 	bl	cd34 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   10890:	b177      	cbz	r7, 108b0 <lll_conn_isr_rx+0x100>
		if (lll->enc_rx) {
   10892:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10896:	071b      	lsls	r3, r3, #28
   10898:	f100 80b6 	bmi.w	10a08 <lll_conn_isr_rx+0x258>
		ull_pdu_rx_alloc();
   1089c:	f7f8 fbe0 	bl	9060 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   108a0:	2302      	movs	r3, #2
   108a2:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   108a4:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   108a6:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   108a8:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   108aa:	4631      	mov	r1, r6
   108ac:	f7f8 fbf0 	bl	9090 <ull_rx_put>
		ull_rx_sched();
   108b0:	f7f8 fbfe 	bl	90b0 <ull_rx_sched>
	if (rssi_ready) {
   108b4:	f1b8 0f00 	cmp.w	r8, #0
   108b8:	d08f      	beq.n	107da <lll_conn_isr_rx+0x2a>
		u8_t rssi = radio_rssi_get();
   108ba:	f000 fe23 	bl	11504 <radio_rssi_get>
   108be:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
}
   108c2:	b003      	add	sp, #12
   108c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   108c8:	f000 ff84 	bl	117d4 <radio_tmr_aa_get>
   108cc:	f000 ff88 	bl	117e0 <radio_tmr_aa_save>
	if (tx_release) {
   108d0:	2d00      	cmp	r5, #0
   108d2:	d1d4      	bne.n	1087e <lll_conn_isr_rx+0xce>
	if (is_rx_enqueue) {
   108d4:	2f00      	cmp	r7, #0
   108d6:	d1dc      	bne.n	10892 <lll_conn_isr_rx+0xe2>
   108d8:	e7ec      	b.n	108b4 <lll_conn_isr_rx+0x104>
	if (lll->enc_rx) {
   108da:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   108de:	0718      	lsls	r0, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   108e0:	f106 0720 	add.w	r7, r6, #32
	if (lll->enc_rx) {
   108e4:	d478      	bmi.n	109d8 <lll_conn_isr_rx+0x228>
	if (pdu_data_rx->nesn != lll->sn) {
   108e6:	f896 2020 	ldrb.w	r2, [r6, #32]
   108ea:	f003 0101 	and.w	r1, r3, #1
   108ee:	f3c2 0080 	ubfx	r0, r2, #2, #1
   108f2:	4288      	cmp	r0, r1
   108f4:	d06e      	beq.n	109d4 <lll_conn_isr_rx+0x224>
		if (lll->role) {
   108f6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
		lll->sn++;
   108fa:	f081 0101 	eor.w	r1, r1, #1
   108fe:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   10902:	2800      	cmp	r0, #0
		lll->sn++;
   10904:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   10908:	da05      	bge.n	10916 <lll_conn_isr_rx+0x166>
			lll->slave.latency_enabled = 1;
   1090a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1090e:	f043 0301 	orr.w	r3, r3, #1
   10912:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   10916:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1091a:	0759      	lsls	r1, r3, #29
   1091c:	f140 808d 	bpl.w	10a3a <lll_conn_isr_rx+0x28a>
			lll->empty = 0;
   10920:	f36f 0382 	bfc	r3, #2, #1
   10924:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   10928:	2500      	movs	r5, #0
   1092a:	b2db      	uxtb	r3, r3
	if ((pdu_data_rx->sn == lll->nesn) &&
   1092c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10930:	f3c3 0140 	ubfx	r1, r3, #1, #1
   10934:	428a      	cmp	r2, r1
   10936:	f000 80a7 	beq.w	10a88 <lll_conn_isr_rx+0x2d8>
	u8_t is_rx_enqueue = 0U;
   1093a:	2700      	movs	r7, #0
		crc_expire = 0U;
   1093c:	4966      	ldr	r1, [pc, #408]	; (10ad8 <lll_conn_isr_rx+0x328>)
		crc_valid = 1U;
   1093e:	4a68      	ldr	r2, [pc, #416]	; (10ae0 <lll_conn_isr_rx+0x330>)
		crc_expire = 0U;
   10940:	2000      	movs	r0, #0
   10942:	7008      	strb	r0, [r1, #0]
	is_empty_pdu_tx_retry = lll->empty;
   10944:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   10948:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1094a:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1094c:	4620      	mov	r0, r4
		crc_valid = 1U;
   1094e:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   10950:	f7ff feda 	bl	10708 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   10954:	f896 3020 	ldrb.w	r3, [r6, #32]
   10958:	06da      	lsls	r2, r3, #27
   1095a:	f53f af66 	bmi.w	1082a <lll_conn_isr_rx+0x7a>
				     (pdu_data_tx->len == 0));
   1095e:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   10960:	785b      	ldrb	r3, [r3, #1]
   10962:	b173      	cbz	r3, 10982 <lll_conn_isr_rx+0x1d2>
   10964:	e761      	b.n	1082a <lll_conn_isr_rx+0x7a>
	is_empty_pdu_tx_retry = lll->empty;
   10966:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
		crc_expire--;
   1096a:	3f01      	subs	r7, #1
   1096c:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1096e:	a901      	add	r1, sp, #4
   10970:	4620      	mov	r0, r4
		crc_expire--;
   10972:	7017      	strb	r7, [r2, #0]
	is_empty_pdu_tx_retry = lll->empty;
   10974:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   10978:	f7ff fec6 	bl	10708 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1097c:	2f00      	cmp	r7, #0
   1097e:	f040 8123 	bne.w	10bc8 <lll_conn_isr_rx+0x418>
		radio_isr_set(isr_done, param);
   10982:	4853      	ldr	r0, [pc, #332]	; (10ad0 <lll_conn_isr_rx+0x320>)
   10984:	4621      	mov	r1, r4
   10986:	f000 fc45 	bl	11214 <radio_isr_set>
		} else if (!lll->role) {
   1098a:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1098e:	2b00      	cmp	r3, #0
   10990:	da02      	bge.n	10998 <lll_conn_isr_rx+0x1e8>
			radio_switch_complete_and_disable();
   10992:	f000 fd9f 	bl	114d4 <radio_switch_complete_and_disable>
   10996:	e757      	b.n	10848 <lll_conn_isr_rx+0x98>
			radio_disable();
   10998:	f000 fd1e 	bl	113d8 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1099c:	f000 fd40 	bl	11420 <radio_is_ready>
   109a0:	2800      	cmp	r0, #0
   109a2:	f040 8084 	bne.w	10aae <lll_conn_isr_rx+0x2fe>
			lll->empty = is_empty_pdu_tx_retry;
   109a6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   109aa:	f369 0382 	bfi	r3, r9, #2, #1
   109ae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			goto lll_conn_isr_rx_exit;
   109b2:	e760      	b.n	10876 <lll_conn_isr_rx+0xc6>
	LL_ASSERT(node_rx);
   109b4:	4a4b      	ldr	r2, [pc, #300]	; (10ae4 <lll_conn_isr_rx+0x334>)
   109b6:	494c      	ldr	r1, [pc, #304]	; (10ae8 <lll_conn_isr_rx+0x338>)
   109b8:	484c      	ldr	r0, [pc, #304]	; (10aec <lll_conn_isr_rx+0x33c>)
   109ba:	23b8      	movs	r3, #184	; 0xb8
   109bc:	f003 f99a 	bl	13cf4 <printk>
   109c0:	4040      	eors	r0, r0
   109c2:	f380 8811 	msr	BASEPRI, r0
   109c6:	f04f 0003 	mov.w	r0, #3
   109ca:	df02      	svc	2
	if (crc_ok) {
   109cc:	2d00      	cmp	r5, #0
   109ce:	f43f af21 	beq.w	10814 <lll_conn_isr_rx+0x64>
   109d2:	e782      	b.n	108da <lll_conn_isr_rx+0x12a>
	struct node_tx *tx_release = NULL;
   109d4:	2500      	movs	r5, #0
   109d6:	e7a9      	b.n	1092c <lll_conn_isr_rx+0x17c>
		pkt_decrypt = radio_pkt_decrypt_get();
   109d8:	f000 fd5e 	bl	11498 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   109dc:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   109de:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   109e0:	4638      	mov	r0, r7
   109e2:	f003 fc9a 	bl	1431a <memcpy>
   109e6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   109ea:	e77c      	b.n	108e6 <lll_conn_isr_rx+0x136>
	LL_ASSERT(!radio_is_ready());
   109ec:	4a3d      	ldr	r2, [pc, #244]	; (10ae4 <lll_conn_isr_rx+0x334>)
   109ee:	4940      	ldr	r1, [pc, #256]	; (10af0 <lll_conn_isr_rx+0x340>)
   109f0:	483e      	ldr	r0, [pc, #248]	; (10aec <lll_conn_isr_rx+0x33c>)
   109f2:	f44f 7391 	mov.w	r3, #290	; 0x122
   109f6:	f003 f97d 	bl	13cf4 <printk>
   109fa:	4040      	eors	r0, r0
   109fc:	f380 8811 	msr	BASEPRI, r0
   10a00:	f04f 0003 	mov.w	r0, #3
   10a04:	df02      	svc	2
   10a06:	e736      	b.n	10876 <lll_conn_isr_rx+0xc6>
			pkt_decrypt_data = (u8_t *)radio_pkt_decrypt_get() +
   10a08:	f000 fd46 	bl	11498 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   10a0c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   10a10:	1cc1      	adds	r1, r0, #3
   10a12:	f106 0023 	add.w	r0, r6, #35	; 0x23
   10a16:	f003 fc80 	bl	1431a <memcpy>
   10a1a:	e73f      	b.n	1089c <lll_conn_isr_rx+0xec>
		LL_ASSERT(lll->handle != 0xFFFF);
   10a1c:	4a31      	ldr	r2, [pc, #196]	; (10ae4 <lll_conn_isr_rx+0x334>)
   10a1e:	4935      	ldr	r1, [pc, #212]	; (10af4 <lll_conn_isr_rx+0x344>)
   10a20:	4832      	ldr	r0, [pc, #200]	; (10aec <lll_conn_isr_rx+0x33c>)
   10a22:	f240 132f 	movw	r3, #303	; 0x12f
   10a26:	f003 f965 	bl	13cf4 <printk>
   10a2a:	4040      	eors	r0, r0
   10a2c:	f380 8811 	msr	BASEPRI, r0
   10a30:	f04f 0003 	mov.w	r0, #3
   10a34:	df02      	svc	2
   10a36:	8a20      	ldrh	r0, [r4, #16]
   10a38:	e727      	b.n	1088a <lll_conn_isr_rx+0xda>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   10a3a:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   10a3e:	aa01      	add	r2, sp, #4
   10a40:	f7f3 fe78 	bl	4734 <memq_peek>
		if (link) {
   10a44:	4681      	mov	r9, r0
   10a46:	2800      	cmp	r0, #0
   10a48:	d056      	beq.n	10af8 <lll_conn_isr_rx+0x348>
					       lll->packet_tx_head_offset);
   10a4a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   10a4e:	9b01      	ldr	r3, [sp, #4]
   10a50:	4413      	add	r3, r2
   10a52:	7958      	ldrb	r0, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   10a54:	b150      	cbz	r0, 10a6c <lll_conn_isr_rx+0x2bc>
				if (lll->enc_tx) {
   10a56:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10a5a:	06dd      	lsls	r5, r3, #27
   10a5c:	d506      	bpl.n	10a6c <lll_conn_isr_rx+0x2bc>
					lll->ccm_tx.counter++;
   10a5e:	e9d4 3125 	ldrd	r3, r1, [r4, #148]	; 0x94
   10a62:	3301      	adds	r3, #1
   10a64:	f141 0100 	adc.w	r1, r1, #0
   10a68:	e9c4 3125 	strd	r3, r1, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   10a6c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   10a70:	4402      	add	r2, r0
   10a72:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   10a74:	429a      	cmp	r2, r3
   10a76:	d245      	bcs.n	10b04 <lll_conn_isr_rx+0x354>
				lll->packet_tx_head_offset = offset;
   10a78:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   10a7c:	f896 2020 	ldrb.w	r2, [r6, #32]
   10a80:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   10a84:	2500      	movs	r5, #0
   10a86:	e751      	b.n	1092c <lll_conn_isr_rx+0x17c>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   10a88:	2003      	movs	r0, #3
   10a8a:	f7f8 facb 	bl	9024 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   10a8e:	b1d8      	cbz	r0, 10ac8 <lll_conn_isr_rx+0x318>
		lll->nesn++;
   10a90:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10a94:	f083 0302 	eor.w	r3, r3, #2
   10a98:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   10a9c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   10aa0:	b193      	cbz	r3, 10ac8 <lll_conn_isr_rx+0x318>
			if (lll->enc_rx) {
   10aa2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10aa6:	0719      	lsls	r1, r3, #28
   10aa8:	d440      	bmi.n	10b2c <lll_conn_isr_rx+0x37c>
			*is_rx_enqueue = 1U;
   10aaa:	2701      	movs	r7, #1
   10aac:	e746      	b.n	1093c <lll_conn_isr_rx+0x18c>
			LL_ASSERT(!radio_is_ready());
   10aae:	4a0d      	ldr	r2, [pc, #52]	; (10ae4 <lll_conn_isr_rx+0x334>)
   10ab0:	490f      	ldr	r1, [pc, #60]	; (10af0 <lll_conn_isr_rx+0x340>)
   10ab2:	480e      	ldr	r0, [pc, #56]	; (10aec <lll_conn_isr_rx+0x33c>)
   10ab4:	23e8      	movs	r3, #232	; 0xe8
   10ab6:	f003 f91d 	bl	13cf4 <printk>
   10aba:	4040      	eors	r0, r0
   10abc:	f380 8811 	msr	BASEPRI, r0
   10ac0:	f04f 0003 	mov.w	r0, #3
   10ac4:	df02      	svc	2
   10ac6:	e76e      	b.n	109a6 <lll_conn_isr_rx+0x1f6>
   10ac8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10acc:	e735      	b.n	1093a <lll_conn_isr_rx+0x18a>
   10ace:	bf00      	nop
   10ad0:	00010381 	.word	0x00010381
   10ad4:	20002062 	.word	0x20002062
   10ad8:	2000206c 	.word	0x2000206c
   10adc:	000105d5 	.word	0x000105d5
   10ae0:	2000206d 	.word	0x2000206d
   10ae4:	00015dd0 	.word	0x00015dd0
   10ae8:	00015dc8 	.word	0x00015dc8
   10aec:	0001525c 	.word	0x0001525c
   10af0:	00015d4c 	.word	0x00015d4c
   10af4:	00015e24 	.word	0x00015e24
   10af8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10afc:	f896 2020 	ldrb.w	r2, [r6, #32]
	struct node_tx *tx_release = NULL;
   10b00:	2500      	movs	r5, #0
   10b02:	e713      	b.n	1092c <lll_conn_isr_rx+0x17c>
			} else if (offset == lll->packet_tx_head_len) {
   10b04:	d1f8      	bne.n	10af8 <lll_conn_isr_rx+0x348>
				lll->packet_tx_head_len = 0;
   10b06:	2200      	movs	r2, #0
   10b08:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   10b0c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10b0e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   10b12:	f7f3 fe17 	bl	4744 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   10b16:	9d01      	ldr	r5, [sp, #4]
   10b18:	f896 2020 	ldrb.w	r2, [r6, #32]
   10b1c:	682b      	ldr	r3, [r5, #0]
   10b1e:	f8c9 3000 	str.w	r3, [r9]
				tx->next = link;
   10b22:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10b26:	f8c5 9000 	str.w	r9, [r5]
				*tx_release = tx;
   10b2a:	e6ff      	b.n	1092c <lll_conn_isr_rx+0x17c>
				done = radio_ccm_is_done();
   10b2c:	f000 fede 	bl	118ec <radio_ccm_is_done>
				LL_ASSERT(done);
   10b30:	2800      	cmp	r0, #0
   10b32:	d03b      	beq.n	10bac <lll_conn_isr_rx+0x3fc>
				bool mic_failure = !radio_ccm_mic_is_valid();
   10b34:	f000 fefc 	bl	11930 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   10b38:	bb30      	cbnz	r0, 10b88 <lll_conn_isr_rx+0x3d8>
				    lll->ccm_rx.counter == 0 &&
   10b3a:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   10b3e:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   10b42:	4313      	orrs	r3, r2
   10b44:	d105      	bne.n	10b52 <lll_conn_isr_rx+0x3a2>
				    (pdu_data_rx->ll_id ==
   10b46:	f896 3020 	ldrb.w	r3, [r6, #32]
				    lll->ccm_rx.counter == 0 &&
   10b4a:	f003 0303 	and.w	r3, r3, #3
   10b4e:	2b03      	cmp	r3, #3
   10b50:	d004      	beq.n	10b5c <lll_conn_isr_rx+0x3ac>
					mic_state = LLL_CONN_MIC_FAIL;
   10b52:	4b1e      	ldr	r3, [pc, #120]	; (10bcc <lll_conn_isr_rx+0x41c>)
   10b54:	2202      	movs	r2, #2
   10b56:	701a      	strb	r2, [r3, #0]
	u8_t is_rx_enqueue = 0U;
   10b58:	2700      	movs	r7, #0
   10b5a:	e68c      	b.n	10876 <lll_conn_isr_rx+0xc6>
						radio_pkt_scratch_get();
   10b5c:	f000 fc98 	bl	11490 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   10b60:	7842      	ldrb	r2, [r0, #1]
   10b62:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   10b64:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   10b66:	d8f4      	bhi.n	10b52 <lll_conn_isr_rx+0x3a2>
						memcpy(pdu_data_rx,
   10b68:	3203      	adds	r2, #3
   10b6a:	4638      	mov	r0, r7
   10b6c:	f003 fbd5 	bl	1431a <memcpy>
						lll->ccm_rx.counter--;
   10b70:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   10b74:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   10b78:	f113 33ff 	adds.w	r3, r3, #4294967295
   10b7c:	f142 32ff 	adc.w	r2, r2, #4294967295
   10b80:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   10b84:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   10b88:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   10b8c:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   10b90:	490e      	ldr	r1, [pc, #56]	; (10bcc <lll_conn_isr_rx+0x41c>)
				lll->ccm_rx.counter++;
   10b92:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   10b94:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   10b98:	f142 0200 	adc.w	r2, r2, #0
   10b9c:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   10ba0:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   10ba2:	6042      	str	r2, [r0, #4]
				mic_state = LLL_CONN_MIC_PASS;
   10ba4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   10ba8:	700f      	strb	r7, [r1, #0]
		if (err) {
   10baa:	e6c7      	b.n	1093c <lll_conn_isr_rx+0x18c>
				LL_ASSERT(done);
   10bac:	4a08      	ldr	r2, [pc, #32]	; (10bd0 <lll_conn_isr_rx+0x420>)
   10bae:	4909      	ldr	r1, [pc, #36]	; (10bd4 <lll_conn_isr_rx+0x424>)
   10bb0:	4809      	ldr	r0, [pc, #36]	; (10bd8 <lll_conn_isr_rx+0x428>)
   10bb2:	f240 330d 	movw	r3, #781	; 0x30d
   10bb6:	f003 f89d 	bl	13cf4 <printk>
   10bba:	4040      	eors	r0, r0
   10bbc:	f380 8811 	msr	BASEPRI, r0
   10bc0:	f04f 0003 	mov.w	r0, #3
   10bc4:	df02      	svc	2
   10bc6:	e7b5      	b.n	10b34 <lll_conn_isr_rx+0x384>
	u8_t is_rx_enqueue = 0U;
   10bc8:	462f      	mov	r7, r5
   10bca:	e62e      	b.n	1082a <lll_conn_isr_rx+0x7a>
   10bcc:	2000206e 	.word	0x2000206e
   10bd0:	00015dd0 	.word	0x00015dd0
   10bd4:	00015e1c 	.word	0x00015e1c
   10bd8:	0001525c 	.word	0x0001525c

00010bdc <lll_conn_flush>:

void lll_conn_flush(u16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   10bdc:	4770      	bx	lr
   10bde:	bf00      	nop

00010be0 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   10be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = prepare_param->param;
   10be4:	68c4      	ldr	r4, [r0, #12]
{
   10be6:	b083      	sub	sp, #12
   10be8:	4605      	mov	r5, r0
	u32_t hcto;

	DEBUG_RADIO_START_S(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   10bea:	f7ff fc57 	bl	1049c <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   10bee:	8ae2      	ldrh	r2, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   10bf0:	8b60      	ldrh	r0, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   10bf2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   10bf6:	1811      	adds	r1, r2, r0
   10bf8:	8361      	strh	r1, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   10bfa:	3a01      	subs	r2, #1
	lll->latency_prepare = 0;
   10bfc:	2100      	movs	r1, #0
	lll->latency_event = lll->latency_prepare - 1;
   10bfe:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   10c00:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   10c02:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   10c04:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   10c06:	f140 8090 	bpl.w	10d2a <prepare_cb+0x14a>
	event_counter = lll->event_counter + lll->latency_event;
   10c0a:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   10c0c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   10c0e:	b280      	uxth	r0, r0
   10c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10c14:	f104 021c 	add.w	r2, r4, #28
   10c18:	f7f8 fb32 	bl	9280 <lll_chan_sel_2>
   10c1c:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   10c1e:	e9d4 710c 	ldrd	r7, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   10c22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   10c24:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   10c28:	4439      	add	r1, r7
		lll->slave.window_widening_event_us =
   10c2a:	428a      	cmp	r2, r1
   10c2c:	bf28      	it	cs
   10c2e:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   10c30:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   10c32:	f04f 0800 	mov.w	r8, #0
		lll->slave.window_widening_event_us =
   10c36:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   10c38:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   10c3a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   10c3e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   10c42:	f000 fb07 	bl	11254 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   10c46:	4640      	mov	r0, r8
   10c48:	f000 fb38 	bl	112bc <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   10c4c:	4620      	mov	r0, r4
   10c4e:	f7ff fc77 	bl	10540 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   10c52:	f104 0008 	add.w	r0, r4, #8
   10c56:	f000 fb4f 	bl	112f8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   10c5a:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   10c5c:	7ba2      	ldrb	r2, [r4, #14]
			     ((u32_t)lll->crc_init[0])));
   10c5e:	7b21      	ldrb	r1, [r4, #12]
			     ((u32_t)lll->crc_init[1] << 8) |
   10c60:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   10c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10c66:	4319      	orrs	r1, r3
   10c68:	f240 605b 	movw	r0, #1627	; 0x65b
   10c6c:	f000 fbf6 	bl	1145c <radio_crc_configure>

	lll_chan_set(data_chan_use);
   10c70:	4630      	mov	r0, r6
   10c72:	f7fe fb01 	bl	f278 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   10c76:	4621      	mov	r1, r4
   10c78:	4840      	ldr	r0, [pc, #256]	; (10d7c <prepare_cb+0x19c>)
   10c7a:	f000 facb 	bl	11214 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   10c7e:	2096      	movs	r0, #150	; 0x96
   10c80:	f000 fca6 	bl	115d0 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   10c84:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   10c88:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   10c8c:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   10c90:	4641      	mov	r1, r8
   10c92:	f002 0207 	and.w	r2, r2, #7
   10c96:	f000 0007 	and.w	r0, r0, #7
   10c9a:	f000 fc0f 	bl	114bc <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   10c9e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   10ca0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   10ca2:	4638      	mov	r0, r7
   10ca4:	f7fe facc 	bl	f240 <lll_evt_offset_get>
   10ca8:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   10caa:	686a      	ldr	r2, [r5, #4]
   10cac:	f106 0109 	add.w	r1, r6, #9
   10cb0:	4640      	mov	r0, r8
   10cb2:	f000 fc99 	bl	115e8 <radio_tmr_start>
   10cb6:	4681      	mov	r9, r0

	radio_tmr_aa_capture();
   10cb8:	f000 fd78 	bl	117ac <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   10cbc:	4640      	mov	r0, r8
   10cbe:	f000 fd8f 	bl	117e0 <radio_tmr_aa_save>

	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   10cc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	       (lll->slave.window_widening_event_us << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   10cc4:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       (lll->slave.window_widening_event_us << 1) +
   10cc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   10cca:	f103 0550 	add.w	r5, r3, #80	; 0x50
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   10cce:	f000 0007 	and.w	r0, r0, #7
   10cd2:	2101      	movs	r1, #1
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   10cd4:	eb05 0542 	add.w	r5, r5, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   10cd8:	f000 fb6a 	bl	113b0 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   10cdc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   10ce0:	f003 0307 	and.w	r3, r3, #7
	hcto = remainder_us + EVENT_JITTER_US + (EVENT_JITTER_US << 2) +
   10ce4:	444d      	add	r5, r9
   10ce6:	2b02      	cmp	r3, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   10ce8:	4405      	add	r5, r0
   10cea:	d035      	beq.n	10d58 <prepare_cb+0x178>
		return 40;
   10cec:	2b04      	cmp	r3, #4
   10cee:	bf0c      	ite	eq
   10cf0:	f44f 72bc 	moveq.w	r2, #376	; 0x178
   10cf4:	2228      	movne	r2, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   10cf6:	2101      	movs	r1, #1
   10cf8:	4618      	mov	r0, r3
	hcto += addr_us_get(lll->phy_rx);
   10cfa:	4415      	add	r5, r2
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   10cfc:	f000 fb5a 	bl	113b4 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   10d00:	4428      	add	r0, r5
   10d02:	f000 fd45 	bl	11790 <radio_tmr_hcto_configure>
	defined(CONFIG_BT_CTLR_GPIO_PA_PIN)
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_PROFILE_ISR */

#if defined(CONFIG_BT_CTLR_CONN_RSSI)
	radio_rssi_measure();
   10d06:	f000 fbf3 	bl	114f0 <radio_rssi_measure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   10d0a:	7c21      	ldrb	r1, [r4, #16]
   10d0c:	3105      	adds	r1, #5
   10d0e:	4632      	mov	r2, r6
   10d10:	4638      	mov	r0, r7
   10d12:	b2c9      	uxtb	r1, r1
   10d14:	f7fe fa9e 	bl	f254 <lll_preempt_calc>
   10d18:	b9a0      	cbnz	r0, 10d44 <prepare_cb+0x164>
	} else
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
	{
		u32_t ret;

		ret = lll_prepare_done(lll);
   10d1a:	4620      	mov	r0, r4
   10d1c:	f7fe fa32 	bl	f184 <lll_prepare_done>
		LL_ASSERT(!ret);
   10d20:	b9e0      	cbnz	r0, 10d5c <prepare_cb+0x17c>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   10d22:	2000      	movs	r0, #0
   10d24:	b003      	add	sp, #12
   10d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   10d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10d2e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   10d32:	9300      	str	r3, [sp, #0]
   10d34:	f104 0023 	add.w	r0, r4, #35	; 0x23
   10d38:	f104 031c 	add.w	r3, r4, #28
   10d3c:	f7f8 fa64 	bl	9208 <lll_chan_sel_1>
   10d40:	4606      	mov	r6, r0
   10d42:	e76c      	b.n	10c1e <prepare_cb+0x3e>
		radio_isr_set(lll_conn_isr_abort, lll);
   10d44:	480e      	ldr	r0, [pc, #56]	; (10d80 <prepare_cb+0x1a0>)
   10d46:	4621      	mov	r1, r4
   10d48:	f000 fa64 	bl	11214 <radio_isr_set>
		radio_disable();
   10d4c:	f000 fb44 	bl	113d8 <radio_disable>
}
   10d50:	2000      	movs	r0, #0
   10d52:	b003      	add	sp, #12
   10d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (phy) {
   10d58:	2218      	movs	r2, #24
   10d5a:	e7cc      	b.n	10cf6 <prepare_cb+0x116>
		LL_ASSERT(!ret);
   10d5c:	4a09      	ldr	r2, [pc, #36]	; (10d84 <prepare_cb+0x1a4>)
   10d5e:	490a      	ldr	r1, [pc, #40]	; (10d88 <prepare_cb+0x1a8>)
   10d60:	480a      	ldr	r0, [pc, #40]	; (10d8c <prepare_cb+0x1ac>)
   10d62:	23fe      	movs	r3, #254	; 0xfe
   10d64:	f002 ffc6 	bl	13cf4 <printk>
   10d68:	4040      	eors	r0, r0
   10d6a:	f380 8811 	msr	BASEPRI, r0
   10d6e:	f04f 0003 	mov.w	r0, #3
   10d72:	df02      	svc	2
}
   10d74:	2000      	movs	r0, #0
   10d76:	b003      	add	sp, #12
   10d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10d7c:	000107b1 	.word	0x000107b1
   10d80:	0001051d 	.word	0x0001051d
   10d84:	00015e4c 	.word	0x00015e4c
   10d88:	000154d0 	.word	0x000154d0
   10d8c:	0001525c 	.word	0x0001525c

00010d90 <lll_slave_prepare>:
{
   10d90:	b530      	push	{r4, r5, lr}
   10d92:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   10d94:	68c4      	ldr	r4, [r0, #12]
{
   10d96:	4605      	mov	r5, r0
	err = lll_hfclock_on();
   10d98:	f7fe faf4 	bl	f384 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10d9c:	b108      	cbz	r0, 10da2 <lll_slave_prepare+0x12>
   10d9e:	3044      	adds	r0, #68	; 0x44
   10da0:	d128      	bne.n	10df4 <lll_slave_prepare+0x64>
	elapsed = p->lazy + 1;
   10da2:	892b      	ldrh	r3, [r5, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   10da4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	    lll->slave.window_widening_max_us) {
   10da6:	e9d4 200b 	ldrd	r2, r0, [r4, #44]	; 0x2c
	elapsed = p->lazy + 1;
   10daa:	3301      	adds	r3, #1
   10dac:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   10dae:	fb01 0103 	mla	r1, r1, r3, r0
	lll->latency_prepare += elapsed;
   10db2:	8ae0      	ldrh	r0, [r4, #22]
		lll->slave.window_widening_prepare_us =
   10db4:	428a      	cmp	r2, r1
   10db6:	bf28      	it	cs
   10db8:	460a      	movcs	r2, r1
	lll->latency_prepare += elapsed;
   10dba:	4403      	add	r3, r0
		lll->slave.window_widening_prepare_us =
   10dbc:	6322      	str	r2, [r4, #48]	; 0x30
	lll->latency_prepare += elapsed;
   10dbe:	82e3      	strh	r3, [r4, #22]
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   10dc0:	4a13      	ldr	r2, [pc, #76]	; (10e10 <lll_slave_prepare+0x80>)
   10dc2:	4914      	ldr	r1, [pc, #80]	; (10e14 <lll_slave_prepare+0x84>)
   10dc4:	4814      	ldr	r0, [pc, #80]	; (10e18 <lll_slave_prepare+0x88>)
   10dc6:	9500      	str	r5, [sp, #0]
   10dc8:	2300      	movs	r3, #0
   10dca:	f7fe f951 	bl	f070 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10dce:	b108      	cbz	r0, 10dd4 <lll_slave_prepare+0x44>
   10dd0:	3044      	adds	r0, #68	; 0x44
   10dd2:	d101      	bne.n	10dd8 <lll_slave_prepare+0x48>
}
   10dd4:	b003      	add	sp, #12
   10dd6:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   10dd8:	4a10      	ldr	r2, [pc, #64]	; (10e1c <lll_slave_prepare+0x8c>)
   10dda:	4911      	ldr	r1, [pc, #68]	; (10e20 <lll_slave_prepare+0x90>)
   10ddc:	4811      	ldr	r0, [pc, #68]	; (10e24 <lll_slave_prepare+0x94>)
   10dde:	235c      	movs	r3, #92	; 0x5c
   10de0:	f002 ff88 	bl	13cf4 <printk>
   10de4:	4040      	eors	r0, r0
   10de6:	f380 8811 	msr	BASEPRI, r0
   10dea:	f04f 0003 	mov.w	r0, #3
   10dee:	df02      	svc	2
}
   10df0:	b003      	add	sp, #12
   10df2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   10df4:	4a09      	ldr	r2, [pc, #36]	; (10e1c <lll_slave_prepare+0x8c>)
   10df6:	490a      	ldr	r1, [pc, #40]	; (10e20 <lll_slave_prepare+0x90>)
   10df8:	480a      	ldr	r0, [pc, #40]	; (10e24 <lll_slave_prepare+0x94>)
   10dfa:	2348      	movs	r3, #72	; 0x48
   10dfc:	f002 ff7a 	bl	13cf4 <printk>
   10e00:	4040      	eors	r0, r0
   10e02:	f380 8811 	msr	BASEPRI, r0
   10e06:	f04f 0003 	mov.w	r0, #3
   10e0a:	df02      	svc	2
   10e0c:	e7c9      	b.n	10da2 <lll_slave_prepare+0x12>
   10e0e:	bf00      	nop
   10e10:	00010be1 	.word	0x00010be1
   10e14:	000104cd 	.word	0x000104cd
   10e18:	000104c5 	.word	0x000104c5
   10e1c:	00015e4c 	.word	0x00015e4c
   10e20:	00015d68 	.word	0x00015d68
   10e24:	0001525c 	.word	0x0001525c

00010e28 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   10e28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_conn *lll = prepare_param->param;
   10e2a:	68c4      	ldr	r4, [r0, #12]
{
   10e2c:	b085      	sub	sp, #20
   10e2e:	4605      	mov	r5, r0
	u32_t remainder;

	DEBUG_RADIO_START_M(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   10e30:	f7ff fb34 	bl	1049c <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   10e34:	8ae2      	ldrh	r2, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   10e36:	8b60      	ldrh	r0, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   10e38:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   10e3c:	1811      	adds	r1, r2, r0
   10e3e:	8361      	strh	r1, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   10e40:	3a01      	subs	r2, #1
	lll->latency_prepare = 0;
   10e42:	2100      	movs	r1, #0
	lll->latency_event = lll->latency_prepare - 1;
   10e44:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   10e46:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   10e48:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   10e4a:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   10e4c:	d563      	bpl.n	10f16 <prepare_cb+0xee>
	event_counter = lll->event_counter + lll->latency_event;
   10e4e:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   10e50:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   10e52:	b280      	uxth	r0, r0
   10e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10e58:	f104 021c 	add.w	r2, r4, #28
   10e5c:	f7f8 fa10 	bl	9280 <lll_chan_sel_2>
   10e60:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   10e62:	a903      	add	r1, sp, #12
   10e64:	4620      	mov	r0, r4
   10e66:	f7ff fc4f 	bl	10708 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   10e6a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   10e6e:	9803      	ldr	r0, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   10e70:	f3c2 0340 	ubfx	r3, r2, #1, #1
   10e74:	7801      	ldrb	r1, [r0, #0]
	pdu_data_tx->sn = lll->sn;
   10e76:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   10e7a:	009b      	lsls	r3, r3, #2
   10e7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   10e80:	f021 020c 	bic.w	r2, r1, #12
   10e84:	4313      	orrs	r3, r2
   10e86:	7003      	strb	r3, [r0, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   10e88:	f000 f9e4 	bl	11254 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   10e8c:	2000      	movs	r0, #0
   10e8e:	f000 fa15 	bl	112bc <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   10e92:	f104 0008 	add.w	r0, r4, #8
   10e96:	f000 fa2f 	bl	112f8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((u32_t)lll->crc_init[2] << 16) |
			     ((u32_t)lll->crc_init[1] << 8) |
   10e9a:	7b63      	ldrb	r3, [r4, #13]
			    (((u32_t)lll->crc_init[2] << 16) |
   10e9c:	7ba2      	ldrb	r2, [r4, #14]
			     ((u32_t)lll->crc_init[0])));
   10e9e:	7b21      	ldrb	r1, [r4, #12]
			     ((u32_t)lll->crc_init[1] << 8) |
   10ea0:	021b      	lsls	r3, r3, #8
			    (((u32_t)lll->crc_init[2] << 16) |
   10ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10ea6:	4319      	orrs	r1, r3
   10ea8:	f240 605b 	movw	r0, #1627	; 0x65b
   10eac:	f000 fad6 	bl	1145c <radio_crc_configure>
	lll_chan_set(data_chan_use);
   10eb0:	4630      	mov	r0, r6
   10eb2:	f7fe f9e1 	bl	f278 <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   10eb6:	9903      	ldr	r1, [sp, #12]
   10eb8:	4620      	mov	r0, r4
   10eba:	f7ff fbf5 	bl	106a8 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   10ebe:	4621      	mov	r1, r4
   10ec0:	4825      	ldr	r0, [pc, #148]	; (10f58 <prepare_cb+0x130>)
   10ec2:	f000 f9a7 	bl	11214 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   10ec6:	2096      	movs	r0, #150	; 0x96
   10ec8:	f000 fb82 	bl	115d0 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   10ecc:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   10ed0:	f000 0007 	and.w	r0, r0, #7
   10ed4:	f000 fae4 	bl	114a0 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   10ed8:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   10eda:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   10edc:	4638      	mov	r0, r7
   10ede:	f7fe f9af 	bl	f240 <lll_evt_offset_get>
   10ee2:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   10ee4:	686a      	ldr	r2, [r5, #4]
   10ee6:	f106 0109 	add.w	r1, r6, #9
   10eea:	2001      	movs	r0, #1
   10eec:	f000 fb7c 	bl	115e8 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   10ef0:	f000 fc88 	bl	11804 <radio_tmr_end_capture>
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   10ef4:	7c21      	ldrb	r1, [r4, #16]
   10ef6:	3105      	adds	r1, #5
   10ef8:	4632      	mov	r2, r6
   10efa:	4638      	mov	r0, r7
   10efc:	b2c9      	uxtb	r1, r1
   10efe:	f7fe f9a9 	bl	f254 <lll_preempt_calc>
   10f02:	b1a8      	cbz	r0, 10f30 <prepare_cb+0x108>
			     ticks_at_event)) {
		radio_isr_set(lll_conn_isr_abort, lll);
   10f04:	4815      	ldr	r0, [pc, #84]	; (10f5c <prepare_cb+0x134>)
   10f06:	4621      	mov	r1, r4
   10f08:	f000 f984 	bl	11214 <radio_isr_set>
		radio_disable();
   10f0c:	f000 fa64 	bl	113d8 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   10f10:	2000      	movs	r0, #0
   10f12:	b005      	add	sp, #20
   10f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   10f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10f1a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   10f1e:	9300      	str	r3, [sp, #0]
   10f20:	f104 0023 	add.w	r0, r4, #35	; 0x23
   10f24:	f104 031c 	add.w	r3, r4, #28
   10f28:	f7f8 f96e 	bl	9208 <lll_chan_sel_1>
   10f2c:	4606      	mov	r6, r0
   10f2e:	e798      	b.n	10e62 <prepare_cb+0x3a>
		ret = lll_prepare_done(lll);
   10f30:	4620      	mov	r0, r4
   10f32:	f7fe f927 	bl	f184 <lll_prepare_done>
		LL_ASSERT(!ret);
   10f36:	2800      	cmp	r0, #0
   10f38:	d0ea      	beq.n	10f10 <prepare_cb+0xe8>
   10f3a:	4a09      	ldr	r2, [pc, #36]	; (10f60 <prepare_cb+0x138>)
   10f3c:	4909      	ldr	r1, [pc, #36]	; (10f64 <prepare_cb+0x13c>)
   10f3e:	480a      	ldr	r0, [pc, #40]	; (10f68 <prepare_cb+0x140>)
   10f40:	23d4      	movs	r3, #212	; 0xd4
   10f42:	f002 fed7 	bl	13cf4 <printk>
   10f46:	4040      	eors	r0, r0
   10f48:	f380 8811 	msr	BASEPRI, r0
   10f4c:	f04f 0003 	mov.w	r0, #3
   10f50:	df02      	svc	2
}
   10f52:	2000      	movs	r0, #0
   10f54:	b005      	add	sp, #20
   10f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f58:	000105d5 	.word	0x000105d5
   10f5c:	0001051d 	.word	0x0001051d
   10f60:	00015e98 	.word	0x00015e98
   10f64:	000154d0 	.word	0x000154d0
   10f68:	0001525c 	.word	0x0001525c

00010f6c <lll_master_prepare>:
{
   10f6c:	b530      	push	{r4, r5, lr}
   10f6e:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   10f70:	68c5      	ldr	r5, [r0, #12]
{
   10f72:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   10f74:	f7fe fa06 	bl	f384 <lll_hfclock_on>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10f78:	b108      	cbz	r0, 10f7e <lll_master_prepare+0x12>
   10f7a:	3044      	adds	r0, #68	; 0x44
   10f7c:	d11e      	bne.n	10fbc <lll_master_prepare+0x50>
	elapsed = p->lazy + 1;
   10f7e:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   10f80:	8ae8      	ldrh	r0, [r5, #22]
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   10f82:	4a15      	ldr	r2, [pc, #84]	; (10fd8 <lll_master_prepare+0x6c>)
   10f84:	4915      	ldr	r1, [pc, #84]	; (10fdc <lll_master_prepare+0x70>)
	elapsed = p->lazy + 1;
   10f86:	3301      	adds	r3, #1
	lll->latency_prepare += elapsed;
   10f88:	4403      	add	r3, r0
   10f8a:	82eb      	strh	r3, [r5, #22]
	err = lll_prepare(lll_conn_is_abort_cb, lll_conn_abort_cb, prepare_cb,
   10f8c:	4814      	ldr	r0, [pc, #80]	; (10fe0 <lll_master_prepare+0x74>)
   10f8e:	9400      	str	r4, [sp, #0]
   10f90:	2300      	movs	r3, #0
   10f92:	f7fe f86d 	bl	f070 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   10f96:	b108      	cbz	r0, 10f9c <lll_master_prepare+0x30>
   10f98:	3044      	adds	r0, #68	; 0x44
   10f9a:	d101      	bne.n	10fa0 <lll_master_prepare+0x34>
}
   10f9c:	b003      	add	sp, #12
   10f9e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   10fa0:	4a10      	ldr	r2, [pc, #64]	; (10fe4 <lll_master_prepare+0x78>)
   10fa2:	4911      	ldr	r1, [pc, #68]	; (10fe8 <lll_master_prepare+0x7c>)
   10fa4:	4811      	ldr	r0, [pc, #68]	; (10fec <lll_master_prepare+0x80>)
   10fa6:	2353      	movs	r3, #83	; 0x53
   10fa8:	f002 fea4 	bl	13cf4 <printk>
   10fac:	4040      	eors	r0, r0
   10fae:	f380 8811 	msr	BASEPRI, r0
   10fb2:	f04f 0003 	mov.w	r0, #3
   10fb6:	df02      	svc	2
}
   10fb8:	b003      	add	sp, #12
   10fba:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   10fbc:	4a09      	ldr	r2, [pc, #36]	; (10fe4 <lll_master_prepare+0x78>)
   10fbe:	490a      	ldr	r1, [pc, #40]	; (10fe8 <lll_master_prepare+0x7c>)
   10fc0:	480a      	ldr	r0, [pc, #40]	; (10fec <lll_master_prepare+0x80>)
   10fc2:	2348      	movs	r3, #72	; 0x48
   10fc4:	f002 fe96 	bl	13cf4 <printk>
   10fc8:	4040      	eors	r0, r0
   10fca:	f380 8811 	msr	BASEPRI, r0
   10fce:	f04f 0003 	mov.w	r0, #3
   10fd2:	df02      	svc	2
   10fd4:	e7d3      	b.n	10f7e <lll_master_prepare+0x12>
   10fd6:	bf00      	nop
   10fd8:	00010e29 	.word	0x00010e29
   10fdc:	000104cd 	.word	0x000104cd
   10fe0:	000104c5 	.word	0x000104c5
   10fe4:	00015e98 	.word	0x00015e98
   10fe8:	00015d68 	.word	0x00015d68
   10fec:	0001525c 	.word	0x0001525c

00010ff0 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   10ff0:	4b05      	ldr	r3, [pc, #20]	; (11008 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   10ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10ff6:	2100      	movs	r1, #0
   10ff8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   10ffc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   11000:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   11004:	4770      	bx	lr
   11006:	bf00      	nop
   11008:	4000b000 	.word	0x4000b000

0001100c <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
   1100c:	4b05      	ldr	r3, [pc, #20]	; (11024 <cntr_start+0x18>)
   1100e:	7818      	ldrb	r0, [r3, #0]
   11010:	1c42      	adds	r2, r0, #1
   11012:	701a      	strb	r2, [r3, #0]
   11014:	b918      	cbnz	r0, 1101e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11016:	4b04      	ldr	r3, [pc, #16]	; (11028 <cntr_start+0x1c>)
   11018:	2201      	movs	r2, #1
   1101a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1101c:	4770      	bx	lr
		return 1;
   1101e:	2001      	movs	r0, #1
}
   11020:	4770      	bx	lr
   11022:	bf00      	nop
   11024:	2000206f 	.word	0x2000206f
   11028:	4000b000 	.word	0x4000b000

0001102c <cntr_stop>:

u32_t cntr_stop(void)
{
   1102c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1102e:	4c0d      	ldr	r4, [pc, #52]	; (11064 <cntr_stop+0x38>)
   11030:	7820      	ldrb	r0, [r4, #0]
   11032:	b148      	cbz	r0, 11048 <cntr_stop+0x1c>

	if (--_refcount) {
   11034:	3801      	subs	r0, #1
   11036:	b2c0      	uxtb	r0, r0
   11038:	7020      	strb	r0, [r4, #0]
   1103a:	b918      	cbnz	r0, 11044 <cntr_stop+0x18>
   1103c:	4b0a      	ldr	r3, [pc, #40]	; (11068 <cntr_stop+0x3c>)
   1103e:	2201      	movs	r2, #1
   11040:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   11042:	bd10      	pop	{r4, pc}
		return 1;
   11044:	2001      	movs	r0, #1
}
   11046:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   11048:	4a08      	ldr	r2, [pc, #32]	; (1106c <cntr_stop+0x40>)
   1104a:	4909      	ldr	r1, [pc, #36]	; (11070 <cntr_stop+0x44>)
   1104c:	4809      	ldr	r0, [pc, #36]	; (11074 <cntr_stop+0x48>)
   1104e:	232e      	movs	r3, #46	; 0x2e
   11050:	f002 fe50 	bl	13cf4 <printk>
   11054:	4040      	eors	r0, r0
   11056:	f380 8811 	msr	BASEPRI, r0
   1105a:	f04f 0003 	mov.w	r0, #3
   1105e:	df02      	svc	2
   11060:	7820      	ldrb	r0, [r4, #0]
   11062:	e7e7      	b.n	11034 <cntr_stop+0x8>
   11064:	2000206f 	.word	0x2000206f
   11068:	4000b004 	.word	0x4000b004
   1106c:	00015ee8 	.word	0x00015ee8
   11070:	00015f34 	.word	0x00015f34
   11074:	0001525c 	.word	0x0001525c

00011078 <cntr_cnt_get>:
     return p_reg->COUNTER;
   11078:	4b01      	ldr	r3, [pc, #4]	; (11080 <cntr_cnt_get+0x8>)
   1107a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

u32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1107e:	4770      	bx	lr
   11080:	4000b000 	.word	0x4000b000

00011084 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   11084:	4b02      	ldr	r3, [pc, #8]	; (11090 <cntr_cmp_set+0xc>)
   11086:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1108a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1108e:	4770      	bx	lr
   11090:	4000b000 	.word	0x4000b000

00011094 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   11094:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   11096:	4b12      	ldr	r3, [pc, #72]	; (110e0 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11098:	4d12      	ldr	r5, [pc, #72]	; (110e4 <do_ecb+0x50>)
   1109a:	2601      	movs	r6, #1
   1109c:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1109e:	2100      	movs	r1, #0
   110a0:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   110a2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   110a6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   110aa:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   110ae:	601c      	str	r4, [r3, #0]
}
   110b0:	e005      	b.n	110be <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   110b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   110b6:	b932      	cbnz	r2, 110c6 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   110b8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   110bc:	b11a      	cbz	r2, 110c6 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   110be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   110c2:	2a00      	cmp	r2, #0
   110c4:	d0f5      	beq.n	110b2 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   110c6:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   110c8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   110cc:	2a00      	cmp	r2, #0
   110ce:	d1e7      	bne.n	110a0 <do_ecb+0xc>
   110d0:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   110d4:	2f00      	cmp	r7, #0
   110d6:	d0e3      	beq.n	110a0 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   110d8:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   110da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   110de:	4770      	bx	lr
   110e0:	4000e000 	.word	0x4000e000
   110e4:	4000e004 	.word	0x4000e004

000110e8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   110e8:	b570      	push	{r4, r5, r6, lr}
   110ea:	b08c      	sub	sp, #48	; 0x30
   110ec:	460e      	mov	r6, r1
   110ee:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   110f0:	4601      	mov	r1, r0
   110f2:	2210      	movs	r2, #16
   110f4:	4668      	mov	r0, sp
{
   110f6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   110f8:	f7f3 faec 	bl	46d4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   110fc:	2210      	movs	r2, #16
   110fe:	eb0d 0002 	add.w	r0, sp, r2
   11102:	4631      	mov	r1, r6
   11104:	f7f3 fae6 	bl	46d4 <mem_rcopy>

	do_ecb(&ecb);
   11108:	4668      	mov	r0, sp
   1110a:	f7ff ffc3 	bl	11094 <do_ecb>

	if (cipher_text_le) {
   1110e:	b125      	cbz	r5, 1111a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   11110:	4628      	mov	r0, r5
   11112:	2210      	movs	r2, #16
   11114:	a908      	add	r1, sp, #32
   11116:	f7f3 fadd 	bl	46d4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1111a:	b124      	cbz	r4, 11126 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1111c:	4620      	mov	r0, r4
   1111e:	2210      	movs	r2, #16
   11120:	a908      	add	r1, sp, #32
   11122:	f003 f8fa 	bl	1431a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   11126:	b00c      	add	sp, #48	; 0x30
   11128:	bd70      	pop	{r4, r5, r6, pc}
   1112a:	bf00      	nop

0001112c <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1112c:	b4f0      	push	{r4, r5, r6, r7}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1112e:	4e2a      	ldr	r6, [pc, #168]	; (111d8 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11130:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 111ec <sw_switch.isra.0+0xc0>
   11134:	7834      	ldrb	r4, [r6, #0]
   11136:	4b29      	ldr	r3, [pc, #164]	; (111dc <sw_switch.isra.0+0xb0>)
   11138:	f8cc 3560 	str.w	r3, [ip, #1376]	; 0x560
   1113c:	f104 030b 	add.w	r3, r4, #11
   11140:	b2db      	uxtb	r3, r3
   11142:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11144:	4f26      	ldr	r7, [pc, #152]	; (111e0 <sw_switch.isra.0+0xb4>)
   11146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1114a:	00e5      	lsls	r5, r4, #3
   1114c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   11150:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   11154:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   11158:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1115c:	f8cc 5564 	str.w	r5, [ip, #1380]	; 0x564
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   11160:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11162:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   11166:	b388      	cbz	r0, 111cc <sw_switch.isra.0+0xa0>

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   11168:	f24a 274e 	movw	r7, #41550	; 0xa24e
   1116c:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   11170:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   11174:	2a02      	cmp	r2, #2
   11176:	bf14      	ite	ne
   11178:	463a      	movne	r2, r7
   1117a:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1117c:	f241 574a 	movw	r7, #5450	; 0x154a
   11180:	2902      	cmp	r1, #2
   11182:	bf14      	ite	ne
   11184:	4601      	movne	r1, r0
   11186:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   11188:	4816      	ldr	r0, [pc, #88]	; (111e4 <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1118a:	4f17      	ldr	r7, [pc, #92]	; (111e8 <sw_switch.isra.0+0xbc>)
   1118c:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   11190:	440a      	add	r2, r1
   11192:	fba0 3202 	umull	r3, r2, r0, r2
   11196:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   11198:	00ab      	lsls	r3, r5, #2
   1119a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1119e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   111a2:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   111a4:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   111a8:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   111aa:	bf8a      	itet	hi
   111ac:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   111b0:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   111b2:	1a8a      	subhi	r2, r1, r2
   111b4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   111b8:	4b0c      	ldr	r3, [pc, #48]	; (111ec <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   111ba:	f004 0401 	and.w	r4, r4, #1
   111be:	f44f 6290 	mov.w	r2, #1152	; 0x480
   111c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   111c6:	7034      	strb	r4, [r6, #0]
}
   111c8:	bcf0      	pop	{r4, r5, r6, r7}
   111ca:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   111cc:	4a08      	ldr	r2, [pc, #32]	; (111f0 <sw_switch.isra.0+0xc4>)
   111ce:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   111d2:	2229      	movs	r2, #41	; 0x29
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   111d4:	e7e0      	b.n	11198 <sw_switch.isra.0+0x6c>
   111d6:	bf00      	nop
   111d8:	20002070 	.word	0x20002070
   111dc:	4000110c 	.word	0x4000110c
   111e0:	40009140 	.word	0x40009140
   111e4:	10624dd3 	.word	0x10624dd3
   111e8:	40001000 	.word	0x40001000
   111ec:	4001f000 	.word	0x4001f000
   111f0:	40001004 	.word	0x40001004

000111f4 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   111f4:	4b04      	ldr	r3, [pc, #16]	; (11208 <isr_radio+0x14>)
   111f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   111fa:	b123      	cbz	r3, 11206 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   111fc:	4a03      	ldr	r2, [pc, #12]	; (1120c <isr_radio+0x18>)
   111fe:	4b04      	ldr	r3, [pc, #16]	; (11210 <isr_radio+0x1c>)
   11200:	6810      	ldr	r0, [r2, #0]
   11202:	681b      	ldr	r3, [r3, #0]
   11204:	4718      	bx	r3
}
   11206:	4770      	bx	lr
   11208:	40001000 	.word	0x40001000
   1120c:	20001df0 	.word	0x20001df0
   11210:	20001dec 	.word	0x20001dec

00011214 <radio_isr_set>:
{
   11214:	b538      	push	{r3, r4, r5, lr}
   11216:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   11218:	2001      	movs	r0, #1
{
   1121a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1121c:	f7f2 fe38 	bl	3e90 <arch_irq_disable>
	isr_cb_param = param;
   11220:	4a08      	ldr	r2, [pc, #32]	; (11244 <radio_isr_set+0x30>)
	isr_cb = cb;
   11222:	4809      	ldr	r0, [pc, #36]	; (11248 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11224:	4b09      	ldr	r3, [pc, #36]	; (1124c <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11226:	490a      	ldr	r1, [pc, #40]	; (11250 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   11228:	6015      	str	r5, [r2, #0]
   1122a:	2510      	movs	r5, #16
   1122c:	2202      	movs	r2, #2
	isr_cb = cb;
   1122e:	6004      	str	r4, [r0, #0]
   11230:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   11234:	2001      	movs	r0, #1
   11236:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1123a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1123e:	f7f2 be17 	b.w	3e70 <arch_irq_enable>
   11242:	bf00      	nop
   11244:	20001df0 	.word	0x20001df0
   11248:	20001dec 	.word	0x20001dec
   1124c:	e000e100 	.word	0xe000e100
   11250:	40001000 	.word	0x40001000

00011254 <radio_reset>:
{
   11254:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   11256:	2001      	movs	r0, #1
   11258:	f7f2 fe1a 	bl	3e90 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1125c:	4b0c      	ldr	r3, [pc, #48]	; (11290 <radio_reset+0x3c>)
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1125e:	490d      	ldr	r1, [pc, #52]	; (11294 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   11260:	4a0d      	ldr	r2, [pc, #52]	; (11298 <radio_reset+0x44>)
   11262:	2400      	movs	r4, #0
   11264:	2001      	movs	r0, #1
   11266:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   1126a:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   1126e:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   11270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11274:	f023 0301 	bic.w	r3, r3, #1
   11278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1127c:	f44f 6410 	mov.w	r4, #2304	; 0x900
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   11280:	f44f 5090 	mov.w	r0, #4608	; 0x1200
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   11284:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   11286:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1128a:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1128e:	bd10      	pop	{r4, pc}
   11290:	40001000 	.word	0x40001000
   11294:	40001774 	.word	0x40001774
   11298:	4001f000 	.word	0x4001f000

0001129c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1129c:	4b06      	ldr	r3, [pc, #24]	; (112b8 <radio_phy_set+0x1c>)
	switch (phy) {
   1129e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   112a0:	bf14      	ite	ne
   112a2:	2203      	movne	r2, #3
   112a4:	2204      	moveq	r2, #4
   112a6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   112aa:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   112ae:	f042 0201 	orr.w	r2, r2, #1
   112b2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   112b6:	4770      	bx	lr
   112b8:	40001000 	.word	0x40001000

000112bc <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (u32_t)power;
   112bc:	4b01      	ldr	r3, [pc, #4]	; (112c4 <radio_tx_power_set+0x8>)
   112be:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   112c2:	4770      	bx	lr
   112c4:	40001000 	.word	0x40001000

000112c8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   112c8:	4b01      	ldr	r3, [pc, #4]	; (112d0 <radio_freq_chan_set+0x8>)
   112ca:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   112ce:	4770      	bx	lr
   112d0:	40001000 	.word	0x40001000

000112d4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   112d4:	4b07      	ldr	r3, [pc, #28]	; (112f4 <radio_whiten_iv_set+0x20>)
   112d6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   112da:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   112de:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   112e2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   112e6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   112ea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   112ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   112f2:	4770      	bx	lr
   112f4:	40001000 	.word	0x40001000

000112f8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   112f8:	4a0b      	ldr	r2, [pc, #44]	; (11328 <radio_aa_set+0x30>)
   112fa:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   112fc:	2301      	movs	r3, #1
{
   112fe:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   11300:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   11304:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   11308:	78c3      	ldrb	r3, [r0, #3]
   1130a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1130e:	7843      	ldrb	r3, [r0, #1]
   11310:	7884      	ldrb	r4, [r0, #2]
   11312:	7801      	ldrb	r1, [r0, #0]
   11314:	041b      	lsls	r3, r3, #16
   11316:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1131a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1131e:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   11320:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   11324:	4770      	bx	lr
   11326:	bf00      	nop
   11328:	40001000 	.word	0x40001000

0001132c <radio_pkt_configure>:
	switch (phy) {
   1132c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   11330:	2b02      	cmp	r3, #2
{
   11332:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   11334:	bf14      	ite	ne
   11336:	2400      	movne	r4, #0
   11338:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1133c:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1133e:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   11342:	bf48      	it	mi
   11344:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11348:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1134a:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1134e:	4320      	orrs	r0, r4
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   11350:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   11354:	4a0a      	ldr	r2, [pc, #40]	; (11380 <radio_pkt_configure+0x54>)
}
   11356:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   11358:	4303      	orrs	r3, r0
   1135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1135e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   11362:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   11366:	4807      	ldr	r0, [pc, #28]	; (11384 <radio_pkt_configure+0x58>)
   11368:	4018      	ands	r0, r3
   1136a:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1136e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   11372:	4319      	orrs	r1, r3
   11374:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   11378:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1137c:	4770      	bx	lr
   1137e:	bf00      	nop
   11380:	40001000 	.word	0x40001000
   11384:	fef80000 	.word	0xfef80000

00011388 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
   11388:	4b01      	ldr	r3, [pc, #4]	; (11390 <radio_pkt_rx_set+0x8>)
   1138a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1138e:	4770      	bx	lr
   11390:	40001000 	.word	0x40001000

00011394 <radio_pkt_tx_set>:
   11394:	4b01      	ldr	r3, [pc, #4]	; (1139c <radio_pkt_tx_set+0x8>)
   11396:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1139a:	4770      	bx	lr
   1139c:	40001000 	.word	0x40001000

000113a0 <radio_tx_ready_delay_get>:
	switch (phy) {
   113a0:	2802      	cmp	r0, #2
}
   113a2:	bf14      	ite	ne
   113a4:	2029      	movne	r0, #41	; 0x29
   113a6:	2028      	moveq	r0, #40	; 0x28
   113a8:	4770      	bx	lr
   113aa:	bf00      	nop

000113ac <radio_tx_chain_delay_get>:
}
   113ac:	2001      	movs	r0, #1
   113ae:	4770      	bx	lr

000113b0 <radio_rx_ready_delay_get>:
}
   113b0:	2029      	movs	r0, #41	; 0x29
   113b2:	4770      	bx	lr

000113b4 <radio_rx_chain_delay_get>:
	switch (phy) {
   113b4:	2802      	cmp	r0, #2
}
   113b6:	bf14      	ite	ne
   113b8:	200a      	movne	r0, #10
   113ba:	2006      	moveq	r0, #6
   113bc:	4770      	bx	lr
   113be:	bf00      	nop

000113c0 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   113c0:	4b01      	ldr	r3, [pc, #4]	; (113c8 <radio_rx_enable+0x8>)
   113c2:	2201      	movs	r2, #1
   113c4:	601a      	str	r2, [r3, #0]
}
   113c6:	4770      	bx	lr
   113c8:	40001004 	.word	0x40001004

000113cc <radio_tx_enable>:
   113cc:	4b01      	ldr	r3, [pc, #4]	; (113d4 <radio_tx_enable+0x8>)
   113ce:	2201      	movs	r2, #1
   113d0:	601a      	str	r2, [r3, #0]
}
   113d2:	4770      	bx	lr
   113d4:	40001000 	.word	0x40001000

000113d8 <radio_disable>:
{
   113d8:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   113da:	4a08      	ldr	r2, [pc, #32]	; (113fc <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   113dc:	4808      	ldr	r0, [pc, #32]	; (11400 <radio_disable+0x28>)
   113de:	4909      	ldr	r1, [pc, #36]	; (11404 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   113e0:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   113e2:	f44f 6590 	mov.w	r5, #1152	; 0x480
   113e6:	2400      	movs	r4, #0
   113e8:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   113ec:	6053      	str	r3, [r2, #4]
   113ee:	60d3      	str	r3, [r2, #12]
   113f0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   113f4:	bc30      	pop	{r4, r5}
   113f6:	600b      	str	r3, [r1, #0]
   113f8:	4770      	bx	lr
   113fa:	bf00      	nop
   113fc:	4001f000 	.word	0x4001f000
   11400:	40001000 	.word	0x40001000
   11404:	40001010 	.word	0x40001010

00011408 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   11408:	4b04      	ldr	r3, [pc, #16]	; (1141c <radio_status_reset+0x14>)
   1140a:	2200      	movs	r2, #0
   1140c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   11410:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   11414:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   11418:	4770      	bx	lr
   1141a:	bf00      	nop
   1141c:	40001000 	.word	0x40001000

00011420 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   11420:	4b03      	ldr	r3, [pc, #12]	; (11430 <radio_is_ready+0x10>)
   11422:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   11426:	3800      	subs	r0, #0
   11428:	bf18      	it	ne
   1142a:	2001      	movne	r0, #1
   1142c:	4770      	bx	lr
   1142e:	bf00      	nop
   11430:	40001000 	.word	0x40001000

00011434 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   11434:	4b03      	ldr	r3, [pc, #12]	; (11444 <radio_is_done+0x10>)
   11436:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1143a:	3800      	subs	r0, #0
   1143c:	bf18      	it	ne
   1143e:	2001      	movne	r0, #1
   11440:	4770      	bx	lr
   11442:	bf00      	nop
   11444:	40001000 	.word	0x40001000

00011448 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   11448:	4b03      	ldr	r3, [pc, #12]	; (11458 <radio_is_idle+0x10>)
   1144a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1144e:	fab0 f080 	clz	r0, r0
   11452:	0940      	lsrs	r0, r0, #5
   11454:	4770      	bx	lr
   11456:	bf00      	nop
   11458:	40001000 	.word	0x40001000

0001145c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1145c:	4b04      	ldr	r3, [pc, #16]	; (11470 <radio_crc_configure+0x14>)
   1145e:	f240 1203 	movw	r2, #259	; 0x103
   11462:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   11466:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1146a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1146e:	4770      	bx	lr
   11470:	40001000 	.word	0x40001000

00011474 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   11474:	4b03      	ldr	r3, [pc, #12]	; (11484 <radio_crc_is_valid+0x10>)
   11476:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1147a:	3800      	subs	r0, #0
   1147c:	bf18      	it	ne
   1147e:	2001      	movne	r0, #1
   11480:	4770      	bx	lr
   11482:	bf00      	nop
   11484:	40001000 	.word	0x40001000

00011488 <radio_pkt_empty_get>:
}
   11488:	4800      	ldr	r0, [pc, #0]	; (1148c <radio_pkt_empty_get+0x4>)
   1148a:	4770      	bx	lr
   1148c:	20001ce4 	.word	0x20001ce4

00011490 <radio_pkt_scratch_get>:
}
   11490:	4800      	ldr	r0, [pc, #0]	; (11494 <radio_pkt_scratch_get+0x4>)
   11492:	4770      	bx	lr
   11494:	20001ce8 	.word	0x20001ce8

00011498 <radio_pkt_decrypt_get>:
}
   11498:	4800      	ldr	r0, [pc, #0]	; (1149c <radio_pkt_decrypt_get+0x4>)
   1149a:	4770      	bx	lr
   1149c:	20001be0 	.word	0x20001be0

000114a0 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   114a0:	4b05      	ldr	r3, [pc, #20]	; (114b8 <radio_switch_complete_and_rx+0x18>)
{
   114a2:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   114a4:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   114a6:	2403      	movs	r4, #3
{
   114a8:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   114aa:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   114ae:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   114b0:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   114b2:	f7ff be3b 	b.w	1112c <sw_switch.isra.0>
   114b6:	bf00      	nop
   114b8:	40001000 	.word	0x40001000

000114bc <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   114bc:	4b04      	ldr	r3, [pc, #16]	; (114d0 <radio_switch_complete_and_tx+0x14>)
{
   114be:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   114c0:	2403      	movs	r4, #3
{
   114c2:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   114c4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   114c8:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   114ca:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   114cc:	f7ff be2e 	b.w	1112c <sw_switch.isra.0>
   114d0:	40001000 	.word	0x40001000

000114d4 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   114d4:	4904      	ldr	r1, [pc, #16]	; (114e8 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   114d6:	4b05      	ldr	r3, [pc, #20]	; (114ec <radio_switch_complete_and_disable+0x18>)
   114d8:	2003      	movs	r0, #3
   114da:	f44f 6290 	mov.w	r2, #1152	; 0x480
   114de:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   114e2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   114e6:	4770      	bx	lr
   114e8:	40001000 	.word	0x40001000
   114ec:	4001f000 	.word	0x4001f000

000114f0 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   114f0:	4a03      	ldr	r2, [pc, #12]	; (11500 <radio_rssi_measure+0x10>)
   114f2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   114f6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   114fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   114fe:	4770      	bx	lr
   11500:	40001000 	.word	0x40001000

00011504 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   11504:	4b01      	ldr	r3, [pc, #4]	; (1150c <radio_rssi_get+0x8>)
   11506:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1150a:	4770      	bx	lr
   1150c:	40001000 	.word	0x40001000

00011510 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   11510:	4b02      	ldr	r3, [pc, #8]	; (1151c <radio_rssi_status_reset+0xc>)
   11512:	2200      	movs	r2, #0
   11514:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   11518:	4770      	bx	lr
   1151a:	bf00      	nop
   1151c:	40001000 	.word	0x40001000

00011520 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   11520:	4b03      	ldr	r3, [pc, #12]	; (11530 <radio_rssi_is_ready+0x10>)
   11522:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   11526:	3800      	subs	r0, #0
   11528:	bf18      	it	ne
   1152a:	2001      	movne	r0, #1
   1152c:	4770      	bx	lr
   1152e:	bf00      	nop
   11530:	40001000 	.word	0x40001000

00011534 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   11534:	b430      	push	{r4, r5}
   11536:	2400      	movs	r4, #0
	u8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   11538:	00a3      	lsls	r3, r4, #2
   1153a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1153e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   11542:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   11544:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   11548:	3401      	adds	r4, #1
   1154a:	8895      	ldrh	r5, [r2, #4]
   1154c:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   11550:	2c08      	cmp	r4, #8
		bdaddr += 6;
   11552:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   11556:	d1ef      	bne.n	11538 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   11558:	4b03      	ldr	r3, [pc, #12]	; (11568 <radio_filter_configure+0x34>)
   1155a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1155e:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   11560:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   11564:	4770      	bx	lr
   11566:	bf00      	nop
   11568:	40001000 	.word	0x40001000

0001156c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1156c:	4a03      	ldr	r2, [pc, #12]	; (1157c <radio_filter_disable+0x10>)
   1156e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   11572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11576:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1157a:	4770      	bx	lr
   1157c:	40001000 	.word	0x40001000

00011580 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   11580:	4b02      	ldr	r3, [pc, #8]	; (1158c <radio_filter_status_reset+0xc>)
   11582:	2200      	movs	r2, #0
   11584:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   11588:	4770      	bx	lr
   1158a:	bf00      	nop
   1158c:	40001000 	.word	0x40001000

00011590 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   11590:	4b03      	ldr	r3, [pc, #12]	; (115a0 <radio_filter_has_match+0x10>)
   11592:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   11596:	3800      	subs	r0, #0
   11598:	bf18      	it	ne
   1159a:	2001      	movne	r0, #1
   1159c:	4770      	bx	lr
   1159e:	bf00      	nop
   115a0:	40001000 	.word	0x40001000

000115a4 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   115a4:	4b01      	ldr	r3, [pc, #4]	; (115ac <radio_filter_match_get+0x8>)
   115a6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   115aa:	4770      	bx	lr
   115ac:	40001000 	.word	0x40001000

000115b0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   115b0:	4904      	ldr	r1, [pc, #16]	; (115c4 <radio_tmr_status_reset+0x14>)
   115b2:	4b05      	ldr	r3, [pc, #20]	; (115c8 <radio_tmr_status_reset+0x18>)
   115b4:	4a05      	ldr	r2, [pc, #20]	; (115cc <radio_tmr_status_reset+0x1c>)
   115b6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   115ba:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   115be:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   115c2:	4770      	bx	lr
   115c4:	4000b000 	.word	0x4000b000
   115c8:	4001f000 	.word	0x4001f000
   115cc:	0e700060 	.word	0x0e700060

000115d0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   115d0:	4b03      	ldr	r3, [pc, #12]	; (115e0 <radio_tmr_tifs_set+0x10>)
   115d2:	4a04      	ldr	r2, [pc, #16]	; (115e4 <radio_tmr_tifs_set+0x14>)
   115d4:	781b      	ldrb	r3, [r3, #0]
   115d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   115da:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   115de:	4770      	bx	lr
   115e0:	20002070 	.word	0x20002070
   115e4:	40009000 	.word	0x40009000

000115e8 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   115e8:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   115ea:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   115ee:	4d31      	ldr	r5, [pc, #196]	; (116b4 <radio_tmr_start+0xcc>)
   115f0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   115f4:	42ab      	cmp	r3, r5
{
   115f6:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   115f8:	d906      	bls.n	11608 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   115fa:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   115fe:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   11602:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   11606:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11608:	4d2b      	ldr	r5, [pc, #172]	; (116b8 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1160a:	4b2c      	ldr	r3, [pc, #176]	; (116bc <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   1160c:	482c      	ldr	r0, [pc, #176]	; (116c0 <radio_tmr_start+0xd8>)
   1160e:	2601      	movs	r6, #1
   11610:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   11612:	2600      	movs	r6, #0
   11614:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   11618:	4d2a      	ldr	r5, [pc, #168]	; (116c4 <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   1161a:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1161e:	2604      	movs	r6, #4
   11620:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   11624:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   11626:	2602      	movs	r6, #2
   11628:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1162c:	4a26      	ldr	r2, [pc, #152]	; (116c8 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   1162e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   11632:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   11636:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1163a:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1163e:	4923      	ldr	r1, [pc, #140]	; (116cc <radio_tmr_start+0xe4>)
   11640:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   11644:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11646:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1164a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1164e:	b354      	cbz	r4, 116a6 <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   11650:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   11654:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   11658:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1165c:	4b1a      	ldr	r3, [pc, #104]	; (116c8 <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1165e:	4a1c      	ldr	r2, [pc, #112]	; (116d0 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11660:	491c      	ldr	r1, [pc, #112]	; (116d4 <radio_tmr_start+0xec>)
   11662:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   11666:	2500      	movs	r5, #0
   11668:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   1166a:	2604      	movs	r6, #4
   1166c:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   1166e:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   11672:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   11676:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   1167a:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1167c:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11680:	4f15      	ldr	r7, [pc, #84]	; (116d8 <radio_tmr_start+0xf0>)
   11682:	4e16      	ldr	r6, [pc, #88]	; (116dc <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11684:	4d16      	ldr	r5, [pc, #88]	; (116e0 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11686:	4c17      	ldr	r4, [pc, #92]	; (116e4 <radio_tmr_start+0xfc>)
   11688:	f8c3 7548 	str.w	r7, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1168c:	320c      	adds	r2, #12
   1168e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11692:	f8c3 6550 	str.w	r6, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11696:	f8c3 5554 	str.w	r5, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1169a:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1169e:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   116a0:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
   116a4:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   116a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   116aa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   116ae:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   116b2:	e7d3      	b.n	1165c <radio_tmr_start+0x74>
   116b4:	7ff0bdbf 	.word	0x7ff0bdbf
   116b8:	4000800c 	.word	0x4000800c
   116bc:	40008000 	.word	0x40008000
   116c0:	431bde83 	.word	0x431bde83
   116c4:	4000b000 	.word	0x4000b000
   116c8:	4001f000 	.word	0x4001f000
   116cc:	4000b148 	.word	0x4000b148
   116d0:	40009000 	.word	0x40009000
   116d4:	4000900c 	.word	0x4000900c
   116d8:	4000110c 	.word	0x4000110c
   116dc:	40009140 	.word	0x40009140
   116e0:	4001f004 	.word	0x4001f004
   116e4:	40009144 	.word	0x40009144

000116e8 <radio_tmr_start_tick>:

u32_t radio_tmr_start_tick(u8_t trx, u32_t tick)
{
   116e8:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   116ea:	4c16      	ldr	r4, [pc, #88]	; (11744 <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   116ec:	4f16      	ldr	r7, [pc, #88]	; (11748 <radio_tmr_start_tick+0x60>)
   116ee:	4e17      	ldr	r6, [pc, #92]	; (1174c <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   116f0:	4d17      	ldr	r5, [pc, #92]	; (11750 <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   116f2:	4b18      	ldr	r3, [pc, #96]	; (11754 <radio_tmr_start_tick+0x6c>)
   116f4:	2201      	movs	r2, #1
   116f6:	603a      	str	r2, [r7, #0]
   116f8:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   116fa:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   116fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   11702:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   11706:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   1170a:	4913      	ldr	r1, [pc, #76]	; (11758 <radio_tmr_start_tick+0x70>)
   1170c:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    p_reg->CHENSET = mask;
   11710:	2220      	movs	r2, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11712:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   11716:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1171a:	b158      	cbz	r0, 11734 <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   1171c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   11720:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   11724:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   11728:	4a0a      	ldr	r2, [pc, #40]	; (11754 <radio_tmr_start_tick+0x6c>)
	last_pdu_end_us = 0U;
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1172a:	2001      	movs	r0, #1
   1172c:	bcf0      	pop	{r4, r5, r6, r7}
   1172e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   11732:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   11734:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   11738:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1173c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   11740:	e7f2      	b.n	11728 <radio_tmr_start_tick+0x40>
   11742:	bf00      	nop
   11744:	40008000 	.word	0x40008000
   11748:	40008004 	.word	0x40008004
   1174c:	4000800c 	.word	0x4000800c
   11750:	4000b000 	.word	0x4000b000
   11754:	4001f000 	.word	0x4001f000
   11758:	4000b148 	.word	0x4000b148

0001175c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1175c:	4b01      	ldr	r3, [pc, #4]	; (11764 <radio_tmr_start_get+0x8>)
   1175e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   11762:	4770      	bx	lr
   11764:	4000b000 	.word	0x4000b000

00011768 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   11768:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1176a:	4805      	ldr	r0, [pc, #20]	; (11780 <radio_tmr_stop+0x18>)
   1176c:	4c05      	ldr	r4, [pc, #20]	; (11784 <radio_tmr_stop+0x1c>)
   1176e:	4906      	ldr	r1, [pc, #24]	; (11788 <radio_tmr_stop+0x20>)
   11770:	4a06      	ldr	r2, [pc, #24]	; (1178c <radio_tmr_stop+0x24>)
   11772:	2301      	movs	r3, #1
   11774:	6023      	str	r3, [r4, #0]
   11776:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   11778:	bc10      	pop	{r4}
   1177a:	600b      	str	r3, [r1, #0]
   1177c:	6013      	str	r3, [r2, #0]
   1177e:	4770      	bx	lr
   11780:	40008010 	.word	0x40008010
   11784:	40008004 	.word	0x40008004
   11788:	40009004 	.word	0x40009004
   1178c:	40009010 	.word	0x40009010

00011790 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   11790:	4904      	ldr	r1, [pc, #16]	; (117a4 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   11792:	4b05      	ldr	r3, [pc, #20]	; (117a8 <radio_tmr_hcto_configure+0x18>)
   11794:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   11798:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1179c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   117a0:	4770      	bx	lr
   117a2:	bf00      	nop
   117a4:	40008000 	.word	0x40008000
   117a8:	4001f000 	.word	0x4001f000

000117ac <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   117ac:	4b05      	ldr	r3, [pc, #20]	; (117c4 <radio_tmr_aa_capture+0x18>)
   117ae:	4806      	ldr	r0, [pc, #24]	; (117c8 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   117b0:	4906      	ldr	r1, [pc, #24]	; (117cc <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   117b2:	4a07      	ldr	r2, [pc, #28]	; (117d0 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   117b4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   117b8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   117bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   117c0:	4770      	bx	lr
   117c2:	bf00      	nop
   117c4:	4001f000 	.word	0x4001f000
   117c8:	40001100 	.word	0x40001100
   117cc:	40008040 	.word	0x40008040
   117d0:	04000040 	.word	0x04000040

000117d4 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   117d4:	4b01      	ldr	r3, [pc, #4]	; (117dc <radio_tmr_aa_get+0x8>)
   117d6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   117da:	4770      	bx	lr
   117dc:	40008000 	.word	0x40008000

000117e0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   117e0:	4b01      	ldr	r3, [pc, #4]	; (117e8 <radio_tmr_aa_save+0x8>)
   117e2:	6018      	str	r0, [r3, #0]
}
   117e4:	4770      	bx	lr
   117e6:	bf00      	nop
   117e8:	20001df4 	.word	0x20001df4

000117ec <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   117ec:	4b01      	ldr	r3, [pc, #4]	; (117f4 <radio_tmr_aa_restore+0x8>)
}
   117ee:	6818      	ldr	r0, [r3, #0]
   117f0:	4770      	bx	lr
   117f2:	bf00      	nop
   117f4:	20001df4 	.word	0x20001df4

000117f8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   117f8:	4b01      	ldr	r3, [pc, #4]	; (11800 <radio_tmr_ready_get+0x8>)
   117fa:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   117fe:	4770      	bx	lr
   11800:	40008000 	.word	0x40008000

00011804 <radio_tmr_end_capture>:
   11804:	4b02      	ldr	r3, [pc, #8]	; (11810 <radio_tmr_end_capture+0xc>)
   11806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1180a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1180e:	4770      	bx	lr
   11810:	4001f000 	.word	0x4001f000

00011814 <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   11814:	4b01      	ldr	r3, [pc, #4]	; (1181c <radio_tmr_end_get+0x8>)
   11816:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1181a:	4770      	bx	lr
   1181c:	40008000 	.word	0x40008000

00011820 <radio_tmr_tifs_base_get>:
   11820:	4b01      	ldr	r3, [pc, #4]	; (11828 <radio_tmr_tifs_base_get+0x8>)
   11822:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   11826:	4770      	bx	lr
   11828:	40008000 	.word	0x40008000

0001182c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
   1182c:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1182e:	4c14      	ldr	r4, [pc, #80]	; (11880 <radio_ccm_rx_pkt_set+0x54>)
   11830:	4f14      	ldr	r7, [pc, #80]	; (11884 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   11832:	4b15      	ldr	r3, [pc, #84]	; (11888 <radio_ccm_rx_pkt_set+0x5c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   11834:	4d15      	ldr	r5, [pc, #84]	; (1188c <radio_ccm_rx_pkt_set+0x60>)
   11836:	4e16      	ldr	r6, [pc, #88]	; (11890 <radio_ccm_rx_pkt_set+0x64>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   11838:	2902      	cmp	r1, #2
   1183a:	bf14      	ite	ne
   1183c:	4621      	movne	r1, r4
   1183e:	4639      	moveq	r1, r7
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   11840:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   11842:	2702      	movs	r7, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   11844:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   11848:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1184c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (u32_t)pkt;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   11850:	4f10      	ldr	r7, [pc, #64]	; (11894 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (u32_t)ccm;
   11852:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   11856:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   1185a:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   1185e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11862:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   11864:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   11868:	4628      	mov	r0, r5
	NRF_CCM->SHORTS = 0;
   1186a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1186e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   11872:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   11876:	f8c6 1504 	str.w	r1, [r6, #1284]	; 0x504
}
   1187a:	bcf0      	pop	{r4, r5, r6, r7}
   1187c:	601a      	str	r2, [r3, #0]
   1187e:	4770      	bx	lr
   11880:	01000001 	.word	0x01000001
   11884:	01010001 	.word	0x01010001
   11888:	4000f000 	.word	0x4000f000
   1188c:	20001ce8 	.word	0x20001ce8
   11890:	4001f000 	.word	0x4001f000
   11894:	20001ad4 	.word	0x20001ad4

00011898 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   11898:	b470      	push	{r4, r5, r6}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1189a:	4b10      	ldr	r3, [pc, #64]	; (118dc <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1189c:	4d10      	ldr	r5, [pc, #64]	; (118e0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1189e:	4e11      	ldr	r6, [pc, #68]	; (118e4 <radio_ccm_tx_pkt_set+0x4c>)
{
   118a0:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   118a2:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   118a4:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   118a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   118aa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   118ae:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   118b2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   118b6:	4e0c      	ldr	r6, [pc, #48]	; (118e8 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (u32_t)pkt;
   118b8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   118bc:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   118be:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   118c2:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   118c4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   118c8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   118cc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   118d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   118d4:	601c      	str	r4, [r3, #0]
}
   118d6:	bc70      	pop	{r4, r5, r6}
   118d8:	4770      	bx	lr
   118da:	bf00      	nop
   118dc:	4000f000 	.word	0x4000f000
   118e0:	20001ce8 	.word	0x20001ce8
   118e4:	01010000 	.word	0x01010000
   118e8:	20001ad4 	.word	0x20001ad4

000118ec <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   118ec:	4a0e      	ldr	r2, [pc, #56]	; (11928 <radio_ccm_is_done+0x3c>)
   118ee:	2302      	movs	r3, #2
   118f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

u32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   118f4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   118f8:	b933      	cbnz	r3, 11908 <radio_ccm_is_done+0x1c>
		__WFE();
   118fa:	bf20      	wfe
		__SEV();
   118fc:	bf40      	sev
		__WFE();
   118fe:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   11900:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   11904:	2b00      	cmp	r3, #0
   11906:	d0f8      	beq.n	118fa <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   11908:	4b07      	ldr	r3, [pc, #28]	; (11928 <radio_ccm_is_done+0x3c>)
   1190a:	4a08      	ldr	r2, [pc, #32]	; (1192c <radio_ccm_is_done+0x40>)
   1190c:	2002      	movs	r0, #2
   1190e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11912:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   11916:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1191a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1191e:	fab0 f080 	clz	r0, r0
   11922:	0940      	lsrs	r0, r0, #5
   11924:	4770      	bx	lr
   11926:	bf00      	nop
   11928:	4000f000 	.word	0x4000f000
   1192c:	e000e100 	.word	0xe000e100

00011930 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   11930:	4b03      	ldr	r3, [pc, #12]	; (11940 <radio_ccm_mic_is_valid+0x10>)
   11932:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   11936:	3800      	subs	r0, #0
   11938:	bf18      	it	ne
   1193a:	2001      	movne	r0, #1
   1193c:	4770      	bx	lr
   1193e:	bf00      	nop
   11940:	4000f000 	.word	0x4000f000

00011944 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   11944:	4b15      	ldr	r3, [pc, #84]	; (1199c <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   11946:	4a16      	ldr	r2, [pc, #88]	; (119a0 <radio_ar_configure+0x5c>)
{
   11948:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1194a:	2403      	movs	r4, #3
   1194c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   11950:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   11954:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   11958:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   1195c:	4d11      	ldr	r5, [pc, #68]	; (119a4 <radio_ar_configure+0x60>)
   1195e:	4c12      	ldr	r4, [pc, #72]	; (119a8 <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   11960:	3801      	subs	r0, #1
   11962:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   11966:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   11968:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   1196a:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1196e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   11972:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   11976:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1197a:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1197e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   11982:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   11986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1198a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1198e:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   11992:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   11996:	bc30      	pop	{r4, r5}
   11998:	4770      	bx	lr
   1199a:	bf00      	nop
   1199c:	4000f000 	.word	0x4000f000
   119a0:	40001000 	.word	0x40001000
   119a4:	20001ad0 	.word	0x20001ad0
   119a8:	4001f000 	.word	0x4001f000

000119ac <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   119ac:	4b01      	ldr	r3, [pc, #4]	; (119b4 <radio_ar_match_get+0x8>)
   119ae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   119b2:	4770      	bx	lr
   119b4:	4000f000 	.word	0x4000f000

000119b8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   119b8:	4903      	ldr	r1, [pc, #12]	; (119c8 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   119ba:	4a04      	ldr	r2, [pc, #16]	; (119cc <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   119bc:	2300      	movs	r3, #0
   119be:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   119c2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   119c6:	4770      	bx	lr
   119c8:	40001000 	.word	0x40001000
   119cc:	4000f000 	.word	0x4000f000

000119d0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   119d0:	4b08      	ldr	r3, [pc, #32]	; (119f4 <radio_ar_has_match+0x24>)
   119d2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   119d6:	b160      	cbz	r0, 119f2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   119d8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   119dc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   119e0:	b138      	cbz	r0, 119f2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   119e2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   119e6:	b120      	cbz	r0, 119f2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   119e8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   119ec:	fab0 f080 	clz	r0, r0
   119f0:	0940      	lsrs	r0, r0, #5
}
   119f2:	4770      	bx	lr
   119f4:	40001000 	.word	0x40001000

000119f8 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   119f8:	2902      	cmp	r1, #2
{
   119fa:	b510      	push	{r4, lr}
   119fc:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   119fe:	d00b      	beq.n	11a18 <mayfly_enable_cb+0x20>
   11a00:	4a0a      	ldr	r2, [pc, #40]	; (11a2c <mayfly_enable_cb+0x34>)
   11a02:	490b      	ldr	r1, [pc, #44]	; (11a30 <mayfly_enable_cb+0x38>)
   11a04:	480b      	ldr	r0, [pc, #44]	; (11a34 <mayfly_enable_cb+0x3c>)
   11a06:	2322      	movs	r3, #34	; 0x22
   11a08:	f002 f974 	bl	13cf4 <printk>
   11a0c:	4040      	eors	r0, r0
   11a0e:	f380 8811 	msr	BASEPRI, r0
   11a12:	f04f 0003 	mov.w	r0, #3
   11a16:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   11a18:	200b      	movs	r0, #11
	if (enable) {
   11a1a:	b11c      	cbz	r4, 11a24 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   11a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   11a20:	f7f2 ba26 	b.w	3e70 <arch_irq_enable>
}
   11a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   11a28:	f7f2 ba32 	b.w	3e90 <arch_irq_disable>
   11a2c:	00015f40 	.word	0x00015f40
   11a30:	00015f90 	.word	0x00015f90
   11a34:	0001525c 	.word	0x0001525c

00011a38 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   11a38:	b129      	cbz	r1, 11a46 <mayfly_is_enabled+0xe>
   11a3a:	3901      	subs	r1, #1
   11a3c:	2901      	cmp	r1, #1
   11a3e:	d805      	bhi.n	11a4c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
#endif /* CONFIG_BT_LL_SW_SPLIT */

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   11a40:	200b      	movs	r0, #11
   11a42:	f7f2 ba39 	b.w	3eb8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   11a46:	2018      	movs	r0, #24
   11a48:	f7f2 ba36 	b.w	3eb8 <arch_irq_is_enabled>
{
   11a4c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   11a4e:	4a07      	ldr	r2, [pc, #28]	; (11a6c <mayfly_is_enabled+0x34>)
   11a50:	4907      	ldr	r1, [pc, #28]	; (11a70 <mayfly_is_enabled+0x38>)
   11a52:	4808      	ldr	r0, [pc, #32]	; (11a74 <mayfly_is_enabled+0x3c>)
   11a54:	233c      	movs	r3, #60	; 0x3c
   11a56:	f002 f94d 	bl	13cf4 <printk>
   11a5a:	4040      	eors	r0, r0
   11a5c:	f380 8811 	msr	BASEPRI, r0
   11a60:	f04f 0003 	mov.w	r0, #3
   11a64:	df02      	svc	2
		break;
	}

	return 0;
}
   11a66:	2000      	movs	r0, #0
   11a68:	bd08      	pop	{r3, pc}
   11a6a:	bf00      	nop
   11a6c:	00015f40 	.word	0x00015f40
   11a70:	000152dc 	.word	0x000152dc
   11a74:	0001525c 	.word	0x0001525c

00011a78 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   11a78:	4288      	cmp	r0, r1
   11a7a:	d013      	beq.n	11aa4 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   11a7c:	b928      	cbnz	r0, 11a8a <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   11a7e:	1e48      	subs	r0, r1, #1
   11a80:	2801      	cmp	r0, #1
   11a82:	bf8c      	ite	hi
   11a84:	2000      	movhi	r0, #0
   11a86:	2001      	movls	r0, #1
   11a88:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   11a8a:	2801      	cmp	r0, #1
   11a8c:	d106      	bne.n	11a9c <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   11a8e:	b159      	cbz	r1, 11aa8 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   11a90:	f1a1 0002 	sub.w	r0, r1, #2
   11a94:	fab0 f080 	clz	r0, r0
   11a98:	0940      	lsrs	r0, r0, #5
   11a9a:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   11a9c:	2802      	cmp	r0, #2
   11a9e:	d004      	beq.n	11aaa <mayfly_prio_is_equal+0x32>
   11aa0:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   11aa2:	4770      	bx	lr
   11aa4:	2001      	movs	r0, #1
   11aa6:	4770      	bx	lr
#endif
#endif
	       0;
}
   11aa8:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   11aaa:	2901      	cmp	r1, #1
   11aac:	bf8c      	ite	hi
   11aae:	2000      	movhi	r0, #0
   11ab0:	2001      	movls	r0, #1
   11ab2:	4770      	bx	lr

00011ab4 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   11ab4:	2901      	cmp	r1, #1
{
   11ab6:	b508      	push	{r3, lr}
	switch (callee_id) {
   11ab8:	d00f      	beq.n	11ada <mayfly_pend+0x26>
   11aba:	2902      	cmp	r1, #2
   11abc:	d00d      	beq.n	11ada <mayfly_pend+0x26>
   11abe:	b191      	cbz	r1, 11ae6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   11ac0:	4a0c      	ldr	r2, [pc, #48]	; (11af4 <mayfly_pend+0x40>)
   11ac2:	490d      	ldr	r1, [pc, #52]	; (11af8 <mayfly_pend+0x44>)
   11ac4:	480d      	ldr	r0, [pc, #52]	; (11afc <mayfly_pend+0x48>)
   11ac6:	2371      	movs	r3, #113	; 0x71
   11ac8:	f002 f914 	bl	13cf4 <printk>
   11acc:	4040      	eors	r0, r0
   11ace:	f380 8811 	msr	BASEPRI, r0
   11ad2:	f04f 0003 	mov.w	r0, #3
   11ad6:	df02      	svc	2
		break;
	}
}
   11ad8:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11ada:	4b09      	ldr	r3, [pc, #36]	; (11b00 <mayfly_pend+0x4c>)
   11adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11ae0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   11ae4:	bd08      	pop	{r3, pc}
   11ae6:	4b06      	ldr	r3, [pc, #24]	; (11b00 <mayfly_pend+0x4c>)
   11ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   11aec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   11af0:	bd08      	pop	{r3, pc}
   11af2:	bf00      	nop
   11af4:	00015f40 	.word	0x00015f40
   11af8:	000152dc 	.word	0x000152dc
   11afc:	0001525c 	.word	0x0001525c
   11b00:	e000e100 	.word	0xe000e100

00011b04 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   11b04:	2803      	cmp	r0, #3
{
   11b06:	b510      	push	{r4, lr}
   11b08:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   11b0a:	d804      	bhi.n	11b16 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   11b0c:	4b11      	ldr	r3, [pc, #68]	; (11b54 <hal_ticker_instance0_caller_id_get+0x50>)
   11b0e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   11b10:	b18c      	cbz	r4, 11b36 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   11b12:	4620      	mov	r0, r4
   11b14:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   11b16:	4a10      	ldr	r2, [pc, #64]	; (11b58 <hal_ticker_instance0_caller_id_get+0x54>)
   11b18:	4910      	ldr	r1, [pc, #64]	; (11b5c <hal_ticker_instance0_caller_id_get+0x58>)
   11b1a:	4811      	ldr	r0, [pc, #68]	; (11b60 <hal_ticker_instance0_caller_id_get+0x5c>)
   11b1c:	232d      	movs	r3, #45	; 0x2d
   11b1e:	f002 f8e9 	bl	13cf4 <printk>
   11b22:	4040      	eors	r0, r0
   11b24:	f380 8811 	msr	BASEPRI, r0
   11b28:	f04f 0003 	mov.w	r0, #3
   11b2c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   11b2e:	4b09      	ldr	r3, [pc, #36]	; (11b54 <hal_ticker_instance0_caller_id_get+0x50>)
   11b30:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   11b32:	2c00      	cmp	r4, #0
   11b34:	d1ed      	bne.n	11b12 <hal_ticker_instance0_caller_id_get+0xe>
   11b36:	4a08      	ldr	r2, [pc, #32]	; (11b58 <hal_ticker_instance0_caller_id_get+0x54>)
   11b38:	490a      	ldr	r1, [pc, #40]	; (11b64 <hal_ticker_instance0_caller_id_get+0x60>)
   11b3a:	4809      	ldr	r0, [pc, #36]	; (11b60 <hal_ticker_instance0_caller_id_get+0x5c>)
   11b3c:	2330      	movs	r3, #48	; 0x30
   11b3e:	f002 f8d9 	bl	13cf4 <printk>
   11b42:	4040      	eors	r0, r0
   11b44:	f380 8811 	msr	BASEPRI, r0
   11b48:	f04f 0003 	mov.w	r0, #3
   11b4c:	df02      	svc	2
}
   11b4e:	4620      	mov	r0, r4
   11b50:	bd10      	pop	{r4, pc}
   11b52:	bf00      	nop
   11b54:	00016020 	.word	0x00016020
   11b58:	00015fa0 	.word	0x00015fa0
   11b5c:	00015ff0 	.word	0x00015ff0
   11b60:	0001525c 	.word	0x0001525c
   11b64:	00016010 	.word	0x00016010

00011b68 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   11b68:	3801      	subs	r0, #1
{
   11b6a:	b510      	push	{r4, lr}
   11b6c:	461c      	mov	r4, r3
   11b6e:	2804      	cmp	r0, #4
   11b70:	d855      	bhi.n	11c1e <hal_ticker_instance0_sched+0xb6>
   11b72:	e8df f000 	tbb	[pc, r0]
   11b76:	1a12      	.short	0x1a12
   11b78:	1e16      	.short	0x1e16
   11b7a:	03          	.byte	0x03
   11b7b:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   11b7c:	2904      	cmp	r1, #4
   11b7e:	d01e      	beq.n	11bbe <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   11b80:	23be      	movs	r3, #190	; 0xbe
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   11b82:	4a28      	ldr	r2, [pc, #160]	; (11c24 <hal_ticker_instance0_sched+0xbc>)
   11b84:	4928      	ldr	r1, [pc, #160]	; (11c28 <hal_ticker_instance0_sched+0xc0>)
   11b86:	4829      	ldr	r0, [pc, #164]	; (11c2c <hal_ticker_instance0_sched+0xc4>)
   11b88:	f002 f8b4 	bl	13cf4 <printk>
   11b8c:	4040      	eors	r0, r0
   11b8e:	f380 8811 	msr	BASEPRI, r0
   11b92:	f04f 0003 	mov.w	r0, #3
   11b96:	df02      	svc	2
		break;
	}
}
   11b98:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   11b9a:	2904      	cmp	r1, #4
   11b9c:	d01f      	beq.n	11bde <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   11b9e:	2351      	movs	r3, #81	; 0x51
   11ba0:	e7ef      	b.n	11b82 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   11ba2:	2904      	cmp	r1, #4
   11ba4:	d013      	beq.n	11bce <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   11ba6:	2380      	movs	r3, #128	; 0x80
   11ba8:	e7eb      	b.n	11b82 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   11baa:	2903      	cmp	r1, #3
   11bac:	d01f      	beq.n	11bee <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   11bae:	2369      	movs	r3, #105	; 0x69
   11bb0:	e7e7      	b.n	11b82 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   11bb2:	2903      	cmp	r1, #3
   11bb4:	d02b      	beq.n	11c0e <hal_ticker_instance0_sched+0xa6>
   11bb6:	2904      	cmp	r1, #4
   11bb8:	d021      	beq.n	11bfe <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   11bba:	23a6      	movs	r3, #166	; 0xa6
   11bbc:	e7e1      	b.n	11b82 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   11bbe:	4b1c      	ldr	r3, [pc, #112]	; (11c30 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   11bc0:	2102      	movs	r1, #2
			m.param = instance;
   11bc2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   11bc4:	2003      	movs	r0, #3
}
   11bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   11bca:	f7f2 be1f 	b.w	480c <mayfly_enqueue>
			m.param = instance;
   11bce:	4b19      	ldr	r3, [pc, #100]	; (11c34 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   11bd0:	2102      	movs	r1, #2
			m.param = instance;
   11bd2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   11bd4:	2001      	movs	r0, #1
}
   11bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   11bda:	f7f2 be17 	b.w	480c <mayfly_enqueue>
			m.param = instance;
   11bde:	4b16      	ldr	r3, [pc, #88]	; (11c38 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   11be0:	2102      	movs	r1, #2
			m.param = instance;
   11be2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   11be4:	2000      	movs	r0, #0
}
   11be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   11bea:	f7f2 be0f 	b.w	480c <mayfly_enqueue>
			m.param = instance;
   11bee:	4b13      	ldr	r3, [pc, #76]	; (11c3c <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   11bf0:	2101      	movs	r1, #1
			m.param = instance;
   11bf2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   11bf4:	4608      	mov	r0, r1
}
   11bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   11bfa:	f7f2 be07 	b.w	480c <mayfly_enqueue>
			m.param = instance;
   11bfe:	4b10      	ldr	r3, [pc, #64]	; (11c40 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   11c00:	2102      	movs	r1, #2
			m.param = instance;
   11c02:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   11c04:	4608      	mov	r0, r1
}
   11c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   11c0a:	f7f2 bdff 	b.w	480c <mayfly_enqueue>
			m.param = instance;
   11c0e:	4b0d      	ldr	r3, [pc, #52]	; (11c44 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   11c10:	2101      	movs	r1, #1
			m.param = instance;
   11c12:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   11c14:	2002      	movs	r0, #2
}
   11c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   11c1a:	f7f2 bdf7 	b.w	480c <mayfly_enqueue>
		LL_ASSERT(0);
   11c1e:	23c4      	movs	r3, #196	; 0xc4
   11c20:	e7af      	b.n	11b82 <hal_ticker_instance0_sched+0x1a>
   11c22:	bf00      	nop
   11c24:	00015fa0 	.word	0x00015fa0
   11c28:	000152dc 	.word	0x000152dc
   11c2c:	0001525c 	.word	0x0001525c
   11c30:	200003ec 	.word	0x200003ec
   11c34:	200003bc 	.word	0x200003bc
   11c38:	2000039c 	.word	0x2000039c
   11c3c:	200003ac 	.word	0x200003ac
   11c40:	200003dc 	.word	0x200003dc
   11c44:	200003cc 	.word	0x200003cc

00011c48 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
   11c48:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   11c4a:	2000      	movs	r0, #0
   11c4c:	f7ff ba1a 	b.w	11084 <cntr_cmp_set>

00011c50 <hci_vendor_read_static_addr>:
				 u8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   11c50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11c54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   11c58:	3201      	adds	r2, #1
   11c5a:	d008      	beq.n	11c6e <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   11c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11c60:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   11c64:	f013 0301 	ands.w	r3, r3, #1
   11c68:	d10f      	bne.n	11c8a <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   11c6a:	2000      	movs	r0, #0
   11c6c:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   11c6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   11c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11c76:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   11c78:	4293      	cmp	r3, r2
   11c7a:	d0f6      	beq.n	11c6a <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   11c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11c80:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   11c84:	f013 0301 	ands.w	r3, r3, #1
   11c88:	d0ef      	beq.n	11c6a <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   11c8a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   11c8e:	0c19      	lsrs	r1, r3, #16
{
   11c90:	b510      	push	{r4, lr}
	dst[0] = val;
   11c92:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   11c94:	0a0c      	lsrs	r4, r1, #8
   11c96:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   11c9a:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   11c9c:	70c4      	strb	r4, [r0, #3]
   11c9e:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   11ca0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   11ca4:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   11ca6:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   11caa:	f063 033f 	orn	r3, r3, #63	; 0x3f
   11cae:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   11cb0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   11cb4:	3301      	adds	r3, #1
   11cb6:	d035      	beq.n	11d24 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   11cb8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   11cbc:	3301      	adds	r3, #1
   11cbe:	d031      	beq.n	11d24 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   11cc0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   11cc4:	3301      	adds	r3, #1
   11cc6:	d02d      	beq.n	11d24 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   11cc8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   11ccc:	3301      	adds	r3, #1
   11cce:	d029      	beq.n	11d24 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   11cd0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   11cd4:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   11cd6:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   11cd8:	0a0c      	lsrs	r4, r1, #8
   11cda:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   11cde:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   11ce0:	7244      	strb	r4, [r0, #9]
   11ce2:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   11ce4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   11ce8:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   11cea:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   11cec:	0a0c      	lsrs	r4, r1, #8
   11cee:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   11cf2:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   11cf4:	7344      	strb	r4, [r0, #13]
   11cf6:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   11cf8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   11cfc:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   11cfe:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   11d00:	0a0c      	lsrs	r4, r1, #8
   11d02:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   11d06:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   11d08:	7444      	strb	r4, [r0, #17]
   11d0a:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   11d0c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   11d10:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   11d12:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   11d14:	0a11      	lsrs	r1, r2, #8
   11d16:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   11d1a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   11d1c:	7541      	strb	r1, [r0, #21]
   11d1e:	74c3      	strb	r3, [r0, #19]
		return 1;
   11d20:	2001      	movs	r0, #1
}
   11d22:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   11d24:	2210      	movs	r2, #16
   11d26:	2100      	movs	r1, #0
   11d28:	3006      	adds	r0, #6
   11d2a:	f002 fb21 	bl	14370 <memset>
		return 1;
   11d2e:	2001      	movs	r0, #1
}
   11d30:	bd10      	pop	{r4, pc}
   11d32:	bf00      	nop

00011d34 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(u8_t ir[16], u8_t er[16])
{
   11d34:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   11d36:	2210      	movs	r2, #16
{
   11d38:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   11d3a:	2100      	movs	r1, #0
   11d3c:	f002 fb18 	bl	14370 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   11d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11d44:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   11d48:	3201      	adds	r2, #1
   11d4a:	d034      	beq.n	11db6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   11d4c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   11d50:	3201      	adds	r2, #1
   11d52:	d030      	beq.n	11db6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   11d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   11d58:	3201      	adds	r2, #1
   11d5a:	d02c      	beq.n	11db6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   11d5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   11d60:	3201      	adds	r2, #1
   11d62:	d028      	beq.n	11db6 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   11d64:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   11d68:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   11d6a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   11d6c:	0a08      	lsrs	r0, r1, #8
   11d6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   11d72:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   11d74:	70e0      	strb	r0, [r4, #3]
   11d76:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   11d78:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   11d7c:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   11d7e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   11d80:	0a08      	lsrs	r0, r1, #8
   11d82:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   11d86:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   11d88:	71e0      	strb	r0, [r4, #7]
   11d8a:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   11d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   11d90:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   11d92:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   11d94:	0a08      	lsrs	r0, r1, #8
   11d96:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   11d9a:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   11d9c:	7262      	strb	r2, [r4, #9]
   11d9e:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   11da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   11da4:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   11da6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   11da8:	0a11      	lsrs	r1, r2, #8
   11daa:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   11dae:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   11db0:	73e1      	strb	r1, [r4, #15]
   11db2:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   11db4:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   11db6:	4620      	mov	r0, r4
   11db8:	2210      	movs	r2, #16
}
   11dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   11dbe:	2100      	movs	r1, #0
   11dc0:	f002 bad6 	b.w	14370 <memset>

00011dc4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11dc4:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   11dc6:	4a05      	ldr	r2, [pc, #20]	; (11ddc <net_buf_id+0x18>)
   11dc8:	2128      	movs	r1, #40	; 0x28
   11dca:	fb01 2303 	mla	r3, r1, r3, r2
   11dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11dd0:	1ac0      	subs	r0, r0, r3
}
   11dd2:	4b03      	ldr	r3, [pc, #12]	; (11de0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   11dd4:	10c0      	asrs	r0, r0, #3
}
   11dd6:	4358      	muls	r0, r3
   11dd8:	4770      	bx	lr
   11dda:	bf00      	nop
   11ddc:	200004e8 	.word	0x200004e8
   11de0:	aaaaaaab 	.word	0xaaaaaaab

00011de4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static u8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   11de4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11de6:	4a0a      	ldr	r2, [pc, #40]	; (11e10 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11de8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11dea:	2428      	movs	r4, #40	; 0x28
   11dec:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   11df0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11df2:	6a1b      	ldr	r3, [r3, #32]
   11df4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   11df6:	6823      	ldr	r3, [r4, #0]
   11df8:	429a      	cmp	r2, r3
   11dfa:	bf94      	ite	ls
   11dfc:	600a      	strls	r2, [r1, #0]
   11dfe:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   11e00:	f7ff ffe0 	bl	11dc4 <net_buf_id>
   11e04:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   11e08:	fb02 3000 	mla	r0, r2, r0, r3
   11e0c:	bd10      	pop	{r4, pc}
   11e0e:	bf00      	nop
   11e10:	200004e8 	.word	0x200004e8

00011e14 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   11e14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11e18:	4605      	mov	r5, r0
   11e1a:	9101      	str	r1, [sp, #4]
	u64_t end = z_timeout_end_calc(timeout);
   11e1c:	4610      	mov	r0, r2
   11e1e:	4619      	mov	r1, r3
{
   11e20:	4616      	mov	r6, r2
   11e22:	461f      	mov	r7, r3
	u64_t end = z_timeout_end_calc(timeout);
   11e24:	f002 ff98 	bl	14d58 <z_timeout_end_calc>
   11e28:	4680      	mov	r8, r0
   11e2a:	4689      	mov	r9, r1
	__asm__ volatile(
   11e2c:	f04f 0320 	mov.w	r3, #32
   11e30:	f3ef 8a11 	mrs	sl, BASEPRI
   11e34:	f383 8811 	msr	BASEPRI, r3
   11e38:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   11e3c:	8b6b      	ldrh	r3, [r5, #26]
   11e3e:	2b00      	cmp	r3, #0
   11e40:	d054      	beq.n	11eec <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   11e42:	8b2a      	ldrh	r2, [r5, #24]
   11e44:	429a      	cmp	r2, r3
   11e46:	d93d      	bls.n	11ec4 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   11e48:	2200      	movs	r2, #0
   11e4a:	2300      	movs	r3, #0
   11e4c:	4628      	mov	r0, r5
   11e4e:	f001 f8a9 	bl	12fa4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   11e52:	4604      	mov	r4, r0
   11e54:	2800      	cmp	r0, #0
   11e56:	d035      	beq.n	11ec4 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   11e58:	f38a 8811 	msr	BASEPRI, sl
   11e5c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   11e60:	9b01      	ldr	r3, [sp, #4]
   11e62:	2b00      	cmp	r3, #0
   11e64:	d052      	beq.n	11f0c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   11e66:	ea56 0307 	orrs.w	r3, r6, r7
   11e6a:	d010      	beq.n	11e8e <net_buf_alloc_len+0x7a>
   11e6c:	1c7b      	adds	r3, r7, #1
   11e6e:	bf08      	it	eq
   11e70:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   11e74:	d00b      	beq.n	11e8e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			s64_t remaining = end - z_tick_get();
   11e76:	f001 fe5f 	bl	13b38 <z_tick_get>
   11e7a:	ebb8 0600 	subs.w	r6, r8, r0
   11e7e:	eb69 0701 	sbc.w	r7, r9, r1
   11e82:	2e00      	cmp	r6, #0
   11e84:	f177 0300 	sbcs.w	r3, r7, #0
   11e88:	bfbc      	itt	lt
   11e8a:	2600      	movlt	r6, #0
   11e8c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11e8e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   11e90:	f8df 8090 	ldr.w	r8, [pc, #144]	; 11f24 <net_buf_alloc_len+0x110>
   11e94:	2228      	movs	r2, #40	; 0x28
   11e96:	fb02 8303 	mla	r3, r2, r3, r8
   11e9a:	a901      	add	r1, sp, #4
   11e9c:	6a1b      	ldr	r3, [r3, #32]
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	4632      	mov	r2, r6
   11ea2:	681d      	ldr	r5, [r3, #0]
   11ea4:	4620      	mov	r0, r4
   11ea6:	463b      	mov	r3, r7
   11ea8:	47a8      	blx	r5
   11eaa:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   11eac:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   11eae:	bb70      	cbnz	r0, 11f0e <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   11eb0:	79a0      	ldrb	r0, [r4, #6]
   11eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11eb6:	4621      	mov	r1, r4
   11eb8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   11ebc:	f002 fd23 	bl	14906 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   11ec0:	462c      	mov	r4, r5
}
   11ec2:	e01f      	b.n	11f04 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   11ec4:	8b68      	ldrh	r0, [r5, #26]
   11ec6:	1e43      	subs	r3, r0, #1
   11ec8:	836b      	strh	r3, [r5, #26]
   11eca:	f38a 8811 	msr	BASEPRI, sl
   11ece:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   11ed2:	8b2c      	ldrh	r4, [r5, #24]
   11ed4:	1a24      	subs	r4, r4, r0
   11ed6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   11ed8:	2318      	movs	r3, #24
   11eda:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   11ede:	4811      	ldr	r0, [pc, #68]	; (11f24 <net_buf_alloc_len+0x110>)
   11ee0:	4b11      	ldr	r3, [pc, #68]	; (11f28 <net_buf_alloc_len+0x114>)
   11ee2:	1a2d      	subs	r5, r5, r0
   11ee4:	10ed      	asrs	r5, r5, #3
   11ee6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   11ee8:	71a5      	strb	r5, [r4, #6]
		goto success;
   11eea:	e7b9      	b.n	11e60 <net_buf_alloc_len+0x4c>
   11eec:	f38a 8811 	msr	BASEPRI, sl
   11ef0:	f3bf 8f6f 	isb	sy
   11ef4:	4632      	mov	r2, r6
   11ef6:	463b      	mov	r3, r7
   11ef8:	4628      	mov	r0, r5
   11efa:	f001 f853 	bl	12fa4 <z_impl_k_queue_get>
	if (!buf) {
   11efe:	4604      	mov	r4, r0
   11f00:	2800      	cmp	r0, #0
   11f02:	d1ad      	bne.n	11e60 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   11f04:	4620      	mov	r0, r4
   11f06:	b002      	add	sp, #8
   11f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   11f0c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   11f0e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   11f10:	2201      	movs	r2, #1
	buf->frags = NULL;
   11f12:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   11f14:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   11f16:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   11f18:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   11f1a:	6923      	ldr	r3, [r4, #16]
   11f1c:	81e2      	strh	r2, [r4, #14]
   11f1e:	60a3      	str	r3, [r4, #8]
	return buf;
   11f20:	e7f0      	b.n	11f04 <net_buf_alloc_len+0xf0>
   11f22:	bf00      	nop
   11f24:	200004e8 	.word	0x200004e8
   11f28:	cccccccd 	.word	0xcccccccd

00011f2c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   11f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f30:	4d17      	ldr	r5, [pc, #92]	; (11f90 <net_buf_unref+0x64>)
   11f32:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   11f34:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   11f36:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   11f38:	b90c      	cbnz	r4, 11f3e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   11f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   11f3e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   11f40:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   11f44:	3b01      	subs	r3, #1
   11f46:	b2db      	uxtb	r3, r3
   11f48:	7123      	strb	r3, [r4, #4]
   11f4a:	2b00      	cmp	r3, #0
   11f4c:	d1f5      	bne.n	11f3a <net_buf_unref+0xe>
		if (buf->__buf) {
   11f4e:	6921      	ldr	r1, [r4, #16]
   11f50:	b159      	cbz	r1, 11f6a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   11f52:	7963      	ldrb	r3, [r4, #5]
   11f54:	079b      	lsls	r3, r3, #30
   11f56:	d407      	bmi.n	11f68 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   11f58:	79a3      	ldrb	r3, [r4, #6]
   11f5a:	fb07 5303 	mla	r3, r7, r3, r5
   11f5e:	4620      	mov	r0, r4
   11f60:	6a1b      	ldr	r3, [r3, #32]
   11f62:	681b      	ldr	r3, [r3, #0]
   11f64:	689b      	ldr	r3, [r3, #8]
   11f66:	4798      	blx	r3
			buf->__buf = NULL;
   11f68:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   11f6a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   11f6c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   11f6e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   11f72:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   11f74:	69db      	ldr	r3, [r3, #28]
   11f76:	b11b      	cbz	r3, 11f80 <net_buf_unref+0x54>
			pool->destroy(buf);
   11f78:	4620      	mov	r0, r4
   11f7a:	4798      	blx	r3
{
   11f7c:	4644      	mov	r4, r8
   11f7e:	e7db      	b.n	11f38 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   11f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11f84:	4621      	mov	r1, r4
   11f86:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   11f8a:	f002 fcbc 	bl	14906 <k_queue_prepend>
}
   11f8e:	e7f5      	b.n	11f7c <net_buf_unref+0x50>
   11f90:	200004e8 	.word	0x200004e8

00011f94 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   11f94:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   11f96:	4b09      	ldr	r3, [pc, #36]	; (11fbc <gpio_nrfx_init+0x28>)
   11f98:	781a      	ldrb	r2, [r3, #0]
   11f9a:	b96a      	cbnz	r2, 11fb8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   11f9c:	2101      	movs	r1, #1
   11f9e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   11fa0:	2006      	movs	r0, #6
   11fa2:	2105      	movs	r1, #5
   11fa4:	f7f1 ff96 	bl	3ed4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   11fa8:	2006      	movs	r0, #6
   11faa:	f7f1 ff61 	bl	3e70 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   11fae:	4b04      	ldr	r3, [pc, #16]	; (11fc0 <gpio_nrfx_init+0x2c>)
   11fb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11fb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   11fb8:	2000      	movs	r0, #0
   11fba:	bd08      	pop	{r3, pc}
   11fbc:	20002071 	.word	0x20002071
   11fc0:	40006000 	.word	0x40006000

00011fc4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   11fc4:	4b2b      	ldr	r3, [pc, #172]	; (12074 <gpio_nrfx_config+0xb0>)
{
   11fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11fc8:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   11fca:	482b      	ldr	r0, [pc, #172]	; (12078 <gpio_nrfx_config+0xb4>)
   11fcc:	4013      	ands	r3, r2
   11fce:	4283      	cmp	r3, r0
   11fd0:	d040      	beq.n	12054 <gpio_nrfx_config+0x90>
   11fd2:	d80d      	bhi.n	11ff0 <gpio_nrfx_config+0x2c>
   11fd4:	2b06      	cmp	r3, #6
   11fd6:	d015      	beq.n	12004 <gpio_nrfx_config+0x40>
   11fd8:	d805      	bhi.n	11fe6 <gpio_nrfx_config+0x22>
   11fda:	b19b      	cbz	r3, 12004 <gpio_nrfx_config+0x40>
   11fdc:	2b02      	cmp	r3, #2
   11fde:	d03b      	beq.n	12058 <gpio_nrfx_config+0x94>
   11fe0:	f06f 0015 	mvn.w	r0, #21
   11fe4:	e035      	b.n	12052 <gpio_nrfx_config+0x8e>
   11fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   11fea:	d1f9      	bne.n	11fe0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   11fec:	2301      	movs	r3, #1
   11fee:	e009      	b.n	12004 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   11ff0:	4822      	ldr	r0, [pc, #136]	; (1207c <gpio_nrfx_config+0xb8>)
   11ff2:	4283      	cmp	r3, r0
   11ff4:	d032      	beq.n	1205c <gpio_nrfx_config+0x98>
   11ff6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   11ffa:	d031      	beq.n	12060 <gpio_nrfx_config+0x9c>
   11ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   12000:	d1ee      	bne.n	11fe0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   12002:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   12004:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   12006:	bf54      	ite	pl
   12008:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1200c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1200e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   12012:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   12014:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   12018:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1201c:	d507      	bpl.n	1202e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1201e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12022:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   12024:	d01e      	beq.n	12064 <gpio_nrfx_config+0xa0>
			nrf_gpio_port_out_set(reg, BIT(pin));
   12026:	2201      	movs	r2, #1
   12028:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1202a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1202e:	7a32      	ldrb	r2, [r6, #8]
   12030:	f001 011f 	and.w	r1, r1, #31
   12034:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   12038:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
   1203c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12040:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   12044:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   12048:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1204c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   12050:	2000      	movs	r0, #0
}
   12052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   12054:	2307      	movs	r3, #7
   12056:	e7d5      	b.n	12004 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   12058:	2304      	movs	r3, #4
   1205a:	e7d3      	b.n	12004 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1205c:	2305      	movs	r3, #5
   1205e:	e7d1      	b.n	12004 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   12060:	2303      	movs	r3, #3
   12062:	e7cf      	b.n	12004 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   12064:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   12066:	bf42      	ittt	mi
   12068:	2201      	movmi	r2, #1
   1206a:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1206c:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   12070:	e7dd      	b.n	1202e <gpio_nrfx_config+0x6a>
   12072:	bf00      	nop
   12074:	00f00006 	.word	0x00f00006
   12078:	00100006 	.word	0x00100006
   1207c:	00400002 	.word	0x00400002

00012080 <gpiote_pin_int_cfg>:
{
   12080:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12082:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   12084:	4c4f      	ldr	r4, [pc, #316]	; (121c4 <gpiote_pin_int_cfg+0x144>)
   12086:	7a1a      	ldrb	r2, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   12088:	68c5      	ldr	r5, [r0, #12]
   1208a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1208e:	f001 031f 	and.w	r3, r1, #31
   12092:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   12096:	b2c0      	uxtb	r0, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12098:	2200      	movs	r2, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1209a:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   1209e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   120a2:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   120a6:	42b3      	cmp	r3, r6
   120a8:	d172      	bne.n	12190 <gpiote_pin_int_cfg+0x110>
		    && (intenset & BIT(i))) {
   120aa:	fa20 f602 	lsr.w	r6, r0, r2
   120ae:	07f6      	lsls	r6, r6, #31
   120b0:	d56e      	bpl.n	12190 <gpiote_pin_int_cfg+0x110>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   120b2:	0090      	lsls	r0, r2, #2
   120b4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   120b8:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
   120bc:	f8d0 6510 	ldr.w	r6, [r0, #1296]	; 0x510
   120c0:	f026 0601 	bic.w	r6, r6, #1
   120c4:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   120c8:	2001      	movs	r0, #1
   120ca:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   120ce:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   120d2:	009c      	lsls	r4, r3, #2
   120d4:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   120d8:	68e8      	ldr	r0, [r5, #12]
   120da:	f8d4 2700 	ldr.w	r2, [r4, #1792]	; 0x700
   120de:	40c8      	lsrs	r0, r1
   120e0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   120e4:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   120e8:	f8c4 2700 	str.w	r2, [r4, #1792]	; 0x700
   120ec:	d04e      	beq.n	1218c <gpiote_pin_int_cfg+0x10c>
   120ee:	6928      	ldr	r0, [r5, #16]
   120f0:	40c8      	lsrs	r0, r1
   120f2:	f010 0001 	ands.w	r0, r0, #1
   120f6:	d049      	beq.n	1218c <gpiote_pin_int_cfg+0x10c>
		if (data->trig_edge & BIT(pin)) {
   120f8:	69a8      	ldr	r0, [r5, #24]
   120fa:	40c8      	lsrs	r0, r1
   120fc:	f010 0001 	ands.w	r0, r0, #1
   12100:	d050      	beq.n	121a4 <gpiote_pin_int_cfg+0x124>
			if (data->double_edge & BIT(pin)) {
   12102:	69ea      	ldr	r2, [r5, #28]
   12104:	40ca      	lsrs	r2, r1
   12106:	07d2      	lsls	r2, r2, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   12108:	bf58      	it	pl
   1210a:	696a      	ldrpl	r2, [r5, #20]
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1210c:	4d2d      	ldr	r5, [pc, #180]	; (121c4 <gpiote_pin_int_cfg+0x144>)
   1210e:	bf5f      	itttt	pl
   12110:	40ca      	lsrpl	r2, r1
   12112:	f002 0201 	andpl.w	r2, r2, #1
   12116:	f1c2 0202 	rsbpl	r2, r2, #2
   1211a:	b2d2      	uxtbpl	r2, r2
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1211c:	bf48      	it	mi
   1211e:	2203      	movmi	r2, #3
   12120:	2400      	movs	r4, #0
   12122:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   12126:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   1212a:	f010 0003 	ands.w	r0, r0, #3
   1212e:	d133      	bne.n	12198 <gpiote_pin_int_cfg+0x118>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12130:	00a1      	lsls	r1, r4, #2
   12132:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   12136:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1213a:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1213c:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12140:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   12144:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12148:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
   1214c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12150:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   12154:	009b      	lsls	r3, r3, #2
   12156:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1215a:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1215c:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   12160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12164:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12168:	4332      	orrs	r2, r6
   1216a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1216e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   12170:	681b      	ldr	r3, [r3, #0]
   12172:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12174:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   12176:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   1217a:	f043 0301 	orr.w	r3, r3, #1
   1217e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   12182:	2301      	movs	r3, #1
   12184:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
   12188:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
   1218c:	b002      	add	sp, #8
   1218e:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12190:	3201      	adds	r2, #1
   12192:	2a08      	cmp	r2, #8
   12194:	d181      	bne.n	1209a <gpiote_pin_int_cfg+0x1a>
   12196:	e79c      	b.n	120d2 <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   12198:	3401      	adds	r4, #1
   1219a:	2c08      	cmp	r4, #8
   1219c:	d1c1      	bne.n	12122 <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   1219e:	f06f 0012 	mvn.w	r0, #18
   121a2:	e7f3      	b.n	1218c <gpiote_pin_int_cfg+0x10c>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   121a4:	696a      	ldr	r2, [r5, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   121a6:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
   121aa:	40ca      	lsrs	r2, r1
   121ac:	f002 0201 	and.w	r2, r2, #1
   121b0:	f1c2 0203 	rsb	r2, r2, #3
   121b4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   121b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   121bc:	f8c4 2700 	str.w	r2, [r4, #1792]	; 0x700
}
   121c0:	e7e4      	b.n	1218c <gpiote_pin_int_cfg+0x10c>
   121c2:	bf00      	nop
   121c4:	40006000 	.word	0x40006000

000121c8 <gpiote_event_handler>:
{
   121c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   121cc:	4953      	ldr	r1, [pc, #332]	; (1231c <gpiote_event_handler+0x154>)
   121ce:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   121d0:	2d00      	cmp	r5, #0
   121d2:	d066      	beq.n	122a2 <gpiote_event_handler+0xda>
	struct gpio_nrfx_data *data = get_port_data(port);
   121d4:	4b52      	ldr	r3, [pc, #328]	; (12320 <gpiote_event_handler+0x158>)
   121d6:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   121d8:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   121dc:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   121e0:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   121e2:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   121e6:	4320      	orrs	r0, r4
   121e8:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   121ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   121f0:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   121f2:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   121f6:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   121f8:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
   121fc:	2001      	movs	r0, #1
	u32_t pin = 0U;
   121fe:	2600      	movs	r6, #0
	while (level_pins) {
   12200:	2b00      	cmp	r3, #0
   12202:	d138      	bne.n	12276 <gpiote_event_handler+0xae>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12204:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   12206:	680b      	ldr	r3, [r1, #0]
   12208:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1220a:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   1220c:	4845      	ldr	r0, [pc, #276]	; (12324 <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1220e:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   12210:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12212:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   12214:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   12218:	fa06 f103 	lsl.w	r1, r6, r3
   1221c:	4211      	tst	r1, r2
   1221e:	d013      	beq.n	12248 <gpiote_event_handler+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12220:	009a      	lsls	r2, r3, #2
   12222:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   12226:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1222a:	6811      	ldr	r1, [r2, #0]
   1222c:	b161      	cbz	r1, 12248 <gpiote_event_handler+0x80>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1222e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   12232:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12236:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   12238:	6812      	ldr	r2, [r2, #0]
   1223a:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1223c:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   12240:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
   12244:	9a01      	ldr	r2, [sp, #4]
   12246:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   12248:	3301      	adds	r3, #1
   1224a:	2b08      	cmp	r3, #8
   1224c:	d1e2      	bne.n	12214 <gpiote_event_handler+0x4c>
	if (fired_triggers[0]) {
   1224e:	bb54      	cbnz	r4, 122a6 <gpiote_event_handler+0xde>
	if (port_event) {
   12250:	b175      	cbz	r5, 12270 <gpiote_event_handler+0xa8>
	const struct gpio_nrfx_data *data = get_port_data(port);
   12252:	4b33      	ldr	r3, [pc, #204]	; (12320 <gpiote_event_handler+0x158>)
   12254:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   12256:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   12258:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   1225c:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1225e:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   12262:	430a      	orrs	r2, r1
   12264:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
   12268:	2401      	movs	r4, #1
	u32_t pin = 0U;
   1226a:	2500      	movs	r5, #0
	while (level_pins) {
   1226c:	2b00      	cmp	r3, #0
   1226e:	d137      	bne.n	122e0 <gpiote_event_handler+0x118>
}
   12270:	b002      	add	sp, #8
   12272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   12276:	4203      	tst	r3, r0
   12278:	d010      	beq.n	1229c <gpiote_event_handler+0xd4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1227a:	f89c 7008 	ldrb.w	r7, [ip, #8]
   1227e:	f006 021f 	and.w	r2, r6, #31
   12282:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   12286:	0092      	lsls	r2, r2, #2
   12288:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
   1228c:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12290:	f8d2 7700 	ldr.w	r7, [r2, #1792]	; 0x700
   12294:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12298:	f8c2 7700 	str.w	r7, [r2, #1792]	; 0x700
		++pin;
   1229c:	3601      	adds	r6, #1
		bit <<= 1;
   1229e:	0040      	lsls	r0, r0, #1
   122a0:	e7ae      	b.n	12200 <gpiote_event_handler+0x38>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   122a2:	462c      	mov	r4, r5
   122a4:	e7b2      	b.n	1220c <gpiote_event_handler+0x44>
	struct gpio_nrfx_data *data = get_port_data(port);
   122a6:	4f1e      	ldr	r7, [pc, #120]	; (12320 <gpiote_event_handler+0x158>)
   122a8:	f8d7 800c 	ldr.w	r8, [r7, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   122ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
   122b0:	2900      	cmp	r1, #0
   122b2:	d0cd      	beq.n	12250 <gpiote_event_handler+0x88>
	return node->next;
   122b4:	680e      	ldr	r6, [r1, #0]
   122b6:	2e00      	cmp	r6, #0
   122b8:	bf38      	it	cc
   122ba:	2600      	movcc	r6, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   122bc:	688a      	ldr	r2, [r1, #8]
   122be:	f8d8 3010 	ldr.w	r3, [r8, #16]
   122c2:	4022      	ands	r2, r4
   122c4:	421a      	tst	r2, r3
   122c6:	d002      	beq.n	122ce <gpiote_event_handler+0x106>
			cb->handler(port, cb, cb->pin_mask & pins);
   122c8:	684b      	ldr	r3, [r1, #4]
   122ca:	4638      	mov	r0, r7
   122cc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   122ce:	2e00      	cmp	r6, #0
   122d0:	d0be      	beq.n	12250 <gpiote_event_handler+0x88>
   122d2:	6833      	ldr	r3, [r6, #0]
   122d4:	2b00      	cmp	r3, #0
   122d6:	bf38      	it	cc
   122d8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   122da:	4631      	mov	r1, r6
   122dc:	461e      	mov	r6, r3
   122de:	e7ed      	b.n	122bc <gpiote_event_handler+0xf4>
		if (level_pins & bit) {
   122e0:	421c      	tst	r4, r3
   122e2:	d017      	beq.n	12314 <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   122e4:	7a31      	ldrb	r1, [r6, #8]
   122e6:	f005 021f 	and.w	r2, r5, #31
   122ea:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   122ee:	0092      	lsls	r2, r2, #2
	if ((BIT(pin) & data->int_active_level) != 0U) {
   122f0:	6941      	ldr	r1, [r0, #20]
   122f2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
   122f6:	40e9      	lsrs	r1, r5
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   122f8:	f8d2 7700 	ldr.w	r7, [r2, #1792]	; 0x700
   122fc:	f001 0101 	and.w	r1, r1, #1
   12300:	f1c1 0103 	rsb	r1, r1, #3
   12304:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12308:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   1230c:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
			level_pins &= ~bit;
   12310:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   12314:	3501      	adds	r5, #1
		bit <<= 1;
   12316:	0064      	lsls	r4, r4, #1
   12318:	e7a8      	b.n	1226c <gpiote_event_handler+0xa4>
   1231a:	bf00      	nop
   1231c:	4000617c 	.word	0x4000617c
   12320:	20000454 	.word	0x20000454
   12324:	40006000 	.word	0x40006000

00012328 <event_txdrdy_check>:
#endif
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12328:	4b05      	ldr	r3, [pc, #20]	; (12340 <event_txdrdy_check+0x18>)
   1232a:	681b      	ldr	r3, [r3, #0]

static bool event_txdrdy_check(void)
{
	return (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_TXDRDY)
#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
		|| uart_sw_event_txdrdy
   1232c:	b92b      	cbnz	r3, 1233a <event_txdrdy_check+0x12>
   1232e:	4b05      	ldr	r3, [pc, #20]	; (12344 <event_txdrdy_check+0x1c>)
   12330:	7818      	ldrb	r0, [r3, #0]
   12332:	3800      	subs	r0, #0
   12334:	bf18      	it	ne
   12336:	2001      	movne	r0, #1
   12338:	4770      	bx	lr
   1233a:	2001      	movs	r0, #1
#endif
	       );
}
   1233c:	4770      	bx	lr
   1233e:	bf00      	nop
   12340:	4000211c 	.word	0x4000211c
   12344:	20002072 	.word	0x20002072

00012348 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12348:	4b02      	ldr	r3, [pc, #8]	; (12354 <uart_nrfx_err_check+0xc>)
   1234a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1234e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   12352:	4770      	bx	lr
   12354:	40002000 	.word	0x40002000

00012358 <uart_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   12358:	4b02      	ldr	r3, [pc, #8]	; (12364 <uart_nrfx_irq_rx_enable+0xc>)
   1235a:	2204      	movs	r2, #4
   1235c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven receiver enabling function */
static void uart_nrfx_irq_rx_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   12360:	4770      	bx	lr
   12362:	bf00      	nop
   12364:	40002000 	.word	0x40002000

00012368 <uart_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   12368:	4b02      	ldr	r3, [pc, #8]	; (12374 <uart_nrfx_irq_rx_disable+0xc>)
   1236a:	2204      	movs	r2, #4
   1236c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven receiver disabling function */
static void uart_nrfx_irq_rx_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_RXDRDY);
}
   12370:	4770      	bx	lr
   12372:	bf00      	nop
   12374:	40002000 	.word	0x40002000

00012378 <uart_nrfx_irq_rx_ready>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12378:	4b02      	ldr	r3, [pc, #8]	; (12384 <uart_nrfx_irq_rx_ready+0xc>)
   1237a:	6818      	ldr	r0, [r3, #0]

/** Interrupt driven receiver ready function */
static int uart_nrfx_irq_rx_ready(struct device *dev)
{
	return nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY);
}
   1237c:	3800      	subs	r0, #0
   1237e:	bf18      	it	ne
   12380:	2001      	movne	r0, #1
   12382:	4770      	bx	lr
   12384:	40002108 	.word	0x40002108

00012388 <uart_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   12388:	4b02      	ldr	r3, [pc, #8]	; (12394 <uart_nrfx_irq_err_enable+0xc>)
   1238a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1238e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

/** Interrupt driven error enabling function */
static void uart_nrfx_irq_err_enable(struct device *dev)
{
	nrf_uart_int_enable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   12392:	4770      	bx	lr
   12394:	40002000 	.word	0x40002000

00012398 <uart_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   12398:	4b02      	ldr	r3, [pc, #8]	; (123a4 <uart_nrfx_irq_err_disable+0xc>)
   1239a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1239e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

/** Interrupt driven error disabling function */
static void uart_nrfx_irq_err_disable(struct device *dev)
{
	nrf_uart_int_disable(uart0_addr, NRF_UART_INT_MASK_ERROR);
}
   123a2:	4770      	bx	lr
   123a4:	40002000 	.word	0x40002000

000123a8 <uart_nrfx_irq_callback_set>:
static void uart_nrfx_irq_callback_set(struct device *dev,
				       uart_irq_callback_user_data_t cb,
				       void *cb_data)
{
	(void)dev;
	irq_callback = cb;
   123a8:	4b02      	ldr	r3, [pc, #8]	; (123b4 <uart_nrfx_irq_callback_set+0xc>)
   123aa:	6019      	str	r1, [r3, #0]
	irq_cb_data = cb_data;
   123ac:	4b02      	ldr	r3, [pc, #8]	; (123b8 <uart_nrfx_irq_callback_set+0x10>)
   123ae:	601a      	str	r2, [r3, #0]
}
   123b0:	4770      	bx	lr
   123b2:	bf00      	nop
   123b4:	20001e48 	.word	0x20001e48
   123b8:	20001e4c 	.word	0x20001e4c

000123bc <uart_nrfx_irq_tx_disable>:
   123bc:	4b03      	ldr	r3, [pc, #12]	; (123cc <uart_nrfx_irq_tx_disable+0x10>)
   123be:	2280      	movs	r2, #128	; 0x80
   123c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->TXD = txd;
}

NRF_STATIC_INLINE void nrf_uart_task_trigger(NRF_UART_Type * p_reg, nrf_uart_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   123c4:	2201      	movs	r2, #1
   123c6:	60da      	str	r2, [r3, #12]
	device_busy_clear(dev);
   123c8:	f002 b97d 	b.w	146c6 <device_busy_clear>
   123cc:	40002000 	.word	0x40002000

000123d0 <uart_nrfx_irq_tx_enable>:
{
   123d0:	b508      	push	{r3, lr}
	device_busy_set(dev);
   123d2:	f002 f977 	bl	146c4 <device_busy_set>
   123d6:	4b0d      	ldr	r3, [pc, #52]	; (1240c <uart_nrfx_irq_tx_enable+0x3c>)
   123d8:	2201      	movs	r2, #1
   123da:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   123dc:	2280      	movs	r2, #128	; 0x80
   123de:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	__asm__ volatile(
   123e2:	f04f 0220 	mov.w	r2, #32
   123e6:	f3ef 8311 	mrs	r3, BASEPRI
   123ea:	f382 8811 	msr	BASEPRI, r2
   123ee:	f3bf 8f6f 	isb	sy
	if (uart_sw_event_txdrdy) {
   123f2:	4a07      	ldr	r2, [pc, #28]	; (12410 <uart_nrfx_irq_tx_enable+0x40>)
   123f4:	7812      	ldrb	r2, [r2, #0]
   123f6:	b11a      	cbz	r2, 12400 <uart_nrfx_irq_tx_enable+0x30>
   123f8:	4a06      	ldr	r2, [pc, #24]	; (12414 <uart_nrfx_irq_tx_enable+0x44>)
   123fa:	2104      	movs	r1, #4
   123fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	__asm__ volatile(
   12400:	f383 8811 	msr	BASEPRI, r3
   12404:	f3bf 8f6f 	isb	sy
}
   12408:	bd08      	pop	{r3, pc}
   1240a:	bf00      	nop
   1240c:	40002008 	.word	0x40002008
   12410:	20002072 	.word	0x20002072
   12414:	e000e100 	.word	0xe000e100

00012418 <uart_nrfx_configure>:
{
   12418:	b530      	push	{r4, r5, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1241a:	794b      	ldrb	r3, [r1, #5]
   1241c:	2b01      	cmp	r3, #1
   1241e:	d121      	bne.n	12464 <uart_nrfx_configure+0x4c>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12420:	798b      	ldrb	r3, [r1, #6]
   12422:	2b03      	cmp	r3, #3
   12424:	d11e      	bne.n	12464 <uart_nrfx_configure+0x4c>
	switch (cfg->flow_ctrl) {
   12426:	79ca      	ldrb	r2, [r1, #7]
   12428:	b122      	cbz	r2, 12434 <uart_nrfx_configure+0x1c>
   1242a:	2a01      	cmp	r2, #1
   1242c:	d11a      	bne.n	12464 <uart_nrfx_configure+0x4c>
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1242e:	6843      	ldr	r3, [r0, #4]
   12430:	781b      	ldrb	r3, [r3, #0]
   12432:	b1bb      	cbz	r3, 12464 <uart_nrfx_configure+0x4c>
	switch (cfg->parity) {
   12434:	790c      	ldrb	r4, [r1, #4]
   12436:	b114      	cbz	r4, 1243e <uart_nrfx_configure+0x26>
   12438:	2c02      	cmp	r4, #2
   1243a:	d113      	bne.n	12464 <uart_nrfx_configure+0x4c>
   1243c:	240e      	movs	r4, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1243e:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   12440:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   12444:	d05f      	beq.n	12506 <uart_nrfx_configure+0xee>
   12446:	d82b      	bhi.n	124a0 <uart_nrfx_configure+0x88>
   12448:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1244c:	d05d      	beq.n	1250a <uart_nrfx_configure+0xf2>
   1244e:	d814      	bhi.n	1247a <uart_nrfx_configure+0x62>
   12450:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12454:	d05b      	beq.n	1250e <uart_nrfx_configure+0xf6>
   12456:	d808      	bhi.n	1246a <uart_nrfx_configure+0x52>
   12458:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1245c:	d05a      	beq.n	12514 <uart_nrfx_configure+0xfc>
   1245e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12462:	d05a      	beq.n	1251a <uart_nrfx_configure+0x102>
   12464:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12468:	e04c      	b.n	12504 <uart_nrfx_configure+0xec>
   1246a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1246e:	d057      	beq.n	12520 <uart_nrfx_configure+0x108>
   12470:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   12474:	d1f6      	bne.n	12464 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   12476:	4b34      	ldr	r3, [pc, #208]	; (12548 <uart_nrfx_configure+0x130>)
   12478:	e039      	b.n	124ee <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1247a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1247e:	d052      	beq.n	12526 <uart_nrfx_configure+0x10e>
   12480:	d807      	bhi.n	12492 <uart_nrfx_configure+0x7a>
   12482:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   12486:	d050      	beq.n	1252a <uart_nrfx_configure+0x112>
   12488:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1248c:	d1ea      	bne.n	12464 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1248e:	4b2f      	ldr	r3, [pc, #188]	; (1254c <uart_nrfx_configure+0x134>)
   12490:	e02d      	b.n	124ee <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   12492:	f647 2512 	movw	r5, #31250	; 0x7a12
   12496:	42ab      	cmp	r3, r5
   12498:	d1e4      	bne.n	12464 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1249a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1249e:	e026      	b.n	124ee <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   124a0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   124a4:	d044      	beq.n	12530 <uart_nrfx_configure+0x118>
   124a6:	d811      	bhi.n	124cc <uart_nrfx_configure+0xb4>
   124a8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   124ac:	d042      	beq.n	12534 <uart_nrfx_configure+0x11c>
   124ae:	d808      	bhi.n	124c2 <uart_nrfx_configure+0xaa>
   124b0:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   124b4:	42ab      	cmp	r3, r5
   124b6:	d03f      	beq.n	12538 <uart_nrfx_configure+0x120>
   124b8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   124bc:	d1d2      	bne.n	12464 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   124be:	4b24      	ldr	r3, [pc, #144]	; (12550 <uart_nrfx_configure+0x138>)
   124c0:	e015      	b.n	124ee <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   124c2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   124c6:	d1cd      	bne.n	12464 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   124c8:	4b22      	ldr	r3, [pc, #136]	; (12554 <uart_nrfx_configure+0x13c>)
   124ca:	e010      	b.n	124ee <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   124cc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   124d0:	d035      	beq.n	1253e <uart_nrfx_configure+0x126>
   124d2:	d807      	bhi.n	124e4 <uart_nrfx_configure+0xcc>
   124d4:	4d20      	ldr	r5, [pc, #128]	; (12558 <uart_nrfx_configure+0x140>)
   124d6:	42ab      	cmp	r3, r5
   124d8:	d033      	beq.n	12542 <uart_nrfx_configure+0x12a>
   124da:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   124de:	d1c1      	bne.n	12464 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   124e0:	4b1e      	ldr	r3, [pc, #120]	; (1255c <uart_nrfx_configure+0x144>)
   124e2:	e004      	b.n	124ee <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   124e4:	4d1e      	ldr	r5, [pc, #120]	; (12560 <uart_nrfx_configure+0x148>)
   124e6:	42ab      	cmp	r3, r5
   124e8:	d1bc      	bne.n	12464 <uart_nrfx_configure+0x4c>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   124ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   124ee:	4d1d      	ldr	r5, [pc, #116]	; (12564 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   124f0:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   124f2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   124f6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
	get_dev_data(dev)->uart_config = *cfg;
   124fa:	68c3      	ldr	r3, [r0, #12]
   124fc:	c903      	ldmia	r1, {r0, r1}
   124fe:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   12502:	2000      	movs	r0, #0
}
   12504:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   12506:	4b18      	ldr	r3, [pc, #96]	; (12568 <uart_nrfx_configure+0x150>)
   12508:	e7f1      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1250a:	4b18      	ldr	r3, [pc, #96]	; (1256c <uart_nrfx_configure+0x154>)
   1250c:	e7ef      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1250e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   12512:	e7ec      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   12514:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12518:	e7e9      	b.n	124ee <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   1251a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1251e:	e7e6      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   12520:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12524:	e7e3      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   12526:	4b12      	ldr	r3, [pc, #72]	; (12570 <uart_nrfx_configure+0x158>)
   12528:	e7e1      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1252a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1252e:	e7de      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   12530:	4b10      	ldr	r3, [pc, #64]	; (12574 <uart_nrfx_configure+0x15c>)
   12532:	e7dc      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   12534:	4b10      	ldr	r3, [pc, #64]	; (12578 <uart_nrfx_configure+0x160>)
   12536:	e7da      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   12538:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1253c:	e7d7      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1253e:	4b0f      	ldr	r3, [pc, #60]	; (1257c <uart_nrfx_configure+0x164>)
   12540:	e7d5      	b.n	124ee <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   12542:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12546:	e7d2      	b.n	124ee <uart_nrfx_configure+0xd6>
   12548:	0013b000 	.word	0x0013b000
   1254c:	004ea000 	.word	0x004ea000
   12550:	00ebf000 	.word	0x00ebf000
   12554:	01d7e000 	.word	0x01d7e000
   12558:	0003d090 	.word	0x0003d090
   1255c:	075f7000 	.word	0x075f7000
   12560:	000f4240 	.word	0x000f4240
   12564:	40002000 	.word	0x40002000
   12568:	009d5000 	.word	0x009d5000
   1256c:	00275000 	.word	0x00275000
   12570:	0075f000 	.word	0x0075f000
   12574:	03afb000 	.word	0x03afb000
   12578:	013a9000 	.word	0x013a9000
   1257c:	0ebed000 	.word	0x0ebed000

00012580 <uart_nrfx_irq_is_pending>:
{
   12580:	b508      	push	{r3, lr}
    return p_reg->INTENSET & mask;
   12582:	4b0c      	ldr	r3, [pc, #48]	; (125b4 <uart_nrfx_irq_is_pending+0x34>)
   12584:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		||
   12588:	f012 0f80 	tst.w	r2, #128	; 0x80
   1258c:	461a      	mov	r2, r3
   1258e:	d105      	bne.n	1259c <uart_nrfx_irq_is_pending+0x1c>
   12590:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
   12594:	f010 0004 	ands.w	r0, r0, #4
   12598:	d106      	bne.n	125a8 <uart_nrfx_irq_is_pending+0x28>
}
   1259a:	bd08      	pop	{r3, pc}
		 event_txdrdy_check())
   1259c:	f7ff fec4 	bl	12328 <event_txdrdy_check>
					   NRF_UART_INT_MASK_TXDRDY) &&
   125a0:	2800      	cmp	r0, #0
   125a2:	d0f5      	beq.n	12590 <uart_nrfx_irq_is_pending+0x10>
		||
   125a4:	2001      	movs	r0, #1
   125a6:	e7f8      	b.n	1259a <uart_nrfx_irq_is_pending+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   125a8:	4b03      	ldr	r3, [pc, #12]	; (125b8 <uart_nrfx_irq_is_pending+0x38>)
   125aa:	6818      	ldr	r0, [r3, #0]
					   NRF_UART_INT_MASK_RXDRDY) &&
   125ac:	3800      	subs	r0, #0
   125ae:	bf18      	it	ne
   125b0:	2001      	movne	r0, #1
   125b2:	e7f2      	b.n	1259a <uart_nrfx_irq_is_pending+0x1a>
   125b4:	40002000 	.word	0x40002000
   125b8:	40002108 	.word	0x40002108

000125bc <uart_nrfx_isr>:
   125bc:	4b08      	ldr	r3, [pc, #32]	; (125e0 <uart_nrfx_isr+0x24>)
   125be:	681a      	ldr	r2, [r3, #0]
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
static void uart_nrfx_isr(void *arg)
{
   125c0:	b082      	sub	sp, #8
	ARG_UNUSED(arg);

	if (nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_ERROR)) {
   125c2:	b122      	cbz	r2, 125ce <uart_nrfx_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   125c4:	2200      	movs	r2, #0
   125c6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   125c8:	681b      	ldr	r3, [r3, #0]
   125ca:	9301      	str	r3, [sp, #4]
    (void)dummy;
   125cc:	9b01      	ldr	r3, [sp, #4]
		nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_ERROR);
	}

	if (irq_callback) {
   125ce:	4b05      	ldr	r3, [pc, #20]	; (125e4 <uart_nrfx_isr+0x28>)
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	b11b      	cbz	r3, 125dc <uart_nrfx_isr+0x20>
		irq_callback(irq_cb_data);
   125d4:	4a04      	ldr	r2, [pc, #16]	; (125e8 <uart_nrfx_isr+0x2c>)
   125d6:	6810      	ldr	r0, [r2, #0]
	}
}
   125d8:	b002      	add	sp, #8
		irq_callback(irq_cb_data);
   125da:	4718      	bx	r3
}
   125dc:	b002      	add	sp, #8
   125de:	4770      	bx	lr
   125e0:	40002124 	.word	0x40002124
   125e4:	20001e48 	.word	0x20001e48
   125e8:	20001e4c 	.word	0x20001e4c

000125ec <uart_nrfx_fifo_read>:
{
   125ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while ((size - num_rx > 0) &&
   125ee:	2300      	movs	r3, #0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   125f0:	4c09      	ldr	r4, [pc, #36]	; (12618 <uart_nrfx_fifo_read+0x2c>)
    return p_reg->RXD;
   125f2:	4f0a      	ldr	r7, [pc, #40]	; (1261c <uart_nrfx_fifo_read+0x30>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   125f4:	461e      	mov	r6, r3
   125f6:	b2d8      	uxtb	r0, r3
   125f8:	1a15      	subs	r5, r2, r0
   125fa:	2d00      	cmp	r5, #0
   125fc:	dd02      	ble.n	12604 <uart_nrfx_fifo_read+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   125fe:	6825      	ldr	r5, [r4, #0]
   12600:	3301      	adds	r3, #1
   12602:	b90d      	cbnz	r5, 12608 <uart_nrfx_fifo_read+0x1c>
}
   12604:	b003      	add	sp, #12
   12606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12608:	6026      	str	r6, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1260a:	6825      	ldr	r5, [r4, #0]
   1260c:	9501      	str	r5, [sp, #4]
    (void)dummy;
   1260e:	9d01      	ldr	r5, [sp, #4]
    return p_reg->RXD;
   12610:	f8d7 5518 	ldr.w	r5, [r7, #1304]	; 0x518
   12614:	540d      	strb	r5, [r1, r0]
   12616:	e7ee      	b.n	125f6 <uart_nrfx_fifo_read+0xa>
   12618:	40002108 	.word	0x40002108
   1261c:	40002000 	.word	0x40002000

00012620 <uart_nrfx_poll_out>:
{
   12620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12622:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   12624:	f002 fac4 	bl	14bb0 <k_is_in_isr>
   12628:	4d1c      	ldr	r5, [pc, #112]	; (1269c <uart_nrfx_poll_out+0x7c>)
   1262a:	b9c0      	cbnz	r0, 1265e <uart_nrfx_poll_out+0x3e>
   1262c:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1262e:	2701      	movs	r7, #1
   12630:	f3bf 8f5b 	dmb	ish
   12634:	e855 3f00 	ldrex	r3, [r5]
   12638:	2b00      	cmp	r3, #0
   1263a:	d103      	bne.n	12644 <uart_nrfx_poll_out+0x24>
   1263c:	e845 7200 	strex	r2, r7, [r5]
   12640:	2a00      	cmp	r2, #0
   12642:	d1f7      	bne.n	12634 <uart_nrfx_poll_out+0x14>
   12644:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   12648:	d00b      	beq.n	12662 <uart_nrfx_poll_out+0x42>
	return z_impl_k_sleep(timeout);
   1264a:	2021      	movs	r0, #33	; 0x21
   1264c:	2100      	movs	r1, #0
   1264e:	3c01      	subs	r4, #1
   12650:	f000 ffc2 	bl	135d8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   12654:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   12658:	d1ea      	bne.n	12630 <uart_nrfx_poll_out+0x10>
}
   1265a:	b003      	add	sp, #12
   1265c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
   1265e:	2301      	movs	r3, #1
   12660:	602b      	str	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12662:	4a0f      	ldr	r2, [pc, #60]	; (126a0 <uart_nrfx_poll_out+0x80>)
   12664:	2300      	movs	r3, #0
   12666:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12668:	6812      	ldr	r2, [r2, #0]
   1266a:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1266c:	9a01      	ldr	r2, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   1266e:	4a0d      	ldr	r2, [pc, #52]	; (126a4 <uart_nrfx_poll_out+0x84>)
   12670:	7013      	strb	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12672:	4b0d      	ldr	r3, [pc, #52]	; (126a8 <uart_nrfx_poll_out+0x88>)
   12674:	2201      	movs	r2, #1
   12676:	601a      	str	r2, [r3, #0]
    p_reg->TXD = txd;
   12678:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1267c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   12680:	f7ff fe52 	bl	12328 <event_txdrdy_check>
   12684:	b920      	cbnz	r0, 12690 <uart_nrfx_poll_out+0x70>
   12686:	2001      	movs	r0, #1
   12688:	f002 f81a 	bl	146c0 <nrfx_busy_wait>
   1268c:	3c01      	subs	r4, #1
   1268e:	d1f7      	bne.n	12680 <uart_nrfx_poll_out+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12690:	4b06      	ldr	r3, [pc, #24]	; (126ac <uart_nrfx_poll_out+0x8c>)
   12692:	2201      	movs	r2, #1
   12694:	601a      	str	r2, [r3, #0]
	*lock = 0;
   12696:	2300      	movs	r3, #0
   12698:	602b      	str	r3, [r5, #0]
   1269a:	e7de      	b.n	1265a <uart_nrfx_poll_out+0x3a>
   1269c:	20001e50 	.word	0x20001e50
   126a0:	4000211c 	.word	0x4000211c
   126a4:	20002072 	.word	0x20002072
   126a8:	40002008 	.word	0x40002008
   126ac:	4000200c 	.word	0x4000200c

000126b0 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   126b0:	4b08      	ldr	r3, [pc, #32]	; (126d4 <uart_nrfx_poll_in+0x24>)
   126b2:	681a      	ldr	r2, [r3, #0]
{
   126b4:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   126b6:	b152      	cbz	r2, 126ce <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   126b8:	2000      	movs	r0, #0
   126ba:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   126bc:	681b      	ldr	r3, [r3, #0]
   126be:	9301      	str	r3, [sp, #4]
    (void)dummy;
   126c0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   126c2:	4b05      	ldr	r3, [pc, #20]	; (126d8 <uart_nrfx_poll_in+0x28>)
   126c4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   126c8:	700b      	strb	r3, [r1, #0]
}
   126ca:	b002      	add	sp, #8
   126cc:	4770      	bx	lr
		return -1;
   126ce:	f04f 30ff 	mov.w	r0, #4294967295
   126d2:	e7fa      	b.n	126ca <uart_nrfx_poll_in+0x1a>
   126d4:	40002108 	.word	0x40002108
   126d8:	40002000 	.word	0x40002000

000126dc <uart_nrfx_init>:
    p_reg->OUTSET = set_mask;
   126dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   126e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
   126e2:	4d1c      	ldr	r5, [pc, #112]	; (12754 <uart_nrfx_init+0x78>)
   126e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   126e8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   126ec:	2103      	movs	r1, #3
   126ee:	2200      	movs	r2, #0
   126f0:	2413      	movs	r4, #19
   126f2:	f8c3 1750 	str.w	r1, [r3, #1872]	; 0x750
   126f6:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
   126fa:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   126fe:	2414      	movs	r4, #20
   12700:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   12704:	2420      	movs	r4, #32
   12706:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1270a:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1270e:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
   12712:	2305      	movs	r3, #5
   12714:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
   12718:	2307      	movs	r3, #7

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1271a:	68c1      	ldr	r1, [r0, #12]
   1271c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   12720:	f7ff fe7a 	bl	12418 <uart_nrfx_configure>
	if (err) {
   12724:	4604      	mov	r4, r0
   12726:	b990      	cbnz	r0, 1274e <uart_nrfx_init+0x72>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   12728:	2304      	movs	r3, #4
   1272a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1272e:	4b0a      	ldr	r3, [pc, #40]	; (12758 <uart_nrfx_init+0x7c>)
   12730:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   12732:	681b      	ldr	r3, [r3, #0]
   12734:	9301      	str	r3, [sp, #4]
    (void)dummy;
   12736:	9b01      	ldr	r3, [sp, #4]

#ifdef CONFIG_UART_0_INTERRUPT_DRIVEN
	/* Simulate that the TXDRDY event is set, so that the transmitter status
	 * is indicated correctly.
	 */
	uart_sw_event_txdrdy = 1U;
   12738:	4b08      	ldr	r3, [pc, #32]	; (1275c <uart_nrfx_init+0x80>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1273a:	2101      	movs	r1, #1
   1273c:	6029      	str	r1, [r5, #0]
#endif

#if defined(CONFIG_UART_0_ASYNC) || defined(CONFIG_UART_0_INTERRUPT_DRIVEN)

	IRQ_CONNECT(IRQN,
   1273e:	4602      	mov	r2, r0
   12740:	2002      	movs	r0, #2
	uart_sw_event_txdrdy = 1U;
   12742:	7019      	strb	r1, [r3, #0]
	IRQ_CONNECT(IRQN,
   12744:	f7f1 fbc6 	bl	3ed4 <z_arm_irq_priority_set>
		    IRQ_PRIO,
		    uart_nrfx_isr,
		    DEVICE_GET(uart_nrfx_uart0),
		    0);
	irq_enable(IRQN);
   12748:	2002      	movs	r0, #2
   1274a:	f7f1 fb91 	bl	3e70 <arch_irq_enable>
#if	HW_FLOW_CONTROL
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1274e:	4620      	mov	r0, r4
   12750:	b003      	add	sp, #12
   12752:	bd30      	pop	{r4, r5, pc}
   12754:	40002000 	.word	0x40002000
   12758:	40002108 	.word	0x40002108
   1275c:	20002072 	.word	0x20002072

00012760 <uart_nrfx_fifo_fill>:
{
   12760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12764:	4e0d      	ldr	r6, [pc, #52]	; (1279c <uart_nrfx_fifo_fill+0x3c>)
	uart_sw_event_txdrdy = 0U;
   12766:	4f0e      	ldr	r7, [pc, #56]	; (127a0 <uart_nrfx_fifo_fill+0x40>)
    p_reg->TXD = txd;
   12768:	f8df 8038 	ldr.w	r8, [pc, #56]	; 127a4 <uart_nrfx_fifo_fill+0x44>
	while ((len - num_tx > 0) &&
   1276c:	2400      	movs	r4, #0
   1276e:	b2e5      	uxtb	r5, r4
   12770:	1b53      	subs	r3, r2, r5
   12772:	2b00      	cmp	r3, #0
   12774:	dd03      	ble.n	1277e <uart_nrfx_fifo_fill+0x1e>
	       event_txdrdy_check()) {
   12776:	f7ff fdd7 	bl	12328 <event_txdrdy_check>
   1277a:	3401      	adds	r4, #1
	while ((len - num_tx > 0) &&
   1277c:	b918      	cbnz	r0, 12786 <uart_nrfx_fifo_fill+0x26>
}
   1277e:	4628      	mov	r0, r5
   12780:	b002      	add	sp, #8
   12782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12786:	2300      	movs	r3, #0
   12788:	6033      	str	r3, [r6, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1278a:	6830      	ldr	r0, [r6, #0]
   1278c:	9001      	str	r0, [sp, #4]
    (void)dummy;
   1278e:	9801      	ldr	r0, [sp, #4]
	uart_sw_event_txdrdy = 0U;
   12790:	703b      	strb	r3, [r7, #0]
    p_reg->TXD = txd;
   12792:	5d4b      	ldrb	r3, [r1, r5]
   12794:	f8c8 351c 	str.w	r3, [r8, #1308]	; 0x51c
}
   12798:	e7e9      	b.n	1276e <uart_nrfx_fifo_fill+0xe>
   1279a:	bf00      	nop
   1279c:	4000211c 	.word	0x4000211c
   127a0:	20002072 	.word	0x20002072
   127a4:	40002000 	.word	0x40002000

000127a8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static u16_t rng_pool_get(struct rng_pool *rngp, u8_t *buf, u16_t len)
{
   127a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127ac:	4604      	mov	r4, r0
	u32_t last  = rngp->last;
   127ae:	f890 c002 	ldrb.w	ip, [r0, #2]
	u32_t mask  = rngp->mask;
   127b2:	78c6      	ldrb	r6, [r0, #3]
	__asm__ volatile(
   127b4:	f04f 0320 	mov.w	r3, #32
   127b8:	f3ef 8511 	mrs	r5, BASEPRI
   127bc:	f383 8811 	msr	BASEPRI, r3
   127c0:	f3bf 8f6f 	isb	sy
	u32_t first, available;
	u32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   127c4:	f890 e000 	ldrb.w	lr, [r0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   127c8:	f890 8001 	ldrb.w	r8, [r0, #1]

	available = (last - first) & mask;
   127cc:	ebac 0c0e 	sub.w	ip, ip, lr
   127d0:	ea0c 0c06 	and.w	ip, ip, r6
	if (available < len) {
   127d4:	4562      	cmp	r2, ip
		len = available;
   127d6:	bf8c      	ite	hi
   127d8:	fa1f f08c 	uxthhi.w	r0, ip
   127dc:	4610      	movls	r0, r2

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   127de:	eb0e 0200 	add.w	r2, lr, r0
   127e2:	4032      	ands	r2, r6
	first = rngp->first_alloc;
   127e4:	4673      	mov	r3, lr
	rngp->first_alloc = (first + len) & mask;
   127e6:	7022      	strb	r2, [r4, #0]
	__asm__ volatile(
   127e8:	f385 8811 	msr	BASEPRI, r5
   127ec:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	while (likely(len--)) {
   127f0:	1e42      	subs	r2, r0, #1
   127f2:	b292      	uxth	r2, r2
   127f4:	b168      	cbz	r0, 12812 <rng_pool_get+0x6a>
   127f6:	3201      	adds	r2, #1
   127f8:	188f      	adds	r7, r1, r2
		*dst++ = rngp->buffer[first];
   127fa:	18e5      	adds	r5, r4, r3
		first = (first + 1) & mask;
   127fc:	3301      	adds	r3, #1
		*dst++ = rngp->buffer[first];
   127fe:	796d      	ldrb	r5, [r5, #5]
   12800:	f801 5b01 	strb.w	r5, [r1], #1
	while (likely(len--)) {
   12804:	42b9      	cmp	r1, r7
		first = (first + 1) & mask;
   12806:	ea03 0306 	and.w	r3, r3, r6
	while (likely(len--)) {
   1280a:	d1f6      	bne.n	127fa <rng_pool_get+0x52>
   1280c:	b292      	uxth	r2, r2
   1280e:	ebac 0c02 	sub.w	ip, ip, r2
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   12812:	45c6      	cmp	lr, r8
   12814:	d10d      	bne.n	12832 <rng_pool_get+0x8a>
	__asm__ volatile(
   12816:	f04f 0220 	mov.w	r2, #32
   1281a:	f3ef 8311 	mrs	r3, BASEPRI
   1281e:	f382 8811 	msr	BASEPRI, r2
   12822:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   12826:	7822      	ldrb	r2, [r4, #0]
   12828:	7062      	strb	r2, [r4, #1]
	__asm__ volatile(
   1282a:	f383 8811 	msr	BASEPRI, r3
   1282e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   12832:	7923      	ldrb	r3, [r4, #4]
   12834:	4563      	cmp	r3, ip
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   12836:	bf22      	ittt	cs
   12838:	4b02      	ldrcs	r3, [pc, #8]	; (12844 <rng_pool_get+0x9c>)
   1283a:	2201      	movcs	r2, #1
   1283c:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12842:	bf00      	nop
   12844:	4000d000 	.word	0x4000d000

00012848 <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, u8_t *buf, u16_t len)
{
   12848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1284c:	4f13      	ldr	r7, [pc, #76]	; (1289c <entropy_nrf5_get_entropy+0x54>)
   1284e:	460d      	mov	r5, r1
   12850:	4614      	mov	r4, r2

	while (len) {
		u16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   12852:	f107 0845 	add.w	r8, r7, #69	; 0x45
   12856:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1285a:	b914      	cbnz	r4, 12862 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1285c:	4620      	mov	r0, r4
   1285e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12862:	f04f 33ff 	mov.w	r3, #4294967295
   12866:	f04f 32ff 	mov.w	r2, #4294967295
   1286a:	4638      	mov	r0, r7
   1286c:	f000 ff00 	bl	13670 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   12870:	4622      	mov	r2, r4
   12872:	4629      	mov	r1, r5
   12874:	4640      	mov	r0, r8
   12876:	f7ff ff97 	bl	127a8 <rng_pool_get>
   1287a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1287c:	4638      	mov	r0, r7
   1287e:	f000 fed1 	bl	13624 <z_impl_k_sem_give>
		if (bytes == 0U) {
   12882:	b93e      	cbnz	r6, 12894 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   12884:	f04f 32ff 	mov.w	r2, #4294967295
   12888:	f04f 33ff 	mov.w	r3, #4294967295
   1288c:	4648      	mov	r0, r9
   1288e:	f000 feef 	bl	13670 <z_impl_k_sem_take>
			continue;
   12892:	e7e2      	b.n	1285a <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   12894:	1ba4      	subs	r4, r4, r6
   12896:	b2a4      	uxth	r4, r4
		buf += bytes;
   12898:	4435      	add	r5, r6
   1289a:	e7de      	b.n	1285a <entropy_nrf5_get_entropy+0x12>
   1289c:	20001e54 	.word	0x20001e54

000128a0 <random_byte_get>:
{
   128a0:	b082      	sub	sp, #8
	__asm__ volatile(
   128a2:	f04f 0320 	mov.w	r3, #32
   128a6:	f3ef 8211 	mrs	r2, BASEPRI
   128aa:	f383 8811 	msr	BASEPRI, r3
   128ae:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   128b2:	4b0a      	ldr	r3, [pc, #40]	; (128dc <random_byte_get+0x3c>)
   128b4:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   128b6:	b171      	cbz	r1, 128d6 <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   128b8:	4909      	ldr	r1, [pc, #36]	; (128e0 <random_byte_get+0x40>)
   128ba:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   128be:	2100      	movs	r1, #0
   128c0:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   128c2:	681b      	ldr	r3, [r3, #0]
   128c4:	9301      	str	r3, [sp, #4]
    (void)dummy;
   128c6:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   128c8:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   128ca:	f382 8811 	msr	BASEPRI, r2
   128ce:	f3bf 8f6f 	isb	sy
}
   128d2:	b002      	add	sp, #8
   128d4:	4770      	bx	lr
	int retval = -EAGAIN;
   128d6:	f06f 000a 	mvn.w	r0, #10
   128da:	e7f6      	b.n	128ca <random_byte_get+0x2a>
   128dc:	4000d100 	.word	0x4000d100
   128e0:	4000d000 	.word	0x4000d000

000128e4 <entropy_nrf5_get_entropy_isr>:
	u16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   128e4:	43db      	mvns	r3, r3
{
   128e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   128ea:	f013 0501 	ands.w	r5, r3, #1
{
   128ee:	460e      	mov	r6, r1
   128f0:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   128f2:	d005      	beq.n	12900 <entropy_nrf5_get_entropy_isr+0x1c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   128f4:	4820      	ldr	r0, [pc, #128]	; (12978 <entropy_nrf5_get_entropy_isr+0x94>)
   128f6:	f7ff ff57 	bl	127a8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   128fa:	b002      	add	sp, #8
   128fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   12900:	2a00      	cmp	r2, #0
   12902:	d032      	beq.n	1296a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   12904:	f04f 0320 	mov.w	r3, #32
   12908:	f3ef 8711 	mrs	r7, BASEPRI
   1290c:	f383 8811 	msr	BASEPRI, r3
   12910:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   12914:	200d      	movs	r0, #13
   12916:	f7f1 facf 	bl	3eb8 <arch_irq_is_enabled>
   1291a:	4680      	mov	r8, r0
		irq_disable(IRQN);
   1291c:	200d      	movs	r0, #13
   1291e:	f7f1 fab7 	bl	3e90 <arch_irq_disable>
	__asm__ volatile(
   12922:	f387 8811 	msr	BASEPRI, r7
   12926:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1292a:	4f14      	ldr	r7, [pc, #80]	; (1297c <entropy_nrf5_get_entropy_isr+0x98>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1292c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 12984 <entropy_nrf5_get_entropy_isr+0xa0>
   12930:	603d      	str	r5, [r7, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   12932:	683a      	ldr	r2, [r7, #0]
   12934:	9201      	str	r2, [sp, #4]
    (void)dummy;
   12936:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   12938:	4a11      	ldr	r2, [pc, #68]	; (12980 <entropy_nrf5_get_entropy_isr+0x9c>)
   1293a:	2101      	movs	r1, #1
   1293c:	6011      	str	r1, [r2, #0]
}
   1293e:	4625      	mov	r5, r4
   12940:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   12944:	683b      	ldr	r3, [r7, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   12946:	b193      	cbz	r3, 1296e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   12948:	f7ff ffaa 	bl	128a0 <random_byte_get>
			if (byte < 0) {
   1294c:	2800      	cmp	r0, #0
   1294e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   12952:	dbf7      	blt.n	12944 <entropy_nrf5_get_entropy_isr+0x60>
   12954:	3d01      	subs	r5, #1
   12956:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   12958:	5570      	strb	r0, [r6, r5]
		} while (len);
   1295a:	2d00      	cmp	r5, #0
   1295c:	d1f2      	bne.n	12944 <entropy_nrf5_get_entropy_isr+0x60>
		if (irq_enabled) {
   1295e:	f1b8 0f00 	cmp.w	r8, #0
   12962:	d002      	beq.n	1296a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   12964:	200d      	movs	r0, #13
   12966:	f7f1 fa83 	bl	3e70 <arch_irq_enable>
	return cnt;
   1296a:	4620      	mov	r0, r4
   1296c:	e7c5      	b.n	128fa <entropy_nrf5_get_entropy_isr+0x16>
				__WFE();
   1296e:	bf20      	wfe
				__SEV();
   12970:	bf40      	sev
				__WFE();
   12972:	bf20      	wfe
   12974:	e7e6      	b.n	12944 <entropy_nrf5_get_entropy_isr+0x60>
   12976:	bf00      	nop
   12978:	20001e84 	.word	0x20001e84
   1297c:	4000d100 	.word	0x4000d100
   12980:	4000d000 	.word	0x4000d000
   12984:	e000e100 	.word	0xe000e100

00012988 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   12988:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1298a:	4c1a      	ldr	r4, [pc, #104]	; (129f4 <entropy_nrf5_init+0x6c>)
   1298c:	2201      	movs	r2, #1
   1298e:	4611      	mov	r1, r2
   12990:	4620      	mov	r0, r4
   12992:	f002 f8fd 	bl	14b90 <z_impl_k_sem_init>
   12996:	2201      	movs	r2, #1
   12998:	2100      	movs	r1, #0
   1299a:	f104 0018 	add.w	r0, r4, #24
   1299e:	f002 f8f7 	bl	14b90 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   129a2:	f240 4307 	movw	r3, #1031	; 0x407
   129a6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   129aa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   129ae:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   129b0:	230c      	movs	r3, #12
   129b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   129b6:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   129b8:	4b0f      	ldr	r3, [pc, #60]	; (129f8 <entropy_nrf5_init+0x70>)
   129ba:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   129be:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   129c2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   129c6:	f042 0201 	orr.w	r2, r2, #1
   129ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   129ce:	4a0b      	ldr	r2, [pc, #44]	; (129fc <entropy_nrf5_init+0x74>)
   129d0:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   129d2:	6812      	ldr	r2, [r2, #0]
   129d4:	9201      	str	r2, [sp, #4]
    p_reg->INTENSET = mask;
   129d6:	2101      	movs	r1, #1
    (void)dummy;
   129d8:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   129da:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   129de:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   129e0:	6019      	str	r1, [r3, #0]
   129e2:	200d      	movs	r0, #13
   129e4:	f7f1 fa76 	bl	3ed4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   129e8:	200d      	movs	r0, #13
   129ea:	f7f1 fa41 	bl	3e70 <arch_irq_enable>

	return 0;
}
   129ee:	4628      	mov	r0, r5
   129f0:	b003      	add	sp, #12
   129f2:	bd30      	pop	{r4, r5, pc}
   129f4:	20001e54 	.word	0x20001e54
   129f8:	4000d000 	.word	0x4000d000
   129fc:	4000d100 	.word	0x4000d100

00012a00 <isr>:
{
   12a00:	b510      	push	{r4, lr}
	byte = random_byte_get();
   12a02:	f7ff ff4d 	bl	128a0 <random_byte_get>
	if (byte < 0) {
   12a06:	2800      	cmp	r0, #0
   12a08:	db20      	blt.n	12a4c <isr+0x4c>
	u8_t last  = rngp->last;
   12a0a:	4b17      	ldr	r3, [pc, #92]	; (12a68 <isr+0x68>)
   12a0c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   12a10:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	u8_t mask  = rngp->mask;
   12a14:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   12a18:	1a51      	subs	r1, r2, r1
   12a1a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   12a1e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   12a20:	d10d      	bne.n	12a3e <isr+0x3e>
	u8_t last  = rngp->last;
   12a22:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   12a26:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	u8_t mask  = rngp->mask;
   12a2a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   12a2e:	1a51      	subs	r1, r2, r1
   12a30:	ea34 0101 	bics.w	r1, r4, r1
   12a34:	d10b      	bne.n	12a4e <isr+0x4e>
   12a36:	4b0d      	ldr	r3, [pc, #52]	; (12a6c <isr+0x6c>)
   12a38:	2201      	movs	r2, #1
   12a3a:	601a      	str	r2, [r3, #0]
}
   12a3c:	e00e      	b.n	12a5c <isr+0x5c>
	rngp->buffer[last] = byte;
   12a3e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   12a40:	3201      	adds	r2, #1
   12a42:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   12a44:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   12a48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   12a4c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   12a4e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   12a50:	3201      	adds	r2, #1
   12a52:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   12a54:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   12a58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   12a5c:	4804      	ldr	r0, [pc, #16]	; (12a70 <isr+0x70>)
}
   12a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a62:	f000 bddf 	b.w	13624 <z_impl_k_sem_give>
   12a66:	bf00      	nop
   12a68:	20001e54 	.word	0x20001e54
   12a6c:	4000d004 	.word	0x4000d004
   12a70:	20001e6c 	.word	0x20001e6c

00012a74 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   12a74:	4b0b      	ldr	r3, [pc, #44]	; (12aa4 <nrf52_errata_108+0x30>)
   12a76:	681b      	ldr	r3, [r3, #0]
   12a78:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   12a7a:	bf05      	ittet	eq
   12a7c:	4b0a      	ldreq	r3, [pc, #40]	; (12aa8 <nrf52_errata_108+0x34>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   12a7e:	4a0b      	ldreq	r2, [pc, #44]	; (12aac <nrf52_errata_108+0x38>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   12a80:	4a0b      	ldrne	r2, [pc, #44]	; (12ab0 <nrf52_errata_108+0x3c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   12a82:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   12a84:	bf0a      	itet	eq
   12a86:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   12a88:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   12a8a:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   12a8e:	2b06      	cmp	r3, #6
   12a90:	d105      	bne.n	12a9e <nrf52_errata_108+0x2a>
            {
                switch(var2)
   12a92:	3803      	subs	r0, #3
   12a94:	2803      	cmp	r0, #3
   12a96:	bf8c      	ite	hi
   12a98:	2000      	movhi	r0, #0
   12a9a:	2001      	movls	r0, #1
   12a9c:	4770      	bx	lr
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
   12a9e:	2000      	movs	r0, #0
    #endif
}
   12aa0:	4770      	bx	lr
   12aa2:	bf00      	nop
   12aa4:	10000130 	.word	0x10000130
   12aa8:	f0000fe0 	.word	0xf0000fe0
   12aac:	f0000fe8 	.word	0xf0000fe8
   12ab0:	10000134 	.word	0x10000134

00012ab4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   12ab4:	4b07      	ldr	r3, [pc, #28]	; (12ad4 <nrf52_errata_16+0x20>)
   12ab6:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   12ab8:	2b06      	cmp	r3, #6
   12aba:	d109      	bne.n	12ad0 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   12abc:	4b06      	ldr	r3, [pc, #24]	; (12ad8 <nrf52_errata_16+0x24>)
   12abe:	681b      	ldr	r3, [r3, #0]
   12ac0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   12ac4:	3b03      	subs	r3, #3
   12ac6:	2b03      	cmp	r3, #3
   12ac8:	d802      	bhi.n	12ad0 <nrf52_errata_16+0x1c>
   12aca:	4a04      	ldr	r2, [pc, #16]	; (12adc <nrf52_errata_16+0x28>)
   12acc:	5cd0      	ldrb	r0, [r2, r3]
   12ace:	4770      	bx	lr
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
   12ad0:	2000      	movs	r0, #0
    #endif
}
   12ad2:	4770      	bx	lr
   12ad4:	f0000fe0 	.word	0xf0000fe0
   12ad8:	f0000fe8 	.word	0xf0000fe8
   12adc:	00016124 	.word	0x00016124

00012ae0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   12ae0:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_12()){
   12ae2:	f7ff ffc7 	bl	12a74 <nrf52_errata_108>
   12ae6:	b128      	cbz	r0, 12af4 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   12ae8:	4b7e      	ldr	r3, [pc, #504]	; (12ce4 <SystemInit+0x204>)
   12aea:	4a7f      	ldr	r2, [pc, #508]	; (12ce8 <SystemInit+0x208>)
   12aec:	681b      	ldr	r3, [r3, #0]
   12aee:	f3c3 2304 	ubfx	r3, r3, #8, #5
   12af2:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_16()){
   12af4:	f7ff ffde 	bl	12ab4 <nrf52_errata_16>
   12af8:	b110      	cbz	r0, 12b00 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   12afa:	4b7c      	ldr	r3, [pc, #496]	; (12cec <SystemInit+0x20c>)
   12afc:	4a7c      	ldr	r2, [pc, #496]	; (12cf0 <SystemInit+0x210>)
   12afe:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_31()){
   12b00:	f7ff ffb8 	bl	12a74 <nrf52_errata_108>
   12b04:	b128      	cbz	r0, 12b12 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   12b06:	4b7b      	ldr	r3, [pc, #492]	; (12cf4 <SystemInit+0x214>)
   12b08:	4a7b      	ldr	r2, [pc, #492]	; (12cf8 <SystemInit+0x218>)
   12b0a:	681b      	ldr	r3, [r3, #0]
   12b0c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   12b10:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_32()){
   12b12:	f7ff ffcf 	bl	12ab4 <nrf52_errata_16>
   12b16:	b120      	cbz	r0, 12b22 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   12b18:	4a78      	ldr	r2, [pc, #480]	; (12cfc <SystemInit+0x21c>)
   12b1a:	68d3      	ldr	r3, [r2, #12]
   12b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12b20:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   12b22:	f7ff ffa7 	bl	12a74 <nrf52_errata_108>
   12b26:	b140      	cbz	r0, 12b3a <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
   12b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12b2c:	2200      	movs	r2, #0
   12b2e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   12b32:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   12b36:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_37()){
   12b3a:	f7ff ffbb 	bl	12ab4 <nrf52_errata_16>
   12b3e:	b110      	cbz	r0, 12b46 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
   12b40:	4b6f      	ldr	r3, [pc, #444]	; (12d00 <SystemInit+0x220>)
   12b42:	2203      	movs	r2, #3
   12b44:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_57()){
   12b46:	f7ff ffb5 	bl	12ab4 <nrf52_errata_16>
   12b4a:	b140      	cbz	r0, 12b5e <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
   12b4c:	4b6d      	ldr	r3, [pc, #436]	; (12d04 <SystemInit+0x224>)
   12b4e:	2205      	movs	r2, #5
   12b50:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
   12b52:	2201      	movs	r2, #1
   12b54:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
   12b56:	2200      	movs	r2, #0
   12b58:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
   12b5a:	223f      	movs	r2, #63	; 0x3f
   12b5c:	605a      	str	r2, [r3, #4]
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   12b5e:	4b6a      	ldr	r3, [pc, #424]	; (12d08 <SystemInit+0x228>)
   12b60:	681a      	ldr	r2, [r3, #0]
   12b62:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   12b64:	bf0b      	itete	eq
   12b66:	4b69      	ldreq	r3, [pc, #420]	; (12d0c <SystemInit+0x22c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   12b68:	4b69      	ldrne	r3, [pc, #420]	; (12d10 <SystemInit+0x230>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   12b6a:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   12b6c:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   12b6e:	bf02      	ittt	eq
   12b70:	3308      	addeq	r3, #8
   12b72:	681b      	ldreq	r3, [r3, #0]
   12b74:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   12b78:	2a06      	cmp	r2, #6
   12b7a:	d14d      	bne.n	12c18 <SystemInit+0x138>
            {
                switch(var2)
   12b7c:	3b03      	subs	r3, #3
   12b7e:	2b03      	cmp	r3, #3
   12b80:	d84a      	bhi.n	12c18 <SystemInit+0x138>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   12b82:	4a64      	ldr	r2, [pc, #400]	; (12d14 <SystemInit+0x234>)
   12b84:	5cd3      	ldrb	r3, [r2, r3]
   12b86:	2b00      	cmp	r3, #0
   12b88:	d046      	beq.n	12c18 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   12b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   12b8e:	4b62      	ldr	r3, [pc, #392]	; (12d18 <SystemInit+0x238>)
   12b90:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   12b94:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   12b98:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   12b9c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   12ba0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   12ba4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   12ba8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   12bac:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   12bb0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   12bb4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   12bb8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   12bbc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   12bc0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   12bc4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   12bc8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   12bcc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   12bd0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   12bd4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   12bd8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   12bdc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   12be0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   12be4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   12be8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   12bec:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   12bf0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   12bf4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   12bf8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   12bfc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   12c00:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   12c04:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   12c08:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   12c0c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   12c10:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   12c14:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_108()){
   12c18:	f7ff ff2c 	bl	12a74 <nrf52_errata_108>
   12c1c:	b128      	cbz	r0, 12c2a <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   12c1e:	4b3f      	ldr	r3, [pc, #252]	; (12d1c <SystemInit+0x23c>)
   12c20:	4a3f      	ldr	r2, [pc, #252]	; (12d20 <SystemInit+0x240>)
   12c22:	681b      	ldr	r3, [r3, #0]
   12c24:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   12c28:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   12c2a:	f7ff ff23 	bl	12a74 <nrf52_errata_108>
   12c2e:	b148      	cbz	r0, 12c44 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   12c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12c34:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12c38:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   12c3a:	bf44      	itt	mi
   12c3c:	f06f 0201 	mvnmi.w	r2, #1
   12c40:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   12c44:	4b30      	ldr	r3, [pc, #192]	; (12d08 <SystemInit+0x228>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   12c46:	681b      	ldr	r3, [r3, #0]
   12c48:	2b06      	cmp	r3, #6
   12c4a:	d10c      	bne.n	12c66 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   12c4c:	4b30      	ldr	r3, [pc, #192]	; (12d10 <SystemInit+0x230>)
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	3b03      	subs	r3, #3
   12c52:	2b03      	cmp	r3, #3
   12c54:	d807      	bhi.n	12c66 <SystemInit+0x186>
        }
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_182()){
   12c56:	4a33      	ldr	r2, [pc, #204]	; (12d24 <SystemInit+0x244>)
   12c58:	5cd3      	ldrb	r3, [r2, r3]
   12c5a:	b123      	cbz	r3, 12c66 <SystemInit+0x186>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   12c5c:	4a32      	ldr	r2, [pc, #200]	; (12d28 <SystemInit+0x248>)
   12c5e:	6813      	ldr	r3, [r2, #0]
   12c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   12c64:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   12c66:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   12c6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   12c6e:	2a00      	cmp	r2, #0
   12c70:	db03      	blt.n	12c7a <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   12c72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   12c76:	2b00      	cmp	r3, #0
   12c78:	da2f      	bge.n	12cda <SystemInit+0x1fa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   12c7a:	4b2c      	ldr	r3, [pc, #176]	; (12d2c <SystemInit+0x24c>)
   12c7c:	2201      	movs	r2, #1
   12c7e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   12c82:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12c86:	2a00      	cmp	r2, #0
   12c88:	d0fb      	beq.n	12c82 <SystemInit+0x1a2>
            NRF_UICR->PSELRESET[0] = 21;
   12c8a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   12c8e:	2115      	movs	r1, #21
   12c90:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   12c94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12c98:	2a00      	cmp	r2, #0
   12c9a:	d0fb      	beq.n	12c94 <SystemInit+0x1b4>
            NRF_UICR->PSELRESET[1] = 21;
   12c9c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   12ca0:	2215      	movs	r2, #21
   12ca2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   12ca6:	4b21      	ldr	r3, [pc, #132]	; (12d2c <SystemInit+0x24c>)
   12ca8:	461a      	mov	r2, r3
   12caa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   12cae:	2900      	cmp	r1, #0
   12cb0:	d0fb      	beq.n	12caa <SystemInit+0x1ca>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   12cb2:	2100      	movs	r1, #0
   12cb4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   12cb8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   12cbc:	2b00      	cmp	r3, #0
   12cbe:	d0fb      	beq.n	12cb8 <SystemInit+0x1d8>
   12cc0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12cc4:	491a      	ldr	r1, [pc, #104]	; (12d30 <SystemInit+0x250>)
   12cc6:	4b1b      	ldr	r3, [pc, #108]	; (12d34 <SystemInit+0x254>)
   12cc8:	68ca      	ldr	r2, [r1, #12]
   12cca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12cce:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12cd0:	60cb      	str	r3, [r1, #12]
   12cd2:	f3bf 8f4f 	dsb	sy
    __NOP();
   12cd6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12cd8:	e7fd      	b.n	12cd6 <SystemInit+0x1f6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   12cda:	4b17      	ldr	r3, [pc, #92]	; (12d38 <SystemInit+0x258>)
   12cdc:	4a17      	ldr	r2, [pc, #92]	; (12d3c <SystemInit+0x25c>)
   12cde:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   12ce0:	bd08      	pop	{r3, pc}
   12ce2:	bf00      	nop
   12ce4:	10000324 	.word	0x10000324
   12ce8:	40013540 	.word	0x40013540
   12cec:	4007c074 	.word	0x4007c074
   12cf0:	baadf00d 	.word	0xbaadf00d
   12cf4:	10000244 	.word	0x10000244
   12cf8:	4000053c 	.word	0x4000053c
   12cfc:	e000edf0 	.word	0xe000edf0
   12d00:	400005a0 	.word	0x400005a0
   12d04:	40005610 	.word	0x40005610
   12d08:	10000130 	.word	0x10000130
   12d0c:	f0000fe0 	.word	0xf0000fe0
   12d10:	10000134 	.word	0x10000134
   12d14:	0001611c 	.word	0x0001611c
   12d18:	4000c000 	.word	0x4000c000
   12d1c:	10000258 	.word	0x10000258
   12d20:	40000ee4 	.word	0x40000ee4
   12d24:	00016120 	.word	0x00016120
   12d28:	4000173c 	.word	0x4000173c
   12d2c:	4001e000 	.word	0x4001e000
   12d30:	e000ed00 	.word	0xe000ed00
   12d34:	05fa0004 	.word	0x05fa0004
   12d38:	20000404 	.word	0x20000404
   12d3c:	03d09000 	.word	0x03d09000

00012d40 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   12d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12d42:	4b09      	ldr	r3, [pc, #36]	; (12d68 <z_sys_init_run_level+0x28>)
   12d44:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   12d48:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   12d4a:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12d4c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   12d50:	42a6      	cmp	r6, r4
   12d52:	d800      	bhi.n	12d56 <z_sys_init_run_level+0x16>
			}
		}
	}
}
   12d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   12d56:	e9d4 3500 	ldrd	r3, r5, [r4]
   12d5a:	4628      	mov	r0, r5
   12d5c:	4798      	blx	r3
		if (retval != 0) {
   12d5e:	b108      	cbz	r0, 12d64 <z_sys_init_run_level+0x24>
			if (dev) {
   12d60:	b105      	cbz	r5, 12d64 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   12d62:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12d64:	3408      	adds	r4, #8
   12d66:	e7f3      	b.n	12d50 <z_sys_init_run_level+0x10>
   12d68:	000160bc 	.word	0x000160bc

00012d6c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   12d6c:	4b0f      	ldr	r3, [pc, #60]	; (12dac <z_impl_device_get_binding+0x40>)
{
   12d6e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   12d70:	4c0f      	ldr	r4, [pc, #60]	; (12db0 <z_impl_device_get_binding+0x44>)
{
   12d72:	4605      	mov	r5, r0
   12d74:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   12d76:	429c      	cmp	r4, r3
   12d78:	d104      	bne.n	12d84 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   12d7a:	4c0d      	ldr	r4, [pc, #52]	; (12db0 <z_impl_device_get_binding+0x44>)
   12d7c:	42b4      	cmp	r4, r6
   12d7e:	d108      	bne.n	12d92 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   12d80:	2400      	movs	r4, #0
   12d82:	e010      	b.n	12da6 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   12d84:	68a2      	ldr	r2, [r4, #8]
   12d86:	b112      	cbz	r2, 12d8e <z_impl_device_get_binding+0x22>
   12d88:	6822      	ldr	r2, [r4, #0]
   12d8a:	42aa      	cmp	r2, r5
   12d8c:	d00b      	beq.n	12da6 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   12d8e:	3410      	adds	r4, #16
   12d90:	e7f1      	b.n	12d76 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   12d92:	68a3      	ldr	r3, [r4, #8]
   12d94:	b90b      	cbnz	r3, 12d9a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   12d96:	3410      	adds	r4, #16
   12d98:	e7f0      	b.n	12d7c <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   12d9a:	6821      	ldr	r1, [r4, #0]
   12d9c:	4628      	mov	r0, r5
   12d9e:	f001 faa0 	bl	142e2 <strcmp>
		if ((dev->driver_api != NULL) &&
   12da2:	2800      	cmp	r0, #0
   12da4:	d1f7      	bne.n	12d96 <z_impl_device_get_binding+0x2a>
}
   12da6:	4620      	mov	r0, r4
   12da8:	bd70      	pop	{r4, r5, r6, pc}
   12daa:	bf00      	nop
   12dac:	20000474 	.word	0x20000474
   12db0:	20000414 	.word	0x20000414

00012db4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   12db4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   12db6:	4d0b      	ldr	r5, [pc, #44]	; (12de4 <idle+0x30>)
	__asm__ volatile(
   12db8:	f04f 0220 	mov.w	r2, #32
   12dbc:	f3ef 8311 	mrs	r3, BASEPRI
   12dc0:	f382 8811 	msr	BASEPRI, r2
   12dc4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   12dc8:	f001 ff96 	bl	14cf8 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   12dcc:	2101      	movs	r1, #1
   12dce:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
   12dd0:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   12dd2:	bfd8      	it	le
   12dd4:	4608      	movle	r0, r1
   12dd6:	f001 ff9f 	bl	14d18 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   12dda:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12ddc:	f7f1 f932 	bl	4044 <arch_cpu_idle>
}
   12de0:	e7ea      	b.n	12db8 <idle+0x4>
   12de2:	bf00      	nop
   12de4:	20001f90 	.word	0x20001f90

00012de8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   12de8:	4802      	ldr	r0, [pc, #8]	; (12df4 <z_bss_zero+0xc>)
   12dea:	4a03      	ldr	r2, [pc, #12]	; (12df8 <z_bss_zero+0x10>)
   12dec:	2100      	movs	r1, #0
   12dee:	1a12      	subs	r2, r2, r0
   12df0:	f001 babe 	b.w	14370 <memset>
   12df4:	20000560 	.word	0x20000560
   12df8:	20002074 	.word	0x20002074

00012dfc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   12dfc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   12dfe:	4806      	ldr	r0, [pc, #24]	; (12e18 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   12e00:	4a06      	ldr	r2, [pc, #24]	; (12e1c <z_data_copy+0x20>)
   12e02:	4907      	ldr	r1, [pc, #28]	; (12e20 <z_data_copy+0x24>)
   12e04:	1a12      	subs	r2, r2, r0
   12e06:	f001 fa88 	bl	1431a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   12e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   12e0e:	4a05      	ldr	r2, [pc, #20]	; (12e24 <z_data_copy+0x28>)
   12e10:	4905      	ldr	r1, [pc, #20]	; (12e28 <z_data_copy+0x2c>)
   12e12:	4806      	ldr	r0, [pc, #24]	; (12e2c <z_data_copy+0x30>)
   12e14:	f001 ba81 	b.w	1431a <memcpy>
   12e18:	20000000 	.word	0x20000000
   12e1c:	20000560 	.word	0x20000560
   12e20:	00016178 	.word	0x00016178
   12e24:	00000000 	.word	0x00000000
   12e28:	00016178 	.word	0x00016178
   12e2c:	20000000 	.word	0x20000000

00012e30 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   12e30:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   12e32:	4b0c      	ldr	r3, [pc, #48]	; (12e64 <bg_thread_main+0x34>)
   12e34:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12e36:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   12e38:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12e3a:	f7ff ff81 	bl	12d40 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   12e3e:	4a0a      	ldr	r2, [pc, #40]	; (12e68 <bg_thread_main+0x38>)
   12e40:	490a      	ldr	r1, [pc, #40]	; (12e6c <bg_thread_main+0x3c>)
   12e42:	480b      	ldr	r0, [pc, #44]	; (12e70 <bg_thread_main+0x40>)
   12e44:	f000 ff56 	bl	13cf4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   12e48:	2003      	movs	r0, #3
   12e4a:	f7ff ff79 	bl	12d40 <z_sys_init_run_level>

	z_init_static_threads();
   12e4e:	f000 fca3 	bl	13798 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   12e52:	f7f0 fbdb 	bl	360c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   12e56:	4a07      	ldr	r2, [pc, #28]	; (12e74 <bg_thread_main+0x44>)
   12e58:	7b13      	ldrb	r3, [r2, #12]
   12e5a:	f023 0301 	bic.w	r3, r3, #1
   12e5e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   12e60:	bd08      	pop	{r3, pc}
   12e62:	bf00      	nop
   12e64:	20002073 	.word	0x20002073
   12e68:	0001615e 	.word	0x0001615e
   12e6c:	00016128 	.word	0x00016128
   12e70:	00016138 	.word	0x00016138
   12e74:	20001f1c 	.word	0x20001f1c

00012e78 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   12e78:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   12e7c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 12f74 <z_cstart+0xfc>
   12e80:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12e82:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   12e86:	4d34      	ldr	r5, [pc, #208]	; (12f58 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   12e88:	4e34      	ldr	r6, [pc, #208]	; (12f5c <z_cstart+0xe4>)
   12e8a:	696b      	ldr	r3, [r5, #20]
	z_setup_new_thread(&z_main_thread, z_main_stack,
   12e8c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 12f78 <z_cstart+0x100>
   12e90:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 12f7c <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   12e94:	4f32      	ldr	r7, [pc, #200]	; (12f60 <z_cstart+0xe8>)
   12e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12e9a:	2400      	movs	r4, #0
   12e9c:	616b      	str	r3, [r5, #20]
   12e9e:	23e0      	movs	r3, #224	; 0xe0
   12ea0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   12ea4:	77ec      	strb	r4, [r5, #31]
   12ea6:	762c      	strb	r4, [r5, #24]
   12ea8:	766c      	strb	r4, [r5, #25]
   12eaa:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12eac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12eae:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12eb2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12eb4:	f7f1 f9e8 	bl	4288 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   12eb8:	f7f1 f8be 	bl	4038 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   12ebc:	f04f 33ff 	mov.w	r3, #4294967295
   12ec0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   12ec2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   12ec4:	4d27      	ldr	r5, [pc, #156]	; (12f64 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   12ec6:	f240 1301 	movw	r3, #257	; 0x101
   12eca:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
   12ece:	ab07      	add	r3, sp, #28
   12ed0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12ed2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   12ed4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
   12ed8:	f7ff ff32 	bl	12d40 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12edc:	2001      	movs	r0, #1
   12ede:	f7ff ff2f 	bl	12d40 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   12ee2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   12ee6:	f000 fb1d 	bl	13524 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   12eea:	4b1f      	ldr	r3, [pc, #124]	; (12f68 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   12eec:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   12eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12ef2:	4641      	mov	r1, r8
   12ef4:	9305      	str	r3, [sp, #20]
   12ef6:	4630      	mov	r0, r6
   12ef8:	4653      	mov	r3, sl
   12efa:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   12efe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12f02:	9400      	str	r4, [sp, #0]
   12f04:	f000 fbf6 	bl	136f4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12f08:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   12f0a:	4630      	mov	r0, r6
   12f0c:	f023 0304 	bic.w	r3, r3, #4
   12f10:	7373      	strb	r3, [r6, #13]
   12f12:	f001 fd8a 	bl	14a2a <z_ready_thread>
	z_setup_new_thread(thread, stack,
   12f16:	230f      	movs	r3, #15
   12f18:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12f1c:	4913      	ldr	r1, [pc, #76]	; (12f6c <z_cstart+0xf4>)
   12f1e:	4b14      	ldr	r3, [pc, #80]	; (12f70 <z_cstart+0xf8>)
   12f20:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12f24:	4638      	mov	r0, r7
   12f26:	e9cd b404 	strd	fp, r4, [sp, #16]
   12f2a:	e9cd 4400 	strd	r4, r4, [sp]
   12f2e:	f000 fbe1 	bl	136f4 <z_setup_new_thread>
   12f32:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   12f34:	60ef      	str	r7, [r5, #12]
   12f36:	f023 0304 	bic.w	r3, r3, #4
   12f3a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   12f3c:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   12f40:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   12f44:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   12f46:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   12f4a:	4653      	mov	r3, sl
   12f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12f50:	4641      	mov	r1, r8
   12f52:	4630      	mov	r0, r6
   12f54:	f7f0 fffe 	bl	3f54 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   12f58:	e000ed00 	.word	0xe000ed00
   12f5c:	20001f1c 	.word	0x20001f1c
   12f60:	20001ea8 	.word	0x20001ea8
   12f64:	20001f90 	.word	0x20001f90
   12f68:	0001615f 	.word	0x0001615f
   12f6c:	20002c38 	.word	0x20002c38
   12f70:	00012db5 	.word	0x00012db5
   12f74:	20003578 	.word	0x20003578
   12f78:	00012e31 	.word	0x00012e31
   12f7c:	20002838 	.word	0x20002838

00012f80 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   12f80:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   12f82:	4c06      	ldr	r4, [pc, #24]	; (12f9c <statics_init+0x1c>)
   12f84:	4d06      	ldr	r5, [pc, #24]	; (12fa0 <statics_init+0x20>)
   12f86:	42ac      	cmp	r4, r5
   12f88:	d301      	bcc.n	12f8e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   12f8a:	2000      	movs	r0, #0
   12f8c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   12f8e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   12f92:	4620      	mov	r0, r4
   12f94:	f001 fbb5 	bl	14702 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   12f98:	3414      	adds	r4, #20
   12f9a:	e7f4      	b.n	12f86 <statics_init+0x6>
   12f9c:	20000474 	.word	0x20000474
   12fa0:	20000474 	.word	0x20000474

00012fa4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   12fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12fa6:	4616      	mov	r6, r2
   12fa8:	461f      	mov	r7, r3
   12faa:	f04f 0320 	mov.w	r3, #32
   12fae:	f3ef 8511 	mrs	r5, BASEPRI
   12fb2:	f383 8811 	msr	BASEPRI, r3
   12fb6:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   12fba:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   12fbc:	b19c      	cbz	r4, 12fe6 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12fbe:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   12fc0:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12fc2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   12fc6:	4294      	cmp	r4, r2
	list->head = node;
   12fc8:	6003      	str	r3, [r0, #0]
	list->tail = node;
   12fca:	bf08      	it	eq
   12fcc:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   12fce:	2101      	movs	r1, #1
   12fd0:	4620      	mov	r0, r4
   12fd2:	f001 fc7b 	bl	148cc <z_queue_node_peek>
   12fd6:	4604      	mov	r4, r0
	__asm__ volatile(
   12fd8:	f385 8811 	msr	BASEPRI, r5
   12fdc:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   12fe0:	4620      	mov	r0, r4
   12fe2:	b003      	add	sp, #12
   12fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12fe6:	ea56 0307 	orrs.w	r3, r6, r7
   12fea:	d0f5      	beq.n	12fd8 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12fec:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   12ff0:	e9cd 6700 	strd	r6, r7, [sp]
   12ff4:	4629      	mov	r1, r5
   12ff6:	4610      	mov	r0, r2
   12ff8:	f000 fa80 	bl	134fc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   12ffc:	2800      	cmp	r0, #0
   12ffe:	d1ef      	bne.n	12fe0 <z_impl_k_queue_get+0x3c>
   13000:	4b01      	ldr	r3, [pc, #4]	; (13008 <z_impl_k_queue_get+0x64>)
   13002:	689b      	ldr	r3, [r3, #8]
   13004:	695c      	ldr	r4, [r3, #20]
   13006:	e7eb      	b.n	12fe0 <z_impl_k_queue_get+0x3c>
   13008:	20001f90 	.word	0x20001f90

0001300c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1300c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1300e:	4c08      	ldr	r4, [pc, #32]	; (13030 <z_reset_time_slice+0x24>)
   13010:	6823      	ldr	r3, [r4, #0]
   13012:	b15b      	cbz	r3, 1302c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   13014:	f7f0 fef8 	bl	3e08 <z_clock_elapsed>
   13018:	4603      	mov	r3, r0
   1301a:	6820      	ldr	r0, [r4, #0]
   1301c:	4a05      	ldr	r2, [pc, #20]	; (13034 <z_reset_time_slice+0x28>)
   1301e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   13020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   13024:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   13026:	2100      	movs	r1, #0
   13028:	f001 be76 	b.w	14d18 <z_set_timeout_expiry>
}
   1302c:	bd10      	pop	{r4, pc}
   1302e:	bf00      	nop
   13030:	20001fc8 	.word	0x20001fc8
   13034:	20001f90 	.word	0x20001f90

00013038 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   13038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1303a:	4605      	mov	r5, r0
   1303c:	460c      	mov	r4, r1
	__asm__ volatile(
   1303e:	f04f 0320 	mov.w	r3, #32
   13042:	f3ef 8611 	mrs	r6, BASEPRI
   13046:	f383 8811 	msr	BASEPRI, r3
   1304a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1304e:	4b0d      	ldr	r3, [pc, #52]	; (13084 <k_sched_time_slice_set+0x4c>)
   13050:	2200      	movs	r2, #0
   13052:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13056:	f240 30e7 	movw	r0, #999	; 0x3e7
   1305a:	2100      	movs	r1, #0
   1305c:	611a      	str	r2, [r3, #16]
   1305e:	fbe7 0105 	umlal	r0, r1, r7, r5
   13062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13066:	2300      	movs	r3, #0
   13068:	f7ed f83a 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1306c:	4b06      	ldr	r3, [pc, #24]	; (13088 <k_sched_time_slice_set+0x50>)
   1306e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   13070:	4b06      	ldr	r3, [pc, #24]	; (1308c <k_sched_time_slice_set+0x54>)
   13072:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   13074:	f7ff ffca 	bl	1300c <z_reset_time_slice>
	__asm__ volatile(
   13078:	f386 8811 	msr	BASEPRI, r6
   1307c:	f3bf 8f6f 	isb	sy
	}
}
   13080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13082:	bf00      	nop
   13084:	20001f90 	.word	0x20001f90
   13088:	20001fc8 	.word	0x20001fc8
   1308c:	20001fc4 	.word	0x20001fc4

00013090 <k_sched_lock>:
	__asm__ volatile(
   13090:	f04f 0320 	mov.w	r3, #32
   13094:	f3ef 8111 	mrs	r1, BASEPRI
   13098:	f383 8811 	msr	BASEPRI, r3
   1309c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   130a0:	4b04      	ldr	r3, [pc, #16]	; (130b4 <k_sched_lock+0x24>)
   130a2:	689a      	ldr	r2, [r3, #8]
   130a4:	7bd3      	ldrb	r3, [r2, #15]
   130a6:	3b01      	subs	r3, #1
   130a8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   130aa:	f381 8811 	msr	BASEPRI, r1
   130ae:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   130b2:	4770      	bx	lr
   130b4:	20001f90 	.word	0x20001f90

000130b8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   130b8:	4b09      	ldr	r3, [pc, #36]	; (130e0 <z_priq_dumb_remove+0x28>)
   130ba:	f103 0228 	add.w	r2, r3, #40	; 0x28
   130be:	4282      	cmp	r2, r0
   130c0:	d105      	bne.n	130ce <z_priq_dumb_remove+0x16>
   130c2:	689b      	ldr	r3, [r3, #8]
   130c4:	428b      	cmp	r3, r1
   130c6:	d102      	bne.n	130ce <z_priq_dumb_remove+0x16>
   130c8:	7b4b      	ldrb	r3, [r1, #13]
   130ca:	06db      	lsls	r3, r3, #27
   130cc:	d106      	bne.n	130dc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   130ce:	e9d1 3200 	ldrd	r3, r2, [r1]
   130d2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   130d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   130d6:	2300      	movs	r3, #0
	node->prev = NULL;
   130d8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   130dc:	4770      	bx	lr
   130de:	bf00      	nop
   130e0:	20001f90 	.word	0x20001f90

000130e4 <update_cache>:
{
   130e4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   130e6:	4c10      	ldr	r4, [pc, #64]	; (13128 <update_cache+0x44>)
{
   130e8:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   130ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   130ee:	f001 fc92 	bl	14a16 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   130f2:	68a3      	ldr	r3, [r4, #8]
   130f4:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   130f6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   130f8:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   130fa:	bf44      	itt	mi
   130fc:	f041 0108 	orrmi.w	r1, r1, #8
   13100:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   13102:	b905      	cbnz	r5, 13106 <update_cache+0x22>
   13104:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   13106:	b94e      	cbnz	r6, 1311c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   13108:	7b5a      	ldrb	r2, [r3, #13]
   1310a:	06d2      	lsls	r2, r2, #27
   1310c:	d106      	bne.n	1311c <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1310e:	69aa      	ldr	r2, [r5, #24]
   13110:	b922      	cbnz	r2, 1311c <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   13112:	89da      	ldrh	r2, [r3, #14]
   13114:	2a7f      	cmp	r2, #127	; 0x7f
   13116:	d901      	bls.n	1311c <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   13118:	6263      	str	r3, [r4, #36]	; 0x24
}
   1311a:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1311c:	42ab      	cmp	r3, r5
   1311e:	d001      	beq.n	13124 <update_cache+0x40>
			z_reset_time_slice();
   13120:	f7ff ff74 	bl	1300c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   13124:	6265      	str	r5, [r4, #36]	; 0x24
}
   13126:	e7f8      	b.n	1311a <update_cache+0x36>
   13128:	20001f90 	.word	0x20001f90

0001312c <k_sched_unlock>:
{
   1312c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1312e:	f04f 0320 	mov.w	r3, #32
   13132:	f3ef 8411 	mrs	r4, BASEPRI
   13136:	f383 8811 	msr	BASEPRI, r3
   1313a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1313e:	4b08      	ldr	r3, [pc, #32]	; (13160 <k_sched_unlock+0x34>)
   13140:	689a      	ldr	r2, [r3, #8]
   13142:	7bd3      	ldrb	r3, [r2, #15]
   13144:	3301      	adds	r3, #1
   13146:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   13148:	2000      	movs	r0, #0
   1314a:	f7ff ffcb 	bl	130e4 <update_cache>
	__asm__ volatile(
   1314e:	f384 8811 	msr	BASEPRI, r4
   13152:	f3bf 8f6f 	isb	sy
}
   13156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1315a:	f001 bc35 	b.w	149c8 <z_reschedule_unlocked>
   1315e:	bf00      	nop
   13160:	20001f90 	.word	0x20001f90

00013164 <ready_thread>:
{
   13164:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   13166:	7b43      	ldrb	r3, [r0, #13]
   13168:	06db      	lsls	r3, r3, #27
   1316a:	d12a      	bne.n	131c2 <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1316c:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1316e:	bb43      	cbnz	r3, 131c2 <ready_thread+0x5e>
	return list->head == list;
   13170:	4a15      	ldr	r2, [pc, #84]	; (131c8 <ready_thread+0x64>)
   13172:	4611      	mov	r1, r2
   13174:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13178:	428c      	cmp	r4, r1
   1317a:	bf18      	it	ne
   1317c:	4623      	movne	r3, r4
   1317e:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13180:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   13182:	bf38      	it	cc
   13184:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13186:	b1b3      	cbz	r3, 131b6 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   13188:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1318c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   13190:	42ae      	cmp	r6, r5
   13192:	db03      	blt.n	1319c <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   13194:	42a3      	cmp	r3, r4
   13196:	d00e      	beq.n	131b6 <ready_thread+0x52>
   13198:	681b      	ldr	r3, [r3, #0]
   1319a:	e7f4      	b.n	13186 <ready_thread+0x22>
	node->prev = successor->prev;
   1319c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1319e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   131a2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   131a4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   131a6:	7b43      	ldrb	r3, [r0, #13]
   131a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   131ac:	7343      	strb	r3, [r0, #13]
}
   131ae:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   131b0:	2000      	movs	r0, #0
   131b2:	f7ff bf97 	b.w	130e4 <update_cache>
	node->prev = list->tail;
   131b6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   131ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   131bc:	6018      	str	r0, [r3, #0]
	list->tail = node;
   131be:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   131c0:	e7f1      	b.n	131a6 <ready_thread+0x42>
}
   131c2:	bc70      	pop	{r4, r5, r6}
   131c4:	4770      	bx	lr
   131c6:	bf00      	nop
   131c8:	20001f90 	.word	0x20001f90

000131cc <z_sched_start>:
{
   131cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   131ce:	f04f 0220 	mov.w	r2, #32
   131d2:	f3ef 8411 	mrs	r4, BASEPRI
   131d6:	f382 8811 	msr	BASEPRI, r2
   131da:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   131de:	7b42      	ldrb	r2, [r0, #13]
   131e0:	0751      	lsls	r1, r2, #29
   131e2:	d404      	bmi.n	131ee <z_sched_start+0x22>
	__asm__ volatile(
   131e4:	f384 8811 	msr	BASEPRI, r4
   131e8:	f3bf 8f6f 	isb	sy
}
   131ec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   131ee:	f022 0204 	bic.w	r2, r2, #4
   131f2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   131f4:	f7ff ffb6 	bl	13164 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   131f8:	4621      	mov	r1, r4
   131fa:	4802      	ldr	r0, [pc, #8]	; (13204 <z_sched_start+0x38>)
}
   131fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   13200:	f001 bbcb 	b.w	1499a <z_reschedule>
   13204:	20002074 	.word	0x20002074

00013208 <z_move_thread_to_end_of_prio_q>:
{
   13208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1320a:	4601      	mov	r1, r0
	__asm__ volatile(
   1320c:	f04f 0320 	mov.w	r3, #32
   13210:	f3ef 8411 	mrs	r4, BASEPRI
   13214:	f383 8811 	msr	BASEPRI, r3
   13218:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1321c:	f990 300d 	ldrsb.w	r3, [r0, #13]
   13220:	2b00      	cmp	r3, #0
   13222:	da02      	bge.n	1322a <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   13224:	4819      	ldr	r0, [pc, #100]	; (1328c <z_move_thread_to_end_of_prio_q+0x84>)
   13226:	f7ff ff47 	bl	130b8 <z_priq_dumb_remove>
	return list->head == list;
   1322a:	4a19      	ldr	r2, [pc, #100]	; (13290 <z_move_thread_to_end_of_prio_q+0x88>)
   1322c:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1322e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
   13230:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13234:	4283      	cmp	r3, r0
   13236:	bf08      	it	eq
   13238:	2300      	moveq	r3, #0
   1323a:	2b00      	cmp	r3, #0
   1323c:	bf38      	it	cc
   1323e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13240:	b1eb      	cbz	r3, 1327e <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   13242:	f991 700e 	ldrsb.w	r7, [r1, #14]
   13246:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1324a:	42b7      	cmp	r7, r6
   1324c:	db03      	blt.n	13256 <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1324e:	429d      	cmp	r5, r3
   13250:	d015      	beq.n	1327e <z_move_thread_to_end_of_prio_q+0x76>
   13252:	681b      	ldr	r3, [r3, #0]
   13254:	e7f4      	b.n	13240 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   13256:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   13258:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1325c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1325e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   13260:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   13262:	6890      	ldr	r0, [r2, #8]
   13264:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13268:	734b      	strb	r3, [r1, #13]
   1326a:	1a43      	subs	r3, r0, r1
   1326c:	4258      	negs	r0, r3
   1326e:	4158      	adcs	r0, r3
   13270:	f7ff ff38 	bl	130e4 <update_cache>
	__asm__ volatile(
   13274:	f384 8811 	msr	BASEPRI, r4
   13278:	f3bf 8f6f 	isb	sy
}
   1327c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1327e:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   13282:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   13284:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13286:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   13288:	e7ea      	b.n	13260 <z_move_thread_to_end_of_prio_q+0x58>
   1328a:	bf00      	nop
   1328c:	20001fb8 	.word	0x20001fb8
   13290:	20001f90 	.word	0x20001f90

00013294 <z_time_slice>:
{
   13294:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   13296:	4a15      	ldr	r2, [pc, #84]	; (132ec <z_time_slice+0x58>)
   13298:	4b15      	ldr	r3, [pc, #84]	; (132f0 <z_time_slice+0x5c>)
   1329a:	6814      	ldr	r4, [r2, #0]
{
   1329c:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1329e:	6898      	ldr	r0, [r3, #8]
   132a0:	42a0      	cmp	r0, r4
   132a2:	461c      	mov	r4, r3
   132a4:	d103      	bne.n	132ae <z_time_slice+0x1a>
}
   132a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   132aa:	f7ff beaf 	b.w	1300c <z_reset_time_slice>
	pending_current = NULL;
   132ae:	2500      	movs	r5, #0
   132b0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   132b2:	4a10      	ldr	r2, [pc, #64]	; (132f4 <z_time_slice+0x60>)
   132b4:	6812      	ldr	r2, [r2, #0]
   132b6:	b1b2      	cbz	r2, 132e6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   132b8:	89c2      	ldrh	r2, [r0, #14]
   132ba:	2a7f      	cmp	r2, #127	; 0x7f
   132bc:	d813      	bhi.n	132e6 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   132be:	4a0e      	ldr	r2, [pc, #56]	; (132f8 <z_time_slice+0x64>)
   132c0:	f990 500e 	ldrsb.w	r5, [r0, #14]
   132c4:	6812      	ldr	r2, [r2, #0]
   132c6:	4295      	cmp	r5, r2
   132c8:	db0d      	blt.n	132e6 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   132ca:	4a0c      	ldr	r2, [pc, #48]	; (132fc <z_time_slice+0x68>)
   132cc:	4290      	cmp	r0, r2
   132ce:	d00a      	beq.n	132e6 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   132d0:	6982      	ldr	r2, [r0, #24]
   132d2:	b942      	cbnz	r2, 132e6 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   132d4:	691a      	ldr	r2, [r3, #16]
   132d6:	428a      	cmp	r2, r1
   132d8:	dc02      	bgt.n	132e0 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   132da:	f7ff ff95 	bl	13208 <z_move_thread_to_end_of_prio_q>
   132de:	e7e2      	b.n	132a6 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   132e0:	1a52      	subs	r2, r2, r1
   132e2:	611a      	str	r2, [r3, #16]
}
   132e4:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   132e6:	2300      	movs	r3, #0
   132e8:	6123      	str	r3, [r4, #16]
   132ea:	e7fb      	b.n	132e4 <z_time_slice+0x50>
   132ec:	20001fc0 	.word	0x20001fc0
   132f0:	20001f90 	.word	0x20001f90
   132f4:	20001fc8 	.word	0x20001fc8
   132f8:	20001fc4 	.word	0x20001fc4
   132fc:	20001ea8 	.word	0x20001ea8

00013300 <z_impl_k_thread_suspend>:
{
   13300:	b570      	push	{r4, r5, r6, lr}
   13302:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   13304:	3018      	adds	r0, #24
   13306:	f001 fce1 	bl	14ccc <z_abort_timeout>
	__asm__ volatile(
   1330a:	f04f 0320 	mov.w	r3, #32
   1330e:	f3ef 8611 	mrs	r6, BASEPRI
   13312:	f383 8811 	msr	BASEPRI, r3
   13316:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1331a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1331e:	2b00      	cmp	r3, #0
   13320:	da07      	bge.n	13332 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   13322:	480f      	ldr	r0, [pc, #60]	; (13360 <z_impl_k_thread_suspend+0x60>)
   13324:	4621      	mov	r1, r4
   13326:	f7ff fec7 	bl	130b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1332a:	7b63      	ldrb	r3, [r4, #13]
   1332c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13330:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   13332:	4d0c      	ldr	r5, [pc, #48]	; (13364 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13334:	7b63      	ldrb	r3, [r4, #13]
   13336:	68a8      	ldr	r0, [r5, #8]
   13338:	f043 0310 	orr.w	r3, r3, #16
   1333c:	7363      	strb	r3, [r4, #13]
   1333e:	1b03      	subs	r3, r0, r4
   13340:	4258      	negs	r0, r3
   13342:	4158      	adcs	r0, r3
   13344:	f7ff fece 	bl	130e4 <update_cache>
	__asm__ volatile(
   13348:	f386 8811 	msr	BASEPRI, r6
   1334c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   13350:	68ab      	ldr	r3, [r5, #8]
   13352:	42a3      	cmp	r3, r4
   13354:	d103      	bne.n	1335e <z_impl_k_thread_suspend+0x5e>
}
   13356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1335a:	f001 bb35 	b.w	149c8 <z_reschedule_unlocked>
}
   1335e:	bd70      	pop	{r4, r5, r6, pc}
   13360:	20001fb8 	.word	0x20001fb8
   13364:	20001f90 	.word	0x20001f90

00013368 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   13368:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   1336a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1336e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   13370:	b103      	cbz	r3, 13374 <z_thread_single_abort+0xc>
		thread->fn_abort();
   13372:	4798      	blx	r3
   13374:	f104 0018 	add.w	r0, r4, #24
   13378:	f001 fca8 	bl	14ccc <z_abort_timeout>
	__asm__ volatile(
   1337c:	f04f 0320 	mov.w	r3, #32
   13380:	f3ef 8611 	mrs	r6, BASEPRI
   13384:	f383 8811 	msr	BASEPRI, r3
   13388:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1338c:	7b63      	ldrb	r3, [r4, #13]
   1338e:	06d8      	lsls	r0, r3, #27
   13390:	d123      	bne.n	133da <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   13392:	69a2      	ldr	r2, [r4, #24]
   13394:	bb0a      	cbnz	r2, 133da <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   13396:	0619      	lsls	r1, r3, #24
   13398:	d507      	bpl.n	133aa <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1339a:	481f      	ldr	r0, [pc, #124]	; (13418 <z_thread_single_abort+0xb0>)
   1339c:	4621      	mov	r1, r4
   1339e:	f7ff fe8b 	bl	130b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   133a2:	7b63      	ldrb	r3, [r4, #13]
   133a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   133a8:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   133aa:	4b1c      	ldr	r3, [pc, #112]	; (1341c <z_thread_single_abort+0xb4>)
   133ac:	6898      	ldr	r0, [r3, #8]
   133ae:	1b02      	subs	r2, r0, r4
   133b0:	4250      	negs	r0, r2
   133b2:	4150      	adcs	r0, r2
   133b4:	f7ff fe96 	bl	130e4 <update_cache>
		thread->base.thread_state |= mask;
   133b8:	7b63      	ldrb	r3, [r4, #13]
   133ba:	f043 0308 	orr.w	r3, r3, #8
   133be:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   133c0:	f104 0828 	add.w	r8, r4, #40	; 0x28
			waiter->base.pended_on = NULL;
   133c4:	2700      	movs	r7, #0
	return list->head == list;
   133c6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   133c8:	4545      	cmp	r5, r8
   133ca:	d000      	beq.n	133ce <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   133cc:	b995      	cbnz	r5, 133f4 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   133ce:	f386 8811 	msr	BASEPRI, r6
   133d2:	f3bf 8f6f 	isb	sy
}
   133d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   133da:	079b      	lsls	r3, r3, #30
   133dc:	d5ec      	bpl.n	133b8 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   133de:	68a0      	ldr	r0, [r4, #8]
   133e0:	4621      	mov	r1, r4
   133e2:	f7ff fe69 	bl	130b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   133e6:	7b63      	ldrb	r3, [r4, #13]
   133e8:	f023 0302 	bic.w	r3, r3, #2
   133ec:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   133ee:	2300      	movs	r3, #0
   133f0:	60a3      	str	r3, [r4, #8]
   133f2:	e7e1      	b.n	133b8 <z_thread_single_abort+0x50>
   133f4:	f105 0018 	add.w	r0, r5, #24
   133f8:	f001 fc68 	bl	14ccc <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   133fc:	68a8      	ldr	r0, [r5, #8]
   133fe:	4629      	mov	r1, r5
   13400:	f7ff fe5a 	bl	130b8 <z_priq_dumb_remove>
   13404:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   13406:	60af      	str	r7, [r5, #8]
   13408:	f023 0302 	bic.w	r3, r3, #2
   1340c:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1340e:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   13410:	4628      	mov	r0, r5
   13412:	f7ff fea7 	bl	13164 <ready_thread>
   13416:	e7d6      	b.n	133c6 <z_thread_single_abort+0x5e>
   13418:	20001fb8 	.word	0x20001fb8
   1341c:	20001f90 	.word	0x20001f90

00013420 <unready_thread>:
{
   13420:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   13422:	f990 300d 	ldrsb.w	r3, [r0, #13]
   13426:	2b00      	cmp	r3, #0
{
   13428:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1342a:	da06      	bge.n	1343a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1342c:	4807      	ldr	r0, [pc, #28]	; (1344c <unready_thread+0x2c>)
   1342e:	f7ff fe43 	bl	130b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   13432:	7b4b      	ldrb	r3, [r1, #13]
   13434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13438:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1343a:	4b05      	ldr	r3, [pc, #20]	; (13450 <unready_thread+0x30>)
   1343c:	6898      	ldr	r0, [r3, #8]
   1343e:	1a43      	subs	r3, r0, r1
   13440:	4258      	negs	r0, r3
   13442:	4158      	adcs	r0, r3
}
   13444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   13448:	f7ff be4c 	b.w	130e4 <update_cache>
   1344c:	20001fb8 	.word	0x20001fb8
   13450:	20001f90 	.word	0x20001f90

00013454 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   13454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13456:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   13458:	f001 fc78 	bl	14d4c <z_tick_get_32>
   1345c:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1345e:	f04f 0320 	mov.w	r3, #32
   13462:	f3ef 8711 	mrs	r7, BASEPRI
   13466:	f383 8811 	msr	BASEPRI, r3
   1346a:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1346e:	4e0d      	ldr	r6, [pc, #52]	; (134a4 <z_tick_sleep.part.0+0x50>)
   13470:	4b0d      	ldr	r3, [pc, #52]	; (134a8 <z_tick_sleep.part.0+0x54>)
   13472:	68b0      	ldr	r0, [r6, #8]
   13474:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   13476:	f001 fb13 	bl	14aa0 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1347a:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1347c:	490b      	ldr	r1, [pc, #44]	; (134ac <z_tick_sleep.part.0+0x58>)
   1347e:	462a      	mov	r2, r5
   13480:	17eb      	asrs	r3, r5, #31
   13482:	3018      	adds	r0, #24
   13484:	f000 fa8a 	bl	1399c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   13488:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1348a:	7b53      	ldrb	r3, [r2, #13]
   1348c:	f043 0310 	orr.w	r3, r3, #16
   13490:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
   13492:	4638      	mov	r0, r7
   13494:	f7f0 fcd2 	bl	3e3c <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   13498:	f001 fc58 	bl	14d4c <z_tick_get_32>
   1349c:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1349e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   134a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   134a4:	20001f90 	.word	0x20001f90
   134a8:	20001fc0 	.word	0x20001fc0
   134ac:	00014a4b 	.word	0x00014a4b

000134b0 <pend>:
{
   134b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134b4:	4606      	mov	r6, r0
   134b6:	4614      	mov	r4, r2
   134b8:	461d      	mov	r5, r3
   134ba:	f04f 0320 	mov.w	r3, #32
   134be:	f3ef 8711 	mrs	r7, BASEPRI
   134c2:	f383 8811 	msr	BASEPRI, r3
   134c6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   134ca:	f001 faf9 	bl	14ac0 <add_to_waitq_locked>
	__asm__ volatile(
   134ce:	f387 8811 	msr	BASEPRI, r7
   134d2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   134d6:	1c6b      	adds	r3, r5, #1
   134d8:	bf08      	it	eq
   134da:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   134de:	d008      	beq.n	134f2 <pend+0x42>
   134e0:	4622      	mov	r2, r4
   134e2:	462b      	mov	r3, r5
   134e4:	f106 0018 	add.w	r0, r6, #24
   134e8:	4903      	ldr	r1, [pc, #12]	; (134f8 <pend+0x48>)
}
   134ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   134ee:	f000 ba55 	b.w	1399c <z_add_timeout>
   134f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134f6:	bf00      	nop
   134f8:	00014a4b 	.word	0x00014a4b

000134fc <z_pend_curr>:
{
   134fc:	b510      	push	{r4, lr}
	pending_current = _current;
   134fe:	4b07      	ldr	r3, [pc, #28]	; (1351c <z_pend_curr+0x20>)
   13500:	6898      	ldr	r0, [r3, #8]
   13502:	4b07      	ldr	r3, [pc, #28]	; (13520 <z_pend_curr+0x24>)
{
   13504:	460c      	mov	r4, r1
	pending_current = _current;
   13506:	6018      	str	r0, [r3, #0]
{
   13508:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1350a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1350e:	f7ff ffcf 	bl	134b0 <pend>
   13512:	4620      	mov	r0, r4
}
   13514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13518:	f7f0 bc90 	b.w	3e3c <arch_swap>
   1351c:	20001f90 	.word	0x20001f90
   13520:	20001fc0 	.word	0x20001fc0

00013524 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   13524:	4b04      	ldr	r3, [pc, #16]	; (13538 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   13526:	2100      	movs	r1, #0
   13528:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1352c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   13530:	4608      	mov	r0, r1
   13532:	f7ff bd81 	b.w	13038 <k_sched_time_slice_set>
   13536:	bf00      	nop
   13538:	20001f90 	.word	0x20001f90

0001353c <z_impl_k_yield>:
{
   1353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1353e:	4c24      	ldr	r4, [pc, #144]	; (135d0 <z_impl_k_yield+0x94>)
   13540:	4b24      	ldr	r3, [pc, #144]	; (135d4 <z_impl_k_yield+0x98>)
   13542:	68a2      	ldr	r2, [r4, #8]
   13544:	429a      	cmp	r2, r3
   13546:	d030      	beq.n	135aa <z_impl_k_yield+0x6e>
	__asm__ volatile(
   13548:	f04f 0320 	mov.w	r3, #32
   1354c:	f3ef 8511 	mrs	r5, BASEPRI
   13550:	f383 8811 	msr	BASEPRI, r3
   13554:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   13558:	68a1      	ldr	r1, [r4, #8]
   1355a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1355e:	f7ff fdab 	bl	130b8 <z_priq_dumb_remove>
	return list->head == list;
   13562:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   13564:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13566:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13568:	4283      	cmp	r3, r0
   1356a:	bf08      	it	eq
   1356c:	2300      	moveq	r3, #0
   1356e:	2b00      	cmp	r3, #0
   13570:	bf38      	it	cc
   13572:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13574:	b32b      	cbz	r3, 135c2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   13576:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1357a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1357e:	42b7      	cmp	r7, r6
   13580:	db03      	blt.n	1358a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   13582:	428b      	cmp	r3, r1
   13584:	d01d      	beq.n	135c2 <z_impl_k_yield+0x86>
   13586:	681b      	ldr	r3, [r3, #0]
   13588:	e7f4      	b.n	13574 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1358a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1358c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   13590:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   13592:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   13594:	7b53      	ldrb	r3, [r2, #13]
   13596:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1359a:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1359c:	2001      	movs	r0, #1
   1359e:	f7ff fda1 	bl	130e4 <update_cache>
	__asm__ volatile(
   135a2:	f385 8811 	msr	BASEPRI, r5
   135a6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   135aa:	f04f 0320 	mov.w	r3, #32
   135ae:	f3ef 8011 	mrs	r0, BASEPRI
   135b2:	f383 8811 	msr	BASEPRI, r3
   135b6:	f3bf 8f6f 	isb	sy
}
   135ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   135be:	f7f0 bc3d 	b.w	3e3c <arch_swap>
	node->prev = list->tail;
   135c2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   135c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   135c8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   135ca:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   135cc:	e7e2      	b.n	13594 <z_impl_k_yield+0x58>
   135ce:	bf00      	nop
   135d0:	20001f90 	.word	0x20001f90
   135d4:	20001ea8 	.word	0x20001ea8

000135d8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   135d8:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   135da:	3301      	adds	r3, #1
   135dc:	bf08      	it	eq
   135de:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   135e2:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   135e4:	d106      	bne.n	135f4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   135e6:	4b0b      	ldr	r3, [pc, #44]	; (13614 <z_impl_k_sleep+0x3c>)
   135e8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   135ea:	f7ff fe89 	bl	13300 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   135ee:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   135f2:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   135f4:	4604      	mov	r4, r0
	if (ticks == 0) {
   135f6:	b948      	cbnz	r0, 1360c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   135f8:	f7ff ffa0 	bl	1353c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   135fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13600:	fb84 3400 	smull	r3, r4, r4, r0
   13604:	0bd8      	lsrs	r0, r3, #15
   13606:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1360a:	e7f2      	b.n	135f2 <z_impl_k_sleep+0x1a>
   1360c:	f7ff ff22 	bl	13454 <z_tick_sleep.part.0>
   13610:	4604      	mov	r4, r0
   13612:	e7f3      	b.n	135fc <z_impl_k_sleep+0x24>
   13614:	20001f90 	.word	0x20001f90

00013618 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   13618:	4b01      	ldr	r3, [pc, #4]	; (13620 <z_impl_k_current_get+0x8>)
   1361a:	6898      	ldr	r0, [r3, #8]
   1361c:	4770      	bx	lr
   1361e:	bf00      	nop
   13620:	20001f90 	.word	0x20001f90

00013624 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   13624:	b538      	push	{r3, r4, r5, lr}
   13626:	4604      	mov	r4, r0
   13628:	f04f 0320 	mov.w	r3, #32
   1362c:	f3ef 8511 	mrs	r5, BASEPRI
   13630:	f383 8811 	msr	BASEPRI, r3
   13634:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   13638:	f001 fa6d 	bl	14b16 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1363c:	b148      	cbz	r0, 13652 <z_impl_k_sem_give+0x2e>
   1363e:	2200      	movs	r2, #0
   13640:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   13642:	f001 f9f2 	bl	14a2a <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   13646:	4629      	mov	r1, r5
   13648:	4808      	ldr	r0, [pc, #32]	; (1366c <z_impl_k_sem_give+0x48>)
}
   1364a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1364e:	f001 b9a4 	b.w	1499a <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   13652:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   13656:	429a      	cmp	r2, r3
   13658:	bf18      	it	ne
   1365a:	3301      	addne	r3, #1
   1365c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1365e:	2102      	movs	r1, #2
   13660:	f104 0010 	add.w	r0, r4, #16
   13664:	f001 fc9b 	bl	14f9e <z_handle_obj_poll_events>
}
   13668:	e7ed      	b.n	13646 <z_impl_k_sem_give+0x22>
   1366a:	bf00      	nop
   1366c:	20002074 	.word	0x20002074

00013670 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   13670:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13672:	4614      	mov	r4, r2
   13674:	461d      	mov	r5, r3
   13676:	f04f 0320 	mov.w	r3, #32
   1367a:	f3ef 8111 	mrs	r1, BASEPRI
   1367e:	f383 8811 	msr	BASEPRI, r3
   13682:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   13686:	6883      	ldr	r3, [r0, #8]
   13688:	b143      	cbz	r3, 1369c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1368a:	3b01      	subs	r3, #1
   1368c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1368e:	f381 8811 	msr	BASEPRI, r1
   13692:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   13696:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   13698:	b003      	add	sp, #12
   1369a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1369c:	ea54 0305 	orrs.w	r3, r4, r5
   136a0:	d106      	bne.n	136b0 <z_impl_k_sem_take+0x40>
   136a2:	f381 8811 	msr	BASEPRI, r1
   136a6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   136aa:	f06f 000f 	mvn.w	r0, #15
   136ae:	e7f3      	b.n	13698 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   136b0:	4602      	mov	r2, r0
   136b2:	e9cd 4500 	strd	r4, r5, [sp]
   136b6:	4802      	ldr	r0, [pc, #8]	; (136c0 <z_impl_k_sem_take+0x50>)
   136b8:	f7ff ff20 	bl	134fc <z_pend_curr>
	return ret;
   136bc:	e7ec      	b.n	13698 <z_impl_k_sem_take+0x28>
   136be:	bf00      	nop
   136c0:	20002074 	.word	0x20002074

000136c4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   136c4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   136c6:	4c08      	ldr	r4, [pc, #32]	; (136e8 <k_sys_work_q_init+0x24>)
   136c8:	4908      	ldr	r1, [pc, #32]	; (136ec <k_sys_work_q_init+0x28>)
   136ca:	f04f 33ff 	mov.w	r3, #4294967295
   136ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   136d2:	4620      	mov	r0, r4
   136d4:	f000 f8c2 	bl	1385c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   136d8:	4905      	ldr	r1, [pc, #20]	; (136f0 <k_sys_work_q_init+0x2c>)
   136da:	f104 0018 	add.w	r0, r4, #24
   136de:	f001 fa6f 	bl	14bc0 <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   136e2:	2000      	movs	r0, #0
   136e4:	bd10      	pop	{r4, pc}
   136e6:	bf00      	nop
   136e8:	20001fcc 	.word	0x20001fcc
   136ec:	20003578 	.word	0x20003578
   136f0:	00016164 	.word	0x00016164

000136f4 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   136f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   136f6:	b087      	sub	sp, #28
   136f8:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	sys_dlist_init(&w->waitq);
   136fc:	f100 0528 	add.w	r5, r0, #40	; 0x28
#endif
#endif
	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13700:	e9cd 6703 	strd	r6, r7, [sp, #12]
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   13704:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13706:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13708:	9602      	str	r6, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   1370a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   1370e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   13710:	9601      	str	r6, [sp, #4]
	thread_base->thread_state = (u8_t)initial_state;
   13712:	2504      	movs	r5, #4
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13714:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->thread_state = (u8_t)initial_state;
   13716:	7345      	strb	r5, [r0, #13]

	thread_base->sched_locked = 0U;
   13718:	2500      	movs	r5, #0
	node->prev = NULL;
   1371a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->user_options = (u8_t)options;
   1371e:	7307      	strb	r7, [r0, #12]
	thread_base->sched_locked = 0U;
   13720:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13722:	9600      	str	r6, [sp, #0]
{
   13724:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13726:	f7f0 fbfb 	bl	3f20 <arch_new_thread>
	if (!_current) {
   1372a:	4b04      	ldr	r3, [pc, #16]	; (1373c <z_setup_new_thread+0x48>)
   1372c:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1372e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   13732:	b103      	cbz	r3, 13736 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   13734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   13736:	66a3      	str	r3, [r4, #104]	; 0x68
}
   13738:	b007      	add	sp, #28
   1373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1373c:	20001f90 	.word	0x20001f90

00013740 <z_impl_k_thread_create>:
{
   13740:	b5f0      	push	{r4, r5, r6, r7, lr}
   13742:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13744:	2500      	movs	r5, #0
   13746:	9505      	str	r5, [sp, #20]
   13748:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1374a:	9504      	str	r5, [sp, #16]
   1374c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1374e:	9503      	str	r5, [sp, #12]
   13750:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   13752:	9502      	str	r5, [sp, #8]
{
   13754:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13758:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1375a:	9501      	str	r5, [sp, #4]
   1375c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1375e:	9500      	str	r5, [sp, #0]
{
   13760:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   13762:	f7ff ffc7 	bl	136f4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   13766:	1c7b      	adds	r3, r7, #1
   13768:	bf08      	it	eq
   1376a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1376e:	d005      	beq.n	1377c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13770:	ea56 0307 	orrs.w	r3, r6, r7
   13774:	d105      	bne.n	13782 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   13776:	4620      	mov	r0, r4
   13778:	f7ff fd28 	bl	131cc <z_sched_start>
}
   1377c:	4620      	mov	r0, r4
   1377e:	b007      	add	sp, #28
   13780:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13782:	4904      	ldr	r1, [pc, #16]	; (13794 <z_impl_k_thread_create+0x54>)
   13784:	4632      	mov	r2, r6
   13786:	463b      	mov	r3, r7
   13788:	f104 0018 	add.w	r0, r4, #24
   1378c:	f000 f906 	bl	1399c <z_add_timeout>
   13790:	e7f4      	b.n	1377c <z_impl_k_thread_create+0x3c>
   13792:	bf00      	nop
   13794:	00014a4b 	.word	0x00014a4b

00013798 <z_init_static_threads>:
{
   13798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1379c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 13854 <z_init_static_threads+0xbc>
   137a0:	4d2b      	ldr	r5, [pc, #172]	; (13850 <z_init_static_threads+0xb8>)
{
   137a2:	b087      	sub	sp, #28
   137a4:	46c8      	mov	r8, r9
	_FOREACH_STATIC_THREAD(thread_data) {
   137a6:	454d      	cmp	r5, r9
   137a8:	f105 0430 	add.w	r4, r5, #48	; 0x30
   137ac:	d30d      	bcc.n	137ca <z_init_static_threads+0x32>
	k_sched_lock();
   137ae:	f7ff fc6f 	bl	13090 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   137b2:	4c27      	ldr	r4, [pc, #156]	; (13850 <z_init_static_threads+0xb8>)
   137b4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 13858 <z_init_static_threads+0xc0>
			return (u32_t)((t * to_hz + off) / from_hz);
   137b8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   137bc:	4544      	cmp	r4, r8
   137be:	d321      	bcc.n	13804 <z_init_static_threads+0x6c>
}
   137c0:	b007      	add	sp, #28
   137c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   137c6:	f7ff bcb1 	b.w	1312c <k_sched_unlock>
		z_setup_new_thread(
   137ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   137ce:	9305      	str	r3, [sp, #20]
   137d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   137d4:	9304      	str	r3, [sp, #16]
   137d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   137da:	9303      	str	r3, [sp, #12]
   137dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   137e0:	9302      	str	r3, [sp, #8]
   137e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   137e6:	9301      	str	r3, [sp, #4]
   137e8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   137ec:	9300      	str	r3, [sp, #0]
   137ee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   137f2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   137f6:	f7ff ff7d 	bl	136f4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   137fa:	f854 3c30 	ldr.w	r3, [r4, #-48]
   137fe:	655d      	str	r5, [r3, #84]	; 0x54
   13800:	4625      	mov	r5, r4
   13802:	e7d0      	b.n	137a6 <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   13804:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13806:	1c4b      	adds	r3, r1, #1
   13808:	d017      	beq.n	1383a <z_init_static_threads+0xa2>
					    K_MSEC(thread_data->init_delay));
   1380a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1380e:	f240 3be7 	movw	fp, #999	; 0x3e7
   13812:	f04f 0c00 	mov.w	ip, #0
   13816:	fbc9 bc01 	smlal	fp, ip, r9, r1
   1381a:	2300      	movs	r3, #0
   1381c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13820:	4658      	mov	r0, fp
   13822:	4661      	mov	r1, ip
   13824:	f7ec fc5c 	bl	e0 <__aeabi_uldivmod>
   13828:	2700      	movs	r7, #0
   1382a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1382c:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   13830:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13832:	d104      	bne.n	1383e <z_init_static_threads+0xa6>
	z_sched_start(thread);
   13834:	4628      	mov	r0, r5
   13836:	f7ff fcc9 	bl	131cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1383a:	3430      	adds	r4, #48	; 0x30
   1383c:	e7be      	b.n	137bc <z_init_static_threads+0x24>
   1383e:	4602      	mov	r2, r0
   13840:	463b      	mov	r3, r7
   13842:	4651      	mov	r1, sl
   13844:	f105 0018 	add.w	r0, r5, #24
   13848:	f000 f8a8 	bl	1399c <z_add_timeout>
   1384c:	e7f5      	b.n	1383a <z_init_static_threads+0xa2>
   1384e:	bf00      	nop
   13850:	20000474 	.word	0x20000474
   13854:	20000474 	.word	0x20000474
   13858:	00014a4b 	.word	0x00014a4b

0001385c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13860:	4604      	mov	r4, r0
   13862:	b088      	sub	sp, #32
   13864:	460d      	mov	r5, r1
   13866:	4616      	mov	r6, r2
   13868:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1386a:	f001 f83b 	bl	148e4 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1386e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13872:	2200      	movs	r2, #0
   13874:	2300      	movs	r3, #0
   13876:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1387a:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1387e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   13882:	4b07      	ldr	r3, [pc, #28]	; (138a0 <k_work_q_start+0x44>)
   13884:	9400      	str	r4, [sp, #0]
   13886:	4632      	mov	r2, r6
   13888:	4629      	mov	r1, r5
   1388a:	4640      	mov	r0, r8
   1388c:	f7ff ff58 	bl	13740 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   13890:	4904      	ldr	r1, [pc, #16]	; (138a4 <k_work_q_start+0x48>)
   13892:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   13894:	b008      	add	sp, #32
   13896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1389a:	f001 b991 	b.w	14bc0 <z_impl_k_thread_name_set>
   1389e:	bf00      	nop
   138a0:	00013d23 	.word	0x00013d23
   138a4:	0001616d 	.word	0x0001616d

000138a8 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   138a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   138ac:	4606      	mov	r6, r0
   138ae:	460d      	mov	r5, r1
   138b0:	4690      	mov	r8, r2
   138b2:	4699      	mov	r9, r3
	__asm__ volatile(
   138b4:	f04f 0320 	mov.w	r3, #32
   138b8:	f3ef 8711 	mrs	r7, BASEPRI
   138bc:	f383 8811 	msr	BASEPRI, r3
   138c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   138c4:	69cb      	ldr	r3, [r1, #28]
   138c6:	b17b      	cbz	r3, 138e8 <k_delayed_work_submit_to_queue+0x40>
   138c8:	4283      	cmp	r3, r0
   138ca:	d128      	bne.n	1391e <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   138cc:	4628      	mov	r0, r5
   138ce:	f001 f997 	bl	14c00 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   138d2:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   138d6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   138d8:	d008      	beq.n	138ec <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   138da:	2800      	cmp	r0, #0
   138dc:	da07      	bge.n	138ee <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   138de:	f387 8811 	msr	BASEPRI, r7
   138e2:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   138e6:	e00f      	b.n	13908 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   138e8:	2800      	cmp	r0, #0
   138ea:	d0ef      	beq.n	138cc <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   138ec:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   138ee:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   138f2:	61ee      	str	r6, [r5, #28]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   138f4:	d10b      	bne.n	1390e <k_delayed_work_submit_to_queue+0x66>
   138f6:	f387 8811 	msr	BASEPRI, r7
   138fa:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   138fe:	4629      	mov	r1, r5
   13900:	4630      	mov	r0, r6
   13902:	f001 f960 	bl	14bc6 <k_work_submit_to_queue>
		return 0;
   13906:	2400      	movs	r4, #0
}
   13908:	4620      	mov	r0, r4
   1390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1390e:	4905      	ldr	r1, [pc, #20]	; (13924 <k_delayed_work_submit_to_queue+0x7c>)
   13910:	4642      	mov	r2, r8
   13912:	464b      	mov	r3, r9
   13914:	f105 000c 	add.w	r0, r5, #12
   13918:	f000 f840 	bl	1399c <z_add_timeout>
   1391c:	e7df      	b.n	138de <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1391e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   13922:	e7dc      	b.n	138de <k_delayed_work_submit_to_queue+0x36>
   13924:	00014bf7 	.word	0x00014bf7

00013928 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   13928:	4b03      	ldr	r3, [pc, #12]	; (13938 <elapsed+0x10>)
   1392a:	681b      	ldr	r3, [r3, #0]
   1392c:	b90b      	cbnz	r3, 13932 <elapsed+0xa>
   1392e:	f7f0 ba6b 	b.w	3e08 <z_clock_elapsed>
}
   13932:	2000      	movs	r0, #0
   13934:	4770      	bx	lr
   13936:	bf00      	nop
   13938:	20002058 	.word	0x20002058

0001393c <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1393c:	6803      	ldr	r3, [r0, #0]
   1393e:	b140      	cbz	r0, 13952 <remove_timeout+0x16>
   13940:	4a07      	ldr	r2, [pc, #28]	; (13960 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   13942:	6852      	ldr	r2, [r2, #4]
   13944:	4290      	cmp	r0, r2
   13946:	d004      	beq.n	13952 <remove_timeout+0x16>
	if (next(t) != NULL) {
   13948:	b11b      	cbz	r3, 13952 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1394a:	689a      	ldr	r2, [r3, #8]
   1394c:	6881      	ldr	r1, [r0, #8]
   1394e:	440a      	add	r2, r1
   13950:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   13952:	6842      	ldr	r2, [r0, #4]
   13954:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   13956:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13958:	2300      	movs	r3, #0
	node->prev = NULL;
   1395a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1395e:	4770      	bx	lr
   13960:	20000408 	.word	0x20000408

00013964 <next_timeout>:
	return list->head == list;
   13964:	4b0b      	ldr	r3, [pc, #44]	; (13994 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   13966:	b510      	push	{r4, lr}
   13968:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1396a:	429c      	cmp	r4, r3
   1396c:	bf08      	it	eq
   1396e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   13970:	f7ff ffda 	bl	13928 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   13974:	b154      	cbz	r4, 1398c <next_timeout+0x28>
   13976:	68a3      	ldr	r3, [r4, #8]
   13978:	1a18      	subs	r0, r3, r0
   1397a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1397e:	4b06      	ldr	r3, [pc, #24]	; (13998 <next_timeout+0x34>)
   13980:	691b      	ldr	r3, [r3, #16]
   13982:	b113      	cbz	r3, 1398a <next_timeout+0x26>
   13984:	4298      	cmp	r0, r3
   13986:	bfa8      	it	ge
   13988:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1398a:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1398c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   13990:	e7f5      	b.n	1397e <next_timeout+0x1a>
   13992:	bf00      	nop
   13994:	20000408 	.word	0x20000408
   13998:	20001f90 	.word	0x20001f90

0001399c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1399c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139a0:	9101      	str	r1, [sp, #4]
   139a2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   139a4:	1c4b      	adds	r3, r1, #1
   139a6:	bf08      	it	eq
   139a8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   139ac:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   139ae:	d061      	beq.n	13a74 <z_add_timeout+0xd8>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   139b0:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   139b2:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   139b6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   139ba:	f04f 3bff 	mov.w	fp, #4294967295
   139be:	ebb3 0804 	subs.w	r8, r3, r4
   139c2:	eb6b 0905 	sbc.w	r9, fp, r5
   139c6:	f1b8 0f00 	cmp.w	r8, #0
   139ca:	f179 0300 	sbcs.w	r3, r9, #0
   139ce:	db0f      	blt.n	139f0 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   139d0:	f7ff ffaa 	bl	13928 <elapsed>
   139d4:	4a2c      	ldr	r2, [pc, #176]	; (13a88 <z_add_timeout+0xec>)
   139d6:	e9d2 1c00 	ldrd	r1, ip, [r2]
   139da:	f06f 0301 	mvn.w	r3, #1
   139de:	1a5b      	subs	r3, r3, r1
   139e0:	eb6b 020c 	sbc.w	r2, fp, ip
   139e4:	1b1e      	subs	r6, r3, r4
   139e6:	eb62 0705 	sbc.w	r7, r2, r5
   139ea:	1a34      	subs	r4, r6, r0
   139ec:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   139f0:	9b01      	ldr	r3, [sp, #4]
   139f2:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   139f6:	f04f 0320 	mov.w	r3, #32
   139fa:	f3ef 8611 	mrs	r6, BASEPRI
   139fe:	f383 8811 	msr	BASEPRI, r3
   13a02:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   13a06:	f7ff ff8f 	bl	13928 <elapsed>
	ticks = MAX(1, ticks);
   13a0a:	2c01      	cmp	r4, #1
   13a0c:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   13a10:	4b1e      	ldr	r3, [pc, #120]	; (13a8c <z_add_timeout+0xf0>)
   13a12:	681a      	ldr	r2, [r3, #0]
   13a14:	bfb8      	it	lt
   13a16:	2401      	movlt	r4, #1
		to->dticks = ticks + elapsed();
   13a18:	4404      	add	r4, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a1a:	429a      	cmp	r2, r3
   13a1c:	f8ca 4008 	str.w	r4, [sl, #8]
   13a20:	d001      	beq.n	13a26 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13a22:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   13a24:	b952      	cbnz	r2, 13a3c <z_add_timeout+0xa0>
	node->prev = list->tail;
   13a26:	685a      	ldr	r2, [r3, #4]
   13a28:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   13a2c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   13a2e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   13a32:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   13a36:	f8c3 a004 	str.w	sl, [r3, #4]
}
   13a3a:	e00d      	b.n	13a58 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   13a3c:	6890      	ldr	r0, [r2, #8]
   13a3e:	f8da 1008 	ldr.w	r1, [sl, #8]
   13a42:	4288      	cmp	r0, r1
   13a44:	dd19      	ble.n	13a7a <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   13a46:	1a41      	subs	r1, r0, r1
   13a48:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   13a4a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   13a4c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   13a50:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   13a54:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   13a58:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13a5a:	429a      	cmp	r2, r3
   13a5c:	d006      	beq.n	13a6c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   13a5e:	4592      	cmp	sl, r2
   13a60:	d104      	bne.n	13a6c <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   13a62:	f7ff ff7f 	bl	13964 <next_timeout>
   13a66:	2100      	movs	r1, #0
   13a68:	f7f0 f970 	bl	3d4c <z_clock_set_timeout>
	__asm__ volatile(
   13a6c:	f386 8811 	msr	BASEPRI, r6
   13a70:	f3bf 8f6f 	isb	sy
		}
	}
}
   13a74:	b003      	add	sp, #12
   13a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   13a7a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13a7c:	4294      	cmp	r4, r2
   13a7e:	f8ca 1008 	str.w	r1, [sl, #8]
   13a82:	d0d0      	beq.n	13a26 <z_add_timeout+0x8a>
   13a84:	6812      	ldr	r2, [r2, #0]
   13a86:	e7cd      	b.n	13a24 <z_add_timeout+0x88>
   13a88:	20000570 	.word	0x20000570
   13a8c:	20000408 	.word	0x20000408

00013a90 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   13a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a94:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   13a96:	f7ff fbfd 	bl	13294 <z_time_slice>
	__asm__ volatile(
   13a9a:	f04f 0320 	mov.w	r3, #32
   13a9e:	f3ef 8411 	mrs	r4, BASEPRI
   13aa2:	f383 8811 	msr	BASEPRI, r3
   13aa6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   13aaa:	4d20      	ldr	r5, [pc, #128]	; (13b2c <z_clock_announce+0x9c>)
   13aac:	f8df 8080 	ldr.w	r8, [pc, #128]	; 13b30 <z_clock_announce+0xa0>
	return list->head == list;
   13ab0:	f8df a080 	ldr.w	sl, [pc, #128]	; 13b34 <z_clock_announce+0xa4>
   13ab4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   13ab6:	46c1      	mov	r9, r8
   13ab8:	f8da 0000 	ldr.w	r0, [sl]
   13abc:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13abe:	4550      	cmp	r0, sl
   13ac0:	e9d8 6700 	ldrd	r6, r7, [r8]
   13ac4:	d005      	beq.n	13ad2 <z_clock_announce+0x42>
   13ac6:	b120      	cbz	r0, 13ad2 <z_clock_announce+0x42>
   13ac8:	6883      	ldr	r3, [r0, #8]
   13aca:	4293      	cmp	r3, r2
   13acc:	dd13      	ble.n	13af6 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   13ace:	1a9b      	subs	r3, r3, r2
   13ad0:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   13ad2:	18b6      	adds	r6, r6, r2
   13ad4:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   13ad8:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   13adc:	2600      	movs	r6, #0
   13ade:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   13ae0:	f7ff ff40 	bl	13964 <next_timeout>
   13ae4:	4631      	mov	r1, r6
   13ae6:	f7f0 f931 	bl	3d4c <z_clock_set_timeout>
	__asm__ volatile(
   13aea:	f384 8811 	msr	BASEPRI, r4
   13aee:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   13af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   13af6:	18f6      	adds	r6, r6, r3
   13af8:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   13afc:	1ad3      	subs	r3, r2, r3
   13afe:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   13b00:	2300      	movs	r3, #0
   13b02:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   13b04:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   13b08:	f7ff ff18 	bl	1393c <remove_timeout>
   13b0c:	f384 8811 	msr	BASEPRI, r4
   13b10:	f3bf 8f6f 	isb	sy
		t->fn(t);
   13b14:	68c3      	ldr	r3, [r0, #12]
   13b16:	4798      	blx	r3
	__asm__ volatile(
   13b18:	f04f 0320 	mov.w	r3, #32
   13b1c:	f3ef 8411 	mrs	r4, BASEPRI
   13b20:	f383 8811 	msr	BASEPRI, r3
   13b24:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   13b28:	e7c6      	b.n	13ab8 <z_clock_announce+0x28>
   13b2a:	bf00      	nop
   13b2c:	20002058 	.word	0x20002058
   13b30:	20000570 	.word	0x20000570
   13b34:	20000408 	.word	0x20000408

00013b38 <z_tick_get>:

s64_t z_tick_get(void)
{
   13b38:	b510      	push	{r4, lr}
   13b3a:	f04f 0320 	mov.w	r3, #32
   13b3e:	f3ef 8411 	mrs	r4, BASEPRI
   13b42:	f383 8811 	msr	BASEPRI, r3
   13b46:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   13b4a:	f7f0 f95d 	bl	3e08 <z_clock_elapsed>
   13b4e:	4b06      	ldr	r3, [pc, #24]	; (13b68 <z_tick_get+0x30>)
   13b50:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b54:	1812      	adds	r2, r2, r0
   13b56:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   13b5a:	f384 8811 	msr	BASEPRI, r4
   13b5e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   13b62:	4610      	mov	r0, r2
   13b64:	4619      	mov	r1, r3
   13b66:	bd10      	pop	{r4, pc}
   13b68:	20000570 	.word	0x20000570

00013b6c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   13b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b70:	b089      	sub	sp, #36	; 0x24
   13b72:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   13b74:	2301      	movs	r3, #1
   13b76:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   13b7a:	4b29      	ldr	r3, [pc, #164]	; (13c20 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   13b7c:	689b      	ldr	r3, [r3, #8]
   13b7e:	9306      	str	r3, [sp, #24]
   13b80:	4b28      	ldr	r3, [pc, #160]	; (13c24 <z_impl_k_poll+0xb8>)
   13b82:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   13b84:	ea52 0307 	orrs.w	r3, r2, r7
{
   13b88:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   13b8a:	bf0c      	ite	eq
   13b8c:	2301      	moveq	r3, #1
   13b8e:	2300      	movne	r3, #0
   13b90:	aa05      	add	r2, sp, #20
{
   13b92:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   13b94:	f001 f9a2 	bl	14edc <register_events>
   13b98:	4680      	mov	r8, r0
	__asm__ volatile(
   13b9a:	f04f 0320 	mov.w	r3, #32
   13b9e:	f3ef 8911 	mrs	r9, BASEPRI
   13ba2:	f383 8811 	msr	BASEPRI, r3
   13ba6:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   13baa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13bae:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   13bb2:	b963      	cbnz	r3, 13bce <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   13bb4:	4601      	mov	r1, r0
   13bb6:	464a      	mov	r2, r9
   13bb8:	4628      	mov	r0, r5
   13bba:	f001 f8f6 	bl	14daa <clear_event_registrations>
	__asm__ volatile(
   13bbe:	f389 8811 	msr	BASEPRI, r9
   13bc2:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   13bc6:	4620      	mov	r0, r4
   13bc8:	b009      	add	sp, #36	; 0x24
   13bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   13bce:	2300      	movs	r3, #0
   13bd0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13bd4:	ea56 0307 	orrs.w	r3, r6, r7
   13bd8:	d106      	bne.n	13be8 <z_impl_k_poll+0x7c>
   13bda:	f389 8811 	msr	BASEPRI, r9
   13bde:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   13be2:	f06f 040a 	mvn.w	r4, #10
   13be6:	e7ee      	b.n	13bc6 <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   13be8:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   13bea:	e9cd 6700 	strd	r6, r7, [sp]
   13bee:	4649      	mov	r1, r9
   13bf0:	480d      	ldr	r0, [pc, #52]	; (13c28 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   13bf2:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   13bf6:	f7ff fc81 	bl	134fc <z_pend_curr>
   13bfa:	4604      	mov	r4, r0
	__asm__ volatile(
   13bfc:	f04f 0320 	mov.w	r3, #32
   13c00:	f3ef 8611 	mrs	r6, BASEPRI
   13c04:	f383 8811 	msr	BASEPRI, r3
   13c08:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   13c0c:	4632      	mov	r2, r6
   13c0e:	4641      	mov	r1, r8
   13c10:	4628      	mov	r0, r5
   13c12:	f001 f8ca 	bl	14daa <clear_event_registrations>
	__asm__ volatile(
   13c16:	f386 8811 	msr	BASEPRI, r6
   13c1a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   13c1e:	e7d2      	b.n	13bc6 <z_impl_k_poll+0x5a>
   13c20:	20001f90 	.word	0x20001f90
   13c24:	00014e37 	.word	0x00014e37
   13c28:	20002074 	.word	0x20002074

00013c2c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   13c2c:	b538      	push	{r3, r4, r5, lr}
   13c2e:	4603      	mov	r3, r0
	__asm__ volatile(
   13c30:	f04f 0220 	mov.w	r2, #32
   13c34:	f3ef 8511 	mrs	r5, BASEPRI
   13c38:	f382 8811 	msr	BASEPRI, r2
   13c3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   13c40:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   13c42:	2101      	movs	r1, #1
   13c44:	6081      	str	r1, [r0, #8]
	return list->head == list;
   13c46:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   13c48:	4283      	cmp	r3, r0
   13c4a:	d106      	bne.n	13c5a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   13c4c:	f385 8811 	msr	BASEPRI, r5
   13c50:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   13c54:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   13c56:	4620      	mov	r0, r4
   13c58:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   13c5a:	e9d0 3200 	ldrd	r3, r2, [r0]
   13c5e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   13c60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13c62:	2300      	movs	r3, #0
	node->prev = NULL;
   13c64:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   13c68:	f001 f8ca 	bl	14e00 <signal_poll_event>
	z_reschedule(&lock, key);
   13c6c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   13c6e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   13c70:	4801      	ldr	r0, [pc, #4]	; (13c78 <z_impl_k_poll_signal_raise+0x4c>)
   13c72:	f000 fe92 	bl	1499a <z_reschedule>
	return rc;
   13c76:	e7ee      	b.n	13c56 <z_impl_k_poll_signal_raise+0x2a>
   13c78:	20002074 	.word	0x20002074

00013c7c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   13c7c:	b510      	push	{r4, lr}
   13c7e:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   13c80:	f000 ff96 	bl	14bb0 <k_is_in_isr>
   13c84:	b940      	cbnz	r0, 13c98 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   13c86:	4b05      	ldr	r3, [pc, #20]	; (13c9c <z_thread_malloc+0x20>)
   13c88:	689b      	ldr	r3, [r3, #8]
   13c8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
	}

	if (pool) {
   13c8c:	b120      	cbz	r0, 13c98 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   13c8e:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   13c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   13c94:	f001 b991 	b.w	14fba <k_mem_pool_malloc>
}
   13c98:	2000      	movs	r0, #0
   13c9a:	bd10      	pop	{r4, pc}
   13c9c:	20001f90 	.word	0x20001f90

00013ca0 <h4_read>:
{
   13ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ca4:	4607      	mov	r7, r0
   13ca6:	460d      	mov	r5, r1
   13ca8:	4614      	mov	r4, r2
   13caa:	4698      	mov	r8, r3
	int total = 0;
   13cac:	2600      	movs	r6, #0
	while (len) {
   13cae:	b124      	cbz	r4, 13cba <h4_read+0x1a>
	if (api->fifo_read) {
   13cb0:	68bb      	ldr	r3, [r7, #8]
   13cb2:	699b      	ldr	r3, [r3, #24]
   13cb4:	b923      	cbnz	r3, 13cc0 <h4_read+0x20>
			if (total < min) {
   13cb6:	4546      	cmp	r6, r8
   13cb8:	d3f9      	bcc.n	13cae <h4_read+0xe>
}
   13cba:	4630      	mov	r0, r6
   13cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return api->fifo_read(dev, rx_data, size);
   13cc0:	4622      	mov	r2, r4
   13cc2:	4629      	mov	r1, r5
   13cc4:	4638      	mov	r0, r7
   13cc6:	4798      	blx	r3
		if (rx == 0) {
   13cc8:	2800      	cmp	r0, #0
   13cca:	d0f4      	beq.n	13cb6 <h4_read+0x16>
		len -= rx;
   13ccc:	1a24      	subs	r4, r4, r0
		total += rx;
   13cce:	4406      	add	r6, r0
		buf += rx;
   13cd0:	4405      	add	r5, r0
   13cd2:	e7ec      	b.n	13cae <h4_read+0xe>

00013cd4 <arch_printk_char_out>:
}
   13cd4:	2000      	movs	r0, #0
   13cd6:	4770      	bx	lr

00013cd8 <print_err>:
{
   13cd8:	b570      	push	{r4, r5, r6, lr}
   13cda:	4604      	mov	r4, r0
   13cdc:	460d      	mov	r5, r1
	out('E', ctx);
   13cde:	2045      	movs	r0, #69	; 0x45
   13ce0:	47a0      	blx	r4
	out('R', ctx);
   13ce2:	4629      	mov	r1, r5
   13ce4:	2052      	movs	r0, #82	; 0x52
   13ce6:	47a0      	blx	r4
	out('R', ctx);
   13ce8:	4629      	mov	r1, r5
   13cea:	4623      	mov	r3, r4
   13cec:	2052      	movs	r0, #82	; 0x52
}
   13cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   13cf2:	4718      	bx	r3

00013cf4 <printk>:
{
   13cf4:	b40f      	push	{r0, r1, r2, r3}
   13cf6:	b507      	push	{r0, r1, r2, lr}
   13cf8:	a904      	add	r1, sp, #16
   13cfa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   13cfe:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   13d00:	f7ef feb6 	bl	3a70 <vprintk>
}
   13d04:	b003      	add	sp, #12
   13d06:	f85d eb04 	ldr.w	lr, [sp], #4
   13d0a:	b004      	add	sp, #16
   13d0c:	4770      	bx	lr

00013d0e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   13d0e:	4604      	mov	r4, r0
   13d10:	b508      	push	{r3, lr}
   13d12:	4608      	mov	r0, r1
   13d14:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   13d16:	461a      	mov	r2, r3
   13d18:	47a0      	blx	r4
	return z_impl_k_current_get();
   13d1a:	f7ff fc7d 	bl	13618 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   13d1e:	f7f0 fac7 	bl	42b0 <z_impl_k_thread_abort>

00013d22 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   13d22:	b510      	push	{r4, lr}
   13d24:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   13d26:	f04f 33ff 	mov.w	r3, #4294967295
   13d2a:	f04f 32ff 	mov.w	r2, #4294967295
   13d2e:	4620      	mov	r0, r4
   13d30:	f7ff f938 	bl	12fa4 <z_impl_k_queue_get>
   13d34:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   13d36:	2800      	cmp	r0, #0
   13d38:	d0f5      	beq.n	13d26 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d3a:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   13d3c:	6842      	ldr	r2, [r0, #4]
   13d3e:	f3bf 8f5b 	dmb	ish
   13d42:	e853 1f00 	ldrex	r1, [r3]
   13d46:	f021 0c01 	bic.w	ip, r1, #1
   13d4a:	e843 ce00 	strex	lr, ip, [r3]
   13d4e:	f1be 0f00 	cmp.w	lr, #0
   13d52:	d1f6      	bne.n	13d42 <z_work_q_main+0x20>
   13d54:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   13d58:	07cb      	lsls	r3, r1, #31
   13d5a:	d500      	bpl.n	13d5e <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   13d5c:	4790      	blx	r2
	z_impl_k_yield();
   13d5e:	f7ff fbed 	bl	1353c <z_impl_k_yield>
   13d62:	e7e0      	b.n	13d26 <z_work_q_main+0x4>

00013d64 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   13d64:	6803      	ldr	r3, [r0, #0]
   13d66:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   13d6a:	6883      	ldr	r3, [r0, #8]
   13d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   13d70:	bf2c      	ite	cs
   13d72:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   13d76:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   13d7a:	4770      	bx	lr

00013d7c <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   13d7c:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   13d7e:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   13d80:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   13d82:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   13d86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   13d8a:	bf2c      	ite	cs
   13d8c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   13d90:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   13d94:	bd10      	pop	{r4, pc}

00013d96 <right_chunk>:
{
	return c - left_size(h, c);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   13d96:	b538      	push	{r3, r4, r5, lr}
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13d98:	2200      	movs	r2, #0
{
   13d9a:	4605      	mov	r5, r0
   13d9c:	460c      	mov	r4, r1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13d9e:	f7ff ffe1 	bl	13d64 <chunk_field>
   13da2:	68eb      	ldr	r3, [r5, #12]
   13da4:	4018      	ands	r0, r3
	return c + size(h, c);
}
   13da6:	4420      	add	r0, r4
   13da8:	bd38      	pop	{r3, r4, r5, pc}

00013daa <free_list_remove>:
	return ret;
}

static void free_list_remove(struct z_heap *h, int bidx,
			     chunkid_t c)
{
   13daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];
   13dae:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   13db2:	4616      	mov	r6, r2
	struct z_heap_bucket *b = &h->buckets[bidx];
   13db4:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
{
   13db8:	4604      	mov	r4, r0
	CHECK(b->next != 0);
	CHECK(b->list_size > 0);
	CHECK((((h->avail_buckets & (1 << bidx)) == 0)
	       == (h->buckets[bidx].next == 0)));

	b->list_size--;
   13dba:	6853      	ldr	r3, [r2, #4]
   13dbc:	3b01      	subs	r3, #1
{
   13dbe:	460d      	mov	r5, r1
	b->list_size--;
   13dc0:	6053      	str	r3, [r2, #4]

	if (b->list_size == 0) {
   13dc2:	b953      	cbnz	r3, 13dda <free_list_remove+0x30>
		h->avail_buckets &= ~(1 << bidx);
   13dc4:	2201      	movs	r2, #1
   13dc6:	fa02 f101 	lsl.w	r1, r2, r1
   13dca:	6942      	ldr	r2, [r0, #20]
   13dcc:	ea22 0201 	bic.w	r2, r2, r1
   13dd0:	6142      	str	r2, [r0, #20]
		b->next = 0;
   13dd2:	f848 3035 	str.w	r3, [r8, r5, lsl #3]

		b->next = second;
		chunk_set(h, first, FREE_NEXT, second);
		chunk_set(h, second, FREE_PREV, first);
	}
}
   13dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   13dda:	4631      	mov	r1, r6
   13ddc:	2202      	movs	r2, #2
   13dde:	f7ff ffc1 	bl	13d64 <chunk_field>
	return chunk_field(h, c, FREE_NEXT);
   13de2:	4631      	mov	r1, r6
	return chunk_field(h, c, FREE_PREV);
   13de4:	4607      	mov	r7, r0
	return chunk_field(h, c, FREE_NEXT);
   13de6:	2203      	movs	r2, #3
   13de8:	4620      	mov	r0, r4
   13dea:	f7ff ffbb 	bl	13d64 <chunk_field>
		chunk_set(h, first, FREE_NEXT, second);
   13dee:	4639      	mov	r1, r7
		b->next = second;
   13df0:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
   13df4:	4606      	mov	r6, r0
		chunk_set(h, first, FREE_NEXT, second);
   13df6:	4603      	mov	r3, r0
   13df8:	2203      	movs	r2, #3
   13dfa:	4620      	mov	r0, r4
   13dfc:	f7ff ffbe 	bl	13d7c <chunk_set>
		chunk_set(h, second, FREE_PREV, first);
   13e00:	463b      	mov	r3, r7
   13e02:	4631      	mov	r1, r6
   13e04:	4620      	mov	r0, r4
   13e06:	2202      	movs	r2, #2
}
   13e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, first);
   13e0c:	f7ff bfb6 	b.w	13d7c <chunk_set>

00013e10 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   13e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13e14:	2200      	movs	r2, #0
   13e16:	4604      	mov	r4, r0
   13e18:	460d      	mov	r5, r1
   13e1a:	f7ff ffa3 	bl	13d64 <chunk_field>
   13e1e:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   13e20:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13e22:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   13e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   13e28:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   13e2c:	bf34      	ite	cc
   13e2e:	2000      	movcc	r0, #0
   13e30:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   13e32:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   13e34:	f1c0 001f 	rsb	r0, r0, #31
   13e38:	1a80      	subs	r0, r0, r2
   13e3a:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   13e3e:	684a      	ldr	r2, [r1, #4]
   13e40:	1c56      	adds	r6, r2, #1
   13e42:	604e      	str	r6, [r1, #4]
   13e44:	b9a2      	cbnz	r2, 13e70 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   13e46:	2201      	movs	r2, #1
   13e48:	fa02 f100 	lsl.w	r1, r2, r0
   13e4c:	6962      	ldr	r2, [r4, #20]
   13e4e:	430a      	orrs	r2, r1
   13e50:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   13e52:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   13e54:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   13e58:	2202      	movs	r2, #2
   13e5a:	462b      	mov	r3, r5
   13e5c:	4620      	mov	r0, r4
   13e5e:	f7ff ff8d 	bl	13d7c <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   13e62:	2203      	movs	r2, #3
   13e64:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   13e66:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   13e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   13e6c:	f7ff bf86 	b.w	13d7c <chunk_set>
		chunkid_t second = h->buckets[b].next;
   13e70:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   13e74:	2202      	movs	r2, #2
   13e76:	4639      	mov	r1, r7
   13e78:	4620      	mov	r0, r4
   13e7a:	f7ff ff73 	bl	13d64 <chunk_field>
		chunk_set(h, c, FREE_PREV, first);
   13e7e:	2202      	movs	r2, #2
   13e80:	4603      	mov	r3, r0
   13e82:	4606      	mov	r6, r0
   13e84:	4629      	mov	r1, r5
   13e86:	4620      	mov	r0, r4
   13e88:	f7ff ff78 	bl	13d7c <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   13e8c:	463b      	mov	r3, r7
   13e8e:	2203      	movs	r2, #3
   13e90:	4629      	mov	r1, r5
   13e92:	4620      	mov	r0, r4
   13e94:	f7ff ff72 	bl	13d7c <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   13e98:	2203      	movs	r2, #3
   13e9a:	4631      	mov	r1, r6
   13e9c:	462b      	mov	r3, r5
   13e9e:	4620      	mov	r0, r4
   13ea0:	f7ff ff6c 	bl	13d7c <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   13ea4:	2202      	movs	r2, #2
   13ea6:	4639      	mov	r1, r7
   13ea8:	e7dd      	b.n	13e66 <free_list_add+0x56>

00013eaa <split_alloc>:

/* Allocates (fit check has already been perfomred) from the next
 * chunk at the specified bucket level
 */
static void *split_alloc(struct z_heap *h, int bidx, size_t sz)
{
   13eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	CHECK(h->buckets[bidx].next != 0
	      && sz <= size(h, h->buckets[bidx].next));

	chunkid_t c = h->buckets[bidx].next;
   13eae:	6843      	ldr	r3, [r0, #4]
   13eb0:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
{
   13eb4:	4604      	mov	r4, r0
   13eb6:	4617      	mov	r7, r2

	free_list_remove(h, bidx, c);
   13eb8:	462a      	mov	r2, r5
   13eba:	f7ff ff76 	bl	13daa <free_list_remove>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13ebe:	2200      	movs	r2, #0
   13ec0:	4629      	mov	r1, r5
   13ec2:	4620      	mov	r0, r4
   13ec4:	f7ff ff4e 	bl	13d64 <chunk_field>
	/* Split off remainder if it's usefully large */
	size_t rem = size(h, c) - sz;

	CHECK(rem < h->len);

	if (rem >= (big_heap(h) ? 2 : 1)) {
   13ec8:	68a3      	ldr	r3, [r4, #8]
   13eca:	68e6      	ldr	r6, [r4, #12]
   13ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13ed0:	ea06 0600 	and.w	r6, r6, r0
	size_t rem = size(h, c) - sz;
   13ed4:	eba6 0607 	sub.w	r6, r6, r7
	if (rem >= (big_heap(h) ? 2 : 1)) {
   13ed8:	bf2c      	ite	cs
   13eda:	2302      	movcs	r3, #2
   13edc:	2301      	movcc	r3, #1
   13ede:	42b3      	cmp	r3, r6
   13ee0:	d82d      	bhi.n	13f3e <split_alloc+0x94>
		chunkid_t c2 = c + sz;
		chunkid_t c3 = right_chunk(h, c);
   13ee2:	4629      	mov	r1, r5
   13ee4:	4620      	mov	r0, r4
   13ee6:	f7ff ff56 	bl	13d96 <right_chunk>
		chunkid_t c2 = c + sz;
   13eea:	eb05 0807 	add.w	r8, r5, r7

		chunk_set(h, c, SIZE_AND_USED, sz);
   13eee:	463b      	mov	r3, r7
   13ef0:	2200      	movs	r2, #0
   13ef2:	4629      	mov	r1, r5
		chunkid_t c3 = right_chunk(h, c);
   13ef4:	4681      	mov	r9, r0
		chunk_set(h, c, SIZE_AND_USED, sz);
   13ef6:	4620      	mov	r0, r4
   13ef8:	f7ff ff40 	bl	13d7c <chunk_set>
		chunk_set(h, c2, SIZE_AND_USED, rem);
   13efc:	4633      	mov	r3, r6
   13efe:	2200      	movs	r2, #0
   13f00:	4641      	mov	r1, r8
   13f02:	4620      	mov	r0, r4
   13f04:	f7ff ff3a 	bl	13d7c <chunk_set>
		chunk_set(h, c2, LEFT_SIZE, sz);
   13f08:	463b      	mov	r3, r7
   13f0a:	2201      	movs	r2, #1
   13f0c:	4641      	mov	r1, r8
   13f0e:	4620      	mov	r0, r4
   13f10:	f7ff ff34 	bl	13d7c <chunk_set>
   13f14:	2200      	movs	r2, #0
   13f16:	4641      	mov	r1, r8
   13f18:	4620      	mov	r0, r4
   13f1a:	f7ff ff23 	bl	13d64 <chunk_field>
   13f1e:	68e3      	ldr	r3, [r4, #12]
		if (!last_chunk(h, c2)) {
   13f20:	68a2      	ldr	r2, [r4, #8]
   13f22:	4003      	ands	r3, r0
	return (c + size(h, c)) == h->len;
   13f24:	4443      	add	r3, r8
		if (!last_chunk(h, c2)) {
   13f26:	4293      	cmp	r3, r2
   13f28:	d005      	beq.n	13f36 <split_alloc+0x8c>
			chunk_set(h, c3, LEFT_SIZE, rem);
   13f2a:	4633      	mov	r3, r6
   13f2c:	2201      	movs	r2, #1
   13f2e:	4649      	mov	r1, r9
   13f30:	4620      	mov	r0, r4
   13f32:	f7ff ff23 	bl	13d7c <chunk_set>
		}
		free_list_add(h, c2);
   13f36:	4641      	mov	r1, r8
   13f38:	4620      	mov	r0, r4
   13f3a:	f7ff ff69 	bl	13e10 <free_list_add>
   13f3e:	4629      	mov	r1, r5
   13f40:	2200      	movs	r2, #0
   13f42:	4620      	mov	r0, r4
   13f44:	f7ff ff0e 	bl	13d64 <chunk_field>
   13f48:	68e2      	ldr	r2, [r4, #12]
   13f4a:	ea00 0302 	and.w	r3, r0, r2
		  size(h, c) | (used ? (h->size_mask + 1) : 0));
   13f4e:	3201      	adds	r2, #1
	chunk_set(h, c, SIZE_AND_USED,
   13f50:	4313      	orrs	r3, r2
   13f52:	4629      	mov	r1, r5
   13f54:	4620      	mov	r0, r4
   13f56:	2200      	movs	r2, #0
   13f58:	f7ff ff10 	bl	13d7c <chunk_set>
	return big_heap(h) ? 8 : 4;
   13f5c:	68a3      	ldr	r3, [r4, #8]
	u8_t *ret = ((u8_t *)&h->buf[c]) + chunk_header_bytes(h);
   13f5e:	6820      	ldr	r0, [r4, #0]
   13f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13f64:	bf2c      	ite	cs
   13f66:	2308      	movcs	r3, #8
   13f68:	2304      	movcc	r3, #4
   13f6a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	}

	chunk_set_used(h, c, true);

	return chunk_mem(h, c);
}
   13f6e:	4428      	add	r0, r5
   13f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013f74 <sys_heap_free>:

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   13f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mem == NULL) {
   13f78:	2900      	cmp	r1, #0
   13f7a:	f000 80ac 	beq.w	140d6 <sys_heap_free+0x162>
		return; /* ISO C free() semantics */
	}

	struct z_heap *h = heap->heap;
   13f7e:	6804      	ldr	r4, [r0, #0]
   13f80:	68a7      	ldr	r7, [r4, #8]
   13f82:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   13f86:	bf2c      	ite	cs
   13f88:	2508      	movcs	r5, #8
   13f8a:	2504      	movcc	r5, #4
	chunkid_t c = ((u8_t *)mem - chunk_header_bytes(h)
   13f8c:	1b4d      	subs	r5, r1, r5
		       - (u8_t *)h->buf) / CHUNK_UNIT;
   13f8e:	6821      	ldr	r1, [r4, #0]
   13f90:	1a6d      	subs	r5, r5, r1
   13f92:	bf48      	it	mi
   13f94:	3507      	addmi	r5, #7
   13f96:	10ed      	asrs	r5, r5, #3
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13f98:	2200      	movs	r2, #0
   13f9a:	4629      	mov	r1, r5
   13f9c:	4620      	mov	r0, r4
   13f9e:	f7ff fee1 	bl	13d64 <chunk_field>
   13fa2:	68e6      	ldr	r6, [r4, #12]
   13fa4:	ea06 0800 	and.w	r8, r6, r0
	return (c + size(h, c)) == h->len;
   13fa8:	eb05 0308 	add.w	r3, r5, r8

	/* Merge with right chunk?  We can just absorb it. */
	if (!last_chunk(h, c) && !used(h, right_chunk(h, c))) {
   13fac:	42bb      	cmp	r3, r7
   13fae:	d036      	beq.n	1401e <sys_heap_free+0xaa>
   13fb0:	4629      	mov	r1, r5
   13fb2:	4620      	mov	r0, r4
   13fb4:	f7ff feef 	bl	13d96 <right_chunk>
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   13fb8:	2200      	movs	r2, #0
   13fba:	4601      	mov	r1, r0
   13fbc:	4682      	mov	sl, r0
   13fbe:	4620      	mov	r0, r4
   13fc0:	f7ff fed0 	bl	13d64 <chunk_field>
   13fc4:	ea30 0906 	bics.w	r9, r0, r6
   13fc8:	d129      	bne.n	1401e <sys_heap_free+0xaa>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   13fca:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   13fce:	bf34      	ite	cc
   13fd0:	2700      	movcc	r7, #0
   13fd2:	2701      	movcs	r7, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13fd4:	4006      	ands	r6, r0
		chunkid_t rc = right_chunk(h, c);
		size_t newsz = size(h, c) + size(h, rc);
   13fd6:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   13fd8:	f1c7 071f 	rsb	r7, r7, #31
   13fdc:	fab6 f686 	clz	r6, r6

		free_list_remove(h, bucket_idx(h, size(h, rc)), rc);
   13fe0:	4652      	mov	r2, sl
   13fe2:	1bb9      	subs	r1, r7, r6
   13fe4:	4620      	mov	r0, r4
   13fe6:	f7ff fee0 	bl	13daa <free_list_remove>
		chunk_set(h, c, SIZE_AND_USED, newsz);
   13fea:	4643      	mov	r3, r8
   13fec:	464a      	mov	r2, r9
   13fee:	4629      	mov	r1, r5
   13ff0:	4620      	mov	r0, r4
   13ff2:	f7ff fec3 	bl	13d7c <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   13ff6:	4629      	mov	r1, r5
   13ff8:	4620      	mov	r0, r4
   13ffa:	f7ff feb3 	bl	13d64 <chunk_field>
   13ffe:	68e3      	ldr	r3, [r4, #12]
   14000:	4018      	ands	r0, r3
		if (!last_chunk(h, c)) {
   14002:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   14004:	4428      	add	r0, r5
		if (!last_chunk(h, c)) {
   14006:	4283      	cmp	r3, r0
   14008:	d009      	beq.n	1401e <sys_heap_free+0xaa>
			chunk_set(h, right_chunk(h, c), LEFT_SIZE, newsz);
   1400a:	4629      	mov	r1, r5
   1400c:	4620      	mov	r0, r4
   1400e:	f7ff fec2 	bl	13d96 <right_chunk>
   14012:	4643      	mov	r3, r8
   14014:	4601      	mov	r1, r0
   14016:	2201      	movs	r2, #1
   14018:	4620      	mov	r0, r4
   1401a:	f7ff feaf 	bl	13d7c <chunk_set>
		}
	}

	/* Merge with left chunk?  It absorbs us. */
	if (c != h->chunk0 && !used(h, left_chunk(h, c))) {
   1401e:	6923      	ldr	r3, [r4, #16]
   14020:	42ab      	cmp	r3, r5
   14022:	d046      	beq.n	140b2 <sys_heap_free+0x13e>
	return chunk_field(h, c, LEFT_SIZE);
   14024:	2201      	movs	r2, #1
   14026:	4629      	mov	r1, r5
   14028:	4620      	mov	r0, r4
   1402a:	f7ff fe9b 	bl	13d64 <chunk_field>
	return c - left_size(h, c);
   1402e:	1a2f      	subs	r7, r5, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
   14030:	2200      	movs	r2, #0
   14032:	4639      	mov	r1, r7
   14034:	4620      	mov	r0, r4
   14036:	f7ff fe95 	bl	13d64 <chunk_field>
   1403a:	f8d4 800c 	ldr.w	r8, [r4, #12]
   1403e:	ea30 0908 	bics.w	r9, r0, r8
   14042:	4606      	mov	r6, r0
   14044:	d135      	bne.n	140b2 <sys_heap_free+0x13e>
   14046:	464a      	mov	r2, r9
   14048:	4629      	mov	r1, r5
   1404a:	4620      	mov	r0, r4
   1404c:	f7ff fe8a 	bl	13d64 <chunk_field>
		chunkid_t lc = left_chunk(h, c);
		chunkid_t rc = right_chunk(h, c);
   14050:	4629      	mov	r1, r5
   14052:	4682      	mov	sl, r0
   14054:	4620      	mov	r0, r4
   14056:	f7ff fe9e 	bl	13d96 <right_chunk>
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   1405a:	68a1      	ldr	r1, [r4, #8]
   1405c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   14060:	bf34      	ite	cc
   14062:	2100      	movcc	r1, #0
   14064:	2101      	movcs	r1, #1
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   14066:	ea06 0608 	and.w	r6, r6, r8
   1406a:	ea08 080a 	and.w	r8, r8, sl
		size_t csz = size(h, c);
		size_t merged_sz = csz + size(h, lc);
   1406e:	44b0      	add	r8, r6
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   14070:	f1c1 011f 	rsb	r1, r1, #31
   14074:	fab6 f686 	clz	r6, r6

		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   14078:	463a      	mov	r2, r7
   1407a:	1b89      	subs	r1, r1, r6
		chunkid_t rc = right_chunk(h, c);
   1407c:	4605      	mov	r5, r0
		free_list_remove(h, bucket_idx(h, size(h, lc)), lc);
   1407e:	4620      	mov	r0, r4
   14080:	f7ff fe93 	bl	13daa <free_list_remove>
		chunk_set(h, lc, SIZE_AND_USED, merged_sz);
   14084:	4643      	mov	r3, r8
   14086:	464a      	mov	r2, r9
   14088:	4639      	mov	r1, r7
   1408a:	4620      	mov	r0, r4
   1408c:	f7ff fe76 	bl	13d7c <chunk_set>
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   14090:	4639      	mov	r1, r7
   14092:	4620      	mov	r0, r4
   14094:	f7ff fe66 	bl	13d64 <chunk_field>
   14098:	68e3      	ldr	r3, [r4, #12]
   1409a:	4018      	ands	r0, r3
		if (!last_chunk(h, lc)) {
   1409c:	68a3      	ldr	r3, [r4, #8]
	return (c + size(h, c)) == h->len;
   1409e:	4438      	add	r0, r7
		if (!last_chunk(h, lc)) {
   140a0:	4298      	cmp	r0, r3
   140a2:	d005      	beq.n	140b0 <sys_heap_free+0x13c>
			chunk_set(h, rc, LEFT_SIZE, merged_sz);
   140a4:	4643      	mov	r3, r8
   140a6:	2201      	movs	r2, #1
   140a8:	4629      	mov	r1, r5
   140aa:	4620      	mov	r0, r4
   140ac:	f7ff fe66 	bl	13d7c <chunk_set>
		}

		c = lc;
   140b0:	463d      	mov	r5, r7
   140b2:	4629      	mov	r1, r5
   140b4:	2200      	movs	r2, #0
   140b6:	4620      	mov	r0, r4
   140b8:	f7ff fe54 	bl	13d64 <chunk_field>
   140bc:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, SIZE_AND_USED,
   140be:	4629      	mov	r1, r5
   140c0:	4003      	ands	r3, r0
   140c2:	2200      	movs	r2, #0
   140c4:	4620      	mov	r0, r4
   140c6:	f7ff fe59 	bl	13d7c <chunk_set>
	}

	chunk_set_used(h, c, false);
	free_list_add(h, c);
   140ca:	4629      	mov	r1, r5
   140cc:	4620      	mov	r0, r4
}
   140ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	free_list_add(h, c);
   140d2:	f7ff be9d 	b.w	13e10 <free_list_add>
}
   140d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000140da <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   140da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct z_heap *h = heap->heap;
   140de:	6804      	ldr	r4, [r0, #0]
	return big_heap(h) ? 8 : 4;
   140e0:	68a2      	ldr	r2, [r4, #8]
   140e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   140e6:	bf2c      	ite	cs
   140e8:	2308      	movcs	r3, #8
   140ea:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   140ec:	1dcd      	adds	r5, r1, #7
   140ee:	441d      	add	r5, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   140f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   140f4:	ea4f 05d5 	mov.w	r5, r5, lsr #3
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   140f8:	fab5 f685 	clz	r6, r5
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   140fc:	bf34      	ite	cc
   140fe:	2300      	movcc	r3, #0
   14100:	2301      	movcs	r3, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   14102:	441e      	add	r6, r3
   14104:	f1c6 081f 	rsb	r8, r6, #31
	size_t sz = bytes_to_chunksz(h, bytes);
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bytes == 0 || bi > bucket_idx(h, h->len)) {
   14108:	2900      	cmp	r1, #0
   1410a:	d03b      	beq.n	14184 <sys_heap_alloc+0xaa>
   1410c:	fab2 f282 	clz	r2, r2
   14110:	f1c3 031f 	rsb	r3, r3, #31
   14114:	1a9b      	subs	r3, r3, r2
   14116:	4598      	cmp	r8, r3
   14118:	dc34      	bgt.n	14184 <sys_heap_alloc+0xaa>
	struct z_heap_bucket *b = &h->buckets[bi];
   1411a:	6867      	ldr	r7, [r4, #4]
   1411c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);

	for (int i = 0; i < loops; i++) {
   14120:	f04f 0a00 	mov.w	sl, #0
	int loops = MIN(b->list_size, CONFIG_SYS_HEAP_ALLOC_LOOPS);
   14124:	687b      	ldr	r3, [r7, #4]
   14126:	2b03      	cmp	r3, #3
   14128:	bf28      	it	cs
   1412a:	2303      	movcs	r3, #3
   1412c:	4699      	mov	r9, r3
	for (int i = 0; i < loops; i++) {
   1412e:	45ca      	cmp	sl, r9
   14130:	db0d      	blt.n	1414e <sys_heap_alloc+0x74>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   14132:	6963      	ldr	r3, [r4, #20]
   14134:	f1c6 0620 	rsb	r6, r6, #32
   14138:	f04f 31ff 	mov.w	r1, #4294967295
   1413c:	40b1      	lsls	r1, r6

	if ((bmask & h->avail_buckets) != 0) {
   1413e:	4019      	ands	r1, r3
   14140:	d020      	beq.n	14184 <sys_heap_alloc+0xaa>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);

		return split_alloc(h, minbucket, sz);
   14142:	fa91 f1a1 	rbit	r1, r1
   14146:	462a      	mov	r2, r5
   14148:	fab1 f181 	clz	r1, r1
   1414c:	e00c      	b.n	14168 <sys_heap_alloc+0x8e>
		if (size(h, b->next) >= sz) {
   1414e:	f8d7 b000 	ldr.w	fp, [r7]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   14152:	2200      	movs	r2, #0
   14154:	4659      	mov	r1, fp
   14156:	4620      	mov	r0, r4
   14158:	f7ff fe04 	bl	13d64 <chunk_field>
   1415c:	68e3      	ldr	r3, [r4, #12]
   1415e:	4018      	ands	r0, r3
   14160:	42a8      	cmp	r0, r5
   14162:	d306      	bcc.n	14172 <sys_heap_alloc+0x98>
			return split_alloc(h, bi, sz);
   14164:	462a      	mov	r2, r5
   14166:	4641      	mov	r1, r8
		return split_alloc(h, minbucket, sz);
   14168:	4620      	mov	r0, r4
	}

	return NULL;
}
   1416a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return split_alloc(h, minbucket, sz);
   1416e:	f7ff be9c 	b.w	13eaa <split_alloc>
	return chunk_field(h, c, FREE_NEXT);
   14172:	2203      	movs	r2, #3
   14174:	4659      	mov	r1, fp
   14176:	4620      	mov	r0, r4
   14178:	f7ff fdf4 	bl	13d64 <chunk_field>
	for (int i = 0; i < loops; i++) {
   1417c:	f10a 0a01 	add.w	sl, sl, #1
		b->next = free_next(h, b->next);
   14180:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < loops; i++) {
   14182:	e7d4      	b.n	1412e <sys_heap_alloc+0x54>
}
   14184:	2000      	movs	r0, #0
   14186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001418a <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1418a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   1418c:	188b      	adds	r3, r1, r2
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   1418e:	1dcc      	adds	r4, r1, #7
   14190:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   14194:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   14198:	1b1b      	subs	r3, r3, r4
   1419a:	08db      	lsrs	r3, r3, #3

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   1419c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   141a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   141a4:	bf2c      	ite	cs
   141a6:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   141aa:	4611      	movcc	r1, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   141ac:	4293      	cmp	r3, r2
	heap->heap = (struct z_heap *)addr;
   141ae:	6004      	str	r4, [r0, #0]
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   141b0:	60e1      	str	r1, [r4, #12]
   141b2:	bf94      	ite	ls
   141b4:	2100      	movls	r1, #0
   141b6:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   141b8:	fab3 f683 	clz	r6, r3
	h->avail_buckets = 0;

	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   141bc:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   141c0:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   141c4:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   141c6:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   141ca:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->avail_buckets = 0;
   141ce:	2000      	movs	r0, #0
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   141d0:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   141d2:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   141d4:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   141d6:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   141d8:	4617      	mov	r7, r2

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   141da:	4684      	mov	ip, r0
   141dc:	68a2      	ldr	r2, [r4, #8]
   141de:	42ba      	cmp	r2, r7
   141e0:	bf94      	ite	ls
   141e2:	2200      	movls	r2, #0
   141e4:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   141e6:	f1c2 021f 	rsb	r2, r2, #31
   141ea:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   141ec:	4290      	cmp	r0, r2
   141ee:	dd0a      	ble.n	14206 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   141f0:	1a5b      	subs	r3, r3, r1
   141f2:	4620      	mov	r0, r4
   141f4:	2200      	movs	r2, #0
   141f6:	f7ff fdc1 	bl	13d7c <chunk_set>
	free_list_add(h, h->chunk0);
   141fa:	6921      	ldr	r1, [r4, #16]
   141fc:	4620      	mov	r0, r4
}
   141fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   14202:	f7ff be05 	b.w	13e10 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   14206:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   1420a:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   1420c:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   14210:	e7e4      	b.n	141dc <sys_heap_init+0x52>

00014212 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14212:	4770      	bx	lr

00014214 <get_status>:
	data = get_sub_data(dev, type);
   14214:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   14216:	b2c9      	uxtb	r1, r1
	if (data->started) {
   14218:	220c      	movs	r2, #12
   1421a:	fb02 3101 	mla	r1, r2, r1, r3
   1421e:	7a4b      	ldrb	r3, [r1, #9]
   14220:	b923      	cbnz	r3, 1422c <get_status+0x18>
	if (data->ref > 0) {
   14222:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   14224:	fab0 f080 	clz	r0, r0
   14228:	0940      	lsrs	r0, r0, #5
   1422a:	4770      	bx	lr
   1422c:	2002      	movs	r0, #2
}
   1422e:	4770      	bx	lr

00014230 <clock_stop>:
{
   14230:	b570      	push	{r4, r5, r6, lr}
   14232:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   14234:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   14236:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   14238:	f04f 0320 	mov.w	r3, #32
   1423c:	f3ef 8611 	mrs	r6, BASEPRI
   14240:	f383 8811 	msr	BASEPRI, r3
   14244:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   14248:	220c      	movs	r2, #12
   1424a:	434a      	muls	r2, r1
   1424c:	18ab      	adds	r3, r5, r2
   1424e:	7a18      	ldrb	r0, [r3, #8]
   14250:	b190      	cbz	r0, 14278 <clock_stop+0x48>
	data->ref--;
   14252:	3801      	subs	r0, #1
   14254:	b2c0      	uxtb	r0, r0
   14256:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
   14258:	b988      	cbnz	r0, 1427e <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1425a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	list->head = NULL;
   1425e:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14260:	78ca      	ldrb	r2, [r1, #3]
	list->tail = NULL;
   14262:	6058      	str	r0, [r3, #4]
   14264:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14268:	2101      	movs	r1, #1
   1426a:	6011      	str	r1, [r2, #0]
		data->started = false;
   1426c:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
   1426e:	f386 8811 	msr	BASEPRI, r6
   14272:	f3bf 8f6f 	isb	sy
}
   14276:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   14278:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1427c:	e7f7      	b.n	1426e <clock_stop+0x3e>
	int err = 0;
   1427e:	2000      	movs	r0, #0
   14280:	e7f5      	b.n	1426e <clock_stop+0x3e>

00014282 <clk_init>:
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14282:	2200      	movs	r2, #0
{
   14284:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14286:	2101      	movs	r1, #1
{
   14288:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1428a:	4610      	mov	r0, r2
   1428c:	f7ef fe22 	bl	3ed4 <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
   14290:	2000      	movs	r0, #0
   14292:	f7ef fded 	bl	3e70 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   14296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1429a:	2201      	movs	r2, #1
   1429c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   142a0:	2203      	movs	r2, #3
   142a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   142a6:	68e3      	ldr	r3, [r4, #12]
	list->head = NULL;
   142a8:	2000      	movs	r0, #0
	list->tail = NULL;
   142aa:	e9c3 0000 	strd	r0, r0, [r3]
   142ae:	68e3      	ldr	r3, [r4, #12]
   142b0:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   142b4:	bd10      	pop	{r4, pc}

000142b6 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   142b6:	2200      	movs	r2, #0
   142b8:	f7ef bc3a 	b.w	3b30 <clock_async_start>

000142bc <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   142bc:	4770      	bx	lr

000142be <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   142be:	4770      	bx	lr

000142c0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   142c0:	2100      	movs	r1, #0
   142c2:	2001      	movs	r0, #1
   142c4:	f000 b800 	b.w	142c8 <z_arm_fatal_error>

000142c8 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   142c8:	f000 b9fe 	b.w	146c8 <z_fatal_error>

000142cc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   142cc:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   142ce:	6800      	ldr	r0, [r0, #0]
   142d0:	f000 b9fa 	b.w	146c8 <z_fatal_error>

000142d4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   142d4:	b508      	push	{r3, lr}
	handler();
   142d6:	f7ef fec3 	bl	4060 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   142da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   142de:	f7ef bf05 	b.w	40ec <z_arm_exc_exit>

000142e2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   142e2:	1e43      	subs	r3, r0, #1
   142e4:	3901      	subs	r1, #1
   142e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   142ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   142ee:	4282      	cmp	r2, r0
   142f0:	d101      	bne.n	142f6 <strcmp+0x14>
   142f2:	2a00      	cmp	r2, #0
   142f4:	d1f7      	bne.n	142e6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   142f6:	1a10      	subs	r0, r2, r0
   142f8:	4770      	bx	lr

000142fa <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   142fa:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   142fc:	b15a      	cbz	r2, 14316 <memcmp+0x1c>
   142fe:	3901      	subs	r1, #1
   14300:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   14302:	f810 2b01 	ldrb.w	r2, [r0], #1
   14306:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1430a:	42a0      	cmp	r0, r4
   1430c:	d001      	beq.n	14312 <memcmp+0x18>
   1430e:	429a      	cmp	r2, r3
   14310:	d0f7      	beq.n	14302 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   14312:	1ad0      	subs	r0, r2, r3
}
   14314:	bd10      	pop	{r4, pc}
		return 0;
   14316:	4610      	mov	r0, r2
   14318:	e7fc      	b.n	14314 <memcmp+0x1a>

0001431a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1431a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1431c:	ea81 0400 	eor.w	r4, r1, r0
   14320:	07a5      	lsls	r5, r4, #30
   14322:	4603      	mov	r3, r0
   14324:	d00b      	beq.n	1433e <memcpy+0x24>
   14326:	3b01      	subs	r3, #1
   14328:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1432a:	4291      	cmp	r1, r2
   1432c:	d11b      	bne.n	14366 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   14330:	2a00      	cmp	r2, #0
   14332:	d0fc      	beq.n	1432e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   14334:	f811 4b01 	ldrb.w	r4, [r1], #1
   14338:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1433c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1433e:	079c      	lsls	r4, r3, #30
   14340:	d1f6      	bne.n	14330 <memcpy+0x16>
   14342:	f022 0403 	bic.w	r4, r2, #3
   14346:	1f1d      	subs	r5, r3, #4
   14348:	0896      	lsrs	r6, r2, #2
   1434a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1434c:	42b9      	cmp	r1, r7
   1434e:	d105      	bne.n	1435c <memcpy+0x42>
   14350:	f06f 0503 	mvn.w	r5, #3
   14354:	fb05 2206 	mla	r2, r5, r6, r2
   14358:	4423      	add	r3, r4
   1435a:	e7e4      	b.n	14326 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1435c:	f851 cb04 	ldr.w	ip, [r1], #4
   14360:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   14364:	e7f2      	b.n	1434c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   14366:	f811 4b01 	ldrb.w	r4, [r1], #1
   1436a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1436e:	e7dc      	b.n	1432a <memcpy+0x10>

00014370 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   14370:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   14372:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   14374:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   14376:	079c      	lsls	r4, r3, #30
   14378:	d111      	bne.n	1439e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1437a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1437e:	f022 0603 	bic.w	r6, r2, #3
   14382:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   14386:	441e      	add	r6, r3
   14388:	0894      	lsrs	r4, r2, #2
   1438a:	42b3      	cmp	r3, r6
   1438c:	d10d      	bne.n	143aa <memset+0x3a>
   1438e:	f06f 0503 	mvn.w	r5, #3
   14392:	fb05 2204 	mla	r2, r5, r4, r2
   14396:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   14398:	4293      	cmp	r3, r2
   1439a:	d109      	bne.n	143b0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1439c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1439e:	2a00      	cmp	r2, #0
   143a0:	d0fc      	beq.n	1439c <memset+0x2c>
		*(d_byte++) = c_byte;
   143a2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   143a6:	3a01      	subs	r2, #1
   143a8:	e7e5      	b.n	14376 <memset+0x6>
		*(d_word++) = c_word;
   143aa:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   143ae:	e7ec      	b.n	1438a <memset+0x1a>
		*(d_byte++) = c_byte;
   143b0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   143b4:	e7f0      	b.n	14398 <memset+0x28>

000143b6 <_stdout_hook_default>:
}
   143b6:	f04f 30ff 	mov.w	r0, #4294967295
   143ba:	4770      	bx	lr

000143bc <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   143bc:	f7fe bb90 	b.w	12ae0 <SystemInit>

000143c0 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
   143c0:	b530      	push	{r4, r5, lr}
   143c2:	b085      	sub	sp, #20
   143c4:	4604      	mov	r4, r0
   143c6:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   143c8:	4668      	mov	r0, sp
   143ca:	2203      	movs	r2, #3
   143cc:	f7ff ffa5 	bl	1431a <memcpy>
	(void)memset(res + 3, 0, 13);
   143d0:	220d      	movs	r2, #13
   143d2:	2100      	movs	r1, #0
   143d4:	f10d 0003 	add.w	r0, sp, #3
   143d8:	f7ff ffca 	bl	14370 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   143dc:	4620      	mov	r0, r4
   143de:	466a      	mov	r2, sp
   143e0:	4669      	mov	r1, sp
   143e2:	f7f3 fc0f 	bl	7c04 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   143e6:	4604      	mov	r4, r0
   143e8:	b920      	cbnz	r0, 143f4 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   143ea:	2203      	movs	r2, #3
   143ec:	4669      	mov	r1, sp
   143ee:	4628      	mov	r0, r5
   143f0:	f7ff ff93 	bl	1431a <memcpy>

	return 0;
}
   143f4:	4620      	mov	r0, r4
   143f6:	b005      	add	sp, #20
   143f8:	bd30      	pop	{r4, r5, pc}

000143fa <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
   143fa:	b513      	push	{r0, r1, r4, lr}
   143fc:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   143fe:	aa01      	add	r2, sp, #4
   14400:	3103      	adds	r1, #3
   14402:	f7ff ffdd 	bl	143c0 <ah>
	if (err) {
   14406:	b948      	cbnz	r0, 1441c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   14408:	2203      	movs	r2, #3
   1440a:	a901      	add	r1, sp, #4
   1440c:	4620      	mov	r0, r4
   1440e:	f7ff ff74 	bl	142fa <memcmp>
   14412:	fab0 f080 	clz	r0, r0
   14416:	0940      	lsrs	r0, r0, #5
}
   14418:	b002      	add	sp, #8
   1441a:	bd10      	pop	{r4, pc}
		return false;
   1441c:	2000      	movs	r0, #0
   1441e:	e7fb      	b.n	14418 <bt_rpa_irk_matches+0x1e>

00014420 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
   14420:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   14422:	1cce      	adds	r6, r1, #3
{
   14424:	4605      	mov	r5, r0
   14426:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   14428:	4630      	mov	r0, r6
   1442a:	2103      	movs	r1, #3
   1442c:	f7f3 fbe8 	bl	7c00 <bt_rand>
	if (err) {
   14430:	b960      	cbnz	r0, 1444c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   14432:	7963      	ldrb	r3, [r4, #5]
   14434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1443c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1443e:	4622      	mov	r2, r4
   14440:	4631      	mov	r1, r6
   14442:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   14444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   14448:	f7ff bfba 	b.w	143c0 <ah>
}
   1444c:	bd70      	pop	{r4, r5, r6, pc}

0001444e <bt_buf_get_evt>:
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1444e:	2001      	movs	r0, #1
   14450:	f7f0 b850 	b.w	44f4 <bt_buf_get_rx>

00014454 <bt_recv_prio>:
	if (bt_buf_get_type(buf) == BT_BUF_EVT) {
   14454:	7d03      	ldrb	r3, [r0, #20]
   14456:	2b01      	cmp	r3, #1
   14458:	d103      	bne.n	14462 <bt_recv_prio+0xe>
		u8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1445a:	6883      	ldr	r3, [r0, #8]
 *
 * @return HCI event flags for the specified event.
 */
static inline u8_t bt_hci_evt_get_flags(u8_t evt)
{
	switch (evt) {
   1445c:	781b      	ldrb	r3, [r3, #0]
   1445e:	2b05      	cmp	r3, #5
   14460:	d001      	beq.n	14466 <bt_recv_prio+0x12>
	return bt_recv(buf);
   14462:	f7f0 b899 	b.w	4598 <bt_recv>
}
   14466:	2000      	movs	r0, #0
   14468:	4770      	bx	lr

0001446a <fixed_data_unref>:
}
   1446a:	4770      	bx	lr

0001446c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1446c:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1446e:	6849      	ldr	r1, [r1, #4]
   14470:	6809      	ldr	r1, [r1, #0]
   14472:	f7fd bccf 	b.w	11e14 <net_buf_alloc_len>

00014476 <net_buf_get>:
{
   14476:	b570      	push	{r4, r5, r6, lr}
   14478:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1447a:	f7fe fd93 	bl	12fa4 <z_impl_k_queue_get>
	if (!buf) {
   1447e:	4605      	mov	r5, r0
   14480:	b128      	cbz	r0, 1448e <net_buf_get+0x18>
   14482:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   14484:	7963      	ldrb	r3, [r4, #5]
   14486:	f013 0301 	ands.w	r3, r3, #1
   1448a:	d102      	bne.n	14492 <net_buf_get+0x1c>
	frag->frags = NULL;
   1448c:	6023      	str	r3, [r4, #0]
}
   1448e:	4628      	mov	r0, r5
   14490:	bd70      	pop	{r4, r5, r6, pc}
   14492:	2300      	movs	r3, #0
   14494:	2200      	movs	r2, #0
   14496:	4630      	mov	r0, r6
   14498:	f7fe fd84 	bl	12fa4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1449c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1449e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   144a0:	f023 0301 	bic.w	r3, r3, #1
   144a4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   144a6:	4604      	mov	r4, r0
   144a8:	e7ec      	b.n	14484 <net_buf_get+0xe>

000144aa <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   144aa:	6883      	ldr	r3, [r0, #8]
   144ac:	440b      	add	r3, r1
   144ae:	6003      	str	r3, [r0, #0]
}
   144b0:	4770      	bx	lr

000144b2 <net_buf_put>:
{
   144b2:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   144b4:	460a      	mov	r2, r1
   144b6:	6814      	ldr	r4, [r2, #0]
   144b8:	b914      	cbnz	r4, 144c0 <net_buf_put+0xe>
}
   144ba:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   144bc:	f000 ba28 	b.w	14910 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   144c0:	7953      	ldrb	r3, [r2, #5]
   144c2:	f043 0301 	orr.w	r3, r3, #1
   144c6:	7153      	strb	r3, [r2, #5]
   144c8:	4622      	mov	r2, r4
   144ca:	e7f4      	b.n	144b6 <net_buf_put+0x4>

000144cc <net_buf_simple_add>:
	return buf->data + buf->len;
   144cc:	8883      	ldrh	r3, [r0, #4]
   144ce:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   144d0:	4419      	add	r1, r3
   144d2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   144d4:	18d0      	adds	r0, r2, r3
   144d6:	4770      	bx	lr

000144d8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   144d8:	b430      	push	{r4, r5}
   144da:	8884      	ldrh	r4, [r0, #4]
   144dc:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   144de:	18a3      	adds	r3, r4, r2
   144e0:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   144e2:	1928      	adds	r0, r5, r4
}
   144e4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   144e6:	f7ff bf18 	b.w	1431a <memcpy>

000144ea <net_buf_simple_push_u8>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   144ea:	6802      	ldr	r2, [r0, #0]
   144ec:	1e53      	subs	r3, r2, #1
   144ee:	6003      	str	r3, [r0, #0]
	buf->len += len;
   144f0:	8883      	ldrh	r3, [r0, #4]
   144f2:	3301      	adds	r3, #1
   144f4:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, u8_t val)
{
	u8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   144f6:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   144fa:	4770      	bx	lr

000144fc <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   144fc:	8882      	ldrh	r2, [r0, #4]
   144fe:	1a52      	subs	r2, r2, r1
{
   14500:	4603      	mov	r3, r0
	buf->len -= len;
   14502:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   14504:	6800      	ldr	r0, [r0, #0]
   14506:	4408      	add	r0, r1
   14508:	6018      	str	r0, [r3, #0]
}
   1450a:	4770      	bx	lr

0001450c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1450c:	4603      	mov	r3, r0
	void *data = buf->data;
   1450e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   14510:	889a      	ldrh	r2, [r3, #4]
   14512:	1a52      	subs	r2, r2, r1
	buf->data += len;
   14514:	4401      	add	r1, r0
	buf->len -= len;
   14516:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   14518:	6019      	str	r1, [r3, #0]

	return data;
}
   1451a:	4770      	bx	lr

0001451c <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1451c:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1451e:	6803      	ldr	r3, [r0, #0]
   14520:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   14522:	2101      	movs	r1, #1
   14524:	f7ff ffea 	bl	144fc <net_buf_simple_pull>

	return val;
}
   14528:	4620      	mov	r0, r4
   1452a:	bd10      	pop	{r4, pc}

0001452c <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1452c:	8883      	ldrh	r3, [r0, #4]
   1452e:	88c2      	ldrh	r2, [r0, #6]
   14530:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   14532:	6803      	ldr	r3, [r0, #0]
   14534:	6880      	ldr	r0, [r0, #8]
   14536:	1a18      	subs	r0, r3, r0
}
   14538:	1a10      	subs	r0, r2, r0
   1453a:	4770      	bx	lr

0001453c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1453c:	6843      	ldr	r3, [r0, #4]
   1453e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   14540:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   14544:	600b      	str	r3, [r1, #0]
}
   14546:	2000      	movs	r0, #0
   14548:	4770      	bx	lr

0001454a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1454a:	6843      	ldr	r3, [r0, #4]
   1454c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1454e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   14552:	4042      	eors	r2, r0
   14554:	400a      	ands	r2, r1
   14556:	4042      	eors	r2, r0
    p_reg->OUT = value;
   14558:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1455c:	2000      	movs	r0, #0
   1455e:	4770      	bx	lr

00014560 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14560:	6843      	ldr	r3, [r0, #4]
   14562:	685b      	ldr	r3, [r3, #4]
}
   14564:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   14566:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1456a:	4770      	bx	lr

0001456c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1456c:	6843      	ldr	r3, [r0, #4]
   1456e:	685b      	ldr	r3, [r3, #4]
}
   14570:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   14572:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   14576:	4770      	bx	lr

00014578 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14578:	6843      	ldr	r3, [r0, #4]
   1457a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1457c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   14580:	404b      	eors	r3, r1
    p_reg->OUT = value;
   14582:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   14586:	2000      	movs	r0, #0
   14588:	4770      	bx	lr

0001458a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1458a:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   1458c:	6858      	ldr	r0, [r3, #4]
{
   1458e:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   14590:	b158      	cbz	r0, 145aa <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14592:	2400      	movs	r4, #0
   14594:	4281      	cmp	r1, r0
   14596:	d113      	bne.n	145c0 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   14598:	6808      	ldr	r0, [r1, #0]
   1459a:	b95c      	cbnz	r4, 145b4 <gpio_nrfx_manage_callback+0x2a>
   1459c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1459e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   145a0:	42a1      	cmp	r1, r4
   145a2:	d100      	bne.n	145a6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   145a4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   145a6:	2000      	movs	r0, #0
   145a8:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   145aa:	b972      	cbnz	r2, 145ca <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   145ac:	2000      	movs	r0, #0
}
   145ae:	bd30      	pop	{r4, r5, pc}
   145b0:	4628      	mov	r0, r5
   145b2:	e7ef      	b.n	14594 <gpio_nrfx_manage_callback+0xa>
   145b4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   145b6:	6898      	ldr	r0, [r3, #8]
   145b8:	4281      	cmp	r1, r0
	list->tail = node;
   145ba:	bf08      	it	eq
   145bc:	609c      	streq	r4, [r3, #8]
}
   145be:	e7f2      	b.n	145a6 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   145c0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   145c2:	4604      	mov	r4, r0
   145c4:	2d00      	cmp	r5, #0
   145c6:	d1f3      	bne.n	145b0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   145c8:	b13a      	cbz	r2, 145da <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   145ca:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   145cc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   145ce:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   145d0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   145d2:	2800      	cmp	r0, #0
   145d4:	d1ea      	bne.n	145ac <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   145d6:	6099      	str	r1, [r3, #8]
}
   145d8:	e7e9      	b.n	145ae <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   145da:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   145de:	e7e6      	b.n	145ae <gpio_nrfx_manage_callback+0x24>

000145e0 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   145e0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   145e4:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   145e6:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   145e8:	d111      	bne.n	1460e <gpio_nrfx_pin_interrupt_configure+0x2e>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   145ea:	6845      	ldr	r5, [r0, #4]
   145ec:	7a2e      	ldrb	r6, [r5, #8]
   145ee:	f001 051f 	and.w	r5, r1, #31
   145f2:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   145f6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   145fa:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   145fe:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14602:	07ed      	lsls	r5, r5, #31
   14604:	d507      	bpl.n	14616 <gpio_nrfx_pin_interrupt_configure+0x36>
}
   14606:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1460a:	bc70      	pop	{r4, r5, r6}
   1460c:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1460e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14612:	68e5      	ldr	r5, [r4, #12]
   14614:	d026      	beq.n	14664 <gpio_nrfx_pin_interrupt_configure+0x84>
   14616:	68e6      	ldr	r6, [r4, #12]
   14618:	2501      	movs	r5, #1
   1461a:	408d      	lsls	r5, r1
   1461c:	4335      	orrs	r5, r6
   1461e:	6926      	ldr	r6, [r4, #16]
   14620:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14622:	2501      	movs	r5, #1
   14624:	408d      	lsls	r5, r1
   14626:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1462a:	bf14      	ite	ne
   1462c:	432e      	orrne	r6, r5
   1462e:	43ae      	biceq	r6, r5
   14630:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14632:	69a6      	ldr	r6, [r4, #24]
   14634:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14638:	69e2      	ldr	r2, [r4, #28]
   1463a:	bf0c      	ite	eq
   1463c:	432e      	orreq	r6, r5
   1463e:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14640:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   14644:	bf0c      	ite	eq
   14646:	432a      	orreq	r2, r5
   14648:	43aa      	bicne	r2, r5
   1464a:	61e2      	str	r2, [r4, #28]
   1464c:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1464e:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   14654:	bf0c      	ite	eq
   14656:	4315      	orreq	r5, r2
   14658:	ea22 0505 	bicne.w	r5, r2, r5
   1465c:	6165      	str	r5, [r4, #20]
}
   1465e:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   14660:	f7fd bd0e 	b.w	12080 <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14664:	2601      	movs	r6, #1
   14666:	408e      	lsls	r6, r1
   14668:	ea25 0506 	bic.w	r5, r5, r6
   1466c:	e7d7      	b.n	1461e <gpio_nrfx_pin_interrupt_configure+0x3e>

0001466e <gpio_nrfx_pin_disable_callback>:
{
   1466e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   14670:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   14672:	2301      	movs	r3, #1
   14674:	fa03 f201 	lsl.w	r2, r3, r1
   14678:	6923      	ldr	r3, [r4, #16]
   1467a:	ea23 0302 	bic.w	r3, r3, r2
   1467e:	6123      	str	r3, [r4, #16]
}
   14680:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   14682:	f7fd bcfd 	b.w	12080 <gpiote_pin_int_cfg>

00014686 <gpio_nrfx_pin_enable_callback>:
{
   14686:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   14688:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   1468a:	2301      	movs	r3, #1
   1468c:	fa03 f201 	lsl.w	r2, r3, r1
   14690:	6923      	ldr	r3, [r4, #16]
   14692:	4313      	orrs	r3, r2
   14694:	6123      	str	r3, [r4, #16]
}
   14696:	bc10      	pop	{r4}
	return gpiote_pin_int_cfg(port, pin);
   14698:	f7fd bcf2 	b.w	12080 <gpiote_pin_int_cfg>

0001469c <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1469c:	68c2      	ldr	r2, [r0, #12]
{
   1469e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   146a0:	e892 0003 	ldmia.w	r2, {r0, r1}
   146a4:	e883 0003 	stmia.w	r3, {r0, r1}
}
   146a8:	2000      	movs	r0, #0
   146aa:	4770      	bx	lr

000146ac <uart_nrfx_irq_tx_ready_complete>:
{
   146ac:	b508      	push	{r3, lr}
	return event_txdrdy_check();
   146ae:	f7fd fe3b 	bl	12328 <event_txdrdy_check>
}
   146b2:	bd08      	pop	{r3, pc}

000146b4 <uart_nrfx_irq_update>:
}
   146b4:	2001      	movs	r0, #1
   146b6:	4770      	bx	lr

000146b8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   146b8:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   146ba:	2000      	movs	r0, #0
   146bc:	f7ef fee8 	bl	4490 <sys_arch_reboot>

000146c0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   146c0:	f000 ba7c 	b.w	14bbc <z_impl_k_busy_wait>

000146c4 <device_busy_set>:
	atomic_set_bit((atomic_t *) __device_busy_start,
		       (busy_dev - __device_start));
#else
	ARG_UNUSED(busy_dev);
#endif
}
   146c4:	4770      	bx	lr

000146c6 <device_busy_clear>:
   146c6:	4770      	bx	lr

000146c8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   146c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146ca:	4605      	mov	r5, r0
   146cc:	460e      	mov	r6, r1
	__asm__ volatile(
   146ce:	f04f 0320 	mov.w	r3, #32
   146d2:	f3ef 8711 	mrs	r7, BASEPRI
   146d6:	f383 8811 	msr	BASEPRI, r3
   146da:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   146de:	f7fe ff9b 	bl	13618 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   146e2:	4631      	mov	r1, r6
   146e4:	4604      	mov	r4, r0
   146e6:	4628      	mov	r0, r5
   146e8:	f7ff ffe6 	bl	146b8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   146ec:	f387 8811 	msr	BASEPRI, r7
   146f0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   146f4:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   146f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   146fa:	f7ef bdd9 	b.w	42b0 <z_impl_k_thread_abort>

000146fe <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   146fe:	f7ff bdde 	b.w	142be <z_clock_idle_exit>

00014702 <k_heap_init>:
{
   14702:	b410      	push	{r4}
   14704:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   14708:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1470c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1470e:	f7ff bd3c 	b.w	1418a <sys_heap_init>

00014712 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   14712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14716:	4604      	mov	r4, r0
   14718:	b085      	sub	sp, #20
   1471a:	460e      	mov	r6, r1
	s64_t now, end = z_timeout_end_calc(timeout);
   1471c:	4610      	mov	r0, r2
   1471e:	4619      	mov	r1, r3
   14720:	f000 fb1a 	bl	14d58 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   14724:	f104 0a14 	add.w	sl, r4, #20
	s64_t now, end = z_timeout_end_calc(timeout);
   14728:	4605      	mov	r5, r0
   1472a:	460f      	mov	r7, r1
	__asm__ volatile(
   1472c:	f04f 0220 	mov.w	r2, #32
   14730:	f3ef 8311 	mrs	r3, BASEPRI
   14734:	f382 8811 	msr	BASEPRI, r2
   14738:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1473c:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   14740:	4631      	mov	r1, r6
   14742:	4620      	mov	r0, r4
   14744:	9303      	str	r3, [sp, #12]
   14746:	f7ff fcc8 	bl	140da <sys_heap_alloc>
   1474a:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   1474c:	f7ff f9f4 	bl	13b38 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   14750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14754:	b13a      	cbz	r2, 14766 <k_heap_alloc+0x54>
	__asm__ volatile(
   14756:	f383 8811 	msr	BASEPRI, r3
   1475a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1475e:	4610      	mov	r0, r2
   14760:	b005      	add	sp, #20
   14762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   14766:	ebb5 0800 	subs.w	r8, r5, r0
   1476a:	eb67 0901 	sbc.w	r9, r7, r1
   1476e:	f1b8 0f01 	cmp.w	r8, #1
   14772:	f179 0100 	sbcs.w	r1, r9, #0
   14776:	dbee      	blt.n	14756 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   14778:	e9cd 8900 	strd	r8, r9, [sp]
   1477c:	465a      	mov	r2, fp
   1477e:	4619      	mov	r1, r3
   14780:	4650      	mov	r0, sl
   14782:	f7fe febb 	bl	134fc <z_pend_curr>
	__asm__ volatile(
   14786:	f04f 0220 	mov.w	r2, #32
   1478a:	f3ef 8311 	mrs	r3, BASEPRI
   1478e:	f382 8811 	msr	BASEPRI, r2
   14792:	f3bf 8f6f 	isb	sy
   14796:	e7d3      	b.n	14740 <k_heap_alloc+0x2e>

00014798 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   14798:	b538      	push	{r3, r4, r5, lr}
   1479a:	4604      	mov	r4, r0
   1479c:	f04f 0320 	mov.w	r3, #32
   147a0:	f3ef 8511 	mrs	r5, BASEPRI
   147a4:	f383 8811 	msr	BASEPRI, r3
   147a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   147ac:	f7ff fbe2 	bl	13f74 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   147b0:	f104 000c 	add.w	r0, r4, #12
   147b4:	f000 f9dc 	bl	14b70 <z_unpend_all>
   147b8:	b130      	cbz	r0, 147c8 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   147ba:	4629      	mov	r1, r5
   147bc:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   147c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   147c4:	f000 b8e9 	b.w	1499a <z_reschedule>
	__asm__ volatile(
   147c8:	f385 8811 	msr	BASEPRI, r5
   147cc:	f3bf 8f6f 	isb	sy
}
   147d0:	bd38      	pop	{r3, r4, r5, pc}

000147d2 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   147d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147d4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   147d8:	6800      	ldr	r0, [r0, #0]
   147da:	6048      	str	r0, [r1, #4]
{
   147dc:	4614      	mov	r4, r2
   147de:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   147e0:	4632      	mov	r2, r6
   147e2:	463b      	mov	r3, r7
   147e4:	4621      	mov	r1, r4
   147e6:	f7ff ff94 	bl	14712 <k_heap_alloc>
   147ea:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   147ec:	b144      	cbz	r4, 14800 <k_mem_pool_alloc+0x2e>
   147ee:	b938      	cbnz	r0, 14800 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   147f0:	ea56 0307 	orrs.w	r3, r6, r7
   147f4:	bf0c      	ite	eq
   147f6:	f06f 000b 	mvneq.w	r0, #11
   147fa:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   147fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   14800:	2000      	movs	r0, #0
   14802:	e7fc      	b.n	147fe <k_mem_pool_alloc+0x2c>

00014804 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   14804:	e9d0 1000 	ldrd	r1, r0, [r0]
   14808:	f7ff bfc6 	b.w	14798 <k_heap_free>

0001480c <queue_insert>:
{
   1480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14810:	4604      	mov	r4, r0
   14812:	460d      	mov	r5, r1
   14814:	4690      	mov	r8, r2
   14816:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14818:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1481c:	f04f 0320 	mov.w	r3, #32
   14820:	f3ef 8711 	mrs	r7, BASEPRI
   14824:	f383 8811 	msr	BASEPRI, r3
   14828:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1482c:	4630      	mov	r0, r6
   1482e:	f000 f972 	bl	14b16 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   14832:	b158      	cbz	r0, 1484c <queue_insert+0x40>
   14834:	2400      	movs	r4, #0
   14836:	6704      	str	r4, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   14838:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1483c:	f000 f8f5 	bl	14a2a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   14840:	4630      	mov	r0, r6
   14842:	4639      	mov	r1, r7
   14844:	f000 f8a9 	bl	1499a <z_reschedule>
	return 0;
   14848:	2000      	movs	r0, #0
   1484a:	e00c      	b.n	14866 <queue_insert+0x5a>
	if (alloc) {
   1484c:	f1b9 0f00 	cmp.w	r9, #0
   14850:	d01b      	beq.n	1488a <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   14852:	2008      	movs	r0, #8
   14854:	f7ff fa12 	bl	13c7c <z_thread_malloc>
		if (anode == NULL) {
   14858:	b938      	cbnz	r0, 1486a <queue_insert+0x5e>
	__asm__ volatile(
   1485a:	f387 8811 	msr	BASEPRI, r7
   1485e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   14862:	f06f 000b 	mvn.w	r0, #11
}
   14866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1486a:	2301      	movs	r3, #1
		anode->data = data;
   1486c:	f8c0 8004 	str.w	r8, [r0, #4]
   14870:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   14872:	6803      	ldr	r3, [r0, #0]
   14874:	f003 0203 	and.w	r2, r3, #3
   14878:	b95d      	cbnz	r5, 14892 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1487a:	6823      	ldr	r3, [r4, #0]
   1487c:	4313      	orrs	r3, r2
   1487e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   14880:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   14882:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   14884:	b973      	cbnz	r3, 148a4 <queue_insert+0x98>
	list->tail = node;
   14886:	6060      	str	r0, [r4, #4]
}
   14888:	e00c      	b.n	148a4 <queue_insert+0x98>
	node->next_and_flags = flags;
   1488a:	f8c8 9000 	str.w	r9, [r8]
}
   1488e:	4640      	mov	r0, r8
   14890:	e7ef      	b.n	14872 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14892:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   14894:	f033 0303 	bics.w	r3, r3, #3
   14898:	d110      	bne.n	148bc <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1489a:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1489c:	6862      	ldr	r2, [r4, #4]
   1489e:	b93a      	cbnz	r2, 148b0 <queue_insert+0xa4>
	list->head = node;
   148a0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   148a4:	2104      	movs	r1, #4
   148a6:	f104 0010 	add.w	r0, r4, #16
   148aa:	f000 fb78 	bl	14f9e <z_handle_obj_poll_events>
   148ae:	e7c7      	b.n	14840 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   148b0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   148b2:	f003 0303 	and.w	r3, r3, #3
   148b6:	4303      	orrs	r3, r0
   148b8:	6013      	str	r3, [r2, #0]
   148ba:	e7e4      	b.n	14886 <queue_insert+0x7a>
   148bc:	4313      	orrs	r3, r2
   148be:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   148c0:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   148c2:	f003 0303 	and.w	r3, r3, #3
   148c6:	4303      	orrs	r3, r0
   148c8:	602b      	str	r3, [r5, #0]
}
   148ca:	e7eb      	b.n	148a4 <queue_insert+0x98>

000148cc <z_queue_node_peek>:
{
   148cc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   148ce:	4604      	mov	r4, r0
   148d0:	b130      	cbz	r0, 148e0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   148d2:	6802      	ldr	r2, [r0, #0]
   148d4:	0793      	lsls	r3, r2, #30
   148d6:	d003      	beq.n	148e0 <z_queue_node_peek+0x14>
		ret = anode->data;
   148d8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   148da:	b109      	cbz	r1, 148e0 <z_queue_node_peek+0x14>
			k_free(anode);
   148dc:	f000 fb85 	bl	14fea <k_free>
}
   148e0:	4620      	mov	r0, r4
   148e2:	bd10      	pop	{r4, pc}

000148e4 <z_impl_k_queue_init>:
	list->head = NULL;
   148e4:	2300      	movs	r3, #0
	list->tail = NULL;
   148e6:	e9c0 3300 	strd	r3, r3, [r0]
   148ea:	f100 0308 	add.w	r3, r0, #8
   148ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   148f2:	f100 0310 	add.w	r3, r0, #16
   148f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   148fa:	4770      	bx	lr

000148fc <k_queue_append>:
{
   148fc:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   148fe:	2300      	movs	r3, #0
   14900:	6841      	ldr	r1, [r0, #4]
   14902:	f7ff bf83 	b.w	1480c <queue_insert>

00014906 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   14906:	2300      	movs	r3, #0
{
   14908:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   1490a:	4619      	mov	r1, r3
   1490c:	f7ff bf7e 	b.w	1480c <queue_insert>

00014910 <k_queue_append_list>:
{
   14910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14914:	4605      	mov	r5, r0
   14916:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   14918:	460c      	mov	r4, r1
   1491a:	b391      	cbz	r1, 14982 <k_queue_append_list+0x72>
   1491c:	b38a      	cbz	r2, 14982 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1491e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   14922:	f04f 0320 	mov.w	r3, #32
   14926:	f3ef 8811 	mrs	r8, BASEPRI
   1492a:	f383 8811 	msr	BASEPRI, r3
   1492e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   14932:	4638      	mov	r0, r7
   14934:	f000 f8ef 	bl	14b16 <z_unpend_first_thread>
   14938:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1493c:	b920      	cbnz	r0, 14948 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1493e:	686b      	ldr	r3, [r5, #4]
   14940:	b9cb      	cbnz	r3, 14976 <k_queue_append_list+0x66>
	list->head = node;
   14942:	602c      	str	r4, [r5, #0]
	list->tail = node;
   14944:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   14946:	e00a      	b.n	1495e <k_queue_append_list+0x4e>
   14948:	6144      	str	r4, [r0, #20]
   1494a:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
	z_ready_thread(thread);
   1494e:	f000 f86c 	bl	14a2a <z_ready_thread>
		head = *(void **)head;
   14952:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   14954:	4638      	mov	r0, r7
   14956:	f000 f8de 	bl	14b16 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1495a:	2c00      	cmp	r4, #0
   1495c:	d1ee      	bne.n	1493c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1495e:	2104      	movs	r1, #4
   14960:	f105 0010 	add.w	r0, r5, #16
   14964:	f000 fb1b 	bl	14f9e <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   14968:	4638      	mov	r0, r7
   1496a:	4641      	mov	r1, r8
   1496c:	f000 f815 	bl	1499a <z_reschedule>
	return 0;
   14970:	2000      	movs	r0, #0
}
   14972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14976:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14978:	f001 0103 	and.w	r1, r1, #3
   1497c:	430c      	orrs	r4, r1
   1497e:	601c      	str	r4, [r3, #0]
}
   14980:	e7e0      	b.n	14944 <k_queue_append_list+0x34>
		return -EINVAL;
   14982:	f06f 0015 	mvn.w	r0, #21
   14986:	e7f4      	b.n	14972 <k_queue_append_list+0x62>

00014988 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   14988:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1498c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   14990:	4298      	cmp	r0, r3
   14992:	bfac      	ite	ge
   14994:	2000      	movge	r0, #0
   14996:	2001      	movlt	r0, #1
   14998:	4770      	bx	lr

0001499a <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1499a:	b921      	cbnz	r1, 149a6 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1499c:	f3ef 8005 	mrs	r0, IPSR
   149a0:	b908      	cbnz	r0, 149a6 <z_reschedule+0xc>
   149a2:	f7ef ba4b 	b.w	3e3c <arch_swap>
	__asm__ volatile(
   149a6:	f381 8811 	msr	BASEPRI, r1
   149aa:	f3bf 8f6f 	isb	sy
}
   149ae:	4770      	bx	lr

000149b0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   149b0:	4603      	mov	r3, r0
   149b2:	b920      	cbnz	r0, 149be <z_reschedule_irqlock+0xe>
   149b4:	f3ef 8205 	mrs	r2, IPSR
   149b8:	b90a      	cbnz	r2, 149be <z_reschedule_irqlock+0xe>
   149ba:	f7ef ba3f 	b.w	3e3c <arch_swap>
   149be:	f383 8811 	msr	BASEPRI, r3
   149c2:	f3bf 8f6f 	isb	sy
}
   149c6:	4770      	bx	lr

000149c8 <z_reschedule_unlocked>:
	__asm__ volatile(
   149c8:	f04f 0320 	mov.w	r3, #32
   149cc:	f3ef 8011 	mrs	r0, BASEPRI
   149d0:	f383 8811 	msr	BASEPRI, r3
   149d4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   149d8:	f7ff bfea 	b.w	149b0 <z_reschedule_irqlock>

000149dc <z_unpend_thread>:
{
   149dc:	b510      	push	{r4, lr}
   149de:	4601      	mov	r1, r0
   149e0:	f04f 0320 	mov.w	r3, #32
   149e4:	f3ef 8411 	mrs	r4, BASEPRI
   149e8:	f383 8811 	msr	BASEPRI, r3
   149ec:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   149f0:	6880      	ldr	r0, [r0, #8]
   149f2:	f7fe fb61 	bl	130b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   149f6:	7b4b      	ldrb	r3, [r1, #13]
   149f8:	f023 0302 	bic.w	r3, r3, #2
   149fc:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   149fe:	2300      	movs	r3, #0
   14a00:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   14a02:	f384 8811 	msr	BASEPRI, r4
   14a06:	f3bf 8f6f 	isb	sy
}
   14a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   14a0e:	f101 0018 	add.w	r0, r1, #24
   14a12:	f000 b95b 	b.w	14ccc <z_abort_timeout>

00014a16 <z_priq_dumb_best>:
{
   14a16:	4603      	mov	r3, r0
	return list->head == list;
   14a18:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a1a:	4283      	cmp	r3, r0
   14a1c:	d003      	beq.n	14a26 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   14a1e:	2800      	cmp	r0, #0
   14a20:	bf38      	it	cc
   14a22:	2000      	movcc	r0, #0
   14a24:	4770      	bx	lr
	struct k_thread *thread = NULL;
   14a26:	2000      	movs	r0, #0
}
   14a28:	4770      	bx	lr

00014a2a <z_ready_thread>:
{
   14a2a:	b510      	push	{r4, lr}
	__asm__ volatile(
   14a2c:	f04f 0320 	mov.w	r3, #32
   14a30:	f3ef 8411 	mrs	r4, BASEPRI
   14a34:	f383 8811 	msr	BASEPRI, r3
   14a38:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   14a3c:	f7fe fb92 	bl	13164 <ready_thread>
	__asm__ volatile(
   14a40:	f384 8811 	msr	BASEPRI, r4
   14a44:	f3bf 8f6f 	isb	sy
}
   14a48:	bd10      	pop	{r4, pc}

00014a4a <z_thread_timeout>:
{
   14a4a:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   14a4c:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   14a50:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   14a52:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   14a56:	b1c3      	cbz	r3, 14a8a <z_thread_timeout+0x40>
	__asm__ volatile(
   14a58:	f04f 0320 	mov.w	r3, #32
   14a5c:	f3ef 8511 	mrs	r5, BASEPRI
   14a60:	f383 8811 	msr	BASEPRI, r3
   14a64:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   14a68:	f850 0c10 	ldr.w	r0, [r0, #-16]
   14a6c:	f7fe fb24 	bl	130b8 <z_priq_dumb_remove>
   14a70:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   14a74:	f023 0302 	bic.w	r3, r3, #2
   14a78:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   14a7c:	2300      	movs	r3, #0
   14a7e:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   14a82:	f385 8811 	msr	BASEPRI, r5
   14a86:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14a8a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   14a8e:	f023 0314 	bic.w	r3, r3, #20
   14a92:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   14a96:	4608      	mov	r0, r1
}
   14a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   14a9c:	f7ff bfc5 	b.w	14a2a <z_ready_thread>

00014aa0 <z_remove_thread_from_ready_q>:
{
   14aa0:	b510      	push	{r4, lr}
	__asm__ volatile(
   14aa2:	f04f 0320 	mov.w	r3, #32
   14aa6:	f3ef 8411 	mrs	r4, BASEPRI
   14aaa:	f383 8811 	msr	BASEPRI, r3
   14aae:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   14ab2:	f7fe fcb5 	bl	13420 <unready_thread>
	__asm__ volatile(
   14ab6:	f384 8811 	msr	BASEPRI, r4
   14aba:	f3bf 8f6f 	isb	sy
}
   14abe:	bd10      	pop	{r4, pc}

00014ac0 <add_to_waitq_locked>:
{
   14ac0:	b538      	push	{r3, r4, r5, lr}
   14ac2:	4604      	mov	r4, r0
   14ac4:	460d      	mov	r5, r1
	unready_thread(thread);
   14ac6:	f7fe fcab 	bl	13420 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   14aca:	7b63      	ldrb	r3, [r4, #13]
   14acc:	f043 0302 	orr.w	r3, r3, #2
   14ad0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   14ad2:	b1c5      	cbz	r5, 14b06 <add_to_waitq_locked+0x46>
	return list->head == list;
   14ad4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   14ad6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14ad8:	429d      	cmp	r5, r3
   14ada:	bf08      	it	eq
   14adc:	2300      	moveq	r3, #0
   14ade:	2b00      	cmp	r3, #0
   14ae0:	bf38      	it	cc
   14ae2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ae4:	b183      	cbz	r3, 14b08 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   14ae6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   14aea:	f993 200e 	ldrsb.w	r2, [r3, #14]
   14aee:	4291      	cmp	r1, r2
   14af0:	db04      	blt.n	14afc <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   14af2:	686a      	ldr	r2, [r5, #4]
   14af4:	429a      	cmp	r2, r3
   14af6:	d007      	beq.n	14b08 <add_to_waitq_locked+0x48>
   14af8:	681b      	ldr	r3, [r3, #0]
   14afa:	e7f3      	b.n	14ae4 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   14afc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14afe:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   14b02:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14b04:	605c      	str	r4, [r3, #4]
}
   14b06:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   14b08:	686b      	ldr	r3, [r5, #4]
   14b0a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   14b0c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   14b0e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   14b10:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14b12:	606c      	str	r4, [r5, #4]
   14b14:	e7f7      	b.n	14b06 <add_to_waitq_locked+0x46>

00014b16 <z_unpend_first_thread>:
{
   14b16:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14b18:	f04f 0320 	mov.w	r3, #32
   14b1c:	f3ef 8211 	mrs	r2, BASEPRI
   14b20:	f383 8811 	msr	BASEPRI, r3
   14b24:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   14b28:	f7ff ff75 	bl	14a16 <z_priq_dumb_best>
   14b2c:	4604      	mov	r4, r0
	__asm__ volatile(
   14b2e:	f382 8811 	msr	BASEPRI, r2
   14b32:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   14b36:	b1c8      	cbz	r0, 14b6c <z_unpend_first_thread+0x56>
	__asm__ volatile(
   14b38:	f04f 0320 	mov.w	r3, #32
   14b3c:	f3ef 8511 	mrs	r5, BASEPRI
   14b40:	f383 8811 	msr	BASEPRI, r3
   14b44:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   14b48:	4601      	mov	r1, r0
   14b4a:	6880      	ldr	r0, [r0, #8]
   14b4c:	f7fe fab4 	bl	130b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14b50:	7b63      	ldrb	r3, [r4, #13]
   14b52:	f023 0302 	bic.w	r3, r3, #2
   14b56:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   14b58:	2300      	movs	r3, #0
   14b5a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   14b5c:	f385 8811 	msr	BASEPRI, r5
   14b60:	f3bf 8f6f 	isb	sy
   14b64:	f104 0018 	add.w	r0, r4, #24
   14b68:	f000 f8b0 	bl	14ccc <z_abort_timeout>
}
   14b6c:	4620      	mov	r0, r4
   14b6e:	bd38      	pop	{r3, r4, r5, pc}

00014b70 <z_unpend_all>:
{
   14b70:	b538      	push	{r3, r4, r5, lr}
   14b72:	4605      	mov	r5, r0
	int need_sched = 0;
   14b74:	2000      	movs	r0, #0
	return list->head == list;
   14b76:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14b78:	42a5      	cmp	r5, r4
   14b7a:	d000      	beq.n	14b7e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   14b7c:	b904      	cbnz	r4, 14b80 <z_unpend_all+0x10>
}
   14b7e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   14b80:	4620      	mov	r0, r4
   14b82:	f7ff ff2b 	bl	149dc <z_unpend_thread>
		z_ready_thread(thread);
   14b86:	4620      	mov	r0, r4
   14b88:	f7ff ff4f 	bl	14a2a <z_ready_thread>
		need_sched = 1;
   14b8c:	2001      	movs	r0, #1
   14b8e:	e7f2      	b.n	14b76 <z_unpend_all+0x6>

00014b90 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   14b90:	b15a      	cbz	r2, 14baa <z_impl_k_sem_init+0x1a>
   14b92:	428a      	cmp	r2, r1
   14b94:	d309      	bcc.n	14baa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   14b96:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   14b9a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   14b9e:	e9c0 0000 	strd	r0, r0, [r0]
   14ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   14ba6:	2000      	movs	r0, #0
   14ba8:	4770      	bx	lr
		return -EINVAL;
   14baa:	f06f 0015 	mvn.w	r0, #21
}
   14bae:	4770      	bx	lr

00014bb0 <k_is_in_isr>:
   14bb0:	f3ef 8005 	mrs	r0, IPSR
}
   14bb4:	3800      	subs	r0, #0
   14bb6:	bf18      	it	ne
   14bb8:	2001      	movne	r0, #1
   14bba:	4770      	bx	lr

00014bbc <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   14bbc:	f7ef bc7e 	b.w	44bc <arch_busy_wait>

00014bc0 <z_impl_k_thread_name_set>:
}
   14bc0:	f06f 0046 	mvn.w	r0, #70	; 0x46
   14bc4:	4770      	bx	lr

00014bc6 <k_work_submit_to_queue>:
{
   14bc6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14bc8:	f101 0308 	add.w	r3, r1, #8
   14bcc:	f3bf 8f5b 	dmb	ish
   14bd0:	e853 2f00 	ldrex	r2, [r3]
   14bd4:	f042 0c01 	orr.w	ip, r2, #1
   14bd8:	e843 ce00 	strex	lr, ip, [r3]
   14bdc:	f1be 0f00 	cmp.w	lr, #0
   14be0:	d1f6      	bne.n	14bd0 <k_work_submit_to_queue+0xa>
   14be2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   14be6:	07d3      	lsls	r3, r2, #31
   14be8:	d403      	bmi.n	14bf2 <k_work_submit_to_queue+0x2c>
}
   14bea:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   14bee:	f7ff be85 	b.w	148fc <k_queue_append>
}
   14bf2:	f85d fb04 	ldr.w	pc, [sp], #4

00014bf6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   14bf6:	f1a0 010c 	sub.w	r1, r0, #12
   14bfa:	6900      	ldr	r0, [r0, #16]
   14bfc:	f7ff bfe3 	b.w	14bc6 <k_work_submit_to_queue>

00014c00 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   14c00:	69c3      	ldr	r3, [r0, #28]
{
   14c02:	b570      	push	{r4, r5, r6, lr}
   14c04:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   14c06:	b913      	cbnz	r3, 14c0e <work_cancel+0xe>
		return -EALREADY;
   14c08:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   14c0c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14c0e:	f3bf 8f5b 	dmb	ish
   14c12:	6883      	ldr	r3, [r0, #8]
   14c14:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   14c18:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   14c1a:	f100 0508 	add.w	r5, r0, #8
   14c1e:	d532      	bpl.n	14c86 <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   14c20:	69c2      	ldr	r2, [r0, #28]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   14c22:	6813      	ldr	r3, [r2, #0]
   14c24:	2100      	movs	r1, #0
   14c26:	b913      	cbnz	r3, 14c2e <work_cancel+0x2e>
			return -EINVAL;
   14c28:	f06f 0015 	mvn.w	r0, #21
   14c2c:	e7ee      	b.n	14c0c <work_cancel+0xc>
   14c2e:	429c      	cmp	r4, r3
   14c30:	d124      	bne.n	14c7c <work_cancel+0x7c>
Z_GENLIST_REMOVE(sflist, sfnode)
   14c32:	6823      	ldr	r3, [r4, #0]
   14c34:	6856      	ldr	r6, [r2, #4]
   14c36:	f023 0003 	bic.w	r0, r3, #3
   14c3a:	b9b1      	cbnz	r1, 14c6a <work_cancel+0x6a>
   14c3c:	42b4      	cmp	r4, r6
	list->head = node;
   14c3e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   14c40:	d100      	bne.n	14c44 <work_cancel+0x44>
	list->tail = node;
   14c42:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14c44:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14c46:	f003 0303 	and.w	r3, r3, #3
   14c4a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   14c4c:	2000      	movs	r0, #0
   14c4e:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14c50:	f3bf 8f5b 	dmb	ish
   14c54:	e855 3f00 	ldrex	r3, [r5]
   14c58:	f023 0301 	bic.w	r3, r3, #1
   14c5c:	e845 3200 	strex	r2, r3, [r5]
   14c60:	2a00      	cmp	r2, #0
   14c62:	d1f7      	bne.n	14c54 <work_cancel+0x54>
   14c64:	f3bf 8f5b 	dmb	ish
   14c68:	e7d0      	b.n	14c0c <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   14c6a:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   14c6c:	f003 0303 	and.w	r3, r3, #3
   14c70:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   14c72:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   14c74:	600b      	str	r3, [r1, #0]
	list->tail = node;
   14c76:	bf08      	it	eq
   14c78:	6051      	streq	r1, [r2, #4]
}
   14c7a:	e7e3      	b.n	14c44 <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14c7c:	6818      	ldr	r0, [r3, #0]
   14c7e:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   14c80:	f020 0303 	bic.w	r3, r0, #3
   14c84:	e7cf      	b.n	14c26 <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   14c86:	300c      	adds	r0, #12
   14c88:	f000 f820 	bl	14ccc <z_abort_timeout>
		if (err) {
   14c8c:	2800      	cmp	r0, #0
   14c8e:	d0dd      	beq.n	14c4c <work_cancel+0x4c>
   14c90:	e7ba      	b.n	14c08 <work_cancel+0x8>

00014c92 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   14c92:	2300      	movs	r3, #0
   14c94:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   14c98:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   14c9c:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   14c9e:	61c3      	str	r3, [r0, #28]
}
   14ca0:	4770      	bx	lr

00014ca2 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   14ca2:	69c3      	ldr	r3, [r0, #28]
{
   14ca4:	b510      	push	{r4, lr}
	if (!work->work_q) {
   14ca6:	b173      	cbz	r3, 14cc6 <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   14ca8:	f04f 0320 	mov.w	r3, #32
   14cac:	f3ef 8411 	mrs	r4, BASEPRI
   14cb0:	f383 8811 	msr	BASEPRI, r3
   14cb4:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   14cb8:	f7ff ffa2 	bl	14c00 <work_cancel>
	__asm__ volatile(
   14cbc:	f384 8811 	msr	BASEPRI, r4
   14cc0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   14cc4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   14cc6:	f06f 0015 	mvn.w	r0, #21
   14cca:	e7fb      	b.n	14cc4 <k_delayed_work_cancel+0x22>

00014ccc <z_abort_timeout>:
{
   14ccc:	b510      	push	{r4, lr}
	__asm__ volatile(
   14cce:	f04f 0220 	mov.w	r2, #32
   14cd2:	f3ef 8411 	mrs	r4, BASEPRI
   14cd6:	f382 8811 	msr	BASEPRI, r2
   14cda:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   14cde:	6803      	ldr	r3, [r0, #0]
   14ce0:	b13b      	cbz	r3, 14cf2 <z_abort_timeout+0x26>
			remove_timeout(to);
   14ce2:	f7fe fe2b 	bl	1393c <remove_timeout>
			ret = 0;
   14ce6:	2000      	movs	r0, #0
	__asm__ volatile(
   14ce8:	f384 8811 	msr	BASEPRI, r4
   14cec:	f3bf 8f6f 	isb	sy
}
   14cf0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   14cf2:	f06f 0015 	mvn.w	r0, #21
   14cf6:	e7f7      	b.n	14ce8 <z_abort_timeout+0x1c>

00014cf8 <z_get_next_timeout_expiry>:
{
   14cf8:	b510      	push	{r4, lr}
	__asm__ volatile(
   14cfa:	f04f 0320 	mov.w	r3, #32
   14cfe:	f3ef 8411 	mrs	r4, BASEPRI
   14d02:	f383 8811 	msr	BASEPRI, r3
   14d06:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   14d0a:	f7fe fe2b 	bl	13964 <next_timeout>
	__asm__ volatile(
   14d0e:	f384 8811 	msr	BASEPRI, r4
   14d12:	f3bf 8f6f 	isb	sy
}
   14d16:	bd10      	pop	{r4, pc}

00014d18 <z_set_timeout_expiry>:
{
   14d18:	b570      	push	{r4, r5, r6, lr}
   14d1a:	4604      	mov	r4, r0
   14d1c:	460d      	mov	r5, r1
	__asm__ volatile(
   14d1e:	f04f 0320 	mov.w	r3, #32
   14d22:	f3ef 8611 	mrs	r6, BASEPRI
   14d26:	f383 8811 	msr	BASEPRI, r3
   14d2a:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   14d2e:	f7fe fe19 	bl	13964 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   14d32:	2801      	cmp	r0, #1
   14d34:	dd05      	ble.n	14d42 <z_set_timeout_expiry+0x2a>
   14d36:	42a0      	cmp	r0, r4
   14d38:	dd03      	ble.n	14d42 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   14d3a:	4629      	mov	r1, r5
   14d3c:	4620      	mov	r0, r4
   14d3e:	f7ef f805 	bl	3d4c <z_clock_set_timeout>
	__asm__ volatile(
   14d42:	f386 8811 	msr	BASEPRI, r6
   14d46:	f3bf 8f6f 	isb	sy
}
   14d4a:	bd70      	pop	{r4, r5, r6, pc}

00014d4c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   14d4c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   14d4e:	f7fe fef3 	bl	13b38 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   14d52:	bd08      	pop	{r3, pc}

00014d54 <z_impl_k_uptime_ticks>:

s64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   14d54:	f7fe bef0 	b.w	13b38 <z_tick_get>

00014d58 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
u64_t z_timeout_end_calc(k_timeout_t timeout)
{
   14d58:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14d5a:	1c4b      	adds	r3, r1, #1
   14d5c:	bf08      	it	eq
   14d5e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   14d62:	4604      	mov	r4, r0
   14d64:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14d66:	d013      	beq.n	14d90 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14d68:	ea54 0105 	orrs.w	r1, r4, r5
   14d6c:	d103      	bne.n	14d76 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   14d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   14d72:	f7fe bee1 	b.w	13b38 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   14d76:	f06f 0101 	mvn.w	r1, #1
   14d7a:	1a0a      	subs	r2, r1, r0
   14d7c:	f04f 31ff 	mov.w	r1, #4294967295
   14d80:	eb61 0305 	sbc.w	r3, r1, r5
   14d84:	2a00      	cmp	r2, #0
   14d86:	f173 0100 	sbcs.w	r1, r3, #0
   14d8a:	db02      	blt.n	14d92 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   14d8c:	4610      	mov	r0, r2
   14d8e:	4619      	mov	r1, r3
}
   14d90:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   14d92:	f7fe fed1 	bl	13b38 <z_tick_get>
   14d96:	2c01      	cmp	r4, #1
   14d98:	f175 0300 	sbcs.w	r3, r5, #0
   14d9c:	bfbc      	itt	lt
   14d9e:	2401      	movlt	r4, #1
   14da0:	2500      	movlt	r5, #0
   14da2:	1820      	adds	r0, r4, r0
   14da4:	eb45 0101 	adc.w	r1, r5, r1
   14da8:	e7f2      	b.n	14d90 <z_timeout_end_calc+0x38>

00014daa <clear_event_registrations>:
	while (num_events--) {
   14daa:	2314      	movs	r3, #20
{
   14dac:	b530      	push	{r4, r5, lr}
   14dae:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   14db2:	2400      	movs	r4, #0
	while (num_events--) {
   14db4:	4281      	cmp	r1, r0
   14db6:	d100      	bne.n	14dba <clear_event_registrations+0x10>
}
   14db8:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   14dba:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   14dbe:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   14dc2:	f003 030f 	and.w	r3, r3, #15
   14dc6:	2b02      	cmp	r3, #2
   14dc8:	d80a      	bhi.n	14de0 <clear_event_registrations+0x36>
   14dca:	b15b      	cbz	r3, 14de4 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   14dcc:	f851 3c14 	ldr.w	r3, [r1, #-20]
   14dd0:	b143      	cbz	r3, 14de4 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   14dd2:	f851 5c10 	ldr.w	r5, [r1, #-16]
   14dd6:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   14dd8:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   14dda:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   14dde:	e001      	b.n	14de4 <clear_event_registrations+0x3a>
	switch (event->type) {
   14de0:	2b04      	cmp	r3, #4
   14de2:	d0f3      	beq.n	14dcc <clear_event_registrations+0x22>
   14de4:	f382 8811 	msr	BASEPRI, r2
   14de8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14dec:	f04f 0320 	mov.w	r3, #32
   14df0:	f3ef 8211 	mrs	r2, BASEPRI
   14df4:	f383 8811 	msr	BASEPRI, r3
   14df8:	f3bf 8f6f 	isb	sy
   14dfc:	3914      	subs	r1, #20
   14dfe:	e7d9      	b.n	14db4 <clear_event_registrations+0xa>

00014e00 <signal_poll_event>:
{
   14e00:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   14e02:	6884      	ldr	r4, [r0, #8]
{
   14e04:	4605      	mov	r5, r0
   14e06:	460e      	mov	r6, r1
	if (poller) {
   14e08:	b19c      	cbz	r4, 14e32 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   14e0a:	68a3      	ldr	r3, [r4, #8]
   14e0c:	b95b      	cbnz	r3, 14e26 <signal_poll_event+0x26>
		poller->is_polling = false;
   14e0e:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   14e10:	4618      	mov	r0, r3
	event->poller = NULL;
   14e12:	2300      	movs	r3, #0
   14e14:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   14e16:	68eb      	ldr	r3, [r5, #12]
   14e18:	f3c3 3104 	ubfx	r1, r3, #12, #5
   14e1c:	430e      	orrs	r6, r1
   14e1e:	f366 3310 	bfi	r3, r6, #12, #5
   14e22:	60eb      	str	r3, [r5, #12]
	return retcode;
   14e24:	e004      	b.n	14e30 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   14e26:	4798      	blx	r3
		poller->is_polling = false;
   14e28:	2300      	movs	r3, #0
		if (retcode < 0) {
   14e2a:	2800      	cmp	r0, #0
		poller->is_polling = false;
   14e2c:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   14e2e:	daf0      	bge.n	14e12 <signal_poll_event+0x12>
}
   14e30:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   14e32:	4620      	mov	r0, r4
   14e34:	e7ed      	b.n	14e12 <signal_poll_event+0x12>

00014e36 <k_poll_poller_cb>:
{
   14e36:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   14e38:	6883      	ldr	r3, [r0, #8]
   14e3a:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   14e3c:	7b63      	ldrb	r3, [r4, #13]
   14e3e:	079a      	lsls	r2, r3, #30
{
   14e40:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   14e42:	d50e      	bpl.n	14e62 <k_poll_poller_cb+0x2c>
	if (z_is_thread_timeout_expired(thread)) {
   14e44:	6a23      	ldr	r3, [r4, #32]
   14e46:	3302      	adds	r3, #2
   14e48:	d014      	beq.n	14e74 <k_poll_poller_cb+0x3e>
	z_unpend_thread(thread);
   14e4a:	4620      	mov	r0, r4
   14e4c:	f7ff fdc6 	bl	149dc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   14e50:	2d08      	cmp	r5, #8
   14e52:	bf0c      	ite	eq
   14e54:	f06f 0303 	mvneq.w	r3, #3
   14e58:	2300      	movne	r3, #0
   14e5a:	6723      	str	r3, [r4, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   14e5c:	7b63      	ldrb	r3, [r4, #13]
   14e5e:	06db      	lsls	r3, r3, #27
   14e60:	d001      	beq.n	14e66 <k_poll_poller_cb+0x30>
		return 0;
   14e62:	2000      	movs	r0, #0
}
   14e64:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   14e66:	69a5      	ldr	r5, [r4, #24]
   14e68:	2d00      	cmp	r5, #0
   14e6a:	d1fa      	bne.n	14e62 <k_poll_poller_cb+0x2c>
	z_ready_thread(thread);
   14e6c:	4620      	mov	r0, r4
   14e6e:	f7ff fddc 	bl	14a2a <z_ready_thread>
	return 0;
   14e72:	e7f6      	b.n	14e62 <k_poll_poller_cb+0x2c>
		return -EAGAIN;
   14e74:	f06f 000a 	mvn.w	r0, #10
   14e78:	e7f4      	b.n	14e64 <k_poll_poller_cb+0x2e>

00014e7a <add_event>:
{
   14e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e7c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14e7e:	e9d0 2300 	ldrd	r2, r3, [r0]
   14e82:	4290      	cmp	r0, r2
   14e84:	4604      	mov	r4, r0
   14e86:	460d      	mov	r5, r1
   14e88:	d106      	bne.n	14e98 <add_event+0x1e>
	node->prev = list->tail;
   14e8a:	6863      	ldr	r3, [r4, #4]
   14e8c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   14e8e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   14e90:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   14e92:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14e94:	6065      	str	r5, [r4, #4]
}
   14e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   14e98:	2b00      	cmp	r3, #0
   14e9a:	d0f6      	beq.n	14e8a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   14e9c:	689b      	ldr	r3, [r3, #8]
   14e9e:	6879      	ldr	r1, [r7, #4]
   14ea0:	6858      	ldr	r0, [r3, #4]
   14ea2:	f7ff fd71 	bl	14988 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   14ea6:	2800      	cmp	r0, #0
   14ea8:	d1ef      	bne.n	14e8a <add_event+0x10>
	return list->head == list;
   14eaa:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14eac:	42b4      	cmp	r4, r6
   14eae:	d0ec      	beq.n	14e8a <add_event+0x10>
   14eb0:	2e00      	cmp	r6, #0
   14eb2:	bf38      	it	cc
   14eb4:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14eb6:	2e00      	cmp	r6, #0
   14eb8:	d0e7      	beq.n	14e8a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   14eba:	68b3      	ldr	r3, [r6, #8]
   14ebc:	6878      	ldr	r0, [r7, #4]
   14ebe:	6859      	ldr	r1, [r3, #4]
   14ec0:	f7ff fd62 	bl	14988 <z_is_t1_higher_prio_than_t2>
   14ec4:	b128      	cbz	r0, 14ed2 <add_event+0x58>
	node->prev = successor->prev;
   14ec6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   14ec8:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   14ecc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14ece:	6075      	str	r5, [r6, #4]
			return;
   14ed0:	e7e1      	b.n	14e96 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   14ed2:	6863      	ldr	r3, [r4, #4]
   14ed4:	42b3      	cmp	r3, r6
   14ed6:	d0d8      	beq.n	14e8a <add_event+0x10>
   14ed8:	6836      	ldr	r6, [r6, #0]
   14eda:	e7ec      	b.n	14eb6 <add_event+0x3c>

00014edc <register_events>:
{
   14edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   14ee0:	f04f 0a00 	mov.w	sl, #0
{
   14ee4:	460e      	mov	r6, r1
   14ee6:	4614      	mov	r4, r2
   14ee8:	461f      	mov	r7, r3
   14eea:	4683      	mov	fp, r0
	int events_registered = 0;
   14eec:	4655      	mov	r5, sl
	event->poller = NULL;
   14eee:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   14ef0:	45b2      	cmp	sl, r6
   14ef2:	db02      	blt.n	14efa <register_events+0x1e>
}
   14ef4:	4628      	mov	r0, r5
   14ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14efa:	f04f 0320 	mov.w	r3, #32
   14efe:	f3ef 8911 	mrs	r9, BASEPRI
   14f02:	f383 8811 	msr	BASEPRI, r3
   14f06:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   14f0a:	f89b 200d 	ldrb.w	r2, [fp, #13]
   14f0e:	f002 020f 	and.w	r2, r2, #15
   14f12:	2a02      	cmp	r2, #2
   14f14:	d006      	beq.n	14f24 <register_events+0x48>
   14f16:	2a04      	cmp	r2, #4
   14f18:	d008      	beq.n	14f2c <register_events+0x50>
   14f1a:	2a01      	cmp	r2, #1
   14f1c:	d120      	bne.n	14f60 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   14f1e:	f8db 3010 	ldr.w	r3, [fp, #16]
   14f22:	e001      	b.n	14f28 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   14f24:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   14f28:	689b      	ldr	r3, [r3, #8]
   14f2a:	e002      	b.n	14f32 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   14f2c:	f8db 3010 	ldr.w	r3, [fp, #16]
   14f30:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   14f32:	b1ab      	cbz	r3, 14f60 <register_events+0x84>
	event->state |= state;
   14f34:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   14f38:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   14f3c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   14f40:	430a      	orrs	r2, r1
   14f42:	f362 3310 	bfi	r3, r2, #12, #5
   14f46:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   14f4a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   14f4e:	f389 8811 	msr	BASEPRI, r9
   14f52:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   14f56:	f10a 0a01 	add.w	sl, sl, #1
   14f5a:	f10b 0b14 	add.w	fp, fp, #20
   14f5e:	e7c7      	b.n	14ef0 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   14f60:	2f00      	cmp	r7, #0
   14f62:	d1f4      	bne.n	14f4e <register_events+0x72>
   14f64:	7823      	ldrb	r3, [r4, #0]
   14f66:	2b00      	cmp	r3, #0
   14f68:	d0f1      	beq.n	14f4e <register_events+0x72>
	switch (event->type) {
   14f6a:	f89b 300d 	ldrb.w	r3, [fp, #13]
   14f6e:	f003 030f 	and.w	r3, r3, #15
   14f72:	2b02      	cmp	r3, #2
   14f74:	d008      	beq.n	14f88 <register_events+0xac>
   14f76:	2b04      	cmp	r3, #4
   14f78:	d006      	beq.n	14f88 <register_events+0xac>
   14f7a:	2b01      	cmp	r3, #1
   14f7c:	d10b      	bne.n	14f96 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   14f7e:	f8db 0010 	ldr.w	r0, [fp, #16]
   14f82:	4622      	mov	r2, r4
   14f84:	4659      	mov	r1, fp
   14f86:	e004      	b.n	14f92 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   14f88:	f8db 0010 	ldr.w	r0, [fp, #16]
   14f8c:	4622      	mov	r2, r4
   14f8e:	4659      	mov	r1, fp
   14f90:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   14f92:	f7ff ff72 	bl	14e7a <add_event>
	event->poller = poller;
   14f96:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   14f9a:	3501      	adds	r5, #1
   14f9c:	e7d7      	b.n	14f4e <register_events+0x72>

00014f9e <z_handle_obj_poll_events>:
{
   14f9e:	4603      	mov	r3, r0
	return list->head == list;
   14fa0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   14fa2:	4283      	cmp	r3, r0
   14fa4:	d008      	beq.n	14fb8 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   14fa6:	e9d0 3200 	ldrd	r3, r2, [r0]
   14faa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   14fac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14fae:	2300      	movs	r3, #0
	node->prev = NULL;
   14fb0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   14fb4:	f7ff bf24 	b.w	14e00 <signal_poll_event>
}
   14fb8:	4770      	bx	lr

00014fba <k_mem_pool_malloc>:
{
   14fba:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   14fbc:	2408      	movs	r4, #8
   14fbe:	190a      	adds	r2, r1, r4
   14fc0:	d208      	bcs.n	14fd4 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   14fc2:	2600      	movs	r6, #0
   14fc4:	2700      	movs	r7, #0
   14fc6:	e9cd 6700 	strd	r6, r7, [sp]
   14fca:	eb0d 0104 	add.w	r1, sp, r4
   14fce:	f7ff fc00 	bl	147d2 <k_mem_pool_alloc>
   14fd2:	b110      	cbz	r0, 14fda <k_mem_pool_malloc+0x20>
		return NULL;
   14fd4:	2000      	movs	r0, #0
}
   14fd6:	b004      	add	sp, #16
   14fd8:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   14fda:	9802      	ldr	r0, [sp, #8]
   14fdc:	4622      	mov	r2, r4
   14fde:	a902      	add	r1, sp, #8
   14fe0:	f7ff f99b 	bl	1431a <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   14fe4:	9802      	ldr	r0, [sp, #8]
   14fe6:	3008      	adds	r0, #8
   14fe8:	e7f5      	b.n	14fd6 <k_mem_pool_malloc+0x1c>

00014fea <k_free>:
	if (ptr != NULL) {
   14fea:	b110      	cbz	r0, 14ff2 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   14fec:	3808      	subs	r0, #8
   14fee:	f7ff bc09 	b.w	14804 <k_mem_pool_free_id>
}
   14ff2:	4770      	bx	lr

00014ff4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   14ff4:	4770      	bx	lr
